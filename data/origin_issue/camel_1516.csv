Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Description,Environment,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Watchers,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Blocker),Outward issue link (Blocker),Inward issue link (Cloners),Inward issue link (Container),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Incorporates),Outward issue link (Problem/Incident),Inward issue link (Reference),Inward issue link (Reference),Inward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Inward issue link (Regression),Outward issue link (Regression),Outward issue link (Regression),Outward issue link (Required),Inward issue link (dependent),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (Mentor),Custom field (New-TLP-TLPName),Custom field (Original story points),Custom field (Parent Link),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Start Date),Custom field (Tags),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
SimpleIllegalSyntaxException in nested expression,CAMEL-10664,13031268,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ralfsteppacher,ralfsteppacher,30/Dec/16 13:13,05/Jan/17 12:06,14/Jul/23 05:49,05/Jan/17 12:06,2.18.1,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-core,,,,,,,0,,,,,,"The following nested simple expression works in Camel 2.16.3:

{code:xml}
<log message=""TX name: '${exchangeProperty.${type:ch.my.package.StringConstants.EXCHANGE_PROP_TX_SUMMARY}.transactionName}'"" loggingLevel=""INFO"" logName=""pep-xds_b-registry_oncompletion_common"" />
{code}

but fails with a SimpleIllegalSyntaxException in Camel 2.18.1:

{noformat}
Exception: org.apache.camel.language.simple.types.SimpleIllegalSyntaxException: expected symbol functionEnd but was eol at location 8
${type:ch
        *

{noformat}

Both simple expressions work when invoked in a non-nested fashion.",,davsclaus,ralfsteppacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 05 10:27:24 UTC 2017,,,,,,,,,,,"0|i384w7:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"05/Jan/17 10:27;davsclaus;Insert the constant value as workaround instead of the type funtion;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Basic authentication information not sent on versions post 2.14.1,CAMEL-10663,13031173,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,MiguelRodriguez,MiguelRodriguez,29/Dec/16 23:16,01/Jan/17 16:07,14/Jul/23 05:50,01/Jan/17 16:07,2.18.1,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-cmis,,,,,,,0,,,,,,"When sending a request from Apache Camel to Alfresco using camel-cmis component the authentication details are not sent over and Alfresco replies with a HTTP 401 Unauthorised response.

The route looks like this:

from(""jms:alfresco.downloadNodes"")
		.setBody(xpath(""/search/@query"", String.class))
		.setHeader(""CamelCMISRetrieveContent"", constant(true))
		.to(""cmis://http://localhost:8080/alfresco/cmisatom?username=admin&password=admin&queryMode=true"")
		.process(new FileContentProcessor());

The request works fine using camel-cmis 2.14.1 but it doesn't work when using  version 2.18.1 ","Ubuntu, Spring-Boot, Alfresco 5 Enterprise",davsclaus,MiguelRodriguez,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Dec/16 23:17;MiguelRodriguez;camel-cmis-version-2.14.1.png;https://issues.apache.org/jira/secure/attachment/12845121/camel-cmis-version-2.14.1.png","29/Dec/16 23:17;MiguelRodriguez;camel-cmis-version-2.18.1.png;https://issues.apache.org/jira/secure/attachment/12845120/camel-cmis-version-2.18.1.png",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jan 01 16:07:10 UTC 2017,,,,,,,,,,,"0|i384b3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Jan/17 16:07;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XQuery support broken in Camel 2.18.x,CAMEL-10653,13030419,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,nvoskresenskiy,nvoskresenskiy,23/Dec/16 17:37,23/Dec/16 19:07,14/Jul/23 05:50,23/Dec/16 18:22,2.18.0,2.18.1,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-saxon,,,,,,,0,,,,,,"The camel xquery support no longer works correctly as of 2.18.x

I identified two main issues so far:

# A java.lang.NullPointerException is thrown when exchange contains any null headers or properties:
{code}
java.lang.NullPointerException: External object cannot wrap a Java null
	at net.sf.saxon.value.ObjectValue.<init>(ObjectValue.java:55)
	at org.apache.camel.component.xquery.XQueryBuilder.addParameters(XQueryBuilder.java:640)
{code}
# An error in execution whenever a header or a property are referenced in the xquery as an external variable:
{code}
java.lang.AssertionError: Unknown event
	at net.sf.saxon.evpull.ComplexContentProcessor.advance(ComplexContentProcessor.java:198)
{code}

Attached is a maven project with junit test illustrating the issues.",,davsclaus,nvoskresenskiy,,,,,,,,,,,,,,,,,,,,,,CAMEL-8830,,,,,,,,,,,"23/Dec/16 17:37;nvoskresenskiy;camel-xquery-test.zip;https://issues.apache.org/jira/secure/attachment/12844596/camel-xquery-test.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 23 19:07:12 UTC 2016,,,,,,,,,,,"0|i37znr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Dec/16 18:06;davsclaus;Thanks its only a problem when you have null values in your headers, which is bad to have anyway.;;;","23/Dec/16 18:10;nvoskresenskiy;Null values in headers is a very common scenario e.g. in case of an exchange originating from a JMS endpoint, a lot of JMS and JMSX headers will be null by default.

The second part of the issue is also much more serious - basically any xquery that uses headers or properties no longer works.;;;","23/Dec/16 18:16;davsclaus;It would be good if you can search saxon or whatever about that external header thingy, as its their library and how its supposed to work with those.

And log a 2nd ticket about that. As we will closed this when the null header is fixed.;;;","23/Dec/16 18:22;davsclaus;It seems that external is @deprecated according to their own docs
http://www.saxonica.com/html/documentation/using-xquery/extensions.html

Something about using xquery 3.0 syntax instead. So it could be that in saxon 9.7 they have removed support for that old style. Camel 2.18 is using Saxon 9.7.;;;","23/Dec/16 18:30;nvoskresenskiy;The external variables thing is not a feature of saxon library, it is a common feature of XQuery 1.0 specification, and also documented at http://camel.apache.org/xquery.html. The same test passes in camel 2.17.4

I believe the issue was caused by upgrade to saxon 9.7.

In Camel 2.17 the following code is responsible for this functionality in XQueryBuilder class:
{code}
    protected void addParameters(DynamicQueryContext dynamicQueryContext, Map<String, Object> map, String parameterPrefix) {
        Set<Map.Entry<String, Object>> propertyEntries = map.entrySet();
        for (Map.Entry<String, Object> entry : propertyEntries) {
            dynamicQueryContext.setParameter(parameterPrefix + entry.getKey(), entry.getValue());
        }
    }
{code}

In camel 2.18 it is now:
{code}
    protected void addParameters(DynamicQueryContext dynamicQueryContext, Map<String, Object> map, String parameterPrefix) {
        Set<Map.Entry<String, Object>> propertyEntries = map.entrySet();
        for (Map.Entry<String, Object> entry : propertyEntries) {
            dynamicQueryContext.setParameter(
                StructuredQName.fromClarkName(parameterPrefix + entry.getKey()),
                new ObjectValue(entry.getValue())
            );
        }
    }
{code}
Which apparently doesn't work, it seems the value container needs to be one of the subtypes for net.sf.saxon.value.AtomicValue. And no, external variable declaration is not a deprecated feature, it is part of core xquery specification and supported by all popular processors including saxon.

Anyway, this is a regression compared to camel 2.17, and either needs to be fixed, or the documentation on camel-xquery needs to be updated accordingly
;;;","23/Dec/16 18:51;nvoskresenskiy;Looks like explicitly specifying the type of the external variable now seems to make it work:

{code}
declare variable $in.headers.testHeader as xs:string external;

<header>{$in.headers.testHeader}</header>
{code}

I would suggest clarifying how to use the Variables as parameters in the xquery component documentation;;;","23/Dec/16 19:06;davsclaus;You are welcome to submit github PRs for documentation updates
https://github.com/apache/camel/blob/master/components/camel-saxon/src/main/docs/xquery-component.adoc;;;","23/Dec/16 19:07;davsclaus;Here is some pointers how to contribute
http://camel.apache.org/contributing;;;",,,,,,,,,,,,,,,,,,,,,,,,
Camel-MongoDB3: component should not store state,CAMEL-10645,13030126,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,22/Dec/16 14:23,23/Dec/16 07:59,14/Jul/23 05:50,23/Dec/16 07:59,,,,,,,,,,,,,,,2.19.0,,,,camel-mongodb3,,,,,,,0,,,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10635,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-12-22 14:23:02.0,,,,,,,,,,,"0|i37xun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-MongoDB: component should not store state,CAMEL-10644,13030125,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,22/Dec/16 14:21,22/Dec/16 15:04,14/Jul/23 05:50,22/Dec/16 15:04,,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-mongodb,,,,,,,0,,,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10635,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-12-22 14:21:28.0,,,,,,,,,,,"0|i37xuf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Custom AsyncHttpClientConfig not used in WsEndpoint,CAMEL-10640,13030072,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tom_guenter,tom_guenter,22/Dec/16 10:28,22/Dec/16 13:09,14/Jul/23 05:50,22/Dec/16 13:02,2.18.1,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-ahc-ws,,,,,,,0,,,,,,"Provided custom AsyncHttpClientConfig is not used by WsEndpoint.java.

Current implementation: 
{code:title=WsEndpoint.java:109|borderStyle=solid}
    protected AsyncHttpClient createClient(AsyncHttpClientConfig config) {
        AsyncHttpClient client;
        if (config == null) {
            config = new DefaultAsyncHttpClientConfig.Builder().build();
            client = new DefaultAsyncHttpClient(config);
        } else {
            client = new DefaultAsyncHttpClient();
        }
        return client;
    }
{code}

Expected implementation:
{code:title=WsEndpoint.java:109|borderStyle=solid}
    protected AsyncHttpClient createClient(AsyncHttpClientConfig config) {
        AsyncHttpClient client;
        if (config == null) {
            config = new DefaultAsyncHttpClientConfig.Builder().build();
            client = new DefaultAsyncHttpClient(config);
        } else {
            client = new DefaultAsyncHttpClient(config);
        }
        return client;
    }
{code}",,acosentino,davsclaus,githubbot,tom_guenter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 22 13:09:11 UTC 2016,,,,,,,Patch Available,,,,"0|i37xin:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Dec/16 11:11;davsclaus;Thanks do you want to provide this patch on github as a github PR?
http://camel.apache.org/contributing;;;","22/Dec/16 12:19;githubbot;GitHub user tomguenter opened a pull request:

    https://github.com/apache/camel/pull/1364

    CAMEL-10640 Custom AsyncHttpClientConfig not used in WsEndpoint

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1364.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1364
    
----
commit 2f5fab9c4f725505cee9b12de98cf46640924ce6
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-03T13:58:29Z

    [maven-release-plugin] prepare release camel-2.18.0

commit 54a02453f4611b47daea7f270623f2d4e974750d
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-03T13:59:42Z

    [maven-release-plugin] prepare for next development iteration

commit 244eb03876bb4e7d95b04b4f4ae48322e47e3bb4
Author: Franz Forsthofer <franz.forsthofer@sap.com>
Date:   2016-10-04T11:59:42Z

    CAMEL-10368: Unused deflater in ZipDataFormat

commit da8694f8c5392881ac5ab49c37a7947451bb65af
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-04T22:28:22Z

    [maven-release-plugin] prepare release camel-2.18.0

commit e6d985d2f997b40711073e011849dc8498c225d7
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-04T22:28:59Z

    [maven-release-plugin] prepare for next development iteration

commit 1df40f5f5097eca6c208cdef24be9a75dbcb2510
Author: Stephan Siano <stephan.siano@sap.com>
Date:   2016-10-04T14:25:20Z

    CAMEL-10370: Conversion to CxfPayload throws Exception for Non-XML payload

commit ea4b27fbe1ff44d546c018c1436cab701a8705cf
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-10-06T09:11:59Z

    CAMEL-10358: do not clear the registry too early

commit ef88e60af5dab348c779216b008c5dfe7730cc06
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T15:49:18Z

    CAMEL-10366: Include input/output/deprecated in the spring model json schema files so they are similar to EIP model files. Thanks to Aurelien Pupier for reporting this.

commit 63439e174e2fbc7b89994e5df3a3723b02c55c58
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T15:53:41Z

    Fixed syntax on endpoint for component docs in camel-chronicele

commit f374df8d6704d2f121db92d0814531e2ad979205
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T16:11:32Z

    Fixed camel-chronoicle component docs and schema

commit 17c3407fef17f29aeaef0f578e1fc6ca3427fa9c
Author: Robert Gemmell <robbie@apache.org>
Date:   2016-10-04T11:20:28Z

    CAMEL-10367: remove stale dependency and version prop, fix a couple typos

commit 3bc4cf5a6e146da6df5233a5ca8eb32f1e180a64
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:47:35Z

    added the missing license and notice file to the camel-cm-sms component

commit f3eff6d82dcf670187ed7ddc4cb07e917b35dd41
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:54:38Z

    added the missing license and notice file to the camel-servicenow component

commit 6081e236162a4d908b412080e608407361bc544c
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:57:37Z

    added the missing license and notice file to the camel-telegram component

commit 461d4dd69ce2591487df6db1d27416558ae53c83
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-07T13:40:30Z

    CAMEL-10372: Fixed camel-stream component doc

commit 20cf933edde90b48ee371cf89aaacb2833ad8a8b
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-09T20:15:46Z

    Update schema files with release 2.18.0 references
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit ac002c88d28faec0b59d52a8b2427c23f1540a5a
Author: Michael Lück <michael.lueck@hm-ag.de>
Date:   2016-10-04T09:18:04Z

    added method to check for key existence

commit 201aeb22f7a8eea16690028f2b0969a452ca6bec
Author: Michael Lück <michael.lueck@hm-ag.de>
Date:   2016-10-05T13:22:51Z

    added null check before trying to call containsKey (prevent NPE)

commit 9916ee431192e1215a87900b5c5c622822d2e98c
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-10-11T07:54:45Z

    Fixed CS

commit f655c94110ae14a3db5b2ce6409684deaa619846
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-09-29T17:25:18Z

    CAMEL-10357: camel-servicenow: add per release model

commit fa1789a36ea81cc03394e2e8806d8d4e8d2197a2
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-10-10T16:39:44Z

    CAMEL-10378: Upgrade log4j2 to v2.7

commit 37a12df6a3d6780495b249b959a25966b62afb69
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T19:09:15Z

    CAMEL-10381 - fix NPE from component configuration

commit 7a1ee6bedc1c3572e7abdb0262f08d3435e5d293
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T21:55:12Z

    remove non spring boot compatible starters

commit 645d024b442bb130eaebbff41a494ac313bc6868
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T22:17:27Z

    CAMEL-10381 - fix NPE from component configuration

commit fbcaded8349754e574d6900dca863bbdec71b6c9
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T22:17:58Z

    add missed test case

commit 6d663971259650b626303ca30e77004abcdd3b0a
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:02:37Z

    CAMEL-10381 - fix NPE from calendar component configuration

commit 8de429e1236f1f2fb24098a924eb651ede85adc8
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:06:18Z

    fix test error

commit b15c2f5d62eb0285c5d48b9e9199e48abce365aa
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:07:48Z

    fix CS

commit 8965cad85337014340b2eb9a44db386d40669c30
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-10-11T15:42:34Z

    CAMEL-10379: Improved component description

commit 467ded8f388e85df728927d0b0c3f7fb87fb89d4
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-10-12T08:22:15Z

    Minor improvements to camel-zipkin docs

----
;;;","22/Dec/16 12:20;githubbot;Github user tomguenter closed the pull request at:

    https://github.com/apache/camel/pull/1364
;;;","22/Dec/16 12:34;tom_guenter;Correct pull request added manually due to invalid original pull request.;;;","22/Dec/16 13:03;acosentino;Thanks.;;;","22/Dec/16 13:09;githubbot;Github user tomguenter closed the pull request at:

    https://github.com/apache/camel/pull/1365
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mongodb-gridfs - The component should not store state,CAMEL-10635,13029748,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,davsclaus,davsclaus,21/Dec/16 13:49,23/Dec/16 07:59,14/Jul/23 05:50,23/Dec/16 07:59,2.18.1,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-mongodb,,,,,,,0,,,,,,"The component is wrong at
https://github.com/apache/camel/blob/master/components/camel-mongodb-gridfs/src/main/java/org/apache/camel/component/gridfs/GridFsComponent.java#L42

Where it stores the first looked up client and store that for remainder. So if there are other endpoints referring to other clients then that wont work as the db is not null next time.

Instead the client should be looked up per endpoint and not stored as state on the component.
",,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10644,CAMEL-10645,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 22 09:23:31 UTC 2016,,,,,,,,,,,"0|i37vin:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Dec/16 09:23;acosentino;We have exactly the same problem in camel-mongodb and camel-mongodb3

https://github.com/apache/camel/blob/master/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbComponent.java#L53;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Catalog contains some invalid entries for Spring-boot in 2.18.x,CAMEL-10634,13029747,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,aurelien.pupier,aurelien.pupier,21/Dec/16 13:46,21/Dec/16 16:01,14/Jul/23 05:50,21/Dec/16 16:00,2.18.0,2.18.1,,,,,,,,,,,,,2.18.2,,,,camel-catalog,,,,,,,0,,,,,,"the 2.18.1 camel catalog contains some invalid entries, these entries should not be part of the catalog:
- camel-spark-rest
- camel-ibatis
- camel-jclouds
- camel-ejb
- camel-quartz


see https://github.com/jboss-fuse/camel/blob/camel-2.18.x-redhat/components-starter/README.adoc and https://github.com/apache/camel/blame/39a9f52232fcaa1d82b290622d24aa45523094d0/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootStarterMojo.java#L85

[~davsclaus] said it was surely fixed in 2.19 branch

edit:
when we compare https://github.com/apache/camel/tree/master/components-starter and https://github.com/apache/camel/tree/master/components-starter we can notice that the folders for the mentioned artifacts were removed",,aurelien.pupier,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 21 16:01:21 UTC 2016,,,,,,,,,,,"0|i37vif:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Dec/16 14:16;davsclaus;You are welcome to provide a PR;;;","21/Dec/16 14:25;aurelien.pupier;it's in progress, I'm rebuilding everything to ensure that the catalog is well generated.

EDIT: PR created: https://github.com/apache/camel/pull/1361;;;","21/Dec/16 14:32;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1361

    CAMEL-10634: Remove folders which create wrong catalog entries

    see https://issues.apache.org/jira/browse/CAMEL-10634 for details

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-10634-camel-2.18.x-FixSpringBootCatalog

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1361.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1361
    
----
commit cc084664e7a136b0a7a5ee3aeaa07fef3926d1e1
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-12-21T13:51:42Z

    CAMEL-10634: Remove folders which create wrong catalog entries

----
;;;","21/Dec/16 16:01;githubbot;Github user apupier closed the pull request at:

    https://github.com/apache/camel/pull/1361
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel jetty9 endpoint configured with sslContextParametersRef and jetty handlers causes SSL handshake failure,CAMEL-10628,13029547,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,joeluo,joeluo,20/Dec/16 19:52,29/Dec/16 07:01,14/Jul/23 05:50,21/Dec/16 11:27,2.18.0,2.18.1,,,,,,,,,,,,,2.18.2,,,,camel-jetty,,,,,,,0,,,,,,"I have a camel route using Rest DSL with Jetty component:
{code}
<camelContext id=""camel"" trace=""true"" streamCache=""true"" xmlns=""http://camel.apache.org/schema/blueprint"">
      <restConfiguration component=""jetty"" bindingMode=""off"" scheme=""https"" host=""localhost"" port=""9080"" contextPath=""/"">
        <endpointProperty key=""sslContextParametersRef"" value=""sslContextParameter""/>
        <endpointProperty key=""handlers"" value=""#securityHandler""/>
        <endpointProperty key=""matchOnUriPrefix"" value=""true""/>
      </restConfiguration>
      <rest path=""/customerservice"">
          <get uri=""/customers"" >
              <to uri=""direct:processGet""/>
          </get>
          <get uri=""/customers/{id}"" >
              <to uri=""direct:processGet""/>
          </get>
          <post uri=""/customers"" consumes=""application/json"" produces=""application/json"">
              <to uri=""direct:processPost""/>
          </post>
      </rest>
{code}

The underlying camel jetty component is configured with sslContextParametersRef and a Jetty Handler org.eclipse.jetty.security.ConstraintSecurityHandler to enforce SecurityConstraints on the Jetty endpoint. 

If I remove the Jetty ConstraintSecurityHandler, it works fine, for instance:
{code}
<camelContext id=""camel"" trace=""true"" streamCache=""true"" xmlns=""http://camel.apache.org/schema/blueprint"">
      <restConfiguration component=""jetty"" bindingMode=""off"" scheme=""https"" host=""localhost"" port=""9080"" contextPath=""/"">
        <endpointProperty key=""sslContextParametersRef"" value=""sslContextParameter""/>
        <!--endpointProperty key=""handlers"" value=""#securityHandler""/-->
        <endpointProperty key=""matchOnUriPrefix"" value=""true""/>
      </restConfiguration>
{code}
But when I add the Jetty ConstraintSecurityHandler back to the camel Rest DSL, I am getting following error:
{code}
***
%% Initialized:  [Session-1, SSL_NULL_WITH_NULL_NULL]
qtp1424237190-118, fatal error: 40: no cipher suites in common
javax.net.ssl.SSLHandshakeException: no cipher suites in common
%% Invalidated:  [Session-1, SSL_NULL_WITH_NULL_NULL]
qtp1424237190-118, SEND TLSv1 ALERT:  fatal, description = handshake_failure
qtp1424237190-118, WRITE: TLSv1 Alert, length = 2
qtp1424237190-118, fatal: engine already closed.  Rethrowing javax.net.ssl.SSLHandshakeException: no cipher suites in common
{code}

The root cause is that if we want to add a Jetty hander, we need to stop Jetty server. As part of Jetty server stop process, it's SslConnectionFactory also needs to stop, as well as SslContextFactory. Here is doStop() method of SslContextFactory in Jetty 9.2.x code base:
{code}
public class SslContextFactory extends AbstractLifeCycle
...
    protected void doStop() throws Exception
     {
         _context = null;
         super.doStop();
     }
{code}
We can see that it resets SSLContext to null. When the jetty server restarts, SslContextFactory creates a new SSLContext object instead, therefore, losing all the SSL properties from the original <camel:sslContextParameters> configuration. 

We need to preserve the SSLContext before stopping the jetty server so we can reset the SSLContext back after the jetty server is restarted.",,acosentino,davsclaus,joeluo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Dec/16 20:11;joeluo;patch.txt;https://issues.apache.org/jira/secure/attachment/12844122/patch.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 29 07:01:11 UTC 2016,,,,,,,Patch Available,,,,"0|i37ua7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Dec/16 08:11;acosentino;Can you reproduce the same issue with 2.18.1?;;;","21/Dec/16 08:26;joeluo;I have not tried it on 2.18.1 yet. But as long as we use Jetty 9.2.x code base, it will have the same behaviour. However, with Jetty 9.3.x, the doStop() method of Jetty SslContextFactory had been changed, again:
{code}
     protected void doStop() throws Exception
     {
         _factory = null;
         super.doStop();
         _certAliases.clear();
         _certWilds.clear();
     }
{code}

So the same fix might not work well with Jetty 9.3.x code base though.;;;","21/Dec/16 08:31;acosentino;Maybe we can apply the patch on 2.17.x and 2.18.x but not on master (there we are on 9.3.x at the moment).

[~davsclaus] what do you think?;;;","21/Dec/16 09:32;davsclaus;Yeah sure for 2.17.x and 2.18.x;;;","21/Dec/16 11:28;acosentino;This can't go in 2.17.x because there we are still based on Jetty8 and 

org.eclipse.jetty.server.SslConnectionFactory

doesn't exist in Jetty 8;;;","21/Dec/16 11:56;acosentino;Not sure but, how did you test the patch on 2.17.x? It can't compile with this fix.;;;","28/Dec/16 15:25;joeluo;I changed <jetty-version> to ""$\{jetty9-version}"" in the camel/parent/pom.xml file:
{code}
diff --git a/parent/pom.xml b/parent/pom.xml
index 14bf7bc..0a262d2 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -311,7 +311,7 @@
     <jetty6-version>6.1.26</jetty6-version>
     <jetty8-version>8.1.17.v20150415</jetty8-version>
     <jetty9-version>9.2.19.v20160908</jetty9-version>
-    <jetty-version>${jetty8-version}</jetty-version>
+    <jetty-version>${jetty9-version}</jetty-version>
     <!-- jetty-plugin 8.1.7 does not exists -->
     <jetty-plugin-version>8.1.16.v20140903</jetty-plugin-version>
{code}
It allowed me to compile the component and test. 

Yeah, the solution will break backward compatibility with Jetty 8 as camel 2.17 and 2.18 support both Jetty 8 and Jetty 9. Giving the fact that Jetty 8 has been EOL two years back, should we only support Jetty 9 from now on?;;;","29/Dec/16 07:01;acosentino;We support Jetty9 only from 2.18.x.

In 2.17.x we will stay with Jetty8 as default, so this patch can be applied only on 2.18.x;;;",,,,,,,,,,,,,,,,,,,,,,,,
"Issue with Rest DSL, Jetty and Basic authentication",CAMEL-10621,13029378,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,r.schoen@topdesk.com,r.schoen@topdesk.com,20/Dec/16 07:58,23/Jan/18 15:32,14/Jul/23 05:50,23/Jan/18 15:32,2.18.1,,,,,,,,,,,,,,2.21.0,,,,camel-jetty,,,,,,,0,,,,,,"I'm trying to create an API with Rest DSL and Swagger Java components. For hosting the API I want to use Jetty and use Basic Authentication to secure it.

With Jetty 8 the code below works, but with Camel 2.18.1 my code fails in Jetty 9 with this error:
No LoginService for org.eclipse.jetty.security.authentication.BasicAuthenticator

It seems that when the security handler is re-added for the api-docs, the loginService is gone and can not be found anymore in the beans store of the server. I see in Jetty configuration examples that the loginService is also added as a bean to the Jetty server. If it has been added, it can be found when re-adding the security handler.",,davsclaus,r.schoen@topdesk.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Dec/16 08:02;r.schoen@topdesk.com;HardcodedLoginService.java;https://issues.apache.org/jira/secure/attachment/12844026/HardcodedLoginService.java","20/Dec/16 08:02;r.schoen@topdesk.com;camel-context.xml;https://issues.apache.org/jira/secure/attachment/12844025/camel-context.xml","20/Dec/16 08:04;r.schoen@topdesk.com;log.camel.txt;https://issues.apache.org/jira/secure/attachment/12844027/log.camel.txt",,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 23 15:32:59 UTC 2018,,,,,,,,,,,"0|i37t8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Dec/16 08:05;r.schoen@topdesk.com;Used dependencies:
    compile group: 'org.apache.camel', name: 'camel-core', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-spring', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-jetty', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-swagger-java', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-jackson', version: '2.18.1'
;;;","23/Jan/18 15:16;davsclaus;Thanks I was able to reproduce this with latest code, and are working on a fix;;;","23/Jan/18 15:32;davsclaus;Thanks for the sample code.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
shutdown timeout override not working in unit tests,CAMEL-10616,13029022,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mtran,mtran,18/Dec/16 23:20,05/Jan/17 10:21,14/Jul/23 05:50,05/Jan/17 08:48,2.18.1,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-spring-boot,,,,,,,0,,,,,,"In my main application, I can override the timeout by declaring my own ShutdownStrategy bean and setting the timeout property. However this seems to be ignored during unit tests and always uses 10s timeouts.

The bean is certainly being picked up because I see the following logging

{noformat}
org.apache.camel.spring.boot.CamelAutoConfiguration - Using custom ShutdownStrategy: org.apache.camel.impl.DefaultShutdownStrategy@5b8b9b2d
{noformat}

This is preventing me from doing any debugging during unit tests as it will always end the jvm before I can inspect anything.",,davsclaus,mtran,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10619,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 05 10:21:23 UTC 2017,,,,,,,,,,,"0|i37r1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Dec/16 18:33;davsclaus;How are you doing your unit test, can you attach some sample project or point to a github repo with a sample?;;;","19/Dec/16 22:48;mtran;You need a unit test that runs the route in its own thread so that your unit test will end and camel will shutdown the context. The following exhibits the problem. You can set a breakpoint in org.apache.camel.processor.exceptionpolicy.DefaultExceptionPolicyStrategy.findMatchedExceptionPolicy() (this was what I was debugging) and wait for longer than 10sec.

{noformat}
@RunWith(CamelSpringBootRunner.class)
@SpringBootTest
public class MyTest {
	@Configuration
	@EnableAutoConfiguration
	public static class Config extends SpringRouteBuilder {

		@Override
		public void configure() throws Exception {
			from(""activemq:queue:a"").onException(RuntimeException.class).handled(true).end()
                             .throwException(RuntimeException.class, ""something bad happened"");
		}

		@Bean
		public ShutdownStrategy shutdownStrategy() {
			DefaultShutdownStrategy strat = new DefaultShutdownStrategy();
			// this is ignored
			strat.setTimeout(60000);
			return strat;
		}

	}

	@Produce(uri = ""activemq:queue:a"")
	private ProducerTemplate producer;

	@Test
	public void testHello() throws InterruptedException {
		producer.sendBody(""hello"");
	}
}
{noformat}

If we can just override the shutdown timeout in unit tests, this wouldn't be an issue. Looks like it might be fixed in 2.18.2 according to linked issue CAMEL-10619?

;;;","20/Dec/16 18:43;davsclaus;Yeah CAMEL-10619 allows to configure this easier. But nevertheless a custom ShutdownStrategy @Bean should take precedence over default settings.;;;","05/Jan/17 08:48;davsclaus;Added unit test but cannot reproduce the issue. The custom shutdown are in use.

It could be that your unit tests are using mocks which has a default 10 sec timeout.;;;","05/Jan/17 10:18;mtran;If you run the unit test, you'll see the following appear in the logs

INFO  org.apache.camel.impl.DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 10 seconds)

Wouldn't you expect that message to say timeout in 60 seconds?;;;","05/Jan/17 10:21;mtran;And there are no assertions of mocks being done in that unit test so I don't believe the mock timeout is related here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Realm parameter cause Exception ,CAMEL-10603,13028357,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tom_guenter,tom_guenter,15/Dec/16 10:47,15/Dec/16 16:13,14/Jul/23 05:50,15/Dec/16 16:13,2.18.1,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-ahc,,,,,,,0,,,,,,"Using a ahc URI including the realm parameter leads into an unknown parameter exception:

{{""ahc:http://www.yahoo.com?clientConfig.realm.principal=testPrincipal&clientConfig.realm.password=testPassword&clientConfig.realm.scheme=BASIC""}}

Causes Exception:
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: ahc://http://www.google.com?clientConfig.realm.principal=testPrincipal due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{realm.principal=testPrincipal}]

Suggestion for org.apache.camel.component.ahc.AhcComponent:

Line #44:
{{private static final String CLIENT_REALM_CONFIG_PREFIX = ""clientConfig.realm."";}}

Line #94ff:
Map<String, Object> realmParams = IntrospectionSupport.extractProperties(parameters, CLIENT_REALM_CONFIG_PREFIX);
                realmBuilder = new Realm.Builder(realmParams.get(""principal"").toString(), realmParams.get(""password"").toString());
                realmParams.remove(""principal"");
                realmParams.remove(""password"");
                setProperties(realmBuilder, realmParams);
                validateParameters(uri, realmParams, null);
",,davsclaus,tom_guenter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 15 16:13:04 UTC 2016,,,,,,,Patch Available,,,,"0|i37mxr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Dec/16 16:13;davsclaus;Thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel:run with simple blueprint project failed ""waiting for BlueprintContainer"" although the route is active",CAMEL-10602,13028348,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,aurelien.pupier,aurelien.pupier,15/Dec/16 09:53,16/Dec/16 14:33,14/Jul/23 05:50,16/Dec/16 09:21,2.18.0,2.18.1,2.19.0,,,,,,,,,,,,2.18.2,2.19.0,,,camel-blueprint,tooling,,,,,,0,,,,,,"Using a simple Content-based Router example leads to this issue.
With 2.17.3, it is working fine.

we can notice that the route is up and running before the timeout occurs (I dropped a file to the endpoint and it was well executed)

{noformat}
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Fuse CBR Quickstart 1.0.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-blueprint-cbr ---
[INFO] Deleting C:\install\eclipse-neon\eclipse\ws_fusetooling_dev with space\cbr218\target
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ camel-blueprint-cbr ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ camel-blueprint-cbr ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ camel-blueprint-cbr ---
[INFO] Not copying test resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ camel-blueprint-cbr ---
[INFO] Not compiling test sources
[INFO] 
[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ camel-blueprint-cbr ---
[INFO] Tests are skipped.
[INFO] 
[INFO] --- maven-bundle-plugin:3.2.0:bundle (default-bundle) @ camel-blueprint-cbr ---
[INFO] 
[INFO] >>> camel-maven-plugin:2.18.1:run (default-cli) > test-compile @ camel-blueprint-cbr >>>
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ camel-blueprint-cbr ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ camel-blueprint-cbr ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ camel-blueprint-cbr ---
[INFO] Not copying test resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ camel-blueprint-cbr ---
[INFO] Not compiling test sources
[INFO] 
[INFO] <<< camel-maven-plugin:2.18.1:run (default-cli) < test-compile @ camel-blueprint-cbr <<<
[INFO] 
[INFO] --- camel-maven-plugin:2.18.1:run (default-cli) @ camel-blueprint-cbr ---
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[                      Thread-2] RawBuilder                     INFO  Copy thread finished.
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle cbr218/1.0.0.SNAPSHOT is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is starting
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] DefaultManagementAgent         INFO  ManagementAgent detected JVM system properties: {org.apache.camel.jmx.createRmiConnector=true}
[KTOP-9NT300B:1099/jmxrmi/camel] DefaultManagementAgent         INFO  JMX Connector thread started and listening at: service:jmx:rmi:///jndi/rmi://DESKTOP-9NT300B:1099/jmxrmi/camel
[         Blueprint Extender: 1] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[         Blueprint Extender: 1] XPathBuilder                   INFO  Created default XPathFactory com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl@3f24f264
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Route: cbr-route started and consuming from: file://work/cbr/input
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) started in 0.535 seconds
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Receiving order ID-DESKTOP-9NT300B-51935-1481791551205-0-1
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Sending order ID-DESKTOP-9NT300B-51935-1481791551205-0-1 to another country
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Done processing ID-DESKTOP-9NT300B-51935-1481791551205-0-1
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle cbr218/1.0.0.SNAPSHOT
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is shutting down
[mel.test.blueprint.Main.main()] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[text) thread #3 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: cbr-route shutdown complete, was consuming from: file://work/cbr/input
[mel.test.blueprint.Main.main()] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) uptime 28.869 seconds
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is shutdown in 0.019 seconds
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.18.1
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1481791550078
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
	at org.apache.camel.test.blueprint.Main.main(Main.java:82)
	... 6 more
[ERROR] *************************************
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-5,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] NOTE: 2 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main,maxpri=10]
java.lang.IllegalThreadStateException
	at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)
	at org.apache.camel.maven.RunMojo.execute(RunMojo.java:505)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 49.194 s
[INFO] Finished at: 2016-12-15T09:46:35+01:00
[INFO] Final Memory: 44M/547M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.1:run (default-cli) on project camel-blueprint-cbr: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.
{noformat}

my first guess is that Camel 2.18.1 is starting faster and that some events occurs in the same milliseconds (considering the the jvm precision): https://github.com/apache/camel/blame/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java#L344",,aurelien.pupier,davsclaus,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10476,CAMEL-10513,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 16 14:33:14 UTC 2016,,,,,,,,,,,"0|i37mvr:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"15/Dec/16 10:24;davsclaus;This can be re-produced using

mvn archetype:generate
choose camel-archetype-blueprint
select 2.18.1 version
create the project
modify the pom.xml and remove <scope>test</scope> for all the loggers
mvn compile camel:run

{code}
davsclaus:/Users/davsclaus/Documents/workspace/blue/$ mvn clean compile camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ blue ---
[INFO] Deleting /Users/davsclaus/Documents/workspace/blue/target
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to /Users/davsclaus/Documents/workspace/blue/target/classes
[INFO]
[INFO] >>> camel-maven-plugin:2.18.1:run (default-cli) > test-compile @ blue >>>
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ blue ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 3 source files to /Users/davsclaus/Documents/workspace/blue/target/test-classes
[INFO] /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java uses unchecked or unsafe operations.
[INFO] /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: Recompile with -Xlint:unchecked for details.
[INFO]
[INFO] <<< camel-maven-plugin:2.18.1:run (default-cli) < test-compile @ blue <<<
[INFO]
[INFO] --- camel-maven-plugin:2.18.1:run (default-cli) @ blue ---
[INFO] camel-blueprint detected on classpath
[INFO] OSGi Blueprint XML files detected in directory /Users/davsclaus/Documents/workspace/blue/src/main/resources/OSGI-INF/blueprint
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
Dec 15, 2016 11:21:22 AM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.18.1
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
	at org.apache.camel.test.blueprint.Main.main(Main.java:82)
	... 6 more
[ERROR] *************************************
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 40.306 s
[INFO] Finished at: 2016-12-15T11:21:55+01:00
[INFO] Final Memory: 31M/341M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.1:run (default-cli) on project blue: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
{code};;;","15/Dec/16 10:27;davsclaus;Its also a problem with 2.18.0;;;","15/Dec/16 12:59;davsclaus;The example: camel-example-transformer-blueprint
Will fail on shutdown instead, eg if you rub

   mvn compile camel:run

Then it startup and when it stops it fails
{code}
2016-12-15 13:58:11,554 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6
2016-12-15 13:58:11,557 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.camel.camel-example-transformer-blueprint/2.19.0.SNAPSHOT
2016-12-15 13:58:11,558 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Stopping Camel Context TransformerBlueprint
2016-12-15 13:58:11,558 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) is shutting down
2016-12-15 13:58:11,559 [t Dispatcher: 1] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 2 routes (timeout 300 seconds)
2016-12-15 13:58:11,563 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: timer-route shutdown complete, was consuming from: timer://foo?period=5s
2016-12-15 13:58:11,564 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: xslt-route shutdown complete, was consuming from: direct://a
2016-12-15 13:58:11,564 [t Dispatcher: 1] INFO  DefaultShutdownStrategy        - Graceful shutdown of 2 routes completed in 0 seconds
2016-12-15 13:58:11,598 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) uptime 28.194 seconds
2016-12-15 13:58:11,599 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) is shutdown in 0.040 seconds
2016-12-15 13:58:11,599 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.19.0.SNAPSHOT
2016-12-15 13:58:11,600 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4
2016-12-15 13:58:11,604 [int.Main.main()] INFO  Activator                      - Camel activator stopping
2016-12-15 13:58:11,605 [int.Main.main()] INFO  Activator                      - Camel activator stopped
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
	at org.apache.camel.test.blueprint.Main.main(Main.java:82)
	... 6 more
[ERROR] *************************************
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2,5,org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 2992msecs
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] NOTE: 1 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main,maxpri=10]
java.lang.IllegalThreadStateException
	at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)
	at org.apache.camel.maven.RunMojo.execute(RunMojo.java:505)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:355)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:216)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:160)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 54.780 s
[INFO] Finished at: 2016-12-15T13:58:26+01:00
[INFO] Final Memory: 56M/814M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.19.0-SNAPSHOT:run (default-cli) on project camel-example-transformer-blueprint: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
{code}

;;;","15/Dec/16 20:58;ggrzybek;See my comments in CAMEL-10476.

I'm guessing (I wasn't here when it was designed) that {{camel:run}} *should* work after {{mvn clean compile}} - when you have nice {{target/classes}} filled with compiled java sources and processed resources - just like it was (probably) designed.

And it may work with spring or CDI, because they're quite independent on what's contained in MANIFEST.MF.

Blueprint is different (OSGi is different - but it's another topic) because MANIFEST.MF is crucial - that's how felix-connect (formerly known as PojoSR) finds _bundles_ - a _bundle_ is just classpath element that contains MANIFEST.MF.

In camel-archetype-blueprint we use:
{noformat}
      <!-- to generate the MANIFEST.MF of the bundle -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>3.2.0</version>
        <extensions>false</extensions>
        <executions>
          <execution>
            <id>bundle-manifest</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>manifest</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
{noformat}

to generate manifest in ... {{prepare-package}} phase.

So minimal command that succeeds is {{mvn clean prepare-package camel:run}}.

There are two uses of {{CamelBlueprintHelper.createBundleContext()}}:
* a JUnit @Test that extends {{org.apache.camel.test.blueprint.CamelBlueprintTestSupport}}
* a {{mvn camel:run}} invocation ({{org.apache.camel.maven.RunMojo}}) configured with {{<useBlueprint>}} (or when blueprint descriptor is autodetected)

These two cases call {{CamelBlueprintHelper.createBundleContext()}} with {{includeTestBundle}} flag:
* {{org.apache.camel.test.blueprint.CamelBlueprintTestSupport#includeTestBundle()}} by default (no Camel test overrides it) returns {{true}}
* {{RunMojo}} calls (blueprint case) {{org.apache.camel.test.blueprint.Main.main()}} with some arguments - but no argument changes {{org.apache.camel.test.blueprint.Main#includeSelfAsBundle}} field which is always {{false}}

So for JUnit test we have {{includeTestBundle==true}} which means Tinybundles will be used to pack our test classes and add it to mini-registry (felix-connect)
For {{camel:run}} we have {{includeTestBundle==false}} which means we have to find a _bundle_ with blueprint descriptor describing our context differently - {{mvn prepare-package}} is enough.

There are of course quirks - if you do {{mvn clean package}} and then {{mvn test}} (without {{clean}}) we may end up with *two* _bundles_ having the same blueprint descriptor. That's another (more annoying actually) incarnation of {{mvn clean compile camel:run}} problem where we have *no* _bundles_ with blueprint descriptors.

My view is - current state is ok, as unit tests (that's what camel-test-blueprint was for) run before packaging - we're testing *any* blueprint descriptor - possibly one from {{src/main/resources}} (main route) and maybe some mocks from {{src/test/resources}}.
But with {{camel:run}} we're actually running the main route/context of the artifact, so we need at least it's MANIFEST.MF.

What do you think?;;;","16/Dec/16 08:01;aurelien.pupier;1) this is a regression, so whatever was the issue, this can't be ok anyway (but if there are workarounds they are welcome)
2) I tried to simplify here, but I reproduce the issue even when calling ""clean package org.apache.camel:camel-maven-plugin:run"" which is what we were already doing by default
3) this is another issue that should be addressed that a prepare-package need to be called before the camel:run (but with less priority)
4) seems that you spotted other issues with combination of mvn clean package and mvn clean --> should be addressed also but it also a far lower priority;;;","16/Dec/16 08:15;davsclaus;Ah yeah they changed how the project is built for 2.18 onwards due the older 2.x maven-bundle-plugin was not supporting Java 8. And to upgrade to maven-bundle-plugin 3.x several things changed how it does that, including how that manifest stuff is generated etc. We could maybe tie camel:run to prepare-package phase or something so its run prior or something.;;;","16/Dec/16 08:58;davsclaus;Okay got it working if I change the phase to prepare-package, but then it runs the unit tests first

{code}
* @execute phase=""prepare-package""
{code}

;;;","16/Dec/16 08:59;ggrzybek;I'll check how maven-bundle-plugin affected the build.
+1 to camel:run (at least in useBlueprint=true) tied to prepare-package (just like maven-bundle-plugin:manifest goal);;;","16/Dec/16 09:00;ggrzybek;bq. but then it runs the unit tests first
IMO that's good and as-designed. camel:run may be used any time - with or without tests. so ordinary {{-DskipTests}} could be used.;;;","16/Dec/16 09:01;davsclaus;The unit tests can be skipped with
{code}
mvn camel:run -Dmaven.test.skip=true
{code}

Which is something tooling etc can control, but I would like to see if we can do this by default in mvn camel:run;;;","16/Dec/16 09:01;ggrzybek;I'm checking now what's the reason of:
{noformat}
[INFO] Starting Camel ...
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NoClassDefFoundError: org/osgi/framework/InvalidSyntaxException
	at org.apache.camel.test.blueprint.Main.createBundleContext(Main.java:151)
	at org.apache.camel.test.blueprint.Main.createBundleContext(Main.java:147)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:107)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
	at org.apache.camel.test.blueprint.Main.main(Main.java:82)
	... 6 more
Caused by: java.lang.ClassNotFoundException: org.osgi.framework.InvalidSyntaxException
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 13 more
{noformat}

when doing (yesterday it worked) {{mvn clean compile camel:run}}.;;;","16/Dec/16 09:21;davsclaus;Thanks for the diving into this. 

I have pushed fixes to master and 2.18.x branches.;;;","16/Dec/16 09:55;aurelien.pupier;I don't understand why changing the phase tie for camel:run is fixing the issue as when calling ""clean package org.apache.camel:camel-maven-plugin:run"" I reproduce the issue.

Seems a good thing to fix it anyway. It is fixing the point ""4) seems that you spotted other issues with combination of mvn clean package and mvn clean --> should be addressed also but it also a far lower priority"" that I mentioned before.

Unfortunately, I don't understand why it is fixing the initial issue.
;;;","16/Dec/16 10:50;aurelien.pupier;I confirm that the initial issue is still present. I tried with the 2.18.2-SNAPSHOT which contains Claus' commit.;;;","16/Dec/16 11:45;davsclaus;2.18.2-SNAPSHOT works for me
{code}
davsclaus:/Users/davsclaus/Documents/workspace/blue/$ mvn camel:run -Dmaven.test.skip=true
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ blue >>>
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ blue ---
[INFO] Not copying test resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ blue ---
[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ blue ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ blue ---
[INFO]
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ blue <<<
[INFO]
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ blue ---
[INFO] camel-blueprint detected on classpath
[INFO] OSGi Blueprint XML files detected in directory /Users/davsclaus/Documents/workspace/blue/src/main/resources/OSGI-INF/blueprint
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
Dec 16, 2016 12:44:33 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle com.foo.blue/1.0.0.SNAPSHOT is waiting for namespace handlers [http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0, http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting
[         Blueprint Extender: 3] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 3] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.450 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2016-12-16 12:44:37
^C[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.
davsclaus:/Users/davsclaus/Documents/workspace/blue/$
{code};;;","16/Dec/16 11:55;aurelien.pupier;failing for me skipping test or not

{noformat}
C:\Users\Aurelien Pupier\test>mvn camel:run -Dmaven.test.skip=true
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ test >>>
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ test ---
[INFO] Not copying test resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ test ---
[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ test ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ test ---
[INFO]
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ test <<<
[INFO]
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ test ---
[INFO] camel-blueprint detected on classpath
[INFO] OSGi Blueprint XML files detected in directory C:\Users\Aurelien Pupier\test\src\main\resources\OSGI-INF\blueprint
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Dec 16, 2016 12:54:19 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
                                                                                                                                                                                                                                                                                                                                                                                                                                       [ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:479)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
        at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
        at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
        at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
        at org.apache.camel.test.blueprint.Main.main(Main.java:82)
        ... 6 more
[ERROR] *************************************
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-3,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] NOTE: 3 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main,maxpri=10]
java.lang.IllegalThreadStateException
        at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)
        at org.apache.camel.maven.RunMojo.execute(RunMojo.java:512)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 48.642 s
[INFO] Finished at: 2016-12-16T12:55:04+01:00
[INFO] Final Memory: 37M/516M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) on project test: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{noformat}

{noformat}
C:\Users\Aurelien Pupier\test>mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ test >>>
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ test ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to C:\Users\Aurelien Pupier\test\target\classes
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ test ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 3 source files to C:\Users\Aurelien Pupier\test\target\test-classes
[INFO] /C:/Users/Aurelien Pupier/test/src/test/java/test/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: C:\Users\Aurelien Pupier\test\src\test\java\test\BlueprintBeanPropertiesOverrideFromTestRouteTest.java uses unchecked or unsafe operations.
[INFO] /C:/Users/Aurelien Pupier/test/src/test/java/test/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: Recompile with -Xlint:unchecked for details.
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ test ---
[INFO] Surefire report directory: C:\Users\Aurelien Pupier\test\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running test.BlueprintBeanPropertiesOverrideFromFileRouteTest
[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /C:/Users/Aurelien%20Pupier/test/target/classes/OSGI-INF/blueprint/blueprint-bean.xml
Dec 16, 2016 12:52:02 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
Dec 16, 2016 12:52:02 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[                          main] Activator                      INFO  Camel activator starting
[                          main] Activator                      INFO  Camel activator started
[                          main] Activator                      INFO  Camel activator starting
[                          main] Activator                      INFO  Camel activator started
[                          main] CamelBlueprintHelper           INFO  Updating ConfigAdmin Configuration PID=HelloBean, factoryPID=null, bundleLocation=null by overriding properties {greeting=Hello from file}
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle BlueprintBeanPropertiesOverrideFromFileRouteTest/1.0.0 is waiting for namespace handlers [http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0, http://camel.apache.org/schema/blueprint]
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromFileRouteTest INFO  Testing: testRoute(test.BlueprintBeanPropertiesOverrideFromFileRouteTest)
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromFileRouteTest INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting
[                          main] ManagedManagementStrategy      INFO  JMX is enabled
[                          main] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000
[                          main] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.239 seconds
[                          main] MockEndpoint                   INFO  Asserting: mock://result is satisfied
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hello from file at 2016-12-16 12:52:05
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromFileRouteTest INFO  Testing done: testRoute(test.BlueprintBeanPropertiesOverrideFromFileRouteTest)
[                          main] rtiesOverrideFromFileRouteTest INFO  Took: 1.252 seconds (1252 millis)
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down
[                          main] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10 seconds)
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete, was consuming from: timer://foo?period=5000
[                          main] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.272 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.017 seconds
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.309 sec
Running test.BlueprintBeanPropertiesOverrideFromTestRouteTest
Dec 16, 2016 12:52:05 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
Dec 16, 2016 12:52:05 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[                          main] rtiesOverrideFromTestRouteTest INFO  Updating ConfigAdmin Configuration PID=HelloBean, factoryPID=null, bundleLocation=null by overriding properties {greeting=Hello from test}
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.001 seconds
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromTestRouteTest INFO  Testing: testRoute(test.BlueprintBeanPropertiesOverrideFromTestRouteTest)
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromTestRouteTest INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000
[                          main] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.021 seconds
[ntext) thread #2 - timer://foo] timerToLog                     INFO  The message contains Hello from test at 2016-12-16 12:52:06
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromTestRouteTest INFO  Testing done: testRoute(test.BlueprintBeanPropertiesOverrideFromTestRouteTest)
[                          main] rtiesOverrideFromTestRouteTest INFO  Took: 1.022 seconds (1022 millis)
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.024 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.002 seconds
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.189 sec
Running test.BlueprintBeanRouteTest
Dec 16, 2016 12:52:07 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
Dec 16, 2016 12:52:07 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************
[                          main] BlueprintBeanRouteTest         INFO  Testing: testRoute(test.BlueprintBeanRouteTest)
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************
[                          main] BlueprintBeanRouteTest         INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000
[                          main] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.032 seconds
[ntext) thread #4 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2016-12-16 12:52:08
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************
[                          main] BlueprintBeanRouteTest         INFO  Testing done: testRoute(test.BlueprintBeanRouteTest)
[                          main] BlueprintBeanRouteTest         INFO  Took: 1.033 seconds (1033 millis)
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.036 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.003 seconds
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.165 sec

Results :

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ test ---
[INFO]
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ test <<<
[INFO]
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ test ---
[INFO] You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true
[INFO] camel-blueprint detected on classpath
[INFO] OSGi Blueprint XML files detected in directory C:\Users\Aurelien Pupier\test\src\main\resources\OSGI-INF\blueprint
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Dec 16, 2016 12:52:11 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:479)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
        at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
        at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
        at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
        at org.apache.camel.test.blueprint.Main.main(Main.java:82)
        ... 6 more
[ERROR] *************************************
                                                                           [WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-4,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] NOTE: 3 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main,maxpri=10]
java.lang.IllegalThreadStateException
        at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)
        at org.apache.camel.maven.RunMojo.execute(RunMojo.java:512)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 58.326 s
[INFO] Finished at: 2016-12-16T12:52:57+01:00
[INFO] Final Memory: 51M/549M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) on project test: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{noformat};;;","16/Dec/16 13:00;ggrzybek;One more fix:
* master: https://github.com/apache/camel/commit/ddcbd0f948d0f4b8c2a4a5b99f78f2880c4d21de
* camel-2.18.x: https://github.com/apache/camel/commit/74fd151016b0cc64e6eddd098bf355fc35743ce0;;;","16/Dec/16 14:33;aurelien.pupier;yeah it works, thank you!;;;",,,,,,,,,,,,,,
Swagger prints child object types as string parameters rather than refs,CAMEL-10597,13028113,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bobpaulin,bobpaulin,14/Dec/16 14:42,15/Dec/16 14:26,14/Jul/23 05:50,14/Dec/16 15:31,2.18.0,,,,,,,,,,,,,,2.17.5,2.18.2,2.19.0,,camel-swagger,,,,,,,0,,,,,,"Assume I have rest path

{code}
rest(""/test"").get().type(ClassA.class).to(""direct:someRoute"");

rest(""/testSub"").get().type(ClassB.class).to(""direct:someOtherRoute"");
{code}

And in the type ClassA contains a reference to ClassB.

Within the Swagger Doc the path for ClassA renders as expected:
{code}
/test:
    get:
      responses:
        200:
          schema:
            $ref: '#/definitions/ClassA'
{code}

However ClassB gets a string parameter scheme
{code} 
/testSub:
    get:
      responses:
        200:
          schema:
             type : 'string'
             format : 'com.ClassB'
{code}

However I'd expect it to be:
{code}
/testSub:
    get:
      responses:
        200:
          schema:
            $ref: '#/definitions/ClassB'
{code}",,acosentino,bobpaulin,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 15 14:26:13 UTC 2016,,,,,,,Patch Available,,,,"0|i37lfj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Dec/16 14:55;githubbot;GitHub user bobpaulin opened a pull request:

    https://github.com/apache/camel/pull/1348

    CAMEL-10597 - Allow addition of x-className to empty VendorExtensions

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bobpaulin/camel CAMEL-10597

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1348.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1348
    
----

----
;;;","14/Dec/16 14:56;bobpaulin;PR included https://github.com/apache/camel/pull/1348;;;","14/Dec/16 15:31;davsclaus;Thanks for the PR;;;","14/Dec/16 15:34;githubbot;Github user bobpaulin closed the pull request at:

    https://github.com/apache/camel/pull/1348
;;;","15/Dec/16 14:05;acosentino;2.17.x is affected too [~davsclaus];;;","15/Dec/16 14:26;davsclaus;Thanks its backported now;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Kafka consumer stays alive when camel context is shut down,CAMEL-10594,13028049,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jamesnetherton,jamesnetherton,14/Dec/16 09:48,14/Dec/16 12:08,14/Jul/23 05:50,14/Dec/16 12:08,,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-kafka,,,,,,,0,,,,,,"I happened to be running some camel-kafka unit tests with the log level set to DEBUG and noticed that the KafkaConsumer is not shut down correctly.

When the Camel Kafka consumer is stopped, it invokes shutdownNow() on the ExecutorService. But this does not guarantee any running threads will be terminated.

This is a bit of an issue when Camel runs in a container like Karaf or WildFly because the [KafkaFetchRecords|https://github.com/apache/camel/blob/master/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java#L94] thread just keeps on running for the lifetime of the JVM. 

It's simple to reproduce in a unit test:

* Enable DEBUG log level
* Start a Camel context with a Kafka consumer endpoint
* Stop the camel context
* Thread.sleep for some time (10 seconds or whatever). Then notice exception in the log output:

{code}
[0m[32m07:09:44,247 DEBUG [org.apache.kafka.clients.NetworkClient] (Camel (camel-36) thread #134 - KafkaConsumer[test]) Error connecting to node 1 at localhost:9092:: java.nio.channels.ClosedByInterruptException
	at java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:659)
	at org.apache.kafka.common.network.Selector.connect(Selector.java:168)
	at org.apache.kafka.clients.NetworkClient.initiateConnect(NetworkClient.java:498)
	at org.apache.kafka.clients.NetworkClient.access$400(NetworkClient.java:48)
	at org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater.maybeUpdate(NetworkClient.java:645)
	at org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater.maybeUpdate(NetworkClient.java:552)
	at org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:258)
	at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.clientPoll(ConsumerNetworkClient.java:360)
	at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.poll(ConsumerNetworkClient.java:224)
	at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.poll(ConsumerNetworkClient.java:192)
	at org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.awaitMetadataUpdate(ConsumerNetworkClient.java:134)
	at org.apache.kafka.clients.consumer.internals.AbstractCoordinator.ensureCoordinatorReady(AbstractCoordinator.java:183)
	at org.apache.kafka.clients.consumer.KafkaConsumer.pollOnce(KafkaConsumer.java:974)
	at org.apache.kafka.clients.consumer.KafkaConsumer.poll(KafkaConsumer.java:938)
	at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.run(KafkaConsumer.java:130)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}",,davsclaus,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 14 12:05:29 UTC 2016,,,,,,,,,,,"0|i37l1b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Dec/16 12:05;davsclaus;Yeah there is a graceful shutdown we can use that is better, and also to break out that while loop if we are stopping;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix and enhance logging for camel-smpp,CAMEL-10591,13027737,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,,pmoerenhout,pmoerenhout,13/Dec/16 09:44,13/Dec/16 09:51,14/Jul/23 05:50,13/Dec/16 09:51,2.19.0,,,,,,,,,,,,,,,,,,camel-smpp,,,,,,,0,,,,,,"When reconnecting, the attempt is not printed in the log. Also I changed the logging to use slf4j style of printing parameter in the log statement.

Pull request is https://github.com/apache/camel/pull/1343.",,pmoerenhout,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 13 09:51:31 UTC 2016,,,,,,,Patch Available,,,,"0|i37j3z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Dec/16 09:51;pmoerenhout;The pull request was picked up and merged.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring Message headers are immutable,CAMEL-10582,13026985,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bkuzmic,bkuzmic,09/Dec/16 12:50,12/Dec/16 09:04,14/Jul/23 05:50,12/Dec/16 09:04,2.18.1,,,,,,,,,,,,,,2.17.5,2.18.2,2.19.0,,camel-spring-integration,,,,,,,0,easyfix,,,,,"When SpringIntegrationMessage is copied from another SpringIntegrationMessage that already has siMessage headers, exception is thrown:
java.lang.UnsupportedOperationException: MessageHeaders is immutable.
Which is a valid exception since Spring Message headers (the whole message as well) are immutable.",,bkuzmic,davsclaus,githubbot,,,,,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 12 09:04:41 UTC 2016,,,,,,,Patch Available,,,,"0|i37eh3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Dec/16 15:38;githubbot;GitHub user bkuzmic opened a pull request:

    https://github.com/apache/camel/pull/1340

    CAMEL-10582: Fixing copying of immutable Spring headers

    Please consider merging this fix to allow complete Spring integration work correctly.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bkuzmic/camel CAMEL-10582

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1340.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1340
    
----
commit 06ca63894a17db1ea872a37b36846bdce5f0b1c3
Author: Boris Kuzmic <boris.kuzmic@ericsson.com>
Date:   2016-12-09T15:35:34Z

    CAMEL-10582: Fixing copying of immutable Spring headers

----
;;;","12/Dec/16 09:04;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1340
;;;","12/Dec/16 09:04;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
toD (ToDynamicDefinition) does not honor RAW( ) contract - 'removes + from password',CAMEL-10581,13026939,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,robin.carry,robin.carry,09/Dec/16 10:12,05/Jan/17 00:31,14/Jul/23 05:50,14/Dec/16 10:38,2.16.3,,,,,,,,,,,,,,2.17.5,2.18.2,2.19.0,,camel-core,,,,,,,0,password,raw,sftp,toD,,"We have SFTP passwords which have special characters and hence we tried to use the RAW function. On testing we saw that the RAW doesn't work and it still fails.

On debugging we realize that we are using toD(""sftp://...."") and not to(""sftp://...""). As toD has been introduced later, I guess support for RAW was missed 
Camel Version: 2.16.3

URL: sftp://10.14.112.183:8686/customer?username=tester&password=RAW(abXNd+4nfzS)&stepwise=false&disconnect=true&reconnectDelay=5000&autoCreate=false&fileExist=Override&connectTimeout=300000

Code Fails at - org.apache.camel.model.ToDynamicDefinition.createExpression(RouteContext)  - line 86 or 117 (depending on your viewpoint).

- Line 86: String[] parts = uri.split(""\\+"");
- Line  117: We concat expressions, without realizing that + was within the RAW function.

Regards,
Arpit.
",,robin.carry,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 05 00:31:52 UTC 2017,,,,,,,,,,,"0|i37e6v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Jan/17 00:31;robin.carry;[~davsclaus] [~gzurowski] Any way I can find out when the 2.18.2 will be released. Checked - http://camel.apache.org/camel-2182-release.html but didn't find some definitive date. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAP 1.1 unmarshalling fails for faults that lack a detail element,CAMEL-10579,13026774,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Jonathan Scholis,Jonathan Scholis,08/Dec/16 19:51,13/Dec/16 00:07,14/Jul/23 05:50,12/Dec/16 09:11,2.17.2,2.18.1,,,,,,,,,,,,,2.17.5,2.18.2,2.19.0,,camel-soap,,,,,,,0,soap11,,,,,"The Soap11DataFormatAdapter class has the same issue that was previously fixed in the Soap12DataFormatAdapter class (CAMEL-8708).  Specifically, it throws a NullPointerException in the event of a missing SOAP fault detail, which is allowed per specifications (https://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Ref477795995).  I believe the same fix should be applied to the Soap11DataFormatAdapter code.",,davsclaus,githubbot,Jonathan Scholis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Dec/16 19:54;Jonathan Scholis;10579 2172 stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12842402/10579+2172+stacktrace.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 13 00:07:20 UTC 2016,,,,,,,,,,,"0|i37d67:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Dec/16 20:03;davsclaus;You are welcome to provide a patch file or better as a github PR
http://camel.apache.org/contributing;;;","11/Dec/16 16:00;githubbot;GitHub user scholisj opened a pull request:

    https://github.com/apache/camel/pull/1342

    Fix for CAMEL-10579.  Similar to fix for CAMEL-8708, but for SOAP 1.1.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scholisj/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1342.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1342
    
----
commit 5c2f5da5a99b3098e2360841d5689fde8f869cf4
Author: Jonathan Scholis <scholisj@10.0.0.2>
Date:   2016-12-11T15:56:59Z

    Fix for CAMEL-10579.  Similar to fix for CAMEL-8708, but for SOAP 1.1.

----
;;;","12/Dec/16 09:11;davsclaus;Thanks for the PR;;;","13/Dec/16 00:07;githubbot;Github user scholisj closed the pull request at:

    https://github.com/apache/camel/pull/1342
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default namespaces defined on SOAPEnvelope cause problems with CXF PAYLOAD mode,CAMEL-10578,13026743,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,08/Dec/16 17:47,09/Dec/16 16:07,14/Jul/23 05:50,09/Dec/16 16:07,2.16.4,2.17.4,2.18.1,,,,,,,,,,,,2.16.5,2.17.5,2.18.2,,camel-cxf,,,,,,,0,,,,,,"
With a doc/literal endpoint using PAYLOAD mode, if a client sends a request where the child element of the Body uses a default namespace and that namespace is defined on the soap envelope or soap body (and not the element itself), you either get an exception of:

1) (insecure message, no WSS4J processing)
{code}org.xml.sax.SAXParseException: Element or attribute do not match QName production: QName::=(NCName':')?NCName. 
    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:610)[75:org.apache.camel.camel-core:2.16.3]
    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:137)[75:org.apache.camel.camel-core:2.16.3]
{code}

2) Secure message:
{code}
org.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
    at com.sun.org.apache.xerces.internal.dom.CoreDocumentImpl.checkNamespaceWF(CoreDocumentImpl.java:2535)[:1.8.0_66]
    at com.sun.org.apache.xerces.internal.dom.AttrNSImpl.setName(AttrNSImpl.java:93)[:1.8.0_66]
    at com.sun.org.apache.xerces.internal.dom.AttrNSImpl.<init>(AttrNSImpl.java:78)[:1.8.0_66]
    at com.sun.org.apache.xerces.internal.dom.CoreDocumentImpl.createAttributeNS(CoreDocumentImpl.java:2164)[:1.8.0_66]
    at com.sun.xml.messaging.saaj.soap.SOAPDocumentImpl.createAttributeNS(SOAPDocumentImpl.java:186)[162:org.apache.servicemix.bundles.saaj-impl:1.3.23.2]
    at com.sun.xml.messaging.saaj.soap.SOAPDocumentImpl.createAttribute(SOAPDocumentImpl.java:153)[162:org.apache.servicemix.bundles.saaj-impl:1.3.23.2]
    at com.sun.org.apache.xerces.internal.dom.ElementImpl.setAttribute(ElementImpl.java:498)[:1.8.0_66]
    at org.apache.camel.component.cxf.DefaultCxfBinding.addNamespace(DefaultCxfBinding.java:764)[76:org.apache.camel.camel-cxf:2.16.3]
{code}

both are due to camel-cxf/DefaultCxfBinding.addNamespaces not properly adding default namespace attributes to the DOM.
",,dkulp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-12-08 17:47:26.0,,,,,,,,,,,"0|i37czb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Align FallbackTypeConverter loading in OSGI environments,CAMEL-10573,13026660,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jpoth,jpoth,jpoth,08/Dec/16 12:14,13/Feb/17 17:53,14/Jul/23 05:50,13/Dec/16 09:42,,,,,,,,,,,,,,,2.18.2,2.19.0,,,karaf,osgi,,,,,,0,,,,,,"In a OSGI environment only, FallBackTypeConverters are [required|https://github.com/apache/camel/blob/d5f0aefdffc74ac0971b87946a21fe4be8c305b4/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java#L428] to be annotated with @Converter whereas otherwise they are [not|https://github.com/apache/camel/blob/00fef5857c0bcb0fc7a02f19f5ba51ef0382133d/camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java#L170].

This causes [camel-jackson's|https://github.com/apache/camel/blob/2b4b9df67da4b84cb69d9dd42ef77155a803679a/components/camel-jackson/src/main/java/org/apache/camel/component/jackson/converter/JacksonTypeConverters.java] FallbackTypeConverter to not be loaded and a 'NoTypeConversionAvailableException' will be thrown. 

I will provide a PR.",,cschneider,davsclaus,githubbot,jpoth,zgl,,,,,,,,,,,,,,,,,,,,,,,,,AMQ-6597,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 13 17:52:49 UTC 2017,,,,,,,,,,,"0|i37cgv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Dec/16 12:24;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1336

    CAMEL-10573: Align FallbackTypeConverter loading in OSGI environments

    https://issues.apache.org/jira/browse/CAMEL-10573

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10573

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1336.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1336
    
----
commit 3cac6640f6c2d12c9939dcd5c624e0a91bd263c5
Author: jpoth <poth.john@gmail.com>
Date:   2016-12-08T12:23:20Z

    CAMEL-10573: Align FallbackTypeConverter loading in OSGI environments

----
;;;","08/Dec/16 13:12;davsclaus;Can you point out better why you think this PR is valid. Why should the test not be called? And you only did this code change in the first place not further below where the converter is loaded using package name.

And can you provide an unit test / sample project that reproduces this problem;;;","12/Dec/16 18:49;jpoth;Hi [~davsclaus],

Thanks for looking into this!

So this PR aligns the way FallbackTypeConverters are loaded in [Camel-OSGI|https://github.com/apache/camel/blob/d5f0aefdffc74ac0971b87946a21fe4be8c305b4/camel-core/src/main/java/org/apache/camel/impl/osgi/Activator.java#L428] and in [plain|https://github.com/apache/camel/blob/00fef5857c0bcb0fc7a02f19f5ba51ef0382133d/camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java#L170] Camel. As you can see there is no annotation check in the latter.

I didn't remove the other annotation check you mentioned because it is in line with what plain Camel [does|https://github.com/apache/camel/blob/00fef5857c0bcb0fc7a02f19f5ba51ef0382133d/camel-core/src/main/java/org/apache/camel/impl/converter/AnnotationTypeConverterLoader.java#L130].

The motivation behind this alignment is that, in Camel/OSGI, Camel-jackson's [FallbackTypeConverter|https://github.com/apache/camel/blob/2b4b9df67da4b84cb69d9dd42ef77155a803679a/components/camel-jackson/src/main/java/org/apache/camel/component/jackson/converter/JacksonTypeConverters.java] is not loaded. This is best illustrated by the added [test|https://github.com/apache/camel/pull/1336/commits/e333e30d7f949239568d73842814934dc765c061#diff-e20859f5602a97731366eeb0d843ae4a] in my PR. As there was no TypeConverter testing, I created my own (may be a good base to test other TypeConverters?).

I'd be happy to propose other solutions if alignment doesn't seem like a good idea :)

Thanks!

John.;;;","13/Dec/16 09:41;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1336
;;;","13/Feb/17 17:52;cschneider;I think the commit 05ba679d3906528cb is causing a severe issue with the activemq-camel component (AMQ-6597). The BundleComponentResolver seems to detect the activemq component inside the activemq-osgi bundle. This causes the activemq component to not work at all.

The issue seems to be caused by removing the test for a matching class:
                            if (test.matches(clazz)) {
                                classes.add(clazz);
                            }

After all though loading the foreign class is the problem in the first place. As activemq OSGi has DynamicImport-Package * it will be able to load all classes in the OSGi system and will create a wiring to the classes package. 
I will create a separate issue to track and solve this problem.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SftpChangedExclusiveReadLockStrategy integer overflow,CAMEL-10568,13026494,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,adamcampbell,adamcampbell,07/Dec/16 22:29,08/Dec/16 14:17,14/Jul/23 05:50,08/Dec/16 14:15,2.18.0,,,,,,,,,,,,,,2.17.5,2.18.2,2.19.0,,camel-sftp,,,,,,,0,,,,,,"It looks like CAMEL-9820 has not resolved SFTP readLockMinAge functionality.

When I run the latest version, I get a new last modified time as negative. I think this is because both types are int so it is performing the calculation as an int and then converting it to long.

It should work if this line:

newLastModified = f.getAttrs().getMTime() * 1000;

Is changed to:

newLastModified = f.getAttrs().getMTime() * 1000L;


TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - List files outgoing/Promo/dev/test.dat found 1 files
TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - Previous last modified: -9223372036854775808, new last modified: -616826120
TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - Previous length: -9223372036854775808, new length: 12921172
TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - New older than threshold: 1481147995902
TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - Read lock acquired.",,adamcampbell,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 08 14:17:07 UTC 2016,,,,,,,,,,,"0|i37bfz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Dec/16 08:05;davsclaus;Thanks for reporting. I wonder if you can do a patch or better as a github PR
http://camel.apache.org/contributing;;;","08/Dec/16 13:58;githubbot;GitHub user adamcamp opened a pull request:

    https://github.com/apache/camel/pull/1337

    CAMEL-10568 Fix SftpChangedExclusiveReadLockStrategy integer overflow bug

    https://issues.apache.org/jira/browse/CAMEL-10568

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adamcamp/camel CAMEL-10568

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1337.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1337
    
----
commit df2f7cd2bb2e5816b59e854eb9e1a75b660f5e79
Author: acampbel <adam.campbell@neustar.biz>
Date:   2016-12-08T13:55:28Z

    CAMEL-10568 Fix integer overflow bug

----
;;;","08/Dec/16 14:15;davsclaus;Thanks for the PR;;;","08/Dec/16 14:17;githubbot;Github user adamcamp closed the pull request at:

    https://github.com/apache/camel/pull/1337
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http - Unable to change configuration through spring-boot properties,CAMEL-10564,13026373,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,07/Dec/16 14:57,13/Dec/16 09:17,14/Jul/23 05:50,13/Dec/16 09:17,,,,,,,,,,,,,,,2.19.0,,,,camel-netty-http,,,,,,,0,,,,,,"Setting properties like:
{code}
camel.component.netty-http.configuration.maximum-pool-size=20
{code}

... to configure the netty-http-starter component produce class-cast errors.

{code}
Caused by: java.lang.ClassCastException: org.apache.camel.component.netty.NettyConfiguration cannot be cast to org.apache.camel.component.netty.http.NettyHttpConfiguration
	at org.apache.camel.component.netty.http.NettyHttpEndpoint.getConfiguration(NettyHttpEndpoint.java:151) ~[camel-netty-http-2.18.1.jar:2.18.1]
	at org.apache.camel.component.netty.http.NettyHttpEndpoint.createConsumer(NettyHttpEndpoint.java:83) ~[camel-netty-http-2.18.1.jar:2.18.1]
	at org.apache.camel.component.netty.http.NettyHttpComponent.doCreateConsumer(NettyHttpComponent.java:369) ~[camel-netty-http-2.18.1.jar:2.18.1]
	at org.apache.camel.component.netty.http.NettyHttpComponent.createConsumer(NettyHttpComponent.java:264) ~[camel-netty-http-2.18.1.jar:2.18.1]
	at org.apache.camel.component.rest.RestEndpoint.createConsumer(RestEndpoint.java:489) ~[camel-core-2.18.1.jar:2.18.1]
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:69) ~[camel-core-2.18.1.jar:2.18.1]
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:103) ~[camel-core-2.18.1.jar:2.18.1]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:167) ~[camel-core-2.18.1.jar:2.18.1]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:141) ~[camel-core-2.18.1.jar:2.18.1]
	... 31 common frames omitted

{code}

The reason is that the netty-http Component, that inherits from the netty component, requires a subclass of NettyConfiguration (NettyHttpConfiguration), while the generated starter is using the parent class.",,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-12-07 14:57:33.0,,,,,,,,,,,"0|i37ap3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UnsupportedOperationException in DefaultCamelContext#safelyStartRouteServices,CAMEL-10562,13026008,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,sschulze,sschulze,06/Dec/16 16:18,08/Dec/16 08:43,14/Jul/23 05:50,08/Dec/16 08:43,2.18.0,2.18.1,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-core,,,,,,,0,,,,,,"DefaultCamelContext#safelyStartRouteServices the following code is called:
{code}
Collections.sort(startupListeners, new OrderedComparator());
{code}
{{startupListeners}} is a {{CopyOnWriteArrayList}}.

In the specification of Collections.sort it is stated, that an UnsupportedOperationException is thrown if the collections listiterator doesn't support the set-operation.
Sadly, the documentation of CopyOnWriteArrayList#listIterator states, that the listiterator doesn't support this operation.
As expected in this szenario, the UnsupportedOperationException is thrown during startup of the camel context if an Oracle JDK 1.8.0 with patchlevel lower than 20 is used.
In 1.8.0_20 the operation Collections#sort(List,Comparator) is rewritten to delegate to List#sort(Comparator) so it doesn't matter anymore if the lists listIterator supports the set-operation.

The issue can trivially been fixed by replacing the line by
{code}
startupListeners.sort(new OrderedComparator());
{code}",Oracle JDK 1.8.0_(<20),davsclaus,githubbot,sschulze,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 08 08:43:22 UTC 2016,,,,,,,,,,,"0|i378fz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Dec/16 16:24;sschulze;This issue is a blocker in our environment, because we can not simply change the JRE in use on our servers. So I set the priority only to critical because of the outdated affected version of Java and the because I'm not sure, if other JREs, i.e. the IBM JRE, are affected, too.

I will add a pull request later. Currently I'm not able to clone the git repo :(;;;","06/Dec/16 23:12;githubbot;GitHub user sschulze opened a pull request:

    https://github.com/apache/camel/pull/1333

    CAMEL-10562: camel-core - Switched to List#sort

    Usage of Collections.sort(CopyOnWriteArrayList, Comparator) causes an UnsupportedOperationException on Oracle Java 1.8.0 up to fixpack 20 due to the documented restriction of this method to require an implemented ListIterator#set(...) operation on the given list.
    
    For details have a look at [CAMEL-10562](https://issues.apache.org/jira/browse/CAMEL-10562).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sschulze/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1333.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1333
    
----
commit bb8be00f5e50f4190677ffac8e73609446a600d9
Author: Stefan Schulze <stefan.schulze3@gmail.com>
Date:   2016-12-06T23:02:19Z

    CAMEL-10562: camel-core - Switched to List#sort

----
;;;","08/Dec/16 08:43;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1333
;;;","08/Dec/16 08:43;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce bulk API getBatchRequest uses wrong URL pattern,CAMEL-10557,13025411,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sirlatrom,sirlatrom,04/Dec/16 13:54,04/Dec/16 14:35,14/Jul/23 05:50,04/Dec/16 14:33,2.17.3,,,,,,,,,,,,,,2.17.5,2.18.2,2.19.0,,camel-salesforce,,,,,,,0,,,,,,"The documentation says to append ""/request"" to retrieve the request object. The current code does not do that. See https://github.com/apache/camel/pull/1327.",All platforms when using Salesforce bulk API through the camel-salesforce component.,davsclaus,githubbot,sirlatrom,,,,,0,0,,0%,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,https://github.com/apache/camel/pull/1327,,,,,,,,,,,9223372036854775807,,,Sun Dec 04 14:35:47 UTC 2016,,,,,,,Patch Available,,,,"0|i374rb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Dec/16 14:33;davsclaus;Thanks for the PR;;;","04/Dec/16 14:35;githubbot;Github user sirlatrom closed the pull request at:

    https://github.com/apache/camel/pull/1327
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-twitter-websocket-blueprint - Cannot load static html resources,CAMEL-10556,13025402,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Dec/16 13:13,04/Dec/16 13:36,14/Jul/23 05:50,04/Dec/16 13:36,,,,,,,,,,,,,,,2.19.0,,,,examples,karaf,,,,,,0,,,,,,"This example camel-example-twitter-websocket-blueprint cannot load the static html file when running in karaf

{code}
HTTP ERROR: 500

Problem accessing /index.html. Reason:

    java.lang.RuntimeException: java.io.FileNotFoundException: /webapp/index.html (No such file or directory)
{code}

Its some classloading issues with camel-websocket and camel-jetty when running in OSGi. As the stacktrace seems to load from file system.

{code}
2016-12-04 14:11:50,879 | WARN  | SocketServer-266 | ServletHandler                   | 83 - org.eclipse.jetty.util - 9.2.19.v20160908 | /
java.lang.RuntimeException: java.io.FileNotFoundException: /webapp/index.html (No such file or directory)
	at org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent.getDirectBuffer(HttpContent.java:110)[71:org.eclipse.jetty.http:9.2.19.v20160908]
	at org.eclipse.jetty.server.HttpOutput.sendContent(HttpOutput.java:665)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.DefaultServlet.sendData(DefaultServlet.java:931)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.DefaultServlet.doGet(DefaultServlet.java:534)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)[63:javax.servlet-api:3.1.0]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)[63:javax.servlet-api:3.1.0]
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.Dispatcher.forward(Dispatcher.java:191)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.Dispatcher.forward(Dispatcher.java:72)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.DefaultServlet.doGet(DefaultServlet.java:588)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)[63:javax.servlet-api:3.1.0]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)[63:javax.servlet-api:3.1.0]
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.Server.handle(Server.java:499)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)[72:org.eclipse.jetty.io:9.2.19.v20160908]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)[83:org.eclipse.jetty.util:9.2.19.v20160908]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)[83:org.eclipse.jetty.util:9.2.19.v20160908]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]
Caused by: java.io.FileNotFoundException: /webapp/index.html (No such file or directory)
	at java.io.RandomAccessFile.open(Native Method)[:1.8.0_31]
	at java.io.RandomAccessFile.<init>(RandomAccessFile.java:243)[:1.8.0_31]
	at org.eclipse.jetty.util.BufferUtil.readFrom(BufferUtil.java:437)[83:org.eclipse.jetty.util:9.2.19.v20160908]
	at org.eclipse.jetty.util.BufferUtil.toBuffer(BufferUtil.java:884)[83:org.eclipse.jetty.util:9.2.19.v20160908]
	at org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent.getDirectBuffer(HttpContent.java:106)[71:org.eclipse.jetty.http:9.2.19.v20160908]
	... 34 more
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-12-04 13:13:57.0,,,,,,,,,,,"0|i374pb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-rest-show karaf command cannot load transformer class,CAMEL-10555,13025400,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Dec/16 12:32,04/Dec/16 14:29,14/Jul/23 05:50,04/Dec/16 14:29,,,,,,,,,,,,,,,2.19.0,,,,karaf,,,,,,,0,,,,,,"This error happens
{code}
2016-12-04 13:30:56,747 | ERROR | nsole user karaf | ShellUtil                        | 43 - org.apache.karaf.shell.core - 4.0.7 | Exception caught while executing command
javax.xml.transform.TransformerFactoryConfigurationError: Provider org.apache.xalan.processor.TransformerFactoryImpl not found
	at javax.xml.transform.TransformerFactory.newInstance(TransformerFactory.java:121)[:2.7.0]
	at org.apache.camel.converter.jaxp.XmlConverter.createTransformerFactory(XmlConverter.java:1173)
	at org.apache.camel.converter.jaxp.XmlConverter.getTransformerFactory(XmlConverter.java:1063)
	at org.apache.camel.converter.jaxp.XmlConverter.createTransformer(XmlConverter.java:1168)
	at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:127)
	at org.apache.camel.converter.jaxp.XmlConverter.toStringFromDocument(XmlConverter.java:299)
	at org.apache.camel.model.ModelHelper.dumpModelAsXml(ModelHelper.java:107)
	at org.apache.camel.commands.AbstractLocalCamelController.getRestModelAsXml(AbstractLocalCamelController.java:414)
	at org.apache.camel.commands.RestShowCommand.performContextCommand(RestShowCommand.java:32)
	at org.apache.camel.commands.AbstractContextCommand.executeLocal(AbstractContextCommand.java:74)
	at org.apache.camel.commands.AbstractContextCommand.execute(AbstractContextCommand.java:42)
	at org.apache.camel.karaf.commands.RestShow.execute(RestShow.java:38)
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:83)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:67)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:87)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:480)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:406)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:182)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:119)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:94)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.karaf.shell.impl.console.ConsoleSessionImpl.run(ConsoleSessionImpl.java:274)[43:org.apache.karaf.shell.core:4.0.7]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]

karaf@root()> camel:rest-show camel-1
Error executing command: Provider org.apache.xalan.processor.TransformerFactoryImpl not found
{code}

When running the camel-example-servlet-rest-blueprint example",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 04 14:29:22 UTC 2016,,,,,,,,,,,"0|i374ov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Dec/16 12:47;davsclaus;It works if you install camel-saxon which provides the saxon xslt transformer.;;;","04/Dec/16 13:45;davsclaus;The JDK provides the transformer as class: com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;;;","04/Dec/16 14:29;davsclaus;Fixed by CAMEL-10558;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Converter from List to String is not found when @EnableAutoConfiguration is used,CAMEL-10548,13024520,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,30/Nov/16 17:47,01/Dec/16 15:52,14/Jul/23 05:50,01/Dec/16 15:52,,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-spring-boot,,,,,,,0,,,,,,"This very simple spring-boot application :

{code:java}
@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Component
    public class MyRouteBuilder extends RouteBuilder {
        @Override
        public void configure() throws Exception {
            from(""timer:person"")
                .setBody().constant(Arrays.asList(
                    new Person(""Peter"", 25),
                    new Person(""John"", 33)
                ))
                .log(""Body is ${body}"");
        }
    }

    public static class Person {
        private String name;
        private int age;

        public Person(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }

        @Override
        public String toString() {
            return ""Person{"" +
                ""name='"" + name + '\'' +
                "", age="" + age +
                '}';
        }
    }
}
{code}

Fails to resolve the simple expression ${body} because of the following exception:

{code}
org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Person{name='Peter', age=25}, Person{name='John', age=33}] due Failed to convert from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String] for value '[Person{name='Peter', age=25}, Person{name='John', age=33}]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:150) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:41) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.builder.ExpressionBuilder$75.evaluate(ExpressionBuilder.java:1795) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.LogProcessor.process(LogProcessor.java:53) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197) [camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197) [camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:192) [camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:76) [camel-core-2.18.0.jar:2.18.0]
	at java.util.TimerThread.mainLoop(Timer.java:555) [na:1.8.0_112]
	at java.util.TimerThread.run(Timer.java:505) [na:1.8.0_112]
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String] for value '[Person{name='Peter', age=25}, Person{name='John', age=33}]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:42) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.apache.camel.spring.boot.SpringTypeConverter.convertTo(SpringTypeConverter.java:46) ~[camel-spring-boot-2.18.0.jar:2.18.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:346) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[camel-core-2.18.0.jar:2.18.0]
	... 14 common frames omitted
Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String]
	at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:313) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:195) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.CollectionToStringConverter.convert(CollectionToStringConverter.java:68) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:36) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	... 19 common frames omitted
{code}

The root cause is spring failing to find a converter for Person --> String and as the SpringTypeConverter registered by camel-spring-boot is one of the fallback converters used by BaseTypeConverterRegistry, it leads Camel to fail too.

As today is a Camel TypeConverter fails with an exception while looping over fallback converters, the loops ends and the conversion fails too. It may turn out that the bug is caused by the way camel uses Spring's type converters but it may be good to catch exceptions and try the next converter, [~davsclaus] make sense ?

A workaround is to create a custom converter for the class:
{code:java}
    @Component
    public class PersonConverter implements Converter<Person, String> {
        @Override
        public String convert(Person source) {
            return source.toString();
        }
    }
{code}",,davsclaus,lb,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 01 15:08:36 UTC 2016,,,,,,,,,,,"0|i36z9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Dec/16 10:04;davsclaus;Isnt the problem that Spring says true that it can convert from List -> String.
https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/SpringTypeConverter.java#L51


;;;","01/Dec/16 14:12;lb;Yes an not :-)

Spring says that it can convert from List to String and it is true but then thing is that Spring can't convert from Person to String as FallbackObjectToStringConverter can convert POJO if they have a String constructor or they have a valueOf(String) method (yeah, even if we are converting in the opposite way). 

What spring does under the hoods is looping over the collection and search a converter for the each element which of course may not be present.

I'm going to submit an issue to Spring but in the meantime I have this hack:

  https://github.com/lburgazzoli/apache-camel/commit/daf9c98f5d344d62cf551084dd4edb99e6509c52

Would it be acceptable ?;;;","01/Dec/16 15:08;davsclaus;Yeah that is better than an exception.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DataFormat from registry is used for every dataformat operation (marshal/unmarshal),CAMEL-10542,13023792,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,28/Nov/16 17:08,01/Feb/17 10:50,14/Jul/23 05:50,01/Feb/17 10:50,,,,,,,,,,,,,,,2.19.0,,,,camel-core,,,,,,,0,,,,,,"While working on an issue related to spring-boot I found out that if a data format is registered in camel registry with the same name as the one camel looks-up with the help of DefaultDataFormatResolver, this object is then re-configured for each data format definition so one definition may override previous configuration with an undefined behavior.

So assume you have an xml route definitions as:

{code:xml}
<routes xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""direct:unmarshal""/>
    <unmarshal>
      <csv delimiter="";"" headerDisabled=""true""/>
    </unmarshal>
  </route>
  <route>
    <from uri=""direct:marshal""/>
    <marshal>
      <csv headerDisabled=""true"" quoteDisabled=""true""/>
    </marshal>
  </route>
</routes>
{code}

And some code like:

{code:java}
InputStream is = getClass().getResourceAsStream(""..."");

SimpleRegistry reg = new SimpleRegistry();
reg.put(""csv-dataformat"", new CsvDataFormat());

DefaultCamelContext ctx = new DefaultCamelContext(reg);
ctx.addRouteDefinitions(ctx.loadRoutesDefinition(is).getRoutes());
ctx.start();

ProducerTemplate template = ctx.createProducerTemplate();
String result = template.requestBody(
    ""direct:marshal"",
    Arrays.asList(Arrays.asList( ""A1"", ""B1"", ""C1"" )),
    String.class);

assertEquals(""A1,B1,C1"", result);

ctx.stop
{code}

Then this test fails with:

{code}
Expected :A1,B1,C1
Actual   :A1;B1;C1
{code}

It fails because the object added to the SimpleRegistry is shared among the two csv dataformats  so it is configured to have delimiter = ';' 

For spring-boot this causes some issues as it registers data formats beans as part of its auto-configuration magic thus if you do not set your own instance of data format, any data format operation like marshal/unmarshal may not work as expected. 

- for spring-boot a solution would be to annotate auto configured data format beans with prototype scope.
- a more generic solution would be to make DataFormat Cloneable and clone the bean found in the registry

",,davsclaus,githubbot,lb,nferraro,,,,,,,,,,,,,,,,CAMEL-10541,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 01 10:40:59 UTC 2017,,,,,,,,,,,"0|i36urj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Nov/16 08:29;davsclaus;So if you change the name from ""csv-dataformat"" to ""foo"" then you dont have this problem?;;;","30/Nov/16 09:02;lb;Yes you don't as in such case the dataformat instance is created using ""service-loader"" style thus a new instance is created each time DefaultDataFormatResolver::resolveDataFormat is invoked. I have experimentedd with @Scope(""prototype"") and it solves the issue for Spring Boot, but I do not know what could be optimal solution that would cover all the cases and containers.;;;","01/Dec/16 11:54;davsclaus;You could argue that <marshal><csv> ... should use its own instance as there is no reference to a named data format, where as using <marshal ref=""csv-dataformat""> then you are using that shared your add to the registry.

So its maybe more in how <marshal><csv> creates the dataformat that needs to be looked at / fixed.;;;","01/Dec/16 12:22;lb;Going to have a look, thx [~davsclaus];;;","01/Dec/16 15:14;lb;Thinking a little bit more if we do so we may have other issues in spring-boot as I may want to do:

{code:java}
from(...)
  .marshal()
    .csv()
{code}

And have the csv marshal leveraging spring-boot auto configuration but if we require to use a reference, the spring-configuration magic won't happen any more, am I missing something ?
;;;","01/Dec/16 17:13;lb;Maybe a better way would be:

- if a ref is set, look it up and use it as it is
- if ref is not set, search for a DataFormatFactory instead of DataFormat
- if factory is not found go ahead with standard resolution

So that spring-boot or any other container can safely register its factory as i.e. csv-factory or csv-dataformat-factory;;;","01/Dec/16 20:01;davsclaus;By DataFormatFactory do you mean DataFormatResolver?;;;","01/Dec/16 20:37;lb;I was thinking about a real factory that can create an instance of a dataformat, like what you can achieve by annotate a method with prototype scope in spring and similar to what happen when we create an instance from a resource file except you can provide a data format with your own defaults.;;;","02/Dec/16 08:01;davsclaus;Ah okay, yeah give that a try and see how that goes.
;;;","05/Jan/17 08:27;davsclaus;Luca, did you implement this or is there more work to do here?;;;","05/Jan/17 08:45;lb;There is more work to do, I'm doing some experiment at the moment;;;","31/Jan/17 17:09;githubbot;GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/1436

    CAMEL-10542: DataFormat from registry is used for every dataformat operation (marshal/unmarshal)

    I'm opening this PR for review as there are some changes on CamelContext level so I'd like to gather some feedback.
    
    As today the DataFormat resolution works as follow:
    1. search int the registry if a DataFormat instance exists for a given name
    2. if not found in registry create a new one from the resources (META-INF/services/...)
    
    This my cause issues as per CAMEL-10542
    
    The proposed solution introduces a new DataFormatFactory and a new method to DataFormatResolver to have a way to explicit request for a new instance so it looks like:
    
    ```java
    public interface DataFormatResolver {
        // Resolve using registry then fallback to createDataFormat
        DataFormat resolveDataFormat(String name, CamelContext context);
    
        // Resolve factory using registry or fallback to resources
        DataFormat createDataFormat(String name, CamelContext context);
    } 
    ```
    
    Model's DataFormatDefinition is now using createDataFormat except for CustomDataFormat which indeed is supposed to eventually share the same data format. 
    
    I still need to implement some stuffs but the basic concept is here.
    Any feedback would be really appreciated.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-10542

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1436.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1436
    
----

----
;;;","01/Feb/17 10:40;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1436
;;;",,,,,,,,,,,,,,,,,,,
When bridging http endpoints and end users do not enable the bridgeEndpoint option they may get a NPE exception,CAMEL-10539,13023667,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fwein,fwein,28/Nov/16 09:07,29/Nov/16 15:49,14/Jul/23 05:50,29/Nov/16 15:49,2.18.0,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-http,camel-jetty,,,,,,0,,,,,,"I noticed that you get a NullPointerException when you forget the bridgeEndpoint=true option when bridging two HTTP endpoints (first endpoint is a REST Jetty endpoint, second one also uses Jetty). Maybe Camel can warn in this case that the bridgeEndpoint parameter is missing.

Simplified basic code (Java):
{noformat}
 restConfiguration().component(""jetty"").host(""0.0.0.0"").port(8080)
                .dataFormatProperty(""prettyPrint"", ""true"")
                .bindingMode(RestBindingMode.auto);

rest(""/API/"").get(""/{ID}/"").to(""jetty:http://www.google.com"");
{noformat}

HTTP Request to http://localhost:8080/API/1/ results in NullPointerException.

Stacktrace:
java.lang.NullPointerException
	at org.eclipse.jetty.client.HttpClient.send(HttpClient.java:521)
	at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:694)
	at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:678)
	at org.apache.camel.component.jetty9.JettyContentExchange9.send(JettyContentExchange9.java:228)
	at org.apache.camel.component.jetty.JettyHttpProducer.processInternal(JettyHttpProducer.java:247)
	at org.apache.camel.component.jetty.JettyHttpProducer.process(JettyHttpProducer.java:86)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.jetty.CamelContinuationServlet.doService(CamelContinuationServlet.java:191)
	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:74)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:499)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
	at java.lang.Thread.run(Thread.java:745)


This issue is probably a bit related to the already resolved CAMEL-4242.",,davsclaus,fwein,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 29 15:49:54 UTC 2016,,,,,,,,,,,"0|i36tzr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Nov/16 09:14;davsclaus;Yeah its a NPE bug in jetty client at
{code}
        String scheme = request.getScheme().toLowerCase(Locale.ENGLISH);
{code};;;","29/Nov/16 15:49;davsclaus;You now get a better error message;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to remove/add restful path to an existing endpoint,CAMEL-10537,13023538,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,anydoby,anydoby,26/Nov/16 23:18,01/Mar/17 12:20,14/Jul/23 05:50,01/Mar/17 11:54,2.18.0,,,,,,,,,,,,,,2.18.3,2.19.0,,,camel-jetty,,,,,,,0,,,,,,"I am trying to re-add a rest definition to an existing jetty restConfiguration with the following exception:

org.apache.camel.FailedToStartRouteException: Failed to start route issues because of Multiple consumers for the same endpoint is not allowed: jetty:http://localhost:8080/issues/%7Bisin%7D/%7Bsedol%7D?httpMethodRestrict=GET

This is obviously a bug since the first time I can add multiple rest routes to the same endpoint (jetty or any other). Later while trying to remove/add a route I get this error. I attach a unit test to illustrate the problem.",any,anydoby,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Nov/16 23:19;anydoby;RoutesTest.java;https://issues.apache.org/jira/secure/attachment/12840577/RoutesTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 01 12:20:41 UTC 2017,,,,,,,,,,,"0|i36t73:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Nov/16 23:19;anydoby;A unit test which reproduces the issue.;;;","26/Nov/16 23:22;anydoby;By the way, even having removed all route definitions from the context I still cannot add this one. The only solution so far is to stop/start the context itself, which is quite heavy operation to undertake assuming we have 1000s of routes in production and adding just one we have to restart the whole universe.;;;","01/Mar/17 09:57;davsclaus;This is currently not intended to be supported to remove / add rest's at runtime, however we can make it do so;;;","01/Mar/17 10:30;davsclaus;Okay found a solution to make this supported - it was a problem with rest configuration not being registered/used correctly when adding the new routes causing it to not use the existing jetty configuration and lead to duplicate issue.;;;","01/Mar/17 12:20;anydoby;This  is great news, thank you, Claus;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-stream - Producer writing to stream url need to set doOutput=true,CAMEL-10534,13023486,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Nov/16 08:49,27/Nov/16 08:30,14/Jul/23 05:50,26/Nov/16 15:26,2.18.0,,,,,,,,,,,,,,2.17.5,2.18.1,2.19.0,,camel-stream,,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/40798447/exception-in-camel-stream-component-while-streaming-url

We need to set that option if its a url that we stream to using UrlConnection.

Contributions is very much welcome to help fix this bug.
http://camel.apache.org/contributing",,davsclaus,githubbot,nikhilvibhav,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 26 15:26:34 UTC 2016,,,,,,,,,,,"0|i36svj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Nov/16 14:36;nikhilvibhav;Picking this up. ;;;","26/Nov/16 15:20;nikhilvibhav;[~davsclaus] Is there a test to update? The current {{StreamToUrlTest}} class runs fine even without setting doOutput=true.;;;","26/Nov/16 15:22;githubbot;GitHub user nikhilvibhav opened a pull request:

    https://github.com/apache/camel/pull/1315

    CAMEL-10534-Update StreamProducer to handle streaming using URLConnection

    Set `doOutput` flag to true to handle streaming using URLConnection.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nikhilvibhav/camel CAMEL-10534

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1315.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1315
    
----
commit b41b948644d1462d7f02f4f73302c1a70eaa75c6
Author: Nikhil Vibhav <nikhil92ind@gmail.com>
Date:   2016-11-26T14:39:44Z

    Update StreamProducer to handle streaming using URLConnection

----
;;;","26/Nov/16 15:25;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1315
;;;","26/Nov/16 15:26;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken link in documentation Contributing->AsciiDoc ,CAMEL-10526,13023389,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,aurelien.pupier,aurelien.pupier,25/Nov/16 12:57,25/Nov/16 15:45,14/Jul/23 05:50,25/Nov/16 15:45,,,,,,,,,,,,,,,2.19.0,,,,documentation,,,,,,,0,,,,,,on page http://camel.apache.org/asciidoc.html there is a link to https://github.com/apache/camel/blob/master/components/camel-ahc/src/main/docs/ahc.adoc which is a file which doesn't exist,,aurelien.pupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 25 13:42:35 UTC 2016,,,,,,,,,,,"0|i36s9z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Nov/16 12:58;davsclaus;A JIRA ticket is not needed for trivial changes.;;;","25/Nov/16 13:42;aurelien.pupier;not needed unless I don't know where this should be fixed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Components not created because of unsatisfied conditions,CAMEL-10524,13023378,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,nferraro,nferraro,nferraro,25/Nov/16 12:02,28/Nov/16 09:52,14/Jul/23 05:50,28/Nov/16 09:52,2.19.0,,,,,,,,,,,,,,2.19.0,,,,camel-spring-boot,,,,,,,0,,,,,,"Probably after CAMEL-10412, component beans are not created automatically so property-based configuration and other features are disabled.

Running 'mvn spring-boot:run -Ddebug=true' on camel-spring-boot-example I see the following log among the others:
{code}
...
TimerComponentAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.apache.camel.springboot.CamelAutoConfiguration; SearchStrategy: all) did not find any beans (OnBeanCondition)
...
{code}
",,davsclaus,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 28 09:52:49 UTC 2016,,,,,,,,,,,"0|i36s7j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Nov/16 12:55;davsclaus;Ah sorry yeah we need to get this sorted, well spotted.;;;","28/Nov/16 09:52;nferraro;Sorting was not working... Until I figured out that there was a typo in the package name ;);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lumberjack protocol v1 acknowlegment is not correcty implemented,CAMEL-10520,13022966,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xfournet,xfournet,23/Nov/16 18:24,23/Nov/16 19:26,14/Jul/23 05:50,23/Nov/16 19:26,,,,,,,,,,,,,,,2.18.1,2.19.0,,,,,,,,,,0,,,,,,"The way the message are acknowledged are different with Lumberjack protocol v1 and protocol v2. Currently the implemented mecanism match the v2 protocol, and for v1 protocol the message stream is blocked after two windows are sent.",,davsclaus,githubbot,xfournet,,,,,,,,,,,,,,,,,,,,,CAMEL-10133,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 23 19:26:11 UTC 2016,,,,,,,,,,,"0|i36pnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Nov/16 18:56;githubbot;GitHub user xfournet opened a pull request:

    https://github.com/apache/camel/pull/1303

    CAMEL-10520 fix the acknowledgment mechanism for lumberjack protocol v1

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xfournet/camel CAMEL-10520

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1303.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1303
    
----
commit f907d03658ddc0080e48e05bb90085adf6bc587c
Author: xfournet <xavier.fournet@gmail.com>
Date:   2016-11-23T18:53:12Z

    CAMEL-10520 fix the acknowledgment mechanism for lumberjack protocol v1

----
;;;","23/Nov/16 19:10;githubbot;GitHub user xfournet opened a pull request:

    https://github.com/apache/camel/pull/1304

    CAMEL-10520 fix the acknowledgment mechanism for lumberjack protocol v1

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xfournet/camel CAMEL-10520_2.8.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1304.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1304
    
----
commit 6145dcd25c247606c675efd54e71ecaa939a5772
Author: xfournet <xavier.fournet@gmail.com>
Date:   2016-11-23T18:53:12Z

    CAMEL-10520 fix the acknowledgment mechanism for lumberjack protocol v1

----
;;;","23/Nov/16 19:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1303
;;;","23/Nov/16 19:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1304
;;;","23/Nov/16 19:26;davsclaus;Thanks for the PRs;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Kubernetes: Copy headers from in to out in producer operations,CAMEL-10514,13022779,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,23/Nov/16 08:23,25/Nov/16 07:00,14/Jul/23 05:50,25/Nov/16 07:00,,,,,,,,,,,,,,,2.19.0,,,,camel-kubernetes,,,,,,,0,,,,,,"Like Camel-Git, Camel-Kubernetes was developed with the idea of single operation. Maybe it would be good to copy the headers from in to out for operations chains on the Cluster.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-11-23 08:23:36.0,,,,,,,,,,,"0|i36oif:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MllpTcpClientProducer should read all available bytes in TCP buffer for acknowledgment,CAMEL-10511,13022528,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,22/Nov/16 15:52,16/Dec/16 21:59,14/Jul/23 05:50,16/Dec/16 21:59,2.17.0,,,,,,,,,,,,,,2.17.5,2.18.2,2.19.0,,camel-mllp,,,,,,,0,,,,,,"The MllpClientProducer currently reads the TCP buffer until it receives the proper closing frame characters for the MLLP envelope.  

This turned out to be a problem with a certain MLLP Server, which under certain circumstances would send double MLLP acknowledgments.  As currently written, the MllpClientProducer will use the old/double/second acknowledgment for the next message - which may cause erroneous results, but in any case is clearly wrong.",,davsclaus,githubbot,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 16 21:59:28 UTC 2016,,,,,,,,,,,"0|i36myn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Dec/16 18:12;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1351

    CAMEL-10511:  Updated MllpTcpClientProducer and MllpTcpServerConsumer…

    … to consume all available data on socket
    
    This turned out to be a pretty major refactor.  I also found and corrected numerous issues with corner cases in the TCP error handling.
    
    The test suite is much more complete now as well

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10511

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1351.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1351
    
----
commit 340847a0bb152239cb44925793d93ff8d00d784b
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-12-06T19:23:03Z

    CAMEL-10511:  Updated MllpTcpClientProducer and MllpTcpServerConsumer to consume all available data on socket

----
;;;","15/Dec/16 19:22;davsclaus;merged to master branch. Its a big change so not sure if we want to backport. And if so can you do PRs for those branches against them as there may be merge conflicts when its a big PR to backport.;;;","15/Dec/16 19:26;hqstevenson;I would like to get this back-ported to 2.17, but I've never done a PR for anything but master.  Do I just checkout the camel-2.17.x branch and do it from there following the same process?;;;","15/Dec/16 19:27;githubbot;Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1351
;;;","15/Dec/16 19:35;davsclaus;Okay then we need for 2.18.x also. Yeah you just switch branch

First checkout the branch which you need to do once
git co -b camel-2.18.x origin/camel-2.18.x

git co camel-2.18.x

create new branch because you want to do a PR to ASF Camel

git branch some-name
git co some-name

And then cherry pick the master commit using its sha

git cherry-pick 91121843801aed6411b7c91da3b1e502e2d35009

And fix any merge conflicts or whatever its there

git status

shows a status, and you can then use

git cherry-pick --continue

And then its the usual git push some-name to push it to github for a new PR

And then do the same again for 2.17.x. However you can pick the commit from the 2.18.x branch;;;","15/Dec/16 19:35;davsclaus;I do use a little tool however which makes this easier, called gitx. But there are others for cherry picking commits. But the command line is also what I use for the final work to commit / push etc. And only use the tool for picking the right commits for cherry pick etc.;;;","15/Dec/16 22:34;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1352

    CAMEL-10511: Backport to 2.18

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10511-2.18

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1352.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1352
    
----
commit 2f5fab9c4f725505cee9b12de98cf46640924ce6
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-03T13:58:29Z

    [maven-release-plugin] prepare release camel-2.18.0

commit 54a02453f4611b47daea7f270623f2d4e974750d
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-03T13:59:42Z

    [maven-release-plugin] prepare for next development iteration

commit 244eb03876bb4e7d95b04b4f4ae48322e47e3bb4
Author: Franz Forsthofer <franz.forsthofer@sap.com>
Date:   2016-10-04T11:59:42Z

    CAMEL-10368: Unused deflater in ZipDataFormat

commit da8694f8c5392881ac5ab49c37a7947451bb65af
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-04T22:28:22Z

    [maven-release-plugin] prepare release camel-2.18.0

commit e6d985d2f997b40711073e011849dc8498c225d7
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-04T22:28:59Z

    [maven-release-plugin] prepare for next development iteration

commit 1df40f5f5097eca6c208cdef24be9a75dbcb2510
Author: Stephan Siano <stephan.siano@sap.com>
Date:   2016-10-04T14:25:20Z

    CAMEL-10370: Conversion to CxfPayload throws Exception for Non-XML payload

commit ea4b27fbe1ff44d546c018c1436cab701a8705cf
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-10-06T09:11:59Z

    CAMEL-10358: do not clear the registry too early

commit ef88e60af5dab348c779216b008c5dfe7730cc06
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T15:49:18Z

    CAMEL-10366: Include input/output/deprecated in the spring model json schema files so they are similar to EIP model files. Thanks to Aurelien Pupier for reporting this.

commit 63439e174e2fbc7b89994e5df3a3723b02c55c58
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T15:53:41Z

    Fixed syntax on endpoint for component docs in camel-chronicele

commit f374df8d6704d2f121db92d0814531e2ad979205
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T16:11:32Z

    Fixed camel-chronoicle component docs and schema

commit 17c3407fef17f29aeaef0f578e1fc6ca3427fa9c
Author: Robert Gemmell <robbie@apache.org>
Date:   2016-10-04T11:20:28Z

    CAMEL-10367: remove stale dependency and version prop, fix a couple typos

commit 3bc4cf5a6e146da6df5233a5ca8eb32f1e180a64
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:47:35Z

    added the missing license and notice file to the camel-cm-sms component

commit f3eff6d82dcf670187ed7ddc4cb07e917b35dd41
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:54:38Z

    added the missing license and notice file to the camel-servicenow component

commit 6081e236162a4d908b412080e608407361bc544c
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:57:37Z

    added the missing license and notice file to the camel-telegram component

commit 461d4dd69ce2591487df6db1d27416558ae53c83
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-07T13:40:30Z

    CAMEL-10372: Fixed camel-stream component doc

commit 20cf933edde90b48ee371cf89aaacb2833ad8a8b
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-09T20:15:46Z

    Update schema files with release 2.18.0 references
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit ac002c88d28faec0b59d52a8b2427c23f1540a5a
Author: Michael Lück <michael.lueck@hm-ag.de>
Date:   2016-10-04T09:18:04Z

    added method to check for key existence

commit 201aeb22f7a8eea16690028f2b0969a452ca6bec
Author: Michael Lück <michael.lueck@hm-ag.de>
Date:   2016-10-05T13:22:51Z

    added null check before trying to call containsKey (prevent NPE)

commit 9916ee431192e1215a87900b5c5c622822d2e98c
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-10-11T07:54:45Z

    Fixed CS

commit f655c94110ae14a3db5b2ce6409684deaa619846
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-09-29T17:25:18Z

    CAMEL-10357: camel-servicenow: add per release model

commit fa1789a36ea81cc03394e2e8806d8d4e8d2197a2
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-10-10T16:39:44Z

    CAMEL-10378: Upgrade log4j2 to v2.7

commit 37a12df6a3d6780495b249b959a25966b62afb69
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T19:09:15Z

    CAMEL-10381 - fix NPE from component configuration

commit 7a1ee6bedc1c3572e7abdb0262f08d3435e5d293
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T21:55:12Z

    remove non spring boot compatible starters

commit 645d024b442bb130eaebbff41a494ac313bc6868
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T22:17:27Z

    CAMEL-10381 - fix NPE from component configuration

commit fbcaded8349754e574d6900dca863bbdec71b6c9
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T22:17:58Z

    add missed test case

commit 6d663971259650b626303ca30e77004abcdd3b0a
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:02:37Z

    CAMEL-10381 - fix NPE from calendar component configuration

commit 8de429e1236f1f2fb24098a924eb651ede85adc8
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:06:18Z

    fix test error

commit b15c2f5d62eb0285c5d48b9e9199e48abce365aa
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:07:48Z

    fix CS

commit 8965cad85337014340b2eb9a44db386d40669c30
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-10-11T15:42:34Z

    CAMEL-10379: Improved component description

commit 467ded8f388e85df728927d0b0c3f7fb87fb89d4
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-10-12T08:22:15Z

    Minor improvements to camel-zipkin docs

----
;;;","15/Dec/16 22:35;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1353

    CAMEL-10511: Backport to 2.17

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10511-2.17

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1353.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1353
    
----
commit ab702664950b024ba421a0c7f75f30a302a227fc
Author: Kris Boutilier <kris.boutilier@gmail.com>
Date:   2016-06-06T23:56:42Z

    Consider sortBy header when performing findOneByQuery operation

commit 15f7fa75665a01e58fdd9e5071cda27d81ef0882
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-06-08T13:00:41Z

    CAMEL-10016: Fix syntax for crypto component. This closes #1010

commit 8e1044f3f37d831c0a793054d3a818e9d606b672
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-06-09T12:48:10Z

    CAMEL-10035: Upgrade braintree sdk to v2.63.0

commit 16eb380b61cdd54ddb07d57a857a9154409a4c53
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-06-09T12:38:43Z

    CAMEL-10032: camel-braintree - Cannot install in Karaf

commit 368cb746a3467c5ea51030ce5affb76f9d079667
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2016-06-10T06:20:28Z

    CAMEL-10039: Fixed callback url parsing in LinkedIn and Box Components

commit 4bab34ec06fb8a8508471d3bb756b6e72639db95
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-06-10T06:55:15Z

    CAMEL-10036: Add api on rest-dsl to transform as routes using a specific rest configuration. Thanks to Jay mann for the patch.

commit 6c63eb100439199eb27a1c6cdec7df6a4de67f9e
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-06-10T12:52:57Z

    CAMEL-10043: Camel-Jaxb: objectFactory is never checked. This leads to performance degradation.

commit b230af99f39c509278a9dd810e309ad6d7f3c3c8
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-06-10T13:04:28Z

    Fixed CS

commit c70838bb0538dc240478b0841fff19b6e6e31265
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-06-10T13:17:03Z

    CAMEL-10043: Camel-Jaxb: objectFactory is never checked. This leads to performance degradation. Default ObjectFactory values set to false on DataFormat too.

commit a4c031b0fdb38898f61c10dd66cadaf68292d200
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-06-10T11:59:56Z

    Mina2BodyPatch

commit 2207aafb6326c80305cb4c835e721d20136b48cb
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-06-12T08:47:09Z

    CAMEL-10049: Context scoped processors should be shutdown when CamelContext is shutting down

commit be70180be39c6f921f3e7b544c5e535b857667be
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-06-12T09:08:03Z

    CAMEL-10048: Fixed memory leak in routing slip. Thanks to Arseniy Tashoyan for the patch.

commit 900cf6947a2142fb7d0b4fa31931da0704744228
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-06-12T09:39:46Z

    CAMEL-10048: Fixed memory leak in routing slip. Thanks to Arseniy Tashoyan for the patch.

commit df2a31a4b1f45efd989bbf23bad581039e34d815
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-06-12T12:22:54Z

    CAMEL-10048: Fixed memory leak in routing slip. Thanks to Arseniy Tashoyan for the patch.

commit eed88d16f57f351a54c4832c68ecb9d1ece21428
Author: grigoriadis <grigoriadis@itsaur.com>
Date:   2016-06-12T12:48:41Z

    CAMEL-10051 - Fixed issue with reuse channel.

commit cf939a6927dd28882046a03fb32c5b45e5ff2054
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-06-12T14:30:24Z

    Fixed CS. This closes #1026

commit 2450bcad58d44b1e083447a1e8eb4c2248aa6cc0
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-06-12T15:27:38Z

    Fixed CS

commit d8726e79385441ef950493654301bbefda693e02
Author: Sune Keller <absukl@almbrand.dk>
Date:   2016-01-31T12:16:44Z

    Prefix picklist enum names with owning SObjectDescription name
    
    Signed-off-by: Sune Keller <absukl@almbrand.dk>

commit 80809179f592ae1a24679a5c343ddc94ea23b59f
Author: Sune Keller <absukl@almbrand.dk>
Date:   2016-02-15T13:49:21Z

    Add option to use String fields for picklists instead of enums
    
    Signed-off-by: Sune Keller <absukl@almbrand.dk>

commit f9641ffcbc1316749e30e58e1409257784f2a0b5
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-06-14T08:25:22Z

    Improved Camel-jaxb ObjectFactory property test

commit 226da678c016edf936d73d39bdcf4e8c0dc161c8
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-06-14T08:31:54Z

    Fixed CS

commit 578b8b8ba44cf65f6354c99335be3ad705b902e8
Author: Sune Keller <absukl@almbrand.dk>
Date:   2016-06-14T10:32:15Z

    Fix multi select picklist fields
    
    Signed-off-by: Sune Keller <absukl@almbrand.dk>

commit f040ca52feebed20cb42f0184f6cfbaa46046947
Author: Miloš Milivojević <fingolfintek@gmail.com>
Date:   2016-06-14T10:58:33Z

    Added option for path-style access to S3; useful when testing or for other S3 REST API providers (such as OpenStack Swift)
    (cherry picked from commit a96d401)

commit 763e448a58f48471b731329caa8d03b98c1e0b31
Author: Miloš Milivojević <fingolfintek@gmail.com>
Date:   2016-06-14T11:10:44Z

    Added option for path-style access to S3; fixed CheckStyle

commit fd6c6c0814df1076598dd92999aa98abf06701d5
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-06-14T12:34:44Z

    Update AWS component docs

commit 86cfd9df94f61abc7effef4800603fdaef2c9294
Author: Freeman Fang <freeman.fang@gmail.com>
Date:   2016-06-15T08:21:30Z

    [CAMEL-10058]when cxf producer use MESSAGE DataFormat, it shouldn't also configure as messageType=text
    
    (cherry picked from commit 9f73fb218e436e8fe1171c61b766f81ea6649946)
    
    Conflicts:
    	components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java

commit b7eed97f16842e4ef4816bd921793c070061e058
Author: Daniel Kulp <dkulp@apache.org>
Date:   2016-06-16T17:09:04Z

    [CAMEL-10065] Update camel-kafka to support Iterable and Iterator

commit c4236142c8c4e8778343a73db9331e34569a69a5
Author: Daniel Kulp <dkulp@apache.org>
Date:   2016-06-16T17:23:37Z

    [CAMEL-10065] Add a test case

commit 5f69d6267c43b860589ac82fe70df05c476034b7
Author: Colm O hEigeartaigh <coheigea@apache.org>
Date:   2016-06-17T12:01:06Z

    Updating Santuario

commit a2665ae8b6bdd2eb1560c4a08fff081839b474a4
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-06-17T12:32:24Z

    Camel-Kafka: Camel 2.17.x is still Java 7 so we need to implement the method remove in our Iterator of ProducerRecord Objects

----
;;;","16/Dec/16 08:09;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1353
;;;","16/Dec/16 08:09;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1352
;;;","16/Dec/16 08:11;davsclaus;The 2 PRs are invalid and I have closed them.

I managed to backport to 2.18.x myself. But for 2.17.x there are others changes missing et all which is a bigger thing to backport, which is harder to do. There could be other commits to camel-mllp done on 2.18.x onwards which has not been backported prior which causes a bigger gap.;;;","16/Dec/16 08:23;davsclaus;When switching to 2.18.x or 2.17.x branches, you need to pull in latest changes. If you build from your fork of github, you need to rebase from remote upstream.

http://stackoverflow.com/questions/7929369/how-to-rebase-local-branch-with-remote-master;;;","16/Dec/16 08:23;davsclaus;The 2 PRs had a lot of other commits which it should not have, it should only be the commits with the changes for camel-mllp;;;","16/Dec/16 16:05;hqstevenson;Sorry about all the hassle Claus.  I should've noticed all the extra commits when I created the PR - I apologize.  Looks like I didn't do very well with my first attempt at creating a PR for something other than the master branch.

Thank you for completing the backport to 2.18.  I'll give the backport to 2.17 another shot.;;;","16/Dec/16 20:44;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1356

    CAMEL-10511: Backport to 2.17

    Updated MllpTcpClientProducer and MllpTcpServerConsumer to consume all available data on socket

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10511-2.17

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1356.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1356
    
----
commit a53540da1e5b7550355c68dc9e98c5e6e77c109a
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-12-16T20:41:12Z

    CAMEL-10511:  Updated MllpTcpClientProducer and MllpTcpServerConsumer to consume all available data on socket - backport to 2.17

----
;;;","16/Dec/16 21:59;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1356
;;;",,,,,,,,,,,,,,,,
HL7AcknowledgementGenerator should set exchange property and not message header,CAMEL-10510,13022525,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hqstevenson,hqstevenson,hqstevenson,22/Nov/16 15:47,22/Nov/16 19:59,14/Jul/23 05:50,22/Nov/16 19:57,2.17.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-mllp,,,,,,,0,,,,,,"The HL7AcknowledgmentGenerator is setting the CamelMllpAcknowledgement message header, but this should be an exchange property.

This is ""hangover"" from when this class was an internal/implementation class.  Since I moved it and made it generally available for use, it should be setting the exchange property so that the acknowledgement will be delivered.

As currently written, the user will have to copy the message header to the exchange property for it to be used.  If this isn't done, the component will generate a new acknowledgement.",,davsclaus,githubbot,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 22 19:59:34 UTC 2016,,,,,,,,,,,"0|i36mxz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Nov/16 15:57;hqstevenson;This component also drops extra delimiters if they are present in the message.  Even though a message containing more than 4 delimiters is clearly not compliant with the HL7 standard, the component shouldn't alter the message - the delimiters should be passed through on the generated acknowledgement.;;;","22/Nov/16 19:05;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1296

    CAMEL-10510: Change HL7AcknowledgementGenerator to set CamelMllpAckno…

    …wledgement exchange property instead of message header

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10510

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1296.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1296
    
----
commit 8b399ce5f2096e081798466eb11152cd07d1786b
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-11-22T19:04:04Z

    CAMEL-10510: Change HL7AcknowledgementGenerator to set CamelMllpAcknowledgement exchange property instead of message header

----
;;;","22/Nov/16 19:57;davsclaus;Thanks for the PR;;;","22/Nov/16 19:59;githubbot;Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1296
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""FILE"" component with option ""readLock=rename"" throws FileNotFound exception in case of work file is locked/used by another application",CAMEL-10505,13022428,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,apoltavtsev,apoltavtsev,22/Nov/16 08:34,23/Nov/16 13:12,14/Jul/23 05:50,22/Nov/16 19:44,2.17.3,,,,,,,,,,,,,,2.16.5,2.17.4,2.18.1,2.19.0,camel-core,,,,,,,0,,,,,,"Option ""readLock=rename"" (according to htttp://camel.apache.org/file2.html) is necessary to lock work file in case of it is not used by another application. But currently we see ""FileNotFound"" during test rename operation and ""FILE"" component tries to lock and process corresponding work file.


This issue can be resolved by wrapping of corresponding rename operation by try-catch block. See diff.txt for ""camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameExclusiveReadLockStrategy.java"" in attachment which shows way to correct current issue.

[Similar issue|http://stackoverflow.com/questions/40040023/cannot-rename-file-warning-while-using-idempotent-readlock-in-camel] is applicable for previous Camel version also.  

",Windows 7 / Java 8.,apoltavtsev,cschneider,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Nov/16 10:16;apoltavtsev;camel-core.patch;https://issues.apache.org/jira/secure/attachment/12839989/camel-core.patch","22/Nov/16 08:45;apoltavtsev;diff.txt;https://issues.apache.org/jira/secure/attachment/12839968/diff.txt",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 23 13:12:10 UTC 2016,,,,,,,,,,,"0|i36mcf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Nov/16 08:39;davsclaus;Can you do a PR or patch file for this?
http://camel.apache.org/contributing

PR on github is often the easiest. You can do this on the master branch and we will merge to older branches.;;;","22/Nov/16 08:47;apoltavtsev;Yes, will provide patch soon;;;","22/Nov/16 09:07;apoltavtsev;[^camel-core.patch] is attached;;;","22/Nov/16 09:54;apoltavtsev;Sorry, I did not follow instructions for PATH and see some formatting issue during compilation. I will do PR a bit later.;;;","22/Nov/16 16:43;githubbot;GitHub user apoltavtsev opened a pull request:

    https://github.com/apache/camel/pull/1295

    [CAMEL-10505] FILE component - resolved FileNotFountException in Gene…

    …ric File Rename Exclusive Read Lock Strategy in case of work file is locked by another application

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apoltavtsev/camel CAMEL-10505

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1295.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1295
    
----
commit cdc6dd0ad06d6ceb1ce3704f43937bbb4765c7dd
Author: apoltavtsev@gmail.com <apoltavtsev@gmail.com>
Date:   2016-11-22T12:39:11Z

    [CAMEL-10505] FILE component - resolved FileNotFountException in Generic File Rename Exclusive Read Lock Strategy in case of work file is locked by another application

----
;;;","22/Nov/16 19:22;davsclaus;Thanks for the PR - testing it now;;;","22/Nov/16 19:44;davsclaus;Thanks for the PR;;;","23/Nov/16 12:21;githubbot;Github user apoltavtsev closed the pull request at:

    https://github.com/apache/camel/pull/1295
;;;","23/Nov/16 13:12;cschneider;Just added a backport to 2.16.x as we still have products based on this.
;;;",,,,,,,,,,,,,,,,,,,,,,,
Hiding an underlying exception if MongoDbBasicConverters fails to convert to DBObject,CAMEL-10504,13022205,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,elomonos,elomonos,21/Nov/16 14:40,17/May/17 15:46,14/Jul/23 05:50,25/Nov/16 07:02,2.17.3,2.18.0,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-mongodb,,,,,,,0,,,,,,"If conversion fails it could be hard to understand what is a problem because it returns just a message ""Conversion has fallen back to generic Object -> DBObject, but unable to convert type {}. Returning null"" that points to a class that was not converted.

In case of, as example, if a list of objects that should be converted leads to a memory error because of parent-child link are cycled for 2 objects, it would take a lot of efforts to understand what is going on. And information about underlying exception, stackoverflow in this case, could help to find the root cause much faster than now.",,acosentino,damien_b,davsclaus,elomonos,evgeniy.lomonosov@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 17 15:46:07 UTC 2017,,,,,,,,,,,"0|i36kyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Nov/16 14:41;elomonos;MongoDbBasicConverters.fromAnyObjectToDBObject(Object value) - this method logs a message that, in my opinion, should consist an information about underlying exception.;;;","21/Nov/16 14:46;acosentino;Can you make some tests with camel-2.18.0 too? Thanks. Just to understand if something has changed (I think the answer is no).;;;","23/Nov/16 13:55;evgeniy.lomonosov@gmail.com;I'm not sure how to test it, its not about logic, its about informing about exception to logs, so I think its not possible to write a unit test. Just checked 2.18 - MongoDbBasicConverters.fromAnyObjectToDBObject(Object value) in 2.18 is the same, underlying exception is still hidden.;;;","24/Nov/16 16:29;davsclaus;I think this PR is about this
https://github.com/apache/camel/pull/1309;;;","25/Nov/16 07:02;acosentino;Commit:

https://github.com/apache/camel/commit/600abd802047f35cdca4b95c0f1aaf511f56da82

https://github.com/apache/camel/commit/99f70acc726db3836dfcc8b03fb8f4e3d30aca86;;;","17/May/17 09:42;damien_b;Unfortunately it leads to another issue: when you want to use multiple inserts, the fromAnyObjectToDBObject always fail and the logs are polluted with:
{code}
WARN  Conversion has fallen back to generic Object -> DBObject, but unable to convert type org.apache.camel.impl.DefaultMessage. Returning null. java.lang.IllegalArgumentException: Infinite recursion (StackOverflowError) (through reference chain: org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]->org.apache.camel.component.seda.SedaEndpoint[""camelContext""]->org.apache.camel.impl.DefaultCamelContext[""endpoints""]->java.util.ArrayList[0]
{code}

Context:
{code:xml}
<to id=""save_in_mongo""
        uri=""mongodb:mongoClient?database={{mongodb.database}}&amp;collection={{coll}}&amp;writeResultAsHeader=true&amp;operation=insert"" />
{code}

Body content:
a java.util.List of objects that can be converted to DBObject.

Culprit:
MongoDbProducer::createDoInsert
{code:java}
            boolean singleInsert = true;
            Object insert = exchange1.getIn().getBody(DBObject.class);
            // body could not be converted to DBObject, check to see if it's of type List<DBObject>
            if (insert == null) {
                insert = exchange1.getIn().getBody(List.class);
                // if the body of type List was obtained, ensure that all items are of type DBObject and cast the List to List<DBObject>
                if (insert != null) {
                    singleInsert = false;
                    insert = attemptConvertToList((List) insert, exchange1);
                } else {
                    throw new CamelMongoDbException(""MongoDB operation = insert, Body is not conversible to type DBObject nor List<DBObject>"");
                }
            }
{code}

to check if this a singleInsert, the conversion is attempted on the body (the list, it fails) then on the whole message (because of DefaultMessage::getBody). And then we see the cycles between DefaultCamelContext and the Endpoints.

But of course the real problem is that we have a systematic stackoverflow when trying to use multiple insert on the component, we see it only now because of this fix :-)
;;;","17/May/17 09:51;acosentino;Are you able to work on PR? Thanks!;;;","17/May/17 14:38;damien_b;Working on it. We can see the same behavior in the current (slightly modified) tests:
{code:java}
    @Test
    public void testMultiInsertStringFromListNoHeader() throws Exception {
        assertEquals(0, testCollection.count());
        Object result = template.requestBody(""direct:insert"", 
                Collections.newArrayList(""{\""_id\"":\""testInsertString\"", \""scientist\"":\""Einstein\""}"",
                        ""{\""_id\"":\""testInsertString2\"", \""scientist\"":\""Einstein Too\""}""));
        assertTrue(result instanceof List);
        DBObject b = testCollection.find(new BasicDBObject(""_id"", ""testInsertString"")).first();
        assertNotNull(""No record with 'testInsertString' _id"", b);
        b = testCollection.find(new BasicDBObject(""_id"", ""testInsertString2"")).first();
        assertNotNull(""No record with 'testInsertString' _id"", b);
    }
{code}

{code}
2017-05-17 16:31:21,310 [main           ] WARN  MongoDbBasicConverters         - Conversion has fallen back to generic Object -> DBObject, but unable to convert type java.util.ArrayList. Returning null. java.lang.IllegalArgumentException: Can not deserialize instance of java.util.LinkedHashMap out of START_ARRAY token
 at [Source: N/A; line: -1, column: -1]
2017-05-17 16:34:13,380 [main           ] WARN  MongoDbBasicConverters         - Conversion has fallen back to generic Object -> DBObject, but unable to convert type org.apache.camel.impl.DefaultMessage. Returning null. java.lang.IllegalArgumentException: (was java.lang.NullPointerException) (through reference chain: org.apache.camel.impl.DefaultMessage[""exchange""]->org.apache.camel.impl.DefaultExchange[""context""]->org.apache.camel.spring.SpringCamelContext[""managementNameStrategy""]->org.apache.camel.impl.DefaultManagementNameStrategy[""name""])
{code}

Is there a way with the current structure of testing to check if those logs happen (I don't really want to parse camel-mongodb-test.log)?
;;;","17/May/17 15:46;damien_b;PR posted https://github.com/apache/camel/pull/1701;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-sql - error in multiple dynamic IN replacement,CAMEL-10499,13022083,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,igarashitm,igarashitm,igarashitm,21/Nov/16 03:55,27/Jan/17 13:06,14/Jul/23 05:50,21/Nov/16 11:36,2.18.0,,,,,,,,,,,,,,2.17.6,2.18.1,2.19.0,,camel-sql,,,,,,,0,,,,,,"Having this sql
{code:sql}
select *
from projects
where project in (:#in:names)
and license in (:#in:licenses)
order by id
{code}

and send as following
{code:java}
Map<String, Object> headers = new HashMap<>();
headers.put(""names"", new String[]{""Camel"", ""AMQ""});
headers.put(""licenses"", new String[]{""ASF"", ""XXX"", ""YYY""});
template.requestBodyAndHeaders(""direct:query"", ""Hi there!"", headers);
{code}

causes parameter mismatch
{code}
Caused by: java.sql.SQLException: Number of parameters mismatch. Expected: 4, was: 5
        at org.apache.camel.component.sql.DefaultSqlPrepareStatementStrategy.populateStatement(DefaultSqlPrepareStatementStrategy.java:152) ~[classes/:?]
        at org.apache.camel.component.sql.SqlProducer$2.doInPreparedStatement(SqlProducer.java:146) ~[classes/:?]
        at org.apache.camel.component.sql.SqlProducer$2.doInPreparedStatement(SqlProducer.java:116) ~[classes/:?]
        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:633) ~[spring-jdbc-4.3.4.RELEASE.jar:4.3.4.RELEASE]
        ... 51 more
{code}",,davsclaus,githubbot,igarashitm,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 27 13:06:27 UTC 2017,,,,,,,,,,,"0|i36k7r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Nov/16 11:09;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1283

    CAMEL-10499 camel-sql - error in multiple dynamic IN replacement

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10499

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1283.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1283
    
----
commit 21ce76b402117ea5e0fb621d1f95fb5e3d88a756
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-11-21T10:56:19Z

    CAMEL-10499 camel-sql - error in multiple dynamic IN replacement

----
;;;","21/Nov/16 11:36;davsclaus;Thanks;;;","21/Nov/16 11:38;githubbot;Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1283
;;;","27/Jan/17 10:30;pascalschumacher;I would be very nice if this bugfix was backported to 2.17.x (we are still stuck on java 7, so we can not update to camel versions above 2.17 yet).;;;","27/Jan/17 13:06;davsclaus;Good idea, just backported;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce: EndpointConfiguration not taken into account by SubscriptionHelper,CAMEL-10495,13021736,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,zregvart,lb,lb,18/Nov/16 11:01,23/Mar/17 12:13,14/Jul/23 05:50,23/Mar/17 12:13,,,,,,,,,,,,,,,2.19.0,,,,camel-salesforce,,,,,,,0,,,,,,"In SubscriptionHelper all the configuration options hare retrieved using component's configuration but that may be different from endpoint configuration, as example in SubscriptionHelper.createClient :

{code:java}
Map<String, Integer> replayIdMap = component.getConfig().getInitialReplayIdMap();
if (replayIdMap != null) {
        replayId = replayIdMap.get(channelName);
}
if (replayId == null) {
        replayId = component.getConfig().getDefaultReplayId();
}
{code}

The main issue is that the component uses the same configuration as the endpoint so one would expect to be able to set any option available in SalesforceEndpointConfig i.e. on the uri but that won't work:

{code:java}
  from(""salesforce:my-stream-1?defaultReplayId=-1"")
    .to(""..."")
  from(""salesforce:my-stream-2?defaultReplayId=-2"")
    .to(""..."")
{code}

It would be nice to remove ""global"" options from SalesforceEndpointConfig as they are misleading or always use the configuration from the endpoint. ",,davsclaus,lb,zregvart,,,,,,,,,,,,,,,,,,,,,CAMEL-10849,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 23 12:13:40 UTC 2017,,,,,,,,,,,"0|i36i2n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Nov/16 09:22;davsclaus;Yeah it should be like other components where endpoint options override any component configured values.;;;","22/Nov/16 09:22;davsclaus;[~zregvart] I wonder if you would take a look at this also, as you are deep in the salesforce code.;;;","23/Mar/17 12:13;zregvart;This was fixed in CAMEL-10849.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel Servlet, attachment object is empty",CAMEL-10492,13021507,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fabryprog,fabryprog,17/Nov/16 16:52,29/Nov/16 08:59,14/Jul/23 05:50,29/Nov/16 08:59,2.18.0,,,,,,,,,,,,,,2.19.0,,,,camel-http-common,camel-servlet,,,,,,0,,,,,,"I send a multipart form data to my camel servlet, before camel 2.18 attachment object is ok now is empty!

Now i have an *header* every form field but every field is java.lang.String

So, I can not post any binary file.

This is my web.xml filter

{code:xml}
	<filter>
		<filter-name>MultipartFilter</filter-name>
		<filter-class>org.eclipse.jetty.servlets.MultiPartFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>MultipartFilter</filter-name>
		<servlet-name>CamelServlet</servlet-name>
	</filter-mapping>
{code}

Into zip file, you can found an example.",,davsclaus,fabryprog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Nov/16 16:53;fabryprog;camel-example-servlet-attachment.zip;https://issues.apache.org/jira/secure/attachment/12839394/camel-example-servlet-attachment.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 29 08:43:01 UTC 2016,,,,,,,,,,,"0|i36gnr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Nov/16 09:35;fabryprog;i am reading camel source code.

Into camel 2.18 the attribute atttachmentMultipartBinding is never set

(look at https://github.com/apache/camel/search?utf8=%E2%9C%93&q=setAttachmentMultipartBinding)

{code:java}
    /**
     * Whether to automatic bind multipart/form-data as attachments on the Camel {@link Exchange}.
     * <p/>
     * This is turn off by default as this may require servet specific configuration to enable this when using Servlet's.
     */
public void setAttachmentMultipartBinding(boolean attachmentMultipartBinding) {
        this.attachmentMultipartBinding = attachmentMultipartBinding;
    }
{code}

so this check is always false:

{code:java}
public class ServletEndpoint extends HttpCommonEndpoint {
.....
.....
public HttpBinding getHttpBinding() {
        // make sure we include servlet variant of the http binding
        if (this.binding == null) {
            // is attachment binding enabled?
            if (getComponent().isAttachmentMultipartBinding()) {
                this.binding = new AttachmentHttpBinding();
            } else {
                this.binding = new DefaultHttpBinding();
            }
          ....... 
          .......
        }
        return this.binding;
    }
{code};;;","21/Nov/16 09:49;davsclaus;You need to turn set that = true on the servlet component.

Add a bean configuration in your xml file

<bean id=""servlet="" class=.."">
  <property name=""attachmentMultipartBinding"" value=""true""/>
</bean>
;;;","21/Nov/16 09:56;davsclaus;I made it possible to configure this on endpoint in next release.;;;","21/Nov/16 13:21;fabryprog;[~davsclaus] This bug is more complex than it looks. When i set attachmentMultipartBinding property i have another error.

It isn't a jetty bug (i had test it with junit) but it, i suppose, is a camel body trasformation bug. I do not know so thoroughly to understand it. Can you help me?

You can use my zip attach file to debug it!

Stacktrace

{code}
org.apache.camel.RuntimeCamelException: Cannot populate attachments
	at org.apache.camel.component.servlet.AttachmentHttpBinding.populateAttachments(AttachmentHttpBinding.java:58)
	at org.apache.camel.http.common.DefaultHttpBinding.readBody(DefaultHttpBinding.java:209)
	at org.apache.camel.http.common.DefaultHttpBinding.readRequest(DefaultHttpBinding.java:107)
	at org.apache.camel.http.common.HttpMessage.<init>(HttpMessage.java:52)
	at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:169)
	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:74)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:830)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:551)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1589)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1213)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:486)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1552)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1126)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:118)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:549)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:254)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:269)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:97)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:672)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:590)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Missing content for multipart request
	at org.eclipse.jetty.util.MultiPartInputStreamParser.parse(MultiPartInputStreamParser.java:541)
	at org.eclipse.jetty.util.MultiPartInputStreamParser.getParts(MultiPartInputStreamParser.java:429)
	at org.eclipse.jetty.server.Request.getParts(Request.java:2300)
	at org.eclipse.jetty.server.Request.getParts(Request.java:2279)
{code}

;;;","21/Nov/16 15:16;fabryprog;please, look at my last comment;;;","22/Nov/16 08:53;davsclaus;You need to test with latest code and turn on that option. And dive in the code and track down the issue on your end. It may depend on what content you send to the servet and what servlet container you use etc.;;;","28/Nov/16 10:30;fabryprog;I have found a bug into this code. 

I am trying to fix it!

{code:java}

final class AttachmentHttpBinding extends DefaultHttpBinding {
..................
protected void populateAttachments(HttpServletRequest request, HttpMessage message) {
        try {
            Collection<Part> parts = request.getParts();
            for (Part part : parts) {
                DataSource ds = new PartDataSource(part);
                Attachment attachment = new DefaultAttachment(ds);
                for (String headerName : part.getHeaderNames()) {
                    for (String headerValue : part.getHeaders(headerName)) {
                        attachment.addHeader(headerName, headerValue);
                    }
                }
                message.addAttachmentObject(part.getName(), attachment);
            }
        } catch (Exception e) {
            throw new RuntimeCamelException(""Cannot populate attachments"", e);
        }
    }
...............
}
{code};;;","28/Nov/16 11:42;fabryprog;I found a workaround to fix my problem:

Updating my software to 2.18 version my attachments aren't available, now my servlet code is:

{code:xml}
      	<from uri=""servlet:hello?servletName=CamelServlet&amp;disableStreamCache=true&amp;attachmentMultipartBinding=true""/>
{code}

i am using two parameters:
 - disableStreamCache, *is original problem*. With streamcache enable attachment files aren't available to jetty multicast parser
 - attachmentMultipartBinding, to enable AttachmentHttpBinding into servlet endpoint 

my old code is:

{code:xml}
      	<from uri=""servlet:hello?servletName=CamelServlet""/>
{code}

[~davsclaus] evaluate you what to do with this issue!;;;","29/Nov/16 08:43;davsclaus;Ah I think maybe in the past attachmentMultipartBinding=true turned off stream caching to make it work, so we could likely do that again.;;;",,,,,,,,,,,,,,,,,,,,,,,
JpaPollingConsumer does not support consumeLockEntity and others,CAMEL-10490,13021473,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bgaudaen,bgaudaen,17/Nov/16 14:39,30/Nov/16 14:50,14/Jul/23 05:50,30/Nov/16 14:50,2.18.0,,,,,,,,,,,,,,2.18.2,2.19.0,,,camel-jpa,,,,,,,0,,,,,,"Since the introduction of JpaPollingConsumer in camel 2.18.0, it is not possible anymore to use some of jpa consumer options (consumeLockEntity, consumeDelete, ...).

Documentation also lacks some information on which option can be used by the jpa consumer and not by the polling consumer.
",,bgaudaen,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3142,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 30 14:50:40 UTC 2016,,,,,,,,,,,"0|i36gg7:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"17/Nov/16 14:43;bgaudaen;@[~davsclaus], I'll try to submit a patch including entity lock functionality in the next days unless you think it is not a bug.;;;","21/Nov/16 09:58;davsclaus;We love contributions. So you are welcome to do a patch / PR
http://camel.apache.org/contributing;;;","27/Nov/16 08:31;davsclaus;Hey Bob

Did you have time to work on this?;;;","27/Nov/16 08:53;bgaudaen;Hi Claus. Unfortunately not. I was on on holiday past week... I will have
more time this week.


;;;","30/Nov/16 13:41;githubbot;GitHub user bgaudaen opened a pull request:

    https://github.com/apache/camel/pull/1322

    CAMEL-10490: Implemented consumeLockEntity and lockModeType options on JpaPollingConsumer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bgaudaen/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1322.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1322
    
----
commit a972befaa7b27c6af49e40e0e5147939c66a189e
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-11-18T16:01:12Z

    CAMEL-10490 Wrote unit test to illustrate concurrency problem

commit dcdb619e60383105fdafc71fb94aed86c686f588
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-11-18T16:04:08Z

    CAMEL-10490 Added LockModeType in JpaPollingConsumer.
    
    Still doesn't pass the test with the derby jdbc driver, but passes with MySQL...

commit 9a5f83f9a8a0d47038aeb16fa09c8db67c1ec6b0
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-11-28T10:11:00Z

    CAMEL-10490 Some code cleanup

commit 6795c114ac825f020b85d2a6929ddf5f200c78d5
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-11-30T12:39:21Z

    CAMEL-10490 Changed to optimistic lock mode type and added test for concurrent access without lock

commit f7586ffb04d4d8373856f899b3ed4b8095ad7ed9
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-11-30T13:17:21Z

    CAMEL-10490 CheckStyle warnings

----
;;;","30/Nov/16 14:49;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1322
;;;","30/Nov/16 14:50;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Google PubSub Component does not consume messages with parallel consumers,CAMEL-10486,13020938,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,emin,emin,15/Nov/16 21:33,02/Dec/16 09:43,14/Jul/23 05:50,02/Dec/16 09:43,,,,,,,,,,,,,,,2.19.0,,,,,,,,,,,0,,,,,,"Component: camel-google-pubsub

When parallelConsumers option on an endpoint is assigned the value greater than 1, the component will not be receiving messages.

The issue has been traced to the underlying Google library used and I will update the component once the fix is available. ",,acosentino,davsclaus,emin,githubbot,,,,,,,,,,,,,,,,,,,,CAMEL-10178,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 02 09:42:49 UTC 2016,,,,,,,,,,,"0|i36d5b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Nov/16 21:35;emin;[~ancosen] JFYI - there is a bug in the underlying library. Found in UAT of our project. Will keep the case updated - working with Google to fix it up.;;;","16/Nov/16 07:09;acosentino;[~emin], thanks!;;;","17/Nov/16 03:39;emin;[~ancosen] I got the fix, it is good for the time being, but not really elegant. How much time do I have before submitting it? I would like to wait a week or so. What are the timelines for 2.19 release?;;;","18/Nov/16 07:49;acosentino;[~emin], no problem. Actually for 2.19 there are no timelines. We have time :-);;;","01/Dec/16 02:28;emin;[~ancosen] I am going to push the interim fix to the problem, if you do not mind. When (and if) Google comes through with the proper library update - I will create a separate pull request.
;;;","01/Dec/16 02:32;githubbot;GitHub user evmin opened a pull request:

    https://github.com/apache/camel/pull/1325

    CAMEL-10486: The consumer threading/message undelelivered issue fix

    Google PubSub Component did not consume messages with parallel consumers.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/evmin/camel CAMEL-10486

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1325.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1325
    
----
commit ea3991fd2ccacf39bd8bab3b77a2b309c61df52c
Author: Evgeny Minkevich <evgeny.minkevich@gmail.com>
Date:   2016-11-17T03:50:55Z

    CAMEL-10486: The consumer threading/message undelelivered issue fix

----
;;;","01/Dec/16 09:13;githubbot;Github user evmin closed the pull request at:

    https://github.com/apache/camel/pull/1325
;;;","02/Dec/16 09:39;davsclaus;Is there more work to this or did the last PR implement this?;;;","02/Dec/16 09:42;acosentino;We can wait for the new library from google and leave this open, but it doesn't make sense. I close this one and in case I will update the dependency directly;;;",,,,,,,,,,,,,,,,,,,,,,,
MemoryLeak in the DatagramPacketObjectEncoder,CAMEL-10480,13020733,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Nov/16 08:40,15/Nov/16 09:17,14/Jul/23 05:50,15/Nov/16 09:17,2.17.3,2.18.0,,,,,,,,,,,,,2.17.4,2.18.1,,,camel-netty4,,,,,,,0,,,,,,"Just found a memory leak in the camel-netty4 UDP encoding when working on CAMEL-10409. 
{code}
Failed tests:
  NettyUDPAsyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
  NettyUDPMessageLargerThanDefaultBufferSizeTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@73bb1337]
  NettyUDPObjectSyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@5eed6dfb, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
  NettyUDPSyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
{code}
",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 15 09:17:57 UTC 2016,,,,,,,,,,,"0|i36bvr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Nov/16 09:17;njiang;Applied patch into camel master, camel-2.18.x and camel-2.17.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
configAdminFile not used to populate property placeholders in camel-test-blueprint when run via camel-maven-plugin,CAMEL-10476,13020538,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ggrzybek,ryanco,ryanco,14/Nov/16 16:09,16/Dec/16 08:10,14/Jul/23 05:50,18/Nov/16 17:09,2.15.3,2.15.4,2.15.5,2.15.6,2.16.0,2.16.1,2.16.2,2.16.3,2.16.4,2.17.0,2.17.1,2.17.2,2.17.3,2.18.0,2.16.5,2.17.4,2.18.1,2.19.0,camel-blueprint,,,,,,,0,,,,,,"Problem: When running with a Camel Blueprint project a configAdminFile is not used to populate propertyplacehoders in camel-test-blueprint when exectued with camel-maven-plugin(camel:run). So a user can't run camel locally in a similar way to running in Karaf with file based property placeholder values. 

Workaround: I think, but haven't tested yet, that you can work around this locally using the methods described here: http://ggrzybek.blogspot.com/2015/12/camel-blueprint-test-support.html and/or how this solution  https://github.com/cschneider/Karaf-Tutorial/tree/master/camel/order/src appears to use exec:java locally and loads the properties via PropertiesComponent.

To reproduce the problem:
Create a new project using camel-archetype-blueprint. (You need to change the log4j config to make it run.) To reduce the time, I created a project that runs here: https://github.com/ryanco/propertyconfig. Instead of using a default in the blueprint XML for the propertyplaceholder, I setup the POM to include the following:
{code:xml}
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
        <version>2.18.0</version>
        <configuration>
	      <useBlueprint>true</useBlueprint
         <configAdminPid>com.yarsquidy.props.propertyconfig</configAdminPid>
          <configAdminFileName>etc/com.yarsquidy.props.propertyconfig</configAdminFileName>
        </configuration>
      </plugin>
{code}
In Camel 2.15.2 or earlier, this file would be loaded when mvn camel:run was invoked and the properties would be available via the PID at run time. After the changes made in CAMEL-9313, it appears that the method {{org.apache.camel.test.blueprint.CamelBlueprintHelper#setPersistentFileForConfigAdmin}} is only called in when the createTestBundle pathway is taken in {{org.apache.camel.test.blueprint.CamelBlueprintHelper#createBundleContext(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]...)}}. So it appears test using CamelBlueprintTestSupport get this functionality (as shown by the tests) but things executed from camel:run do not.

Here you can see in Camel 2.14 that call to {{org.apache.camel.test.blueprint.CamelBlueprintHelper#setPersistentFileForConfigAdmin}} is made after the bundelContext is created.
https://github.com/apache/camel/blob/camel-2.14.x/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/Main.java#L103

In the master branch version, that call is no longer made from main after the context is returned.
https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/Main.java#L106

I made a change locally to add a similar call to {{org.apache.camel.test.blueprint.CamelBlueprintHelper#setPersistentFileForConfigAdmin}} in Camel 2.18:
{code}
LOG.debug(""Starting Blueprint XML file: "" + descriptors);
if (configAdminPid != null && configAdminFileName != null) {
		// pid/file is used to set INITIAL content of ConfigAdmin to be used when blueprint container is started
		LOG.info(""ConfigAdminPid and ConfigAdminFileName are not null"");
		bundleContext = createBundleContext(bundleName, new String[] {configAdminFileName, configAdminPid});
} else {
		bundleContext = createBundleContext(bundleName);
}
CamelBlueprintHelper.setPersistentFileForConfigAdmin(bundleContext, configAdminPid, configAdminFileName, new Properties(), null, null, false);
{code}

Here is the output of the log statement from the example before this change:
{noformat}
[ntext          INFO  Apache Camel 2.18.0 (CamelContext: blueprint-bean-context) started in 0.214 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains ${greeting} at 2016-11-14 08:42:03
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains ${greeting} at 2016-11-14 08:42:08
{noformat}

Here is the output of the log statement from the example after this change:
{noformat}
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Apache Camel 2.18.1-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.257 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hello From File! at 2016-11-14 08:54:09
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hello From File! at 2016-11-14 08:54:14
{noformat}

As you can see before the change, the ${greeting} property is not poplulated via propertyplacehoder. After the change it is replaced.

Given all the discussion of timing related issues in CAMEL-9313, I'm hesitant to say this is a good enough solution or that it aligns with the intention of the changes made in that fix. Given that configAdminFileName and configAdminPid are passed into createBundleContext, perhaps the call to {{org.apache.camel.test.blueprint.CamelBlueprintHelper#setPersistentFileForConfigAdmin}} should happen inside createBundleContext or one of it sub-methods. 

Overall, I ""think"" a user should be able to use the configAdminPid and configAdminFileName settings to load properties via camel:run rather than work aound it, but I could be persumptious there.",,ggrzybek,ryanco,,,,,,,,,,,,,,,,,,,,,,CAMEL-10602,,,CAMEL-9377,CAMEL-9313,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 18 17:09:02 UTC 2016,,,,,,,,,,,"0|i36aof:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Nov/16 19:35;ggrzybek;Thanks for detailed description. I'll have a look at the end of this week.;;;","15/Nov/16 21:06;ryanco;Let me know if I can provide any more information or if something isn't clear. I also was able to successfully test the workaround and I can run locally(in an IDE) using java:exec with the same properties file that the unit tests load by overriding loadConfigAdminConfigurationFile and reading that config file. The only thing I am not confident in with the workaround is the difference between running in a DefaultCamelContext vs a BlueprintCamelContext in the IDE. ;;;","18/Nov/16 09:34;ggrzybek;The problem is {{org.apache.camel.test.blueprint.Main#includeSelfAsBundle}} field. Or rather the fact that it's not set in {{org.apache.camel.maven.RunMojo#execute()}}.

All JUnit tests (extending from {{org.apache.camel.test.blueprint.CamelBlueprintTestSupport}}) by default use {{org.apache.camel.test.blueprint.CamelBlueprintTestSupport#includeTestBundle()}} which returns {{true}}.

When you simply do {{mvn clean test}}, neither {{target/classes}} nor {{target/test-classess}} contain {{META-INF/MANIFEST.MF}} file which is necessary to treat the location as ""bundle"" to be picked up in {{org.apache.camel.test.blueprint.CamelBlueprintHelper#getBundleDescriptors()}}:
{code:java}
    public List<BundleDescriptor> scanForBundles(String filterString, ClassLoader loader)
            throws Exception
    {
…
        loader = (loader != null) ? loader : getClass().getClassLoader();

…
        for (Enumeration<URL> e = loader.getResources(
                ""META-INF/MANIFEST.MF""); e.hasMoreElements(); )
        {
…
{code}

That's why in JUnit tests, explicit bundle is created using {{org.apache.camel.test.blueprint.CamelBlueprintHelper#createTestBundle()}}. Only this method does the ""initial configadmin file"" trick (see [here|https://github.com/apache/camel/blob/13760a4a5f1672d54997aa8ede30aefed951505a/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java#L361-L363] for details).

When running using {{mvn clean camel:run}} you'll simply get {{java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)}}, because no ""bundle"" provides your blueprint XML descriptor.
You need at least {{mvn clean package camel:run}}, so you have these ""bundles"" installed by felix-connect (a bundle with blueprint descriptor is #1):
{noformat}
0 = {org.apache.felix.connect.launch.BundleDescriptor@5887} ""jar:file:/opt/java/tools/apache-maven-3.3.9/boot/plexus-classworlds-2.5.2.jar!/""
1 = {org.apache.felix.connect.launch.BundleDescriptor@5888} ""file:/data/ggrzybek/sources/github.com/_other/propertyconfig/target/classes/""
2 = {org.apache.felix.connect.launch.BundleDescriptor@5889} ""jar:file:/home/ggrzybek/.m2/repository/org/apache/camel/camel-core/2.18.0/camel-core-2.18.0.jar!/""
3 = {org.apache.felix.connect.launch.BundleDescriptor@5890} ""jar:file:/home/ggrzybek/.m2/repository/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar!/""
…
{noformat}

When running under JUnit, you have (a bundle with blueprint descriptor is #0):
{noformat}
0 = {org.apache.felix.connect.launch.BundleDescriptor@1869} ""jar:file:/data/ggrzybek/sources/github.com/_other/propertyconfig/target/test-bundles/blueprintbeanroutetest-1479460649241.jar!/""
1 = {org.apache.felix.connect.launch.BundleDescriptor@1806} ""jar:file:/home/ggrzybek/.m2/repository/org/apache/camel/camel-core/2.18.0/camel-core-2.18.0.jar!/""
2 = {org.apache.felix.connect.launch.BundleDescriptor@1807} ""jar:file:/home/ggrzybek/.m2/repository/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar!/""
3 = {org.apache.felix.connect.launch.BundleDescriptor@1808} ""jar:file:/home/ggrzybek/.m2/repository/com/sun/xml/bind/jaxb-core/2.2.11/jaxb-core-2.2.11.jar!/""
…
{noformat}

If both {{includeTestBundle}} was {{true}} and we used {{mvn package}}, we'd have *two* bundles with blueprint descriptor.

Manifest from {{propertyconfig/target/test-bundles/mybundle-1479461020503.jar}} (created by {{org.apache.camel.test.blueprint.CamelBlueprintHelper#createTestBundle()}}:
{noformat}
Manifest-Version: 2
SwissboxTinybundlesVersion: pax-swissbox-tinybundles-1.3.2
Bundle-SymbolicName: MyBundle
Bundle-Version: 1.0.0
Built-By: ggrzybek
Bundle-ManifestVersion: 2
Bundle-Activator: org.apache.camel.test.blueprint.CamelBlueprintHelper
 $TestBundleActivator
Created-By: pax-swissbox-tinybundles-1.3.2
Tool: pax-swissbox-tinybundles-1.3.2
X-Camel-Blueprint-ConfigAdmin-Init: com.yarsquidy.props.propertyconfig
 =file:/data/ggrzybek/sources/github.com/_other/propertyconfig/etc/com
 .yarsquidy.props.propertyconfig
{noformat}

Manifest from {{propertyconfig/target/classes/META-INF/MANIFEST.MF}} (created by maven-bundle-plugin):
{noformat}
Manifest-Version: 1.0
Bnd-LastModified: 1479460929527
Build-Jdk: 1.8.0_112
Built-By: ggrzybek
Bundle-Blueprint: OSGI-INF/blueprint/blueprint-bean.xml
Bundle-ManifestVersion: 2
Bundle-Name: A Camel Blueprint Route
Bundle-SymbolicName: com.yarsquidy.props.property-config
Bundle-Version: 1.0.0.SNAPSHOT
Created-By: Apache Maven Bundle Plugin
Export-Package: com.yarsquidy.props;version=""1.0.0""
Import-Package: org.osgi.service.blueprint;version=""[1.0.0,2.0.0)""
Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.8))""
Tool: Bnd-3.2.0.201605172007
{noformat}

This is a reason of some problems we had when running JUnit tests *after* {{mvn ... package}}.

So the solution should be to perform the ""initial configadmin file"" trick when running with {{mvn camel:run}} and without {{includeTestBundle}}. {{camel:run}} should pick up a bundle containing blueprint descriptor which was created by {{mvn package}}

Also we should prevent using two bundles containing the same descriptors.

I already have an idea.;;;","18/Nov/16 09:57;ggrzybek;Because {{mvn camel:run}} is *not* a test, for such scenarios, {{includeTestBundle}} should always equal to {{false}}. That's why I'll separate ""test bundle"" and a ""trick bundle"" that initializes configadmin before running blueprint.;;;","18/Nov/16 10:15;ggrzybek;Ah, one more thing. {{org.apache.camel.test.blueprint.CamelBlueprintHelper#createTestBundle()}} creates TinyBundle without {{Bundle-Blueprint}} header. Thus {{org.apache.aries.blueprint.container.BlueprintExtender#getBlueprintPaths()}} explicitly uses:
{noformat}
Bundle-Blueprint: OSGI-INF/blueprint/
{noformat}

which eventually translates to {{OSGI-INF/blueprint/*.xml}}.

And because {{mvn camel:run}} doesn't set {{includeSelfAsBundle}}, setting {{descriptors}} ({{<applicationContextUri>}} or {{<fileApplicationContextUri>}}) doesn't make sense with {{<useBlueprint>}} == {{true}}.;;;","18/Nov/16 17:09;ggrzybek;Fixed in:
* [master|https://github.com/apache/camel/commit/35a8fb65ce2f4feffe0b663d4ed48fdf00e98f44]
* [camel-2.18.x|https://github.com/apache/camel/commit/a4280151d7cbd37de2425dc414b79ec43b968ece]
* [camel-2.17.x|https://github.com/apache/camel/commit/d35f61c20cd0a14ebf4eaea3f4c5d050c6ffeb2e]
* [camel-2.16.x|https://github.com/apache/camel/commit/e6bf8367bc6ae6b0ab14a6069964eb9956ed6689]

There were already {{org.apache.camel.test.blueprint.MainTest}}, {{org.apache.camel.test.blueprint.MainNoPidTest}} and {{org.apache.camel.test.blueprint.MainNoReloadTest}}, but all of them explicitly used:
{code:java}
main.setIncludeSelfAsBundle(true);
{code}

Now I've added {{org.apache.camel.test.blueprint.MainTest#testMainWithoutIncludingTestBundle()}} which calls {{main.setIncludeSelfAsBundle(false)}}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-servicenow : ServiceNowConstants not backward-compatible (2.18.0 --> 2.18.1),CAMEL-10467,13019879,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,10/Nov/16 16:11,15/Nov/16 06:45,14/Jul/23 05:50,10/Nov/16 17:31,2.18.0,,,,,,,,,,,,,,2.18.1,,,,camel-servicenow,,,,,,,0,,,,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10479,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-11-10 16:11:20.0,,,,,,,,,,,"0|i366lz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OOM in Dropbox component (uses ByteArrayOutputStream for get),CAMEL-10466,13019841,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ecausarano,ecausarano,10/Nov/16 13:50,25/Nov/16 09:04,14/Jul/23 05:50,25/Nov/16 09:04,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-dropbox,,,,,,,0,out-of-memory,,,,,"Using the Dropbox component to download files will consume large amounts of memory, often producing OOMs.

This is due to the use of ByteArrayOutputStream objects in the implementation of org.apache.camel.component.dropbox.core.DropboxAPIFacade

The component should use org.apache.camel.converter.stream.OutputStreamBuilder instead.",,davsclaus,ecausarano,githubbot,kearls,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 25 09:04:53 UTC 2016,,,,,,,,,,,"0|i366dj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Nov/16 14:28;ecausarano;Hi there,

I pushed some code in the https://github.com/ecausarano/camel/tree/fix/dropbox-oom branch but I'm still not that happy about the lack of (integration) testing. On the other hand it's hard to do when Dropbox itself doesn't provide a testing component themselves... any ideas?

In particular, I'm getting NPEs when my code is unable to find a remote file, and therefore returns an empty map (previous code would throw an exception).

What's the best approach to handle this condition:
1. throw an exception?
2. log something and interrupt the exchange?
3. Wrap the payload in an optional and Return an empty?
4. Return a null?;;;","21/Nov/16 09:41;davsclaus;unable to find remote file, at what point can this happen? Is it on a consumer or producer side? Can you point out to where this is in your code?;;;","22/Nov/16 19:33;ecausarano;Hi Claus,

I did a couple commits over the course of the fix in the branch I linked, but the core of the issue is in https://github.com/ecausarano/camel/blob/camel-2.18.x/components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/core/DropboxAPIFacade.java My changes - particularly in the corresponding file in the dropbox-oom branch - aim to use the OutputStreamBuilder instead.

How can i make it easier for you to see all diffs from master? ;;;","22/Nov/16 19:48;davsclaus;You can do a PR against master branch like the many other PRs we get. Then it only contains the code changes that are ""diff"" against latest code, and its easier to review.

Basically the normal github procedure for submitting code changes to projects hosted on github.;;;","23/Nov/16 11:51;githubbot;GitHub user ecausarano opened a pull request:

    https://github.com/apache/camel/pull/1298

    CAMEL-10466  - fix/dropbox oom

    See CAMEL-10466 - In a nutshell: I've changed the DropboxAPIFacade to use an OutputStreamBuilder rather than a BAOS. All other changes are corollary to this.
    
    I'm still missing some questions about testing, returning empty content etc... (see discussion in JIRA)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ecausarano/camel fix/dropbox-oom

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1298.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1298
    
----
commit 21941ae950a5f0528f336ced860ebf23f5e99b28
Author: Edoardo Causarano <edoardo.causarano@gmail.com>
Date:   2016-11-17T13:12:31Z

    Refactor API Facade to avoid use of ByteArrays because it causes OOM.
    Refactor DTO package members to be dumb DTOs.

commit 7bd0a7305fc0d0c70878e2dd464ec6898621780b
Author: Edoardo Causarano <edoardo.causarano@gmail.com>
Date:   2016-11-17T13:31:01Z

    Various tweaks and corrections suggested by IntelliJ

commit aaeaabf88deb11e25882c089ee8e4ed3a2fd7cca
Author: Edoardo Causarano <edoardo.causarano@gmail.com>
Date:   2016-11-18T13:50:25Z

    Fix obvious mistakes (how can I test all this without going insane?!)

----
;;;","25/Nov/16 09:04;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1298
;;;","25/Nov/16 09:04;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel ahc uses netty 4.0.41 transitively but 4.1.5 explicitly - leads to runtime exceptions,CAMEL-10465,13019830,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,convoi,convoi,10/Nov/16 13:12,11/Nov/16 12:50,14/Jul/23 05:50,11/Nov/16 12:02,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-ahc,,,,,,,0,,,,,,"See here (not created by myself, but I experienced the same issue with camel-ahc) http://stackoverflow.com/questions/40262870/camel-ahc-ws-netty-runtime-exception/40528271#40528271

I see errors like:
{code}
java.lang.NoSuchMethodError: io.netty.buffer.ByteBuf.forEachByte(Lio/netty/buffer/ByteBufProcessor;)
{code}

When I'm sending http requests via camel-ahc.
A workaround for me is to exclude netty-all 4.1.5 and use netty-all 4.0.41.Final instead

Since there is no version of AsyncHttpClient out there which directly support 4.1.5 I'm not sure how to handle this if you need both camel-ahc and camel-netty (or whatever else is making direct use of netty 4.1.5)




",,acosentino,convoi,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 11 12:50:39 UTC 2016,,,,,,,,,,,"0|i366b3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Nov/16 13:18;acosentino;I will take a look. Probably when we upgrade all the components to Netty 4.1.x we didn't notice this. Thanks for spotting this.;;;","11/Nov/16 08:41;davsclaus;Yeah so ahc should then use netty 4.0.x;;;","11/Nov/16 12:40;convoi;I just want to say thanks.
To me, apache camel is one of the best maintained open source projects I have encountered and could well serve as an example to many commercially maintained products.
Response times within hours, fixes within hours or few days.. again. thanks, and have a nice weekend.;;;","11/Nov/16 12:50;acosentino;[~convoi], thanks a lot. This is something that make us proud :-)

Many thanks for your kind words!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
@ContextName CDI qualifier should be repeatable,CAMEL-10464,13019829,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,antonin.stefanutti,antonin.stefanutti,antonin.stefanutti,10/Nov/16 13:11,27/Dec/16 21:24,14/Jul/23 05:50,27/Dec/16 21:24,2.18.0,,,,,,,,,,,,,,2.19.0,,,,camel-cdi,,,,,,,0,,,,,,,,antonin.stefanutti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Dec 27 21:24:42 UTC 2016,,,,,,,,,,,"0|i366av:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Dec/16 21:24;antonin.stefanutti;Note that this requires CDI 2.0 for it to work.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MetricsMessageHistoryFactory.java:138 Generate a NPE,CAMEL-10460,13019575,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,PhilG,PhilG,09/Nov/16 16:36,10/Nov/16 11:03,14/Jul/23 05:50,10/Nov/16 09:33,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-metrics,,,,,,,0,,,,,,"I'm trying to play with Spring-boot camel and metrics to expose dashboard. 

Hawtio is a great tools to check what it's going on at runtime but no persistence is done. We would like to persist statistics in prometheus by example. 

I configure camel context with MetricsMessageHistoryFactory as: 

    MetricsMessageHistoryFactory metricsMessageHistoryFactory = new MetricsMessageHistoryFactory(); 
    metricsMessageHistoryFactory.setMetricsRegistry(metricRegistry); 
    camelContext.setMessageHistoryFactory(metricsMessageHistoryFactory); 

where metricRegistry is injected with: 
  /** 
   * Srping Boot metrics 
   */ 
  @Autowired 
  private MetricRegistry metricRegistry; 


Everything is ok until I passed in OnExceptionRoute. It seems that the routeId is set to Null in this case and generate a NPE (line MetricsMessageHistoryFactory:138) in the exception route. Route causing the NPE:

onException(NoAttachmentToProcessException.class) 
        .routeId(RouteIds.TECHNICAL_ERROR_HANDLING.routeId()) 
        .log(LoggingLevel.ERROR,""TECHNICAL ERROR: ${exchangeProperty.CamelExceptionCaught}"") 
","MacOs, JDK 1.8, SpringBoot 1.4.1, Spring Metrics",davsclaus,PhilG,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Nov/16 07:25;PhilG;__CAMEL_10460_2.patch;https://issues.apache.org/jira/secure/attachment/12838309/__CAMEL_10460_2.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 10 11:03:55 UTC 2016,,,,,,,,,,,"0|i364qf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Nov/16 16:40;PhilG;For my point of view, problem could comes from ProcessorDefinitionHelper which is manage getRouteId which is working only for RouteDefinition object, but exception routes are of type OnExceptionDefinition and then this method return null. ;;;","09/Nov/16 16:46;PhilG;Uploaded a testU and possible patch;;;","09/Nov/16 21:34;davsclaus;Its not entirely correct as on exception is not an route and hence why you dont see that. I will work on a different solution where we will grab the last route id from the current exchange instead. 

We can use your unit test, however we cannot accept the patch file with such license header. Can you remove that, or replace it with the ASF license header, and attach the .patch file again?;;;","10/Nov/16 07:29;PhilG;Thanks Claus. Completly agree with your remark but I have need a quick fix for demo ;).
TestU submitted.

I saw you add a fix version for this ticket. Do you have already an expected date for 2.18.1 ?
;;;","10/Nov/16 09:33;davsclaus;Thanks;;;","10/Nov/16 11:03;PhilG;Thanks for the quick fix. Excellent. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-chronicle - has SNAPSHOT dependency,CAMEL-10455,13019249,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Nov/16 15:51,08/Nov/16 17:20,14/Jul/23 05:50,08/Nov/16 17:20,2.18.1,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-chronicle,,,,,,,0,,,,,,"Cannot build 2.18.x branch due

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 17:28 min
[INFO] Finished at: 2016-11-08T15:36:48+00:00
[INFO] Final Memory: 1188M/2645M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal on project camel-chronicle: Could not resolve dependencies for project org.apache.camel:camel-chronicle:jar:2.18.1-SNAPSHOT: Failed to collect dependencies at net.openhft:chronicle-engine:jar:1.13.10 -> net.openhft:chronicle-network:jar:1.7.2 -> net.openhft:chronicle-wire:jar:1.7.15 -> net.openhft:chronicle-bytes:jar:1.7.18: Failed to read artifact descriptor for net.openhft:chronicle-bytes:jar:1.7.18: Failure to find net.openhft:chronicle-bom:pom:1.13.30-SNAPSHOT in http://repository.apache.org/snapshots was cached in the local repository, resolution will not be reattempted until the update interval of Nexus has elapsed or updates are forced -> [Help 1]

Sadly there is indeed SNAPSHOT in that pom.xml file. So we need to revert back to older working version.",,acosentino,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 08 16:06:30 UTC 2016,,,,,,,,,,,"0|i362q7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Nov/16 16:00;davsclaus;Ah darn this library breaks its api in patch releases - we should consider removing it until it works!;;;","08/Nov/16 16:02;lb;Would you like me to have a look ?;;;","08/Nov/16 16:05;acosentino;It's true:

http://search.maven.org/#artifactdetails%7Cnet.openhft%7Cchronicle-bytes%7C1.7.18%7Cbundle

What is weird is that 1.13.32 has been released..;;;","08/Nov/16 16:06;davsclaus;I think this PR helped/fixed it
https://github.com/apache/camel/commit/36cb41d464522686d514cdce8d59ec3dce886064;;;","08/Nov/16 16:06;davsclaus;A CI job builds 2.18.x branch which will fail if there is still problem
https://builds.apache.org/view/A-D/view/Camel/job/Camel.2.18.x.notest/3/;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Unclear piece in IdempotentConsumer.java,CAMEL-10454,13019235,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,highel,highel,08/Nov/16 15:04,16/Nov/16 01:27,14/Jul/23 05:50,16/Nov/16 01:27,,,,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-core,,,,,,,0,,,,,,"Current implementation of IdempotentConsumer.java has very strange check on whether IdempotentRepository contains the key - if it's ExchangeIdempotentRepository then the result of ""contains()"" check is not inverted(i.e. there is no NOT operator), while for other types of IdempotentRepository it IS inverted with ""!"".

 // check if we already have the key
                if (idempotentRepository instanceof ExchangeIdempotentRepository) {
                    newKey = ((ExchangeIdempotentRepository<String>) idempotentRepository).contains(exchange, messageId);
                } else {
                    newKey = !idempotentRepository.contains(messageId);
                }",,acosentino,davsclaus,githubbot,highel,kearls,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 16 01:26:51 UTC 2016,,,,,,,,,,,"0|i362n3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Nov/16 10:43;davsclaus;Yes that looks like a bug, you are welcome to provide a PR or patch
http://camel.apache.org/contributing;;;","15/Nov/16 07:45;githubbot;Github user kevinearls closed the pull request at:

    https://github.com/apache/camel/pull/1271
;;;","15/Nov/16 21:48;davsclaus;Has this been backported to all the branches? If so please resolve this ticket.;;;","15/Nov/16 21:50;acosentino;Sure. I was out today :-);;;","16/Nov/16 01:26;njiang;The patch was merged into camel master, camel-2.18.x and camel-2.17.x.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-elsql does not set CamelSqlUpdateCount header on update operation,CAMEL-10453,13019224,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,tturek,tturek,08/Nov/16 14:39,16/Nov/16 09:45,14/Jul/23 05:50,16/Nov/16 09:45,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-elsql,,,,,,,0,,,,,,"Camel ElSql should store number of rows updated for update operation into CamelSqlUpdateCount header.

Route:
{code}
<route>
  <from uri=""direct:updateLicense""/>
  <to uri=""elsql:updateLicense""/>
  <to uri=""mock:updateLicense""/>
</route>
{code}

ElSQL
{code}
@NAME(updateLicense)
    UPDATE projects
    SET license = :lic
    WHERE id = :id
{code}",,davsclaus,tturek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 09 10:28:00 UTC 2016,,,,,,,,,,,"0|i362kn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Nov/16 15:20;davsclaus;Thanks are you working on a PR;;;","08/Nov/16 15:20;davsclaus;Also mind camel-elsql reuses camel-sql so maybe there is something wrong there too?;;;","09/Nov/16 10:28;tturek;This problem exists only in the camel-elsql component because this component does not reuse {{SqlProducer}} to implement {{ElSqlProducer}}. Which should be a source of the problem because I discover another bug in {{ElSqlProducer}} [CAMEL-10459|https://issues.apache.org/jira/browse/CAMEL-10459].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Set CXF SoapAction header correctly,CAMEL-10449,13018847,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jpoth,jpoth,jpoth,07/Nov/16 14:28,07/Nov/16 19:25,14/Jul/23 05:50,07/Nov/16 19:25,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-cxf,,,,,,,0,,,,,,"As of [CXF-6732|https://issues.apache.org/jira/browse/CXF-6732], CXF will by default always [set|https://github.com/apache/cxf/blob/master/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/interceptor/SoapPreProtocolOutInterceptor.java#L121] the SoapAction header with the value found at key SoapBindingConstants.SOAP_ACTION. See [comment|https://issues.apache.org/jira/browse/CXF-6732?focusedCommentId=15502206&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15502206] for more details. Workaround can be either adding a custom CXF OutInterceptor or use a different Camel/CXF binding.",,davsclaus,githubbot,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 07 19:25:43 UTC 2016,,,,,,,,,,,"0|i3608n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Nov/16 14:32;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1254

    CAMEL-10449 - Set CXF SoapAction header correctly

    https://issues.apache.org/jira/browse/CAMEL-10449

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10449

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1254.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1254
    
----
commit 3d1541d100a95c3fba12e901b1272489f0e5f30b
Author: jpoth <poth.john@gmail.com>
Date:   2016-11-07T14:30:54Z

    CAMEL-10449 - Set CXF SoapAction header correctly

----
;;;","07/Nov/16 19:25;davsclaus;Thanks for the PR;;;","07/Nov/16 19:25;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1254
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
findById does not work with ObjectId,CAMEL-10443,13017610,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,nbusy,nbusy,03/Nov/16 12:24,07/Nov/16 11:29,14/Jul/23 05:50,07/Nov/16 09:48,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-mongodb,,,,,,,0,,,,,,"When using Camel MongoDB component with ""operation=findById"" and [_id] field is happened to be a standard ObjectId(), it doesn't work anymore in v.2.18 (worked 2.17.3 and before). 
Basically, to test you'd need to send org.bson.types.ObjectId in the message body but it never finds a document. 
The problem lies in MongoDbProducer.createDoFindById(). 
Can be fixed by replacing line: 
                String id = exchange1.getIn().getMandatoryBody(String.class); 
with 
                Object id = exchange1.getIn().getMandatoryBody(); 
",,davsclaus,githubbot,nbusy,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 07 11:29:23 UTC 2016,,,,,,,,,,,"0|i35slz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Nov/16 15:55;davsclaus;A github PR is welcome
http://camel.apache.org/contributing;;;","05/Nov/16 13:06;githubbot;GitHub user nickbusy opened a pull request:

    https://github.com/apache/camel/pull/1251

    CAMEL-10443: fixing findById with ObjectId

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nickbusy/camel CAMEL-10443

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1251.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1251
    
----
commit 8f9ab2dbab7ec6296472f6516b71e1b1af6f1d9b
Author: Nick Busy <nbusy@enfoll.com>
Date:   2016-11-05T13:04:05Z

    CAMEL-10443: fixing findById with ObjectId

----
;;;","07/Nov/16 11:29;githubbot;Github user nickbusy closed the pull request at:

    https://github.com/apache/camel/pull/1251
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multicast leaks into Pipeline stages?,CAMEL-10442,13017584,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ecausarano,ecausarano,03/Nov/16 10:36,04/Nov/16 16:45,14/Jul/23 05:50,04/Nov/16 16:45,2.18.0,,,,,,,,,,,,,,2.19.0,,,,camel-core,,,,,,,0,,,,,,"When defining a route with two (or more) parallel pipelines, it seems that the exchange is being broadcast to all steps (including the intermediate) of the pipelines, rather than just their heads. Whether or not this unintuitive - if not incorrect - behavior occurs when using shorthand syntaxes in the route definition (see https://gist.github.com/ecausarano/4b66294464741b9f626890b29ea0aec2)

Working route: 
.pipeline().to(""A"").to(""B"").end()
.pipeline().to(""C"").to(""D"").end()

10:41:12.644 [main] INFO route1 - after direct:start body=START
10:41:12.666 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> A Exchange[ID-Spitfire-local-50181-1477993271722-0-3]
10:41:12.667 [main] DEBUG com.esc.test.MulticastPipelinesTest - A got in=START
10:41:12.667 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> B Exchange[ID-Spitfire-local-50181-1477993271722-0-3]
10:41:12.667 [main] DEBUG com.esc.test.MulticastPipelinesTest - B got in=A
10:41:12.670 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> C Exchange[ID-Spitfire-local-50181-1477993271722-0-4]
10:41:12.671 [main] DEBUG com.esc.test.MulticastPipelinesTest - C got in=START
10:41:12.671 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> D Exchange[ID-Spitfire-local-50181-1477993271722-0-4]
10:41:12.671 [main] DEBUG com.esc.test.MulticastPipelinesTest - D got in=C

Faulty routes:
.pipeline(""A"", ""B"")
.pipeline(""C"", ""D”)
or					
.to(""A"", ""B"")
.to(""C"", ""D"")

10:43:46.383 [main] INFO route1 - after direct:start body=START
10:43:46.389 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> A Exchange[ID-Spitfire-local-50316-1477993425625-0-3]
10:43:46.389 [main] DEBUG com.esc.test.MulticastPipelinesTest - A got in=START
10:43:46.390 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> B Exchange[ID-Spitfire-local-50316-1477993425625-0-4]
10:43:46.390 [main] DEBUG com.esc.test.MulticastPipelinesTest - B got in=START
10:43:46.391 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> C Exchange[ID-Spitfire-local-50316-1477993425625-0-5]
10:43:46.391 [main] DEBUG com.esc.test.MulticastPipelinesTest - C got in=START
10:43:46.391 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> D Exchange[ID-Spitfire-local-50316-1477993425625-0-6]
10:43:46.391 [main] DEBUG com.esc.test.MulticastPipelinesTest - D got in=START
 
",,davsclaus,ecausarano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 04 15:49:04 UTC 2016,,,,,,,,,,,"0|i35sg7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Nov/16 15:49;davsclaus;This seems to be an issue in the Java DSL with the pipeline when using it with and without the to style as you do. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The WorkerGroup option is for NettyConsumer and NettyProducer,CAMEL-10441,13017573,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Nov/16 09:51,03/Nov/16 11:13,14/Jul/23 05:50,03/Nov/16 11:13,,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-netty4,camel-netty4-http,,,,,,0,,,,,,"Here is the user question about the workgroup setting.

http://camel.465427.n5.nabble.com/netty4-http-producer-workerGroup-and-producerPool-tp5789681.html

We need to update the document for this option. 
",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 03 11:12:54 UTC 2016,,,,,,,,,,,"0|i35sdr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Nov/16 11:12;njiang;Merged the patch into camel-2.18.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"The camel-jetty, camel-jetty9 feature should explicitly define the expected feature version range for jetty",CAMEL-10433,13017066,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cschneider,xldai,xldai,02/Nov/16 01:48,02/Nov/16 12:50,14/Jul/23 05:50,02/Nov/16 11:12,2.16.3,2.17.3,,,,,,,,,,,,,2.16.5,2.17.4,,,karaf,,,,,,,0,,,,,,"There is no version range restriction of jetty feature in the camel-jetty and camel-jetty9 feature definition.
{code}
    <feature>jetty</feature>
{code}

For camel-jetty9 feature, it maybe should add version range like this:
{code}
    <feature version='[9,10)'>jetty</feature>
{code}

For camel-jetty feature, it maybe should add version range like this:
{code}
    <feature version='[8,9)'>jetty</feature>
{code}

Because from karaf 4.x there are both jetty 8 and jetty 9 feature existing. Making this changes will avoid install the wrong version jetty bundles when install camel-jetty (or camel-jetty8 of Camel 2.17.x)",Java 8,acosentino,cschneider,githubbot,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 02 12:50:34 UTC 2016,,,,,,,,,,,"0|i35p9j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/16 03:17;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/1244

    fix CAMEL-10433 in Camel 2.16.x

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel patch-4

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1244.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1244
    
----
commit 3e096a5dde6a2a6c352b8ae7c9787addf739c3ac
Author: Xilai Dai <xldai@talend.com>
Date:   2016-11-02T03:17:17Z

    fix CAMEL-10433 in Camel 2.16.x

----
;;;","02/Nov/16 03:18;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/1245

    fix CAMEL-10433 in Camel 2.17.x

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel patch-3

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1245.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1245
    
----
commit 20775ecf3b5c211ab309009e78ee7f529ae38645
Author: Xilai Dai <xldai@talend.com>
Date:   2016-11-02T03:13:10Z

    fix CAMEL-10433 in Camel 2.17.x

----
;;;","02/Nov/16 10:20;acosentino;There is a comment in the feature.

""camel-jetty9 intend to work with jetty9, so this feature only works in the karaf container which support jetty9, e.g. karaf 4.x""

while camel-jetty8 is intended to work in Karaf 2.x and Karaf 3.x.

In Karaf 4.x you're supposed to use a Camel-jetty9. In camel 2.18.0 you won't have camel-jetty8 feature, since it is definitely dropped.

So the PRs are invalid in my opinion.;;;","02/Nov/16 10:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1245
;;;","02/Nov/16 10:29;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1244
;;;","02/Nov/16 10:34;acosentino;It seems like someone prefer to commit. This kind of thing usually should be discussed. My comment was not mandatory, it was just a comment.;;;","02/Nov/16 11:12;cschneider;I did not mean to commit in spite of Andrea's comments. I only checked the issue before the merge. At that point there were no comments. I always try to discuss before the commit if there is a controversy.

In the meantime Andrea and I resolved the issue on IRC. We agreed on this:
The change is not be necessary if people follow the karaf guidelines but it should not do any harm. So we can keep the commit.
;;;","02/Nov/16 11:25;acosentino;:-);;;","02/Nov/16 12:50;xldai;Thanks! I agree it's something an improvement not really a bug, I filed this jira because we really have a problem when install camel-jetty9 feature into karaf 4.0.x, karaf somehow try to install both jetty 8 and jetty 9 into the container (for detail, please see https://issues.apache.org/jira/browse/KARAF-4811);;;",,,,,,,,,,,,,,,,,,,,,,,
camel-elsql - Does not read named parameter from header properties,CAMEL-10431,13016927,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tturek,tturek,01/Nov/16 15:36,01/Nov/16 16:50,14/Jul/23 05:50,01/Nov/16 16:11,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-elsql,,,,,,,0,,,,,,"Camel-elsql could not lookup for parameters from message headers. Problem is here https://github.com/apache/camel/blob/camel-2.18.0/components/camel-elsql/src/main/java/org/apache/camel/component/elsql/ElsqlSqlMapSource.java#L70

Sample route:
{code}
from(""direct:projects"")
  .setHeader(""lic"", constant(""ASF""))
  .setHeader(""min"", constant(123))
  .to(""elsql:projects:com/foo/projects.elsql"")
{code}

ElSql:
{code}
@NAME(projects)
  SELECT *
  FROM projects
  WHERE license = :lic AND id > :min
  ORDER BY id
{code}",,davsclaus,githubbot,tturek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 01 16:50:51 UTC 2016,,,,,,,,,,,"0|i35oen:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Nov/16 15:43;githubbot;GitHub user osmman opened a pull request:

    https://github.com/apache/camel/pull/1241

    CAMEL-10431: camel-elslq Fix lookup for named parameter from headers

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/osmman/camel camel-elsql

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1241.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1241
    
----
commit 1028021b3821a67ef7dfa2d7949f2c9a397dc87d
Author: Tomas Turek <tturek@redhat.com>
Date:   2016-11-01T15:26:05Z

    CAMEL-10431: camel-elslq Fix lookup for named parameter from headers

----
;;;","01/Nov/16 16:11;davsclaus;Thanks for the PR;;;","01/Nov/16 16:50;githubbot;Github user osmman closed the pull request at:

    https://github.com/apache/camel/pull/1241
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hystrix - Should also execute fallback if exception not from Camel,CAMEL-10430,13016867,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Nov/16 11:22,01/Nov/16 11:25,14/Jul/23 05:50,01/Nov/16 11:25,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-hystrix,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Hystrix-Fallback-not-executed-on-Thread-Pool-Semaphore-rejection-tp5789521.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-11-01 11:22:50.0,,,,,,,,,,,"0|i35o1b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFRS client requires Exchange.HTTP_URI instead of HTTP_PATH for Camel tranport,CAMEL-10429,13016864,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tadayosi,tadayosi,01/Nov/16 11:14,05/Nov/16 12:34,14/Jul/23 05:50,05/Nov/16 12:10,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-cxfrs,,,,,,,0,,,,,,"The [camel-cxfrs doc|http://camel.apache.org/cxfrs.html] writes that {{HTTP_PATH}} is required for {{camel-cxfrs}} producer when it's used with {{httpClientAPI}} option.
{quote}
The CXF JAXRS front end also provides a http centric client API. You can also invoke this API from camel-cxfrs producer. *You need to specify the HTTP_PATH and the HTTP_METHOD* and let the producer use the http centric client API by using the URI option httpClientAPI or by setting the message header CxfConstants.CAMEL_CXF_RS_USING_HTTP_API.
{quote}
However, when Camel transport is used between CXFRS producer and consumer, the invocation succeeds only if it sets {{HTTP_URI}}, not {{HTTP_PATH}}, to the header.
{code:java}
                from(""direct:input.camel"")
                    .setHeader(Exchange.HTTP_METHOD, constant(""GET""))
                    .setHeader(Exchange.CONTENT_TYPE, constant(""text/plain""))
                    .setHeader(Exchange.HTTP_URI, simple(""/greeting/hello/${body}""))
                    //.setHeader(Exchange.HTTP_PATH, simple(""/greeting/hello/${body}"")) // <- fails
                    .inOut(""cxfrs:bean:rsClient"");
{code}
Otherwise it fails with {{404}} error.",,davsclaus,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,CAMEL-10446,,,,,,,,,,,"01/Nov/16 11:18;tadayosi;camel-cxf-transport.zip;https://issues.apache.org/jira/secure/attachment/12836331/camel-cxf-transport.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 05 12:10:24 UTC 2016,,,,,,,,,,,"0|i35o0n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Nov/16 11:18;tadayosi;Reproducer {{camel-cxf-transport.zip}} attached. See {{README.md}} inside for how to run it.;;;","05/Nov/16 05:42;tadayosi;This issue appears to be a tip of a bigger iceberg: the header mapping code between CXF and Camel messages in {{camel-cxf}} and {{camel-cxf-transport}} is scattered around {{DefaultCxfRsBinding}}, {{CxfUtils}}, {{DefaultCxfMessageMapper}}, and {{CxfHeaderHelper}}. I confirmed that this issue can be resolved if the header mapping between CXF and Camel is just covered more exhaustively. So I think the correct resolution of this issue would involve refactorings of those {{DefaultCxfRsBinding}}, {{CxfUtils}}, {{DefaultCxfMessageMapper}}, and {{CxfHeaderHelper}} classes.

Working on a pull req for the fix.;;;","05/Nov/16 12:00;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1249

    CAMEL-10429 - CXFRS client requires Exchange.HTTP_URI instead of HTTP_PATH for Camel tranport

    https://issues.apache.org/jira/browse/CAMEL-10429
    
    Consolidating the header mapping logic into `CxfHeaderHelper`. The core part of the fix is this line:
    https://github.com/apache/camel/compare/master...tadayosi:CAMEL-10429?expand=1#diff-ddb35843f1171bf5023cbf3a72fa2581R107
    where CXF HTTP header mappings are added to `propagateCxfToCamel(..)` method.
    
    However, there is still room for further consolidation of the header mapping logic between `DefaultCxfRsBinding` and `CxfHeaderHelper`. I'll file another JIRA later for this refactoring.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10429

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1249.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1249
    
----
commit e55502ea019a7b092303a67d3adb1c2cbe972d74
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-11-05T07:49:01Z

    CAMEL-10429 - CXFRS client requires Exchange.HTTP_URI instead of HTTP_PATH for Camel tranport

----
;;;","05/Nov/16 12:10;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1249
;;;","05/Nov/16 12:10;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"CXFRS client gets ""Response timeout"" exception when used with Camel transport",CAMEL-10427,13016784,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tadayosi,tadayosi,01/Nov/16 02:13,01/Nov/16 11:41,14/Jul/23 05:50,01/Nov/16 11:41,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-cxfrs,,,,,,,0,,,,,,"When a CXFRS client is used with Camel transport:
{code:java}
  <cxf:rsClient id=""rsClient"" address=""camel://direct:cxf.in"" ...>
{code}
it throws the following exception waiting for a response from the target REST server:
{code}
javax.ws.rs.ProcessingException: Response timeout
    at org.apache.cxf.jaxrs.client.AbstractClient.waitForResponseCode(AbstractClient.java:617)
    at org.apache.cxf.jaxrs.client.AbstractClient.checkClientException(AbstractClient.java:598)
    at org.apache.cxf.jaxrs.client.AbstractClient.preProcessResult(AbstractClient.java:580)
    at org.apache.cxf.jaxrs.client.WebClient.doResponse(WebClient.java:1098)
    at org.apache.cxf.jaxrs.client.WebClient.doChainedInvocation(WebClient.java:1035)
    at org.apache.cxf.jaxrs.client.WebClient.doInvoke(WebClient.java:892)
    at org.apache.cxf.jaxrs.client.WebClient.doInvoke(WebClient.java:863)
    at org.apache.cxf.jaxrs.client.WebClient.invoke(WebClient.java:329)
    at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeHttpClient(CxfRsProducer.java:210)
    at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:89)
    [...]
{code}
unless you explicitly remap the following header:
{code:xml}
    <setHeader headerName=""org.apache.cxf.message.Message.RESPONSE_CODE"">
        <simple>${headers.CamelHttpResponseCode}</simple>
    </setHeader>
{code}",,davsclaus,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Nov/16 02:20;tadayosi;camel-cxf-transport.zip;https://issues.apache.org/jira/secure/attachment/12836262/camel-cxf-transport.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 01 11:41:38 UTC 2016,,,,,,,,,,,"0|i35niv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Nov/16 02:20;tadayosi;Reproducer {{camel-cxf-transport.zip}} attached. See {{README.md}} inside.;;;","01/Nov/16 06:11;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1240

    CAMEL-10427 - CXFRS client gets ""Response timeout"" exception when used with Camel transport

    https://issues.apache.org/jira/browse/CAMEL-10427
    https://issues.jboss.org/browse/ENTESB-6028
    
    Made `CxfHeaderHelper` aware of mapping between Camel `Exchange.HTTP_RESPONSE_CODE` <-> CXF `Message.RESPONSE_CODE`.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10427

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1240.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1240
    
----
commit f7443a03264b1363cf996c98538640923012f2bd
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-11-01T05:19:01Z

    CAMEL-10427 - CXFRS client gets ""Response timeout"" exception when used with Camel transport

----
;;;","01/Nov/16 11:41;davsclaus;Thanks for the PR;;;","01/Nov/16 11:41;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1240
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.io.IOException: Stream closed - When setting result from bean in route,CAMEL-10425,13016413,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Oct/16 08:20,30/Oct/16 17:05,14/Jul/23 05:50,30/Oct/16 17:05,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-core,camel-http-common,,,,,,0,,,,,,"Related to CAMEL-10424 which can cause an exception
{code}
org.apache.camel.RuntimeCamelException: java.io.IOException: Stream closed
	at org.apache.camel.http.common.HttpMessage.createBody(HttpMessage.java:74)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.after(CamelInternalProcessor.java:799)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.after(CamelInternalProcessor.java:767)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:246)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:1069)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:195)
	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:74)
{code}

such as from:
https://builds.apache.org/job/Camel.trunk.fulltest.java8/org.apache.camel$camel-example-spring-boot-rest-jpa/1002/testReport/junit/org.apache.camel.example.spring.boot.rest.jpa/ApplicationTest/newOrderTest/

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-10-30 08:20:26.0,,,,,,,,,,,"0|i35l8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deploy route with an error,CAMEL-10418,13015231,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,fabryprog,fabryprog,fabryprog,25/Oct/16 21:17,28/Oct/16 16:08,14/Jul/23 05:50,28/Oct/16 13:35,,,,,,,,,,,,,,,2.19.0,,,,camel-core,,,,,,,0,,,,,,"When i create a route with an sintax error, it cannot be started but remains into camelcontext.

An example to replicate it:
1. Deploy a route with an know id at runtime (using route definition). The route will be invalid (with an sintax error)
2. Redeploy correct route with same id

Camel throw an example because i cannot deploy a route with same id!!!",,acosentino,fabryprog,githubbot,lb,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 28 16:08:35 UTC 2016,,,,,,,,,,,"0|i35dy7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Oct/16 12:51;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1234

    CAMEL-10418 - Fix route removal logic in case of duplicated id.

    Thanks @Fabryprog for the unit test and initial solution

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-10418

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1234.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1234
    
----
commit 2be65c116c4e9ab3602f9796135487c03aa1d1ec
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2016-10-28T12:50:25Z

    CAMEL-10418 - Fix route removal logic in case of duplicated id.
    
    Thanks @Fabryprog for the unit test and initial solution

----
;;;","28/Oct/16 12:52;paolo.antinori;Hi, I think that your test shows a real problem but the fix is not in the correct place.

In my opinion the real issue here is that {{org.apache.camel.impl.DefaultCamelContext#removeRouteDefinition(org.apache.camel.model.RouteDefinition)}} , that is already correctly called even in your test, but it is not removing the route definition correctly.

I have modified it in this way:

{code:java}
     public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception {
+        RouteDefinition toBeRemoved = routeDefinition;
         String id = routeDefinition.getId();
         if (id != null) {
             // remove existing route
             stopRoute(id);
             removeRoute(id);
+            toBeRemoved = getRouteDefinition(id);
         }
-        this.routeDefinitions.remove(routeDefinition);
+        this.routeDefinitions.remove(toBeRemoved);
     }
{code}

And now all test pass, included the new one you have added.

See PR here:

https://github.com/apache/camel/compare/master...paoloantinori:CAMEL-10418?expand=1;;;","28/Oct/16 12:54;acosentino;Yes, [~paolo.antinori], you're right. I guess it is the right place to for the fix. It is the place I was looking for in origin. Thanks for spotting this! :-)

I'll merge your PR.;;;","28/Oct/16 13:34;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1234
;;;","28/Oct/16 13:41;fabryprog;Initially my code was in *removeRouteDefinition* method. But i am thinking this use cases:

I deploy this cascade routes using method *removeRouteDefinitions* :

ROUTE A -> ROUTE B -> ROUTE C

If my error is into routeB i would remove all routes not only routeB!!!!;;;","28/Oct/16 16:08;lb;This would open the door to much more complex things, i.e:
- you have to take into account the whole tree as route A could multicast to multiple routes or it may be the target of other routes
- you have to think about what you would do for cross context routes

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Query is ignore if field filter header is set,CAMEL-10414,13015039,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,pontus.ullgren,pontus.ullgren,25/Oct/16 11:11,29/Oct/16 06:40,14/Jul/23 05:50,28/Oct/16 08:13,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-mongodb,,,,,,,0,,,,,,"If the field filter header (CamelMongoDbFieldsFilter) is set the query is ignored.

As can be seen here:
https://github.com/apache/camel/blob/camel-2.18.x/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbProducer.java#L314-L320",any,acosentino,githubbot,pontus.ullgren,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 28 08:12:56 UTC 2016,,,,,,,,,,,"0|i35crj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Oct/16 11:14;acosentino;Pontus, are you working on a PR? :-);;;","25/Oct/16 14:04;pontus.ullgren;No have not started yet so please go ahead if you have the time. If not I will take a look at it later this week. ;;;","28/Oct/16 07:40;githubbot;GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/1233

    CAMEL-10414 query is ignored if filed filter header is set

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-10414

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1233.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1233
    
----
commit 7e2db36e7e4c00bd304830381b1d657585836854
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2016-10-28T07:39:00Z

    CAMEL-10414 query is ignored if filed filter header is set

----
;;;","28/Oct/16 08:09;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1233
;;;","28/Oct/16 08:12;acosentino;Thanks for the PR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Blueprint - failed container gets restarted automatically,CAMEL-10411,13014762,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,paolo.antinori,paolo.antinori,24/Oct/16 15:30,25/Oct/16 06:49,14/Jul/23 05:50,25/Oct/16 06:49,2.18.0,,,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-blueprint,,,,,,,0,,,,,,"In case of a wrong endpoint definition, a {{CamelContext}} could be automatically restarted even if the start operation was correctly aborted.

This happens because during {{BlueprintCamelContext}}, the {{CamelContext}} instance is registered as a {{ServiceListener}}

https://github.com/apache/camel/blob/master/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java#L102

Due to that reason, even after a {{stop()}} call is invoked by the error execution branch of {{start()}}, that instance is receptive to external service events that result in the invocation of this method:

https://github.com/apache/camel/blob/master/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/BlueprintCamelContext.java#L155

That method has the freedom to start again the {{CamelContext}} instance.

The proposed solution is to use a {{BlueprintCamelContext}} local flag to keep track of the successful initialization of the Context, to be able to ignore events in case activation wasn't successful.

Note that the {{BlueprintCamelContext}} instance, un-registers itself as a service listener, only in its {{destroy()}} method.

Attached to JBoss-Fuse linked case, there is a reproducer that shows the issue.",,acosentino,githubbot,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://issues.jboss.org/browse/ENTESB-6174,,,,,,,,,,,9223372036854775807,,,Tue Oct 25 06:49:21 UTC 2016,,,,,,,Patch Available,,,,"0|i35b1z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Oct/16 15:34;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1221

    CAMEL-10411 - camel-blueprint. prevent automated restart in case of e…

    …rrors

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel bp_issue

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1221.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1221
    
----
commit bf8d0de57b303e3e8b137e21ac96162a9b1fb921
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2016-10-24T15:31:40Z

    CAMEL-10411 - camel-blueprint. prevent automated restart in case of errors

----
;;;","25/Oct/16 06:48;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1221
;;;","25/Oct/16 06:49;acosentino;Thanks a lot [~paolo.antinori] :-) Merged on master, camel-2.18.x and camel-2.17.x;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Double release of netty buffer,CAMEL-10409,13014501,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,tivv,tivv,22/Oct/16 14:24,16/Nov/16 12:12,14/Jul/23 05:50,15/Nov/16 09:19,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-netty4-http,,,,,,,0,,,,,,"It looks like CAMEL-9040 fix introduced a double release of a netty buffer
 that leads to IllegalReferenceCountException under load:
{code}
2016-10-22 10:20:15.442  WARN 6853 --- [ClientTCPWorker] io.netty.util.ReferenceCountUtil         : Failed to release a message: AdvancedLeakAwareByteBuf(PooledUnsafeDirectByteBuf(freed))

io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1
	at io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:111) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.buffer.WrappedByteBuf.release(WrappedByteBuf.java:1029) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.buffer.AdvancedLeakAwareByteBuf.release(AdvancedLeakAwareByteBuf.java:951) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:84) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.ReferenceCountUtil.safeRelease(ReferenceCountUtil.java:109) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.ChannelOutboundBuffer.remove0(ChannelOutboundBuffer.java:296) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.ChannelOutboundBuffer.failFlushed(ChannelOutboundBuffer.java:621) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:869) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:362) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:823) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1296) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:786) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:778) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:759) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush(CombinedChannelDuplexHandler.java:530) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.CombinedChannelDuplexHandler.flush(CombinedChannelDuplexHandler.java:355) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:786) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:812) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:824) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:804) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:841) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.DefaultChannelPipeline.writeAndFlush(DefaultChannelPipeline.java:1032) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannel.writeAndFlush(AbstractChannel.java:296) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at org.apache.camel.component.netty4.NettyHelper.writeBodyAsync(NettyHelper.java:105) [camel-netty4-2.18.0.jar:2.18.0]
	at org.apache.camel.component.netty4.NettyProducer.processWithConnectedChannel(NettyProducer.java:306) [camel-netty4-2.18.0.jar:2.18.0]
	at org.apache.camel.component.netty4.NettyProducer$ChannelConnectedListener.operationComplete(NettyProducer.java:642) [camel-netty4-2.18.0.jar:2.18.0]
	at org.apache.camel.component.netty4.NettyProducer$ChannelConnectedListener.operationComplete(NettyProducer.java:619) [camel-netty4-2.18.0.jar:2.18.0]
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:507) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:486) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:111) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:306) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:341) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:627) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:551) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:465) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:437) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101]

{code}
The buffer is release at
{code}
	at org.apache.camel.component.netty4.http.NettyHttpProducer$1.onDone(NettyHttpProducer.java:85)
	at org.apache.camel.support.SynchronizationAdapter.onComplete(SynchronizationAdapter.java:35)
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:104)
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:230)
	at org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65)
	at org.apache.camel.impl.DefaultConsumer.doneUoW(DefaultConsumer.java:107)
	at org.apache.camel.component.netty4.handlers.ServerChannelHandler$1.done(ServerChannelHandler.java:149)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:147)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.RedeliveryErrorHandler$2.done(RedeliveryErrorHandler.java:554)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:86)
	at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:155)
	at org.apache.camel.component.netty4.http.NettyHttpProducer$NettyHttpProducerCallback.done(NettyHttpProducer.java:149)
	at org.apache.camel.component.netty4.NettyProducer$NettyProducerCallback.done(NettyProducer.java:548)
	at org.apache.camel.component.netty4.handlers.ClientChannelHandler.channelRead0(ClientChannelHandler.java:205)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:129)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:610)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:551)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:465)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:437)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873)
	at java.lang.Thread.run(Thread.java:745)
{code} 
and 
{code}

	at org.apache.camel.component.netty4.NettyHelper.writeBodyAsync(NettyHelper.java:105)
	at org.apache.camel.component.netty4.NettyProducer.processWithConnectedChannel(NettyProducer.java:306)
	at org.apache.camel.component.netty4.NettyProducer$ChannelConnectedListener.operationComplete(NettyProducer.java:642)
	at org.apache.camel.component.netty4.NettyProducer$ChannelConnectedListener.operationComplete(NettyProducer.java:619)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:507)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:486)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:111)
	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:306)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:341)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:627)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:551)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:465)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:437)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873)
	at java.lang.Thread.run(Thread.java:745)
{code}

Note that refCnt check do not work if buffer is being used by another thread, it's just hiding a problem if it works. I will try to look into it deeper, but I am not sure if I fully understand the buffer allocation / freeing lifecycle in netty yet 

My test routes are:
{code}
        from(""timer:load?period=100"")
                .to(""log:client?groupInterval=5000"")
                .to(""netty4-http:http://127.0.0.1:8081/main-service"");
        from(""netty4-http:http://0.0.0.0:8081/main-service"")
                .to(""log:main-service?groupInterval=5000"")
                .to(""netty4-http:http://127.0.0.1:8082/childService1"")
                .to(""netty4-http:http://127.0.0.1:8083/childService2"");
        from(""netty4-http:http://0.0.0.0:8082/childService1"")
                .to(""log:childService1?groupInterval=5000"")
                .delayer(100);
        from(""netty4-http:http://0.0.0.0:8083/childService2"")
                .to(""log:childService2?groupInterval=5000"")
                .delayer(100);
{code}",,davsclaus,githubbot,njiang,tivv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 16 12:12:11 UTC 2016,,,,,,,,,,,"0|i359fz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Oct/16 14:44;tivv;Looked a bit into in.
Note that I analyzed request handling only. For response I'd consider removing refCnt check as it does more harm (hiding a problem sometimes)  
My thoughts for request:
 * It needs to be handled in netty4 component, not netty4-http
 * request needs to be release only if it did not make to ""write"" call
 * I can see next options:
 ** Do carefull error handling properly releasing it in case of any code pathes in which request do not make up to write, don't do in synchronization 
 ** Mark message as ""released"" somehow and still do  in synchrnonization adapter. Note that it should work for multiple netty calls in the exchange
 ** Delay body creation until we are ready to send it down

I prefer delay then carefull error handling. I don't really like synchronization approach for request. It's more complicated to handle (with multiple requests) and it holds buffer more than needed.;;;","14/Nov/16 04:58;githubbot;GitHub user tivv opened a pull request:

    https://github.com/apache/camel/pull/1268

    CAMEL-10409: Prevent double release of request

    Please also merge into 2.18 as it's quite important problem that may lead to buffer corruption (buffer is being incorrectly reused) 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tivv/camel netty-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1268.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1268
    
----
commit 237101e76ad7750450e29fb408f35f962218c9c6
Author: Vitalii Tymchyshyn <vit@tym.im>
Date:   2016-11-14T04:51:54Z

    CAMEL-10409
    Double release of netty buffer

commit f36cb53f85692993c39c639556c4a8c540d9501f
Author: Vitalii Tymchyshyn <vit@tym.im>
Date:   2016-11-14T04:55:24Z

    CAMEL-10409
    Double release of netty buffer

----
;;;","14/Nov/16 04:59;tivv;I've implemented careful handling in the PR;;;","14/Nov/16 08:54;davsclaus;Thanks [~tivv]

I wonder if would help with https://issues.apache.org/jira/browse/CAMEL-10301 as well - and see if you can reproduce this with latest code, and possible fix it too ;);;;","15/Nov/16 03:18;tivv;I'll see. I also see a low hanging fruit: Server must send ""Connection: close"" when it is going to close connection shortly (e.g. when authentication failed). Otherwise client may try to send another request over the connection being closed. Some of the tests are flacky because of this. I'll make another JIRA and fix if confirmed. ;;;","15/Nov/16 03:23;njiang;Applied  the patch into camel-2.18.x and master branch with thanks to Vitalii.;;;","15/Nov/16 04:58;njiang;There were some memory leaks in camel-netty4 unit tests after applied the patch.  
{code}
Failed tests:
  NettyUDPAsyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
  NettyUDPMessageLargerThanDefaultBufferSizeTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@73bb1337]
  NettyUDPObjectSyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@5eed6dfb, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
  NettyUDPSyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
{code}
I will take a look at it later today.;;;","15/Nov/16 08:46;njiang;Just found this issue is cause by my old mistake in the DatagramPacketObjectEncoder. 
I just filled a JIRA CAMEL-10480 for it and the quick fix is on the way.;;;","15/Nov/16 09:19;njiang;Applied the patch into camel master and camel-2.18.x branch with thanks to Vitalii.;;;","16/Nov/16 12:12;githubbot;Github user tivv closed the pull request at:

    https://github.com/apache/camel/pull/1268
;;;",,,,,,,,,,,,,,,,,,,,,,
camel-example-loan-broker : target directory is cleaned while testing so test are failing,CAMEL-10407,13014185,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,21/Oct/16 10:16,21/Oct/16 10:24,14/Jul/23 05:50,21/Oct/16 10:24,,,,,,,,,,,,,,,2.18.1,2.19.0,,,examples,,,,,,,0,,,,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-10-21 10:16:11.0,,,,,,,,,,,"0|i357hr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VM endpoint caching leak the wrong camel context,CAMEL-10406,13014074,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xfournet,xfournet,20/Oct/16 22:06,25/Jan/17 16:18,14/Jul/23 05:50,29/Oct/16 19:55,,,,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-core,,,,,,,0,,,,,,"When consuming from a vm: endpoint, the camel context of the consumed exchange may be the wrong one.
The method org.apache.camel.component.seda.SedaConsumer#prepareExchange is expected to set the adequate camel context, but because of the Endpoint caching in org.apache.camel.component.vm.VmComponent#ENDPOINTS the first context that create the endpoint win. In case the first context is the producer one, the route in the consumer may fail when trying to access to some information from the context

Repro case available here: https://github.com/xfournet/camel/blob/CAMEL-10406/camel-core/src/test/java/org/apache/camel/component/vm/VmShouldUseConsumerContext.java

This is related to CAMEL-6746, reverting this code make this test pass but obviously some other vm test failed.",,davsclaus,xfournet,,,,,,,,,,,,,,,,,,,,,,CAMEL-10747,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 29 19:55:34 UTC 2016,,,,,,,,,,,"0|i356t3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Oct/16 19:55;davsclaus;Thanks for reporting and providing the unit test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OutOfMemoryError: Java heap space when sending large file to endpoint,CAMEL-10399,13013456,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,igarashitm,vvsh,vvsh,19/Oct/16 09:58,27/Oct/16 06:29,14/Jul/23 05:50,27/Oct/16 06:26,2.17.3,2.18.0,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-jetty,,,,,,,0,,,,,,"My route and jetty configuration:

<route id=""ds-rest-archive-upload-processor"">
            <from uri=""jetty:https://storage:8443/data/archive?sslContextParametersRef=sslContextParameters&amp;requestBufferSize=32768&amp;responseBufferSize=32768&amp;httpMethodRestrict=POST"" />

            <to uri=""bean:uploadFromArchiveFileProcessor?method=process"" pattern=""InOut"" />

</route>

<bean id=""jetty"" class=""org.apache.camel.component.jetty9.JettyHttpComponent9"">
        <property name=""endpointClass"" value=""org.apache.camel.component.jetty9.JettyHttpEndpoint9"" />
        <property name=""sslContextParameters"" ref=""sslContextParameters"" />
        <property name=""useContinuation"" value=""true"" />
        <property name=""requestBufferSize"" value=""32768"" />
        <property name=""responseBufferSize"" value=""32768"" />

        <property name=""threadPool"">
            <bean class=""org.eclipse.jetty.util.thread.QueuedThreadPool"">
                <constructor-arg index=""0"" value=""1000"" />
            </bean>
        </property>

        <property name=""jettyHttpBinding"">
            <bean class=""org.apache.camel.component.jetty.DefaultJettyHttpBinding"">
                <property name=""transferException"" value=""false"" />
            </bean>
        </property>
    </bean>

When I send file to this endpoint I have out of memory with this stacktrace:

 java.lang.OutOfMemoryError: Java heap space
      at java.lang.StringCoding.decode(StringCoding.java:215)
      at java.lang.String.<init>(String.java:463)
      at java.lang.String.<init>(String.java:515)
      at org.eclipse.jetty.servlets.MultiPartFilter$Wrapper.getParameterBytesAsString(MultiPartFilter.java:390)
      at org.eclipse.jetty.servlets.MultiPartFilter$Wrapper.getParameterValues(MultiPartFilter.java:337)
      at org.apache.camel.http.common.DefaultHttpBinding.populateRequestParameters(DefaultHttpBinding.java:219)
      at org.apache.camel.http.common.DefaultHttpBinding.readHeaders(DefaultHttpBinding.java:174)
      at org.apache.camel.http.common.DefaultHttpBinding.readRequest(DefaultHttpBinding.java:110)
      at org.apache.camel.http.common.HttpMessage.<init>(HttpMessage.java:52)
      at org.apache.camel.component.jetty.CamelContinuationServlet.doService(CamelContinuationServlet.java:161)
      at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:74)
      at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
      at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)
      at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
      at org.eclipse.jetty.servlets.MultiPartFilter.doFilter(MultiPartFilter.java:200)
      at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:43)
      at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
      at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
      at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
      at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
      at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
      at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
      at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
      at org.eclipse.jetty.server.Server.handle(Server.java:499)
      at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
      at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
      at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
      at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
      at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
      at java.lang.Thread.run(Thread.java:745)",Debian inside docker container,acosentino,davsclaus,githubbot,igarashitm,vvsh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 27 06:24:54 UTC 2016,,,,,,,,,,,"0|i352zr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Oct/16 10:22;acosentino;Is the camel-context deployed as a simple JAR? What are you using inside the Debian container? How much memory has your container?

Did you set JVM_OPTS witch specific values for max Heap size and min Heap size?;;;","19/Oct/16 10:26;davsclaus;Please use the user mailing list / user forum for this kind of help first.

JIRA ticket is not for initial help.

See more details here: http://camel.apache.org/support.html;;;","19/Oct/16 11:45;vvsh;Yes, it is a simple JAR. Actually, I do not know why attachment is read to a string instead of reading directly from InputStream? I expected, that I can send a file of any size and it will be handled.;;;","19/Oct/16 11:47;acosentino;Please, as [~davsclaus] said, use the users mailing-list first.;;;","19/Oct/16 12:08;vvsh;Ok. Thanks.;;;","20/Oct/16 11:24;vvsh;After discussing this issue in mailing list with Tomohisa, it seems that there is a bug in DefaultHttpBinding.populateRequestParameters, when file parameter is processed second time (after it was already processed in DefaultHttpBinding.populateAttachments).;;;","24/Oct/16 12:05;vvsh;[~ancosen], Will you be investigating this issue?;;;","24/Oct/16 12:11;acosentino;I will take a look as soon as I can :-);;;","24/Oct/16 12:20;acosentino;Anyway if [~igarashitm] has time to take a look I'm glad to pass the issue to him since he already started a bit of investigation :-);;;","26/Oct/16 15:33;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1225

    CAMEL-10399 camel-jetty - consumer should not load attachment payload

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10399

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1225.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1225
    
----
commit bb24b663caf901cba9134b7abbbd7b38b6fa2c8b
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-10-26T15:08:03Z

    CAMEL-10399 camel-jetty - consumer should not load attachment payload

----
;;;","27/Oct/16 06:23;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1225
;;;","27/Oct/16 06:24;acosentino;Thanks [~igarashitm] :-) Merged.;;;",,,,,,,,,,,,,,,,,,,,
Can't use parameter type to select among overloaded methods,CAMEL-10396,13013195,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,aldettinger,aldettinger,18/Oct/16 13:30,08/May/17 20:38,14/Jul/23 05:50,19/Feb/17 10:09,2.18.0,,,,,,,,,,,,,,2.19.0,,,,camel-core,,,,,,,0,,,,,,"I've noticed that the overload selection mechanism based on parameter types is not working when some parameters are assignable, in the sense of Class.isAssignableFrom(...).

Given those methods:
{code:borderStyle=solid}
String toString(String input)
String toString(int input)
{code}
We can select both methods via bean:toString(String) or bean:toString(int)

But given those methods:
{code:borderStyle=solid}
String toString(String input)
String toString(Object input)
{code}
bean:toString(String) end in selecting toString(Object).

Ideally, I would expect it to select toString(String). Otherwise, unwinding an AmbiguousCallException may perhaps apply.

Thoughts:
I'm wondering whether ObjectHelper.isOverridingMethod(...) would be mixing overload vs override.

Will attach a test case.",Ubuntu 14.04,aldettinger,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11235,CAMEL-11240,,,,"18/Oct/16 13:39;aldettinger;MethodOverloadCamelTest.java;https://issues.apache.org/jira/secure/attachment/12833945/MethodOverloadCamelTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 19 18:54:57 UTC 2017,,,,,,,,,,,"0|i351ef:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Oct/16 13:39;aldettinger;Uploaded a test case showing the potential issue.;;;","19/Oct/16 10:27;davsclaus;We did some fixes on master branch so you can test with latest code;;;","19/Oct/16 16:58;aldettinger;I've just retested with an up-to-date master branch and it behaves the same way. Would you need more, feel free to ask.;;;","18/Feb/17 22:09;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1477

    CAMEL-10396: Corrected a bug where BeanInfo was missing a method overload

    Actually the `toString(String)` overload was confused by `BeanInfo` to be an override of `toString(Object).`
    Now both methods are available to the overload selection mechanism.
    Could you please have a look at this PR ?
    
      Note that I may have discovered another issue in the overload selection mechanism where I can't select `toString(Object).` I need to qualify that a bit more and may open another ticket if needed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1477.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1477
    
----
commit 89e1946a3194229334ddc4393075844ca3e6990c
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-02-18T15:27:31Z

    CAMEL-10396: Corrected a bug where BeanInfo was missing a method overload

commit 12164b2a4b9a30d1270cf51f771ea169d4084808
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-02-18T15:28:55Z

    CAMEL-10396: Corrected a bug where BeanInfo was missing a method overload

commit d5d8a2604cce22d3bc6c1dac5f63e141fd8815b8
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-02-18T22:02:28Z

    Removed useless code

----
;;;","19/Feb/17 10:09;davsclaus;Thanks for the PR;;;","19/Feb/17 18:54;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1477
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
BlueprintCamelContext cannot find components created in RouteBuilder.configure method,CAMEL-10394,13012911,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,hqstevenson,hqstevenson,17/Oct/16 16:46,05/Mar/18 12:01,14/Jul/23 05:50,04/Nov/16 15:16,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-blueprint,,,,,,,0,,,,,,"When a simple java RouteBuilder that creates a component and adds it to the context in the configure method is used in a blueprint, the context cannot find the component.

Example Builder:
public class TimerRouteBuilder extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        TimerComponent timerComponent = new TimerComponent();

        getContext().addComponent(""my-timer"", timerComponent);

        from( ""my-timer://test-timer"")
                .log(""Timer Fired"")
                .to(""mock://result"");
    }
}

Example Blueprint:
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""
                 http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">

    <bean id=""timer-route-builder"" class=""com.pronoia.camel.builder.TimerRouteBuilder""/>

    <camelContext id=""blueprint-context"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <routeBuilder ref=""timer-route-builder""/>
    </camelContext>

</blueprint>

This test fails:
public class BlueprintTest extends CamelBlueprintTestSupport {
    @EndpointInject(uri = ""mock://result"")
    MockEndpoint result;

    @Override
    protected String getBlueprintDescriptor() {
        return ""/OSGI-INF/blueprint/blueprint.xml"";
    }

    @Test
    public void testRoute() throws Exception {
        result.expectedMessageCount(5);

        assertMockEndpointsSatisfied(10, TimeUnit.SECONDS);
    }

}

But this test passes
public class CamelTest extends CamelTestSupport {

    @EndpointInject(uri = ""mock://result"")
    MockEndpoint result;

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new TimerRouteBuilder();
    }

    @Test
    public void testRoute() throws Exception {
        result.expectedMessageCount(5);

        assertMockEndpointsSatisfied(10, TimeUnit.SECONDS);
    }
}",,davsclaus,githubbot,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12291,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 04 15:35:08 UTC 2016,,,,,,,,,,,"0|i34znb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Oct/16 16:51;hqstevenson;Could this be related to https://issues.apache.org/jira/browse/CAMEL-9570?

If I use the same type of workaround (a subclass of BlueprintCamelContext and bypass the Camel Blueprint Extender), I can make it work.;;;","02/Nov/16 19:32;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1246

    CAMEL-10394: Resolve components from Camel Context

    Check the camel context for a component registered under the given name before creating a service reference.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10394

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1246.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1246
    
----
commit 03528e3dd1bfdd9a3ef52003e2fa73301f1a3fbd
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-11-02T19:30:20Z

    CAMEL-10394: Resolve components from Camel Context before creating service reference

----
;;;","04/Nov/16 15:16;davsclaus;Thanks for the PR;;;","04/Nov/16 15:35;githubbot;Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1246
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
simple language nullsafe expression fails on empty array,CAMEL-10386,13012158,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,dmitriyC300,dmitriyC300,13/Oct/16 21:33,14/Oct/16 08:47,14/Jul/23 05:50,14/Oct/16 08:47,2.17.3,2.18.0,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-core,,,,,,,0,,,,,,"limitation w/ simple language on the 1st index of an empty array with a nullsafe expression  

sample expression: ${in.body?.list[0].toString}

org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: ?.get('list')[0].toString on java.util.HashMap due to: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0 
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:120) 
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:138) 
        at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126) 
        at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118) 
        at org.apache.camel.builder.ExpressionBuilder$40.evaluate(ExpressionBuilder.java:993) 
        at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) 
        at org.apache.camel.TestSupport.assertExpression(TestSupport.java:255) 
        at org.apache.camel.ContextTestSupport.assertExpression(ContextTestSupport.java:314) 
        at org.apache.camel.LanguageTestSupport.assertExpression(LanguageTestSupport.java:62) 
        at org.apache.camel.LanguageTestSupport.assertExpression(LanguageTestSupport.java:69) 
        at org.apache.camel.language.simple.SimpleTest.testOGNLBodyEmptyList(SimpleTest.java:267) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 
        at java.lang.reflect.Method.invoke(Method.java:497) 
        at junit.framework.TestCase.runTest(TestCase.java:176) 
        at junit.framework.TestCase.runBare(TestCase.java:141) 
        at org.apache.camel.TestSupport.runBare(TestSupport.java:58) 
        at junit.framework.TestResult$1.protect(TestResult.java:122) 
        at junit.framework.TestResult.runProtected(TestResult.java:142) 
        at junit.framework.TestResult.run(TestResult.java:125) 
        at junit.framework.TestCase.run(TestCase.java:129) 
        at junit.framework.TestSuite.runTest(TestSuite.java:252) 
        at junit.framework.TestSuite.run(TestSuite.java:247) 
        at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86) 
        at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 
        at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) 
Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0 
        at java.util.ArrayList.rangeCheck(ArrayList.java:653) 
        at java.util.ArrayList.get(ArrayList.java:429) 
        at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.lookupResult(BeanExpression.java:385) 
        at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:334) 
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114) ",,davsclaus,dmitriyC300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Fri Oct 14 08:47:51 UTC 2016,,,,,,,Patch Available,,,,"0|i34v3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Oct/16 08:47;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
simple ognl expression issue w/ list & spring boot,CAMEL-10385,13011871,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dmitriyC300,dmitriyC300,13/Oct/16 03:18,14/Oct/16 13:22,14/Jul/23 05:50,14/Oct/16 08:14,2.17.0,2.17.3,2.18.0,,,,,,,,,,,,2.18.1,2.19.0,,,camel-spring-boot,,,,,,,0,,,,,,"conflict running simple expression w/ list under spring boot.  SpringTypeConverter is registered as a fallback converter which gets picked up during ognl while attempting to convert list -> map causing an exception instead of a null response that is expected.  It is happening under 2.17 & 2.18.

sample expression: ${body.list[0].field} 

10:20:32.499 [main] TRACE o.a.c.i.c.DefaultTypeConverter | Converting java.util.ArrayList -> java.util.Map 
10:20:32.500 [main] TRACE o.a.c.i.c.DefaultTypeConverter | Using converter: org.apache.camel.impl.converter.ArrayTypeConverter@79d7035 to convert [class java.util.ArrayList=>interface java.util.Map] 


Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.util.ArrayList to the required type: java.util.Map with due Failed to convert from type [java.util.ArrayList<?>] to type [java.util.Map<?, ?>] 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629) 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:150) 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:121) 
        at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.lookupResult(BeanExpression.java:358) 
        at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:334) 
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114) 
        ... 55 common frames omitted 
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.util.ArrayList<?>] to type [java.util.Map<?, ?>] 
        at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:42) 
        at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) 
        at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176) 
        at org.apache.camel.spring.boot.SpringTypeConverter.convertTo(SpringTypeConverter.java:46) 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:346) 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) 
        ... 59 common frames omitted ",,davsclaus,dmitriyC300,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Fri Oct 14 13:22:18 UTC 2016,,,,,,,Patch Available,,,,"0|i34tbr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Oct/16 05:50;githubbot;GitHub user dmitriyC300 opened a pull request:

    https://github.com/apache/camel/pull/1209

    CAMEL-10385: springtypeconverter return null on list -> map

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmitriyC300/camel CAMEL-10385

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1209.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1209
    
----
commit de208e8c9d8a60e8c2738932707cd638865bb5f2
Author: dmitriy <xhub4u@gmail.com>
Date:   2016-10-13T05:37:50Z

    CAMEL-10385: springtypeconverter return null on list -> map

----
;;;","14/Oct/16 08:15;davsclaus;Thanks for the PR;;;","14/Oct/16 13:22;githubbot;Github user dmitriyC300 closed the pull request at:

    https://github.com/apache/camel/pull/1209
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shutdown broken when using Spring Boot,CAMEL-10384,13011701,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,amr,amr,12/Oct/16 15:57,29/Oct/16 20:06,14/Jul/23 05:50,29/Oct/16 20:06,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-spring-boot,,,,,,,1,,,,,,"Camel doesn't shutdown properly in a Spring Boot environment. Calling the /shutdown endpoint causes Camel to hang-up after stopping the CamelContext. The reason for this is the count-down latch in the CamelSpringBootApplicationController. The overriden Main class modifies the latch in the Main class itself, not the one in CamelSpringBootApplicationController. As a result, the latch in CamelSpringBootApplicationController is waiting forever preventing a proper shutdown.

{code:title=CamelSpringBootApplicationController .java|borderStyle=solid}
    public CamelSpringBootApplicationController(final ApplicationContext applicationContext, final CamelContext camelContext) {
        this.main = new Main() {
             
            ...

            @Override
            protected void doStop() throws Exception {
                LOG.debug(""Controller is shutting down CamelContext"");
                try {
                    super.doStop();
                } finally {
                    // Should be CamelSpringBootApplicationController.this.latch.countDown();
                    latch.countDown();
                }
            }
        };
    }
{code}
",,amr,davsclaus,tkopczynski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 29 20:06:10 UTC 2016,,,,,,,,,,,"0|i34s9z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Oct/16 08:15;davsclaus;You are welcome to work on a PR to fix this;;;","29/Oct/16 20:06;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
activemq-camel - Issue with parsing uri to determine queue vs topic,CAMEL-10383,13011603,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Oct/16 08:39,16/Oct/16 11:15,14/Jul/23 05:50,16/Oct/16 11:15,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-catalog,,,,,,,0,,,,,,"See screenshot

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Oct/16 08:40;davsclaus;camel-doc-bug-jms.png;https://issues.apache.org/jira/secure/attachment/12832849/camel-doc-bug-jms.png",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-10-12 08:39:41.0,,,,,,,,,,,"0|i34ro7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-google-mail getting NPE from component configuration,CAMEL-10381,13011464,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,11/Oct/16 19:03,11/Oct/16 19:15,14/Jul/23 05:50,11/Oct/16 19:15,2.18.0,,,,,,,,,,,,,,2.17.3,2.18.1,2.19.0,,,,,,,,,0,,,,,,"From forums:

When i run the application and start the route i get an NPE which points to

org.apache.camel.component.google.mail.GoogleMailComponent.getClient(GoogleMailComponent.java:50

as the culprit.
",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 11 19:15:57 UTC 2016,,,,,,,,,,,"0|i34qtb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Oct/16 19:15;janstey;[janstey@ghost camel-google-mail]$ git push 
Counting objects: 39, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (27/27), done.
Writing objects: 100% (39/39), 4.29 KiB | 0 bytes/s, done.
Total 39 (delta 13), reused 0 (delta 0)
remote: camel git commit: CAMEL-10381 - fix NPE from component configuration
remote: camel git commit: CAMEL-10381 - fix NPE from component configuration
remote: camel git commit: CAMEL-10381 - fix NPE from component configuration
To https://git-wip-us.apache.org/repos/asf/camel.git
   9fc87f2..592e7cf  camel-2.17.x -> camel-2.17.x
   fa1789a..37a12df  camel-2.18.x -> camel-2.18.x
   da614b7..5d79ddc  master -> master
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JettyHttpEndpoint9 ignores eagerCheckContentAvailable so Jetty builds a reuqest with ""Transfer-Encoding: chunked""",CAMEL-10380,13011348,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,rudibatt,rudibatt,11/Oct/16 13:57,17/Oct/16 09:34,14/Jul/23 05:50,17/Oct/16 09:34,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-jetty,,,,,,,0,,,,,,"My original problem is the fact, that in a Jetty based proxy the consumer sets the header ""Transfer-Encoding: chunked"" to the backend request for a GET request without body. This is not necessary, since there is no body, but the http component puts that null body into a InputStreamCache/HttpInputOverHTTP. This happens, because there is no content-length header set (which means it's ""-1""):
see https://github.com/apache/camel/blob/master/components/camel-http-common/src/main/java/org/apache/camel/http/common/DefaultHttpBinding.java#L564

The only workaround I found, is to set ""eagerCheckContentAvailable=true"". Unfortunately the JettyHttpEndpoint9 does not transfer this setting to the http binding and therefor my problem can't be fixed. (Ok, I found another workaround, but it's really ugly.)

I found that problem using camel-2.17. In the current master branch, there is an open TODO to transfer this option:
https://github.com/apache/camel/blame/master/components/camel-jetty9/src/main/java/org/apache/camel/component/jetty9/JettyHttpEndpoint9.java#L52
For me this fixed the problem in my ""test"".

I didn't manage to build a good test, since that header is set deeply inside ""org.eclipse.jetty.client.HttpConnection.normalizeRequest(Request)"", but it's easy to reproduce it, by running a simple proxy and enable DEBUG log for ""org.eclipse.jetty.client.HttpSender"":

Inside the log a http header like will be logged:

{noformat}
Accept-Encoding: gzip
User-Agent: Jetty/9.2.15.v20160210
sendDirect: true
Host: 127.0.0.1
Transfer-Encoding: chunked
{noformat}

This is the test I used to reproduce and debug that problen
{code}
public class JettyEndpointsChuckedFalseTest extends BaseJettyTest {
    
    @Test
    public void runningTest() throws Exception {
        Exchange exchange = template.request(""http://localhost:{{port}}/test"", new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
            	exchange.getIn().getBody();
            }
        });
        assertNotNull(exchange);
    }
    
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

            	from(""jetty:http://localhost:{{port}}/test?matchOnUriPrefix=true&chunked=false&disableStreamCache=true""
            			+ ""&eagerCheckContentAvailable=true"")
	            	.to(""log:request-debug?showHeaders=true&showBody=false&level=INFO"")
	            	.to(""jetty:http://localhost:{{port2}}/test?bridgeEndpoint=true&chunked=false"");
            	
                from(""jetty:http://localhost:{{port2}}/test"")
                	.to(""mock:dead.end"");
            }
        };
    }
}
{code}
",,davsclaus,rudibatt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Oct 16 11:16:51 UTC 2016,,,,,,,,,,,"0|i34q47:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Oct/16 15:31;rudibatt;My workaround:
{noformat}
<when>
        <simple>${bodyAs(String)} == ''</simple>
        <setBody><simple>${null}</simple></setBody>
</when>
{noformat};;;","16/Oct/16 11:16;davsclaus;Contributions with PR is welcome;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInfo#introspect does not work correctly with bridge methods,CAMEL-10376,13011029,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bduisenov,bduisenov,10/Oct/16 13:14,13/Oct/16 08:24,14/Jul/23 05:50,12/Oct/16 10:57,2.17.3,2.18.0,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-core,,,,,,,0,,,,,,"Instead of selecting implementation method, {{bridge method}} is used. We faced an issue with conversion of parameter when {{bean}} implements generic interface.
For example having {{bean}} implementation like this:
{code}
    public interface Service<R> {

        int process(R request);
    }

    public static class MyService implements Service<Request> {

        public int process(Request request) {
            return request.x + 1;
        }
    }
{code}
would lead to {{beanInfo}} containing {{Method}} with signature 
{code}
public abstract int process(Object request)
{code}
in {{methodMap}}

This is not correct as conversion of parameter is not possible in this case.

I could find an issue with the same problem that was previously fixed (CAMEL-8940), but later on it was broken with CAMEL-9656 (commit 5639b78).
",,bduisenov,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 12 11:01:52 UTC 2016,,,,,,,,,,,"0|i34o5r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Oct/16 13:47;githubbot;GitHub user bduisenov opened a pull request:

    https://github.com/apache/camel/pull/1204

    CAMEL-10376 BeanInfo should prefer implementation methods instead of bridged methods

    see [jira ticket](https://issues.apache.org/jira/browse/CAMEL-10376)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bduisenov/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1204.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1204
    
----
commit 35319119a486b1acbc12a0a96a4ca2aa4f3e41ed
Author: Babur Duisenov <bduisenov@gmail.com>
Date:   2016-10-10T13:46:09Z

    CAMEL-10376 BeanInfo should prefer implementation methods instead of bridged methods

----
;;;","12/Oct/16 10:57;davsclaus;Thanks for the PR;;;","12/Oct/16 11:01;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1204
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-stream - Component doc issue,CAMEL-10372,13010451,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Oct/16 13:10,07/Oct/16 15:09,14/Jul/23 05:50,07/Oct/16 15:09,2.18.0,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-stream,,,,,,,0,,,,,,A little mistake,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-10-07 13:10:02.0,,,,,,,,,,,"0|i34klb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Conversion to CxfPayload throws Exception for Non-XML payload,CAMEL-10370,13009563,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,siano,siano,04/Oct/16 14:18,06/Oct/16 05:44,14/Jul/23 05:50,06/Oct/16 05:44,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-cxf,,,,,,,0,,,,,,"The CxfPayloadConverter throws a runtime Exception for (optional) conversion from byte[] to CxfPayload instead of returning null when the body is not valid XML.
",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-10-04 14:18:01.0,,,,,,,Patch Available,,,,"0|i34f3z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unused deflater in ZipDataFormat,CAMEL-10368,13009511,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,forsthofer,forsthofer,forsthofer,04/Oct/16 11:47,04/Oct/16 12:13,14/Jul/23 05:50,04/Oct/16 12:04,,,,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-core,,,,,,,0,,,,,,"In the ZipDataForamt class you find

 final Deflater deflater = new Deflater(compressionLevel);
        final DeflaterOutputStream zipOutput = new DeflaterOutputStream(stream, new Deflater(compressionLevel));
        try {
            IOHelper.copy(is, zipOutput);
        } finally {
            IOHelper.close(is, zipOutput);
            
            /*
            * As we create the Deflater our self and do not use the stream default
            * (see {@link java.util.zip.DeflaterOutputStream#usesDefaultDeflater})
            * we need to close the Deflater to not risk a OutOfMemoryException
            * in native code parts (see {@link java.util.zip.Deflater#end})
            */
            deflater.end();
        }

the deflater variable should be used in the DeflaterOutputStream

final DeflaterOutputStream zipOutput = new DeflaterOutputStream(stream, deflater);
",,acosentino,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 04 12:13:06 UTC 2016,,,,,,,,,,,"0|i34esn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Oct/16 11:52;acosentino;Franz, since we are in the process of releasing 2.18.0, please hold on on commit new code (if it's a big refactor or a big change I mean).;;;","04/Oct/16 12:05;forsthofer;Hello Andrea,

it is only a very small change. So I have committed. I hope this is no problem for you. Sorry for any inconvenience.
;;;","04/Oct/16 12:10;acosentino;I guess there will be problem :-)

The release was already cut, I didn't notice that we now have a camel-2.18.x branch. So it seems everything is fine :-);;;","04/Oct/16 12:13;acosentino;Sorry, there will be no problem :-D;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing input/output values in camel-catalog for several eips,CAMEL-10366,13009476,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,aurelien.pupier,aurelien.pupier,04/Oct/16 09:00,06/Oct/16 02:37,14/Jul/23 05:50,06/Oct/16 02:36,2.18.0,,,,,,,,,,,,,,2.19.0,,,,camel-catalog,,,,,,,0,,,,,,"In camel-catalog jar in org.apache.camel.catalog.models/*.json,
some of the files does not define the input/output values

list of elements for which it is missing:
beanPostProcessor, errorHandler, endpoint, streamCaching, propertiesFunction, export, restContext, propertyPlaceholder, fluentTemplate, template, consumerTemplate, camelContext, routeContext, jmxAgent, redeliveryPolicyProfile, threadPool, proxy",,aurelien.pupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 06 02:37:05 UTC 2016,,,,,,,,,,,"0|i34ekv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Oct/16 10:07;davsclaus;They are not part of <route> and EIPs. And they do not have input and ouputs.

They are the other kind of configuration you can do.;;;","04/Oct/16 10:46;aurelien.pupier;if they have no input or output, shouldn't the value of input and output set to ""false"" instead of not setting any value?;;;","05/Oct/16 14:47;davsclaus;We could add them and hardcode them to false, so all the model files have those attributes.

But this change may slip 2.18.0. 

If you think this makes sense to add them as false, then you are welcome to reopen the ticket.;;;","06/Oct/16 02:37;davsclaus;I found some time to fix this.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Camel-consul] Invalid syntax,CAMEL-10365,13009264,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,aurelien.pupier,aurelien.pupier,03/Oct/16 15:54,06/Oct/16 02:37,14/Jul/23 05:50,06/Oct/16 02:37,2.18.0,,,,,,,,,,,,,,2.19.0,,,,camel-consul,,,,,,,0,,,,,,"The syntax provided https://github.com/apache/camel/blob/1019bb164f4271ac4b486646da3e70a02ec44006/components/camel-consul/src/main/java/org/apache/camel/component/consul/ConsulEndpoint.java#L30 is invalid.

I suppose that the '//' need to be removed",,aurelien.pupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 06 02:37:50 UTC 2016,,,,,,,,,,,"0|i34d9r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Oct/16 10:08;davsclaus;Yes the // should be removed.;;;","06/Oct/16 02:37;davsclaus;I found some time to fix this on an airplane;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Camel-Chronicle] chronicle-engine component provide a wrong syntax,CAMEL-10364,13009259,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,aurelien.pupier,aurelien.pupier,03/Oct/16 15:44,06/Oct/16 02:37,14/Jul/23 05:50,06/Oct/16 02:37,2.18.0,,,,,,,,,,,,,,2.19.0,,,,,,,,,,,0,,,,,,"(the camel-chronicle component is missing in JIRA)

https://github.com/apache/camel/blob/2bbc1368b233f630f6acbf6d6c8d52ec5f1d1772/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineEndpoint.java#L31

syntax = ""chronicle-engine:addresses/path"" --> addresses does not exist",,aurelien.pupier,davsclaus,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 06 02:37:31 UTC 2016,,,,,,,,,,,"0|i34d8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Oct/16 02:37;davsclaus;I found some time to fix this on an airplane;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix failing test org.apache.camel.component.salesforce.RestApiIntegrationTest.testQueryAll,CAMEL-10359,13008792,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,30/Sep/16 02:32,30/Sep/16 02:42,14/Jul/23 05:50,30/Sep/16 02:42,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-salesforce,,,,,,,0,,,,,,The test fails since the {{XmlRestProcessor}} is missing a case for {{QUERY_ALL}} enum in {{processRequest()}}. ,,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 30 02:42:52 UTC 2016,,,,,,,,,,,"0|i34adj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Sep/16 02:42;dhirajsb;Resolved with https://github.com/apache/camel/commit/9c4449c093ecfd5948747b710365925ed7056d71;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebSockets options are ignored,CAMEL-10342,13007574,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dcendents,dcendents,26/Sep/16 13:37,27/Sep/16 06:33,14/Jul/23 05:50,27/Sep/16 06:33,2.16.3,,,,,,,,,,,,,,2.18.0,,,,camel-websocket,,,,,,,0,,,,,,"Setting maxTextMessageSize or maxBinaryMessageSize has no effect, messages above the limit are still consumed and the route is started.

I was debugging it to understand what was wrong and I came to the conclusion that parameters are set correctly on the camel WebSocketEndpoint and then on the ServletContextHandler (in camel method WebSocketComponent.setWebSocketComponentServletInitialParameter).

But then the same values are null in jetty method WebSocketServlet.init() and they are not set on the WebSocketFactory.

When I open a WebSocket connection I can see the default values are used instead of my settings in jetty WebSocketFactory.upgrade method.

I think the problem is the init parameters that are set on the camel ServletContextHandler are not copied on the jetty ServletHolder.

If I override the websocket bean in blueprint.xml with my own and override the createServlet method to copy the parameters then everything works correctly.

So effectively changing the line in createServlet
	handler.addServlet(new ServletHolder(servlet), pathSpec);
By
	ServletHolder servletHolder = new ServletHolder(servlet);
	servletHolder.setInitParameters(handler.getInitParams());
	handler.addServlet(servletHolder, pathSpec);

Also I think the unit test WebscoketEndpointConfigurationTest.testSetServletInitalparameters is wrong, it simply verifies that the values are set in camel but never checks they are set correctly on the jetty side.
",,dcendents,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 27 06:33:01 UTC 2016,,,,,,,,,,,"0|i342uv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Sep/16 20:27;githubbot;GitHub user dcendents opened a pull request:

    https://github.com/apache/camel/pull/1187

    CAMEL-10342: correctly set the web socket parameters

    
    Fixes https://issues.apache.org/jira/browse/CAMEL-10342


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dcendents/camel websocket_parameters

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1187.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1187
    
----
commit 97476b994009852df5af9d1a8c6d0f537f074004
Author: Daniel Beland <daniel.beland@ca.thalesgroup.com>
Date:   2016-09-26T20:19:37Z

    CAMEL-10342: correctly set the web socket parameters from the endpoint uri

----
;;;","27/Sep/16 06:33;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1187
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When using SSL, a NettyConsumer set to Client Mode does not initiate a handshake",CAMEL-10341,13007125,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,mattshaw,mattshaw,23/Sep/16 11:12,26/Oct/16 14:35,14/Jul/23 05:50,26/Oct/16 14:34,2.17.1,2.17.2,2.17.3,,,,,,,,,,,,2.17.4,2.18.1,2.19.0,,camel-netty4,,,,,,,0,,,,,,"When used as a Consumer Netty can be put into {{clientMode}}, which will cause it to act as a client rather than a server.  However when SSL is enabled on the endpoint the SSL Handshake does not occur.

{{DefaultServerInitializerFactory}} creates a new {{SslHandler}} on-demand during channel initialisation, but forces the {{SSLEngine}} to _not_ use client mode, regardless of the setting in the {{NettyConfiguration}} instance.

To cause handshakes to happen when in client mode, set the section in {{DefaultServerInitializerFactory.configureServerSSLOnDemand()}} to:
{code}
SSLEngine engine = sslContext.createSSLEngine();
engine.setUseClientMode(consumer.getConfiguration().isClientMode());
engine.setNeedClientAuth(consumer.getConfiguration().isNeedClientAuth());
{code}

For reference see [StackOverflow|http://stackoverflow.com/q/39574656/218597].",,acosentino,davsclaus,mattshaw,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Sep/16 09:49;mattshaw;0001-Added-fix-for-SSL-Consumer-in-Client-Mode-not-initia.patch;https://issues.apache.org/jira/secure/attachment/12831091/0001-Added-fix-for-SSL-Consumer-in-Client-Mode-not-initia.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 26 14:35:14 UTC 2016,,,,,,,,,,,"0|i3402v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Sep/16 06:02;davsclaus;Are you able to work on a patch / github PR with a fix for this?;;;","30/Sep/16 09:49;mattshaw;Patch and unit tests uploaded to fix the issue.;;;","26/Oct/16 14:35;acosentino;Thanks [~mattshaw], merged on master, camel-2.18.x and camel-2.17.x

:-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-aws - SQS option deleteAfterRead not work if set deleteIfFiltered=false,CAMEL-10340,13007030,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,yanbasic,yanbasic,23/Sep/16 03:25,23/Nov/16 10:14,14/Jul/23 05:50,30/Sep/16 11:59,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.0,,,camel-aws,,,,,,,0,,,,,,"I'm using aws-sqs 2.17.3, if I set deleteAfterRead=true and deleteIfFiltered=false in my DSL, the message will not be deleted. If I want to delete the message after read it, I have to set deleteAfterRead and deleteIfFiltered both with true when I use the two options in one DSL, but in fact there is no filter in my route, the message should be removed whatever the deleteIfFiltered option set to ture or false.

{code:title=SqsConsumerDeleteTest.java|borderStyle=solid}
from(""aws-sqs:my-quque""
    + ""?amazonSQSClient=#conn_cAWSConnection_1""
    + ""&deleteAfterRead="" + true + ""&deleteIfFiltered=""
    + false).to(""log:qs_route.cLog_1"" + ""?level=DEBUG"").to(""mock:mock_1"");
{code}

I attached my test file, after run the test method, the sqs message still exists in the sqs queue after 30 seconds.
",,acosentino,githubbot,JonW9,yanbasic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Sep/16 03:26;yanbasic;SqsConsumerDeleteTest.java;https://issues.apache.org/jira/secure/attachment/12829982/SqsConsumerDeleteTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 23 10:14:41 UTC 2016,,,,,,,,,,,"0|i33zhz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Sep/16 09:30;acosentino;{code}
    private boolean shouldDelete(Exchange exchange) {
        return getConfiguration().isDeleteAfterRead()
                && (getConfiguration().isDeleteIfFiltered()
                    || (!getConfiguration().isDeleteIfFiltered()
                        && passedThroughFilter(exchange)));
    }
{code}

https://github.com/apache/camel/blob/master/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java#L245-L250

The condition is not good for your case. It will always return false.;;;","28/Sep/16 09:40;acosentino;Since you're not using a filter, it doesn't make sense to specify deleteIfFiltered parameter.

I assume this from your example.;;;","29/Sep/16 02:34;yanbasic;Hi Andrea,

Thank you for your reply! I list the relationship table between 'delete after read' and 'if filtered' options by the sqs consumer source code: 
||deleteAfterRead(option)||deleteIfFiltered(option)||Passed by filter||result to delete||
|Yes|Yes|Yes/No|Delete|
|Yes|No|Yes|Delete|
|Yes|No|No|Do not delete|
|No|Yes/No|Yes/No|Do not delete|

After that, I added a filter in my route and it works when the deleteAfterRead is false, but when I set both deleteAfterRead and deleteIfFiltered to true, all the messages have been removed in my queue finally, that means if the deleteIfFiltered is true, the message will be always removed whether or not the route has filter, is it expected result?

Thanks,
Yi




Here is my code, in this route deleteAfterRead and deleteIfFiltered are both true, filtered the message body with 'bar', should it only delete the 'bar' message in SQS queue?
{code}
from(
        ""aws-sqs:myQueue?amazonSQSClient=#myClient&deleteAfterRead=true&deleteIfFiltered=true"")
        .filter().simple(""${body} == 'bar'"")
        .to(""log:r1.myLog1?level=INFO"");

from(""timer:myTimer1?repeatCount=2&delay=1000"")
        .setBody().constant(""foo"")
        .to(""aws-sqs:myQueue?amazonSQSClient=#myClient"");

from(""timer:myTimer2?repeatCount=3&delay=1000"")
        .setBody().constant(""bar"")
        .to(""aws-sqs:myQueue?amazonSQSClient=#myClient"");
{code};;;","29/Sep/16 07:17;acosentino;Hello [~yanbasic],

Looking at the docs of AWS-SQS component I see:

deleteIfFiltered: Camel 2.12.2,2.13.0 Whether or not to send the DeleteMessage to the SQS queue if an exchange fails to get through a filter. If 'false' and exchange does not make it through a Camel filter upstream in the route, then don't send DeleteMessage.

In your route all the messages will be deleted because you set deleteAfterRead to true (and 'bar' will be deleted too), since deleteIfFiltered is set to true, the or operator will return true and the whole condition will be true, without taking into account the filter. So I guess the deleteIfFiltered will work only if deleteAfterRead is set to false. I guess this is expected because deleteIfFiltered has a default value of true, like deleteAfterRead.

I believe we should change this behaviour or at least evaluate the two behaviour in a separated way.;;;","30/Sep/16 10:06;yanbasic;What about to change the behavior like this? When deleteAfterRead is set to true, it will always remove message, and the deleteIfFiltered with true value will only work that the route must has a filter, and the message passed through the filter. I have test by this modification, it works as expected.

{code}
    private boolean shouldDelete(Exchange exchange) {
        boolean shouldDeleteByFilter = exchange.getProperty(Exchange.FILTER_MATCHED) != null
                && getConfiguration().isDeleteIfFiltered()
                && passedThroughFilter(exchange);
        return getConfiguration().isDeleteAfterRead()
                || shouldDeleteByFilter;
    }
{code};;;","30/Sep/16 10:10;acosentino;I think it is a good idea.

Can you open a PR against master?

I will add your contribution and then backport on 2.17;;;","30/Sep/16 11:16;githubbot;GitHub user yanbasic opened a pull request:

    https://github.com/apache/camel/pull/1193

    CAMEL-10340: Adjusted deleteIfFiltered behavior for aws-sqs component

    Hello, 
    
    Please review my code by fixing CAMEL-10340.
    
    Thanks,
    Yi Yan

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yanbasic/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1193.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1193
    
----
commit 631e463c8c710965b6b7c35cde19250c3c0e5ac1
Author: Mike Yan <yyan@talend.com>
Date:   2016-09-30T11:13:44Z

    CAMEL-10340: Adjusted deleteIfFiltered behavior for aws-sqs component

----
;;;","30/Sep/16 11:18;yanbasic;Hello Andrea,

I have opened the PR on master by the discussion result.

Thanks,
Yi;;;","30/Sep/16 12:24;githubbot;Github user yanbasic closed the pull request at:

    https://github.com/apache/camel/pull/1193
;;;","23/Nov/16 08:50;acosentino;[~yanbasic], can you comment here? https://github.com/apache/camel/commit/50dc4ea14c0ad6d3d93cfe4ddb386a006d1fafcc

It seems the change breaks particular scenarios.;;;","23/Nov/16 09:13;JonW9;Hi,

As per comments on the commit here:  https://github.com/apache/camel/commit/50dc4ea14c0ad6d3d93cfe4ddb386a006d1fafcc

This change has changed the behaviour of our routes and deviates from the documentation. Can I ask if this is what was intended? ...this doesn't seem to match what was in the Camel-SQS documentation.

The code before was:

{code}
    private boolean shouldDelete(Exchange exchange) {
        return getConfiguration().isDeleteAfterRead()
                && (getConfiguration().isDeleteIfFiltered()
                    || (!getConfiguration().isDeleteIfFiltered()
                        && passedThroughFilter(exchange)));
    }
{code}

Which matched the documentation:

deleteAfterRead: Delete message from SQS after it has been read (and processed by the route).
deleteIfFiltered: If false and exchange does not make it through a Camel filter upstream in the route, then don't send DeleteMessage.

With the above code, deleteAfterRead needed to be set to ""true"" for ANY message to be deleted, filtered or not. Then, it was up to the configuration of deleteIfFiltered - if this was set to false then as the documentation states the message would not be deleted if if didn't pass through the filter.

So, our config of:
deleteAfterRead = true (default)
deleteIfFiltered = false

...gave the right outcome. Messages that were filtered ""out"" (i.e. not allowed through the filter) were not deleted from SQS.

However, the new code commit has changed this behaviour.

Firstly:

{code}
return getConfiguration().isDeleteAfterRead() && (...filteringLogic...)
{code}

..has changed to:

{code}
return getConfiguration().isDeleteAfterRead() || shouldDeleteByFilter;
{code}

.. an && becoming an || which means for the filtering logic to take effect the deleteAfterRead must now be set to false.  This isn't covered in the documentation and is a change of behaviour from before.

Secondly:

{code}
|| (!getConfiguration().isDeleteIfFiltered() && passedThroughFilter(exchange)));
{code}

..has changed to:

{code}
... && getConfiguration().isDeleteIfFiltered() && passedThroughFilter(exchange);
{code}

.. this time the negation has been removed, so the logic has now changed to not looking at whether the message was filtered out, but whether is was allowed through the filter.

With the new code that has been committed, to get the same behaviour as before you now have to set deleteAfterRead to ""false"" and deletedIfFiltered to ""true"" so that messages filtered out are not deleted, and those that pass the filter are.

New config:
deleteAfterRead = false
deleteIfFiltered = true

Is this what was intended? Seems to be a departure from the documentation? If so is the documentation going to be updated? ..or should the logic be put back how it was?

I believe, reading the posts above, that the code worked the way it was; if deleteAfterRead was set to true and deleteIfFiltered was set to false then the scenarios above would have worked - messages that did not pass the filter would not have been deleted; those that did pass the filter would have been.  I don't see why the code was changed!;;;","23/Nov/16 09:19;acosentino;This must be reverted. Thanks for your detailed explanation [~JonW9].

[~davsclaus], are you ok with the revert?;;;","23/Nov/16 09:29;yanbasic;I have added my comment here https://github.com/apache/camel/commit/50dc4ea14c0ad6d3d93cfe4ddb386a006d1fafcc

;;;","23/Nov/16 09:58;acosentino;We'll wait for further discussions.;;;","23/Nov/16 10:00;acosentino;Anyway the answer from [~yanbasic], seems to clarify the situation. We can add the table to our documentation in the related .adoc.;;;","23/Nov/16 10:14;JonW9;I don't think the table from [~yanbasic] is 100% correct.  I've posted my interpretation (https://github.com/apache/camel/commit/50dc4ea14c0ad6d3d93cfe4ddb386a006d1fafcc).

Please have a look and correct my understanding!!

Thanks everyone for the amazingly quick replies!!!;;;",,,,,,,,,,,,,,,,
Markdown formatting improvement for CDI-OSGI Example,CAMEL-10338,13006801,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,acosentino,jpoth,jpoth,22/Sep/16 09:53,22/Sep/16 10:08,14/Jul/23 05:50,22/Sep/16 10:06,,,,,,,,,,,,,,,2.18.0,,,,examples,,,,,,,0,,,,,,,,githubbot,jpoth,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 22 10:08:05 UTC 2016,,,,,,,,,,,"0|i33y33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Sep/16 10:00;githubbot;GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1185

    CAMEL-10338 - Fix formatting in CDI-OSGI example readme

    https://issues.apache.org/jira/browse/CAMEL-10338

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10338

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1185.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1185
    
----
commit 86b0f2fe4bb1abbfdef7dc25accaaa6a22863603
Author: jpoth <poth.john@gmail.com>
Date:   2016-09-22T09:57:26Z

    CAMEL-10338 - Fix formatting in CDI-OSGI example readme

----
;;;","22/Sep/16 10:08;githubbot;Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1185
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Hazelcast aggregation repository tests may fail if multiple network interfaces are configured on th host,CAMEL-10326,13005394,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,16/Sep/16 10:02,16/Sep/16 10:06,14/Jul/23 05:50,16/Sep/16 10:06,,,,,,,,,,,,,,,2.18.0,,,,camel-hazelcast,,,,,,,0,,,,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-09-16 10:02:48.0,,,,,,,,,,,"0|i33pg7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Choice breaks Advice - UnsupportedOperationException,CAMEL-10322,13005189,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,flavouski,flavouski,15/Sep/16 15:24,24/Oct/16 07:22,14/Jul/23 05:50,24/Oct/16 07:22,2.16.3,,,,,,,,,,,,,,2.19.0,,,,camel-core,,,,,,,0,,,,,,"Choice seems to break advice because it is trying to add a task to an abstract array list? (AdviceWithTasks::line 151);

Somewhat related to: https://issues.apache.org/jira/browse/CAMEL-8798

Attached is example of advice breaking.",,aldettinger,davsclaus,flavouski,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Sep/16 15:25;flavouski;ChoiceIssueTest.groovy;https://issues.apache.org/jira/secure/attachment/12828660/ChoiceIssueTest.groovy",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 24 07:22:17 UTC 2016,,,,,,,,,,,"0|i33o6n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Sep/16 15:25;flavouski;Attached Test;;;","08/Oct/16 01:37;davsclaus;Can you try with latest Camel release. And if possible create an unit test in Java code.;;;","21/Oct/16 15:02;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1220

    Added a test class to ensure CAMEL-10322 non-regression

    Hi,
    
      In the context of [CAMEL-10322](https://issues.apache.org/jira/browse/CAMEL-10322), I have implemented a test reproducing the issue on 2.16.3 and demonstrating the issue correction at least in 2.19.0-SNAPSHOT.
    
      On my machine, I could run commands above against camel-core:
      mvn clean compile -P sourcecheck => ok
      mvn install => ok
    
      I could manage the JIRA issue but I don't have permission yet. Could someone bring me in ?
    
    Many thanks

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1220.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1220
    
----
commit 3becd4acb692fa9400185638f3a6dca8f501922a
Author: aldettinger <aldettinger@gmail.com>
Date:   2016-10-21T14:44:04Z

    Added a test class to ensure CAMEL-10322 non-regression

----
;;;","22/Oct/16 22:34;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1220
;;;","22/Oct/16 22:47;aldettinger;In my opinion, this ticket could be closed. I would be glad to do it, but I don't have permissions.;;;","24/Oct/16 07:22;davsclaus;Thanks for the PR and testing it on branches.

Camel 2.16.x is EOL;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-swagger-xml - Fails with jetty:run,CAMEL-10313,13004327,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Sep/16 15:34,15/Sep/16 13:14,14/Jul/23 05:50,15/Sep/16 13:14,2.18.0,,,,,,,,,,,,,,2.18.0,,,,examples,,,,,,,0,,,,,,"Caused by:
java.lang.ClassCastException: org.apache.jasper.compiler.TldCache cannot be cast to org.apache.jasper.compiler.TldCache
	at org.apache.jasper.compiler.TldCache.getInstance(TldCache.java:59)
	at org.apache.jasper.EmbeddedServletOptions.<init>(EmbeddedServletOptions.java:807)
	at org.apache.jasper.servlet.JspServlet.init(JspServlet.java:116)

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 15 13:13:25 UTC 2016,,,,,,,,,,,"0|i33iv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Sep/16 13:13;davsclaus;Okay it was camel-servlet that has a bunch of unwanted dependencies at runtime scoped that was pulled in by mistake.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot compile 2.17.x,CAMEL-10312,13004285,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tdiesler,tdiesler,12/Sep/16 11:46,12/Sep/16 12:52,14/Jul/23 05:50,12/Sep/16 12:32,,,,,,,,,,,,,,,2.17.4,,,,,,,,,,,0,,,,,,"{code}
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project camel-jetty-common: Compilation failure: Compilation failure:
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[66,31] error: cannot find symbol
[ERROR] symbol:   class HttpClientTransport
[ERROR] location: package org.eclipse.jetty.client
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[67,36] error: package org.eclipse.jetty.client.http does not exist
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/CamelHttpClient.java:[25,31] error: cannot find symbol
[ERROR] symbol:   class HttpClientTransport
[ERROR] location: package org.eclipse.jetty.client
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[708,12] error: cannot find symbol
[ERROR] symbol:   class HttpClientTransport
[ERROR] location: class JettyHttpComponent
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[722,61] error: cannot find symbol
[ERROR] symbol:   class HttpClientTransport
[ERROR] location: class JettyHttpComponent
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/CamelHttpClient.java:[37,27] error: cannot find symbol
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-jetty-common
{code}",,acosentino,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 12 12:52:57 UTC 2016,,,,,,,,,,,"0|i33ilr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Sep/16 11:47;tdiesler;{code}
$ mvn -version
Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T17:41:47+01:00)
Maven home: /usr/local/java/apache-maven
Java version: 1.8.0_92, vendor: Oracle Corporation
Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""mac os x"", version: ""10.11.6"", arch: ""x86_64"", family: ""mac""
{code};;;","12/Sep/16 12:10;acosentino;I think it comes from this commit:

https://github.com/apache/camel/commit/36275beeef9ef989b0faecfe909b4ff44bcc98af;;;","12/Sep/16 12:21;davsclaus;Ah Andrea can you revert that commit;;;","12/Sep/16 12:26;acosentino;Sure :-);;;","12/Sep/16 12:52;acosentino;Done! Thanks Thomas for spotting this!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Lucene upgrade violates elasticsearch assertion,CAMEL-10310,13004273,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,tdiesler,tdiesler,12/Sep/16 10:18,15/Sep/16 14:26,14/Jul/23 05:50,15/Sep/16 14:26,,,,,,,,,,,,,,,2.18.0,,,,,,,,,,,0,,,,,,"Elastic search asserts the current Lucene version like this

{code}
    public static final Version V_2_3_1 = new Version(V_2_3_1_ID, false, org.apache.lucene.util.Version.LUCENE_5_5_0);

    public static final Version CURRENT = V_2_3_1;

    static {
        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : ""Version must be upgraded to ["" + Lucene.VERSION + ""] is still set to ["" + CURRENT.luceneVersion + ""]"";
    }
{code}

which effectively means that no other Lucene version is accepted but 5.5.0

Camel now integrates lucene-5.5.3 as part of [this|https://github.com/apache/camel/commit/6bf1d36ae11815e59fd2777a1f748c8966460bd0] commit, which then leads to

{code}
11:54:49,545 SEVERE [org.jboss.arquillian.protocol.jmx.JMXTestRunner] (pool-3-thread-1) Failed: org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testIndexContentUsingHeaders: java.lang.AssertionError: Version must be upgraded to [5.5.3] is still set to [5.5.0]
	at org.elasticsearch.Version.<clinit>(Version.java:302)
	at org.elasticsearch.node.Node.<init>(Node.java:140)
	at org.elasticsearch.node.NodeBuilder.build(NodeBuilder.java:143)
	at org.elasticsearch.node.NodeBuilder.node(NodeBuilder.java:150)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.initEleasticSearchClient(ElasticSearchIntegrationTest.java:220)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testIndexContentUsingHeaders(ElasticSearchIntegrationTest.java:80)
...
java.lang.NoClassDefFoundError: Could not initialize class org.elasticsearch.Version
	at org.elasticsearch.node.Node.<init>(Node.java:140)
	at org.elasticsearch.node.NodeBuilder.build(NodeBuilder.java:143)
	at org.elasticsearch.node.NodeBuilder.node(NodeBuilder.java:150)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.initEleasticSearchClient(ElasticSearchIntegrationTest.java:220)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testGetContent(ElasticSearchIntegrationTest.java:112)
{code}

Camel can likely not use another version of Lucene than Elasticsearch defines. Alternatively it may be possible to install multiple versions of Lucene and wire Elasticsearch to the one it requires. ",,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-09-12 10:18:26.0,,,,,,,,,,,"0|i33ij3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel aws s3 component duplicate with header option ""CamelAwsS3Key"" ",CAMEL-10309,13004269,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,sunchaoqun,sunchaoqun,12/Sep/16 09:46,15/Sep/16 07:02,14/Jul/23 05:50,15/Sep/16 07:02,2.18.0,,,,,,,,,,,,,,,,,,documentation,,,,,,,0,,,,,,,,sunchaoqun,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Sep/16 09:47;sunchaoqun;screenshot-1.png;https://issues.apache.org/jira/secure/attachment/12828008/screenshot-1.png",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-09-12 09:46:55.0,,,,,,,,,,,"0|i33ii7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MllpTcpServerConsumer fails silently on acknowledgment failure,CAMEL-10303,13003935,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,09/Sep/16 18:34,15/Sep/16 13:41,14/Jul/23 05:50,15/Sep/16 07:27,2.17.0,2.17.1,2.17.2,2.17.3,,,,,,,,,,,2.18.0,,,,camel-mllp,,,,,,,0,,,,,,"If an error occurs when MllpTcpServerConsumer is delivering the acknowledgment back to the caller, there is now way to tell that the acknowledgement failed.

The MllpTcpServerConsumer needs to make the route fail and log an error about the condition.",,githubbot,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 15 13:41:33 UTC 2016,,,,,,,,,,,"0|i33gfz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Sep/16 18:48;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1172

    CAMEL-10303 - added ability to detect when the consumer fails to deli…

    …ver the MLLP acknowledgement

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10303

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1172.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1172
    
----
commit c6336e8d09620b236de54c4138565eccd5cb4faa
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-09-12T18:47:10Z

    CAMEL-10303 - added ability to detect when the consumer fails to deliver the MLLP acknowledgement

----
;;;","15/Sep/16 13:41;githubbot;Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1172
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Guaranteed Delivery not working if no timeout is set,CAMEL-10296,13003356,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,flo.gessner@gmail.com,flo.gessner@gmail.com,07/Sep/16 19:01,11/Sep/16 08:09,14/Jul/23 05:50,08/Sep/16 07:40,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-rabbitmq,,,,,,,0,github-pullrequest,integration-test,,,,"When guaranteed delivery is activated but no timeout is set for publisher acknowledgement waitForConfirmsOrDie will never return.
This is because the close is not triggered on the channel even if the connection is closed when an exception is thrown in the return listener.

This is also the reason why the integration test for the producer does not complete.

The provided pull request fixes this issue in that way that it will just remember that a basic.return has been received and will throw the exception after waitForReturnOrDie completes",,flo.gessner@gmail.com,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Sun Sep 11 08:09:46 UTC 2016,,,,,,,,,,,"0|i33cvj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Sep/16 19:13;githubbot;GitHub user gessnerfl opened a pull request:

    https://github.com/apache/camel/pull/1161

    CAMEL-10296: waitForConfirmsOrDie does not return if no timeout is set

    for publisher acks and guaranteed delivery

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gessnerfl/camel CAMEL-10296_waitForConfirmsOrDieWithoutTimeout

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1161.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1161
    
----
commit 8827fab150f577106b4d7b682f0ceccd76525174
Author: Florian Gessner <florian.gessner@tis.biz>
Date:   2016-09-07T19:04:10Z

    CAMEL-10296: waitForConfirmsOrDie does not return if no timeout is set
    for publisher acks and guaranteed delivery

----
;;;","11/Sep/16 08:09;githubbot;Github user gessnerfl closed the pull request at:

    https://github.com/apache/camel/pull/1161
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[camel-maven-plugin] When blueprint detected, plugin ignores useBlueprint, fileApplicationContextUri tags",CAMEL-10293,13002963,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,adie,adie,06/Sep/16 16:11,10/Sep/16 11:05,14/Jul/23 05:50,10/Sep/16 11:05,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.0,,,build system,tests,,,,,,0,,,,,,"It seems not to be possible to force camel:run to use Spring DSL file if OSGi bluepring is available. Following configuration is completely ignored if there is a blueprint in OSGI-INF folder:
{code:xml}
            <plugin>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-maven-plugin</artifactId>
                <version>2.17.3</version>
                <configuration>
                    <useBlueprint>false</useBlueprint>
                    <fileApplicationContextUri>
                        META-INF/spring/camel-context.xml
                    </fileApplicationContextUri>
                </configuration>
            </plugin>
{code}
",,adie,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 10 11:05:30 UTC 2016,,,,,,,,,,,"0|i33ag7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Sep/16 16:19;davsclaus;What is your use-case of mixing blueprint and spring xml ?;;;","07/Sep/16 08:49;adie;Well, long story short, we are converting some projects from Spring DSL to Blueprint.
Colleague of mine was running different test on the SNAPSHOT and just noted that camel:run stopped working when any (even empty) blueprint file was in place (it did not work because there was a conflict between activemq 5.6 dependencies and lastest maven plugin 2.17.3 - both are importing OSGi dependencies, but that is a different story).

I know you usually don't maintain both spring DSL and Blueprint in one project, but here: http://camel.apache.org/camel-maven-plugin.html it is stated following (while describing fileApplicationContextUri tag): ""It can also be used to replace configuration that requires an OSGi container with an equivalent non-OSGi configuration.""
;;;","10/Sep/16 10:54;davsclaus;That description is about spring and spring-dm, not OSGi blueprint.

applicationContext is a spring term.;;;","10/Sep/16 11:05;davsclaus;If you set useBlueprint=false then its not auto detected anymore;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel RabbitMQ invalid handling of message timestamp,CAMEL-10291,13002769,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,flo.gessner@gmail.com,flo.gessner@gmail.com,05/Sep/16 18:00,06/Sep/16 06:05,14/Jul/23 05:50,06/Sep/16 06:05,2.17.3,,,,,,,,,,,,,,2.18.0,,,,camel-rabbitmq,,,,,,,0,github-pullrequest,patch,,,,"At the moment the RabbitMQ component is does not map the timestamp of a message appropriately. The outbound mapping (producer) expects the timestamp of the camel message is of type String whereas the String is just the long value representing the timestamp. However the timestamp is already a java.util.Date when the producer just forwards a message from a rabbitmq consumer as the timestamp is already a java.util.date as define in AMQP.BasicProperties.

The provided pull request provides a compatible change. So it still keeps the old behaviour as fallback so that the long value is evaluated if the provided data is not a java.util.Date",,acosentino,flo.gessner@gmail.com,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Important,Patch,,,,,,,,9223372036854775807,,,Tue Sep 06 06:05:36 UTC 2016,,,,,,,Patch Available,,,,"0|i33993:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Sep/16 19:38;githubbot;GitHub user gessnerfl opened a pull request:

    https://github.com/apache/camel/pull/1158

    CAMEL-10291: support java.util.date for timestamps in rabbitmq messages

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gessnerfl/camel CAMEL-10291_message_timestamp

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1158.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1158
    
----
commit 65d372f587aa79479753068533fd8b4aa52671ec
Author: Florian Gessner <flo.gessner@gmail.com>
Date:   2016-09-05T19:38:08Z

    CAMEL-10291: support java.util.date for timestamps in rabbitmq messages

----
;;;","06/Sep/16 06:04;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1158
;;;","06/Sep/16 06:05;acosentino;Thanks for the PR :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Avro] Issue on OSGi due to static cache,CAMEL-10282,13001937,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,paolo.antinori,paolo.antinori,01/Sep/16 08:23,01/Sep/16 09:34,14/Jul/23 05:50,01/Sep/16 08:52,2.17.3,,,,,,,,,,,,,,2.16.4,2.17.4,2.18.0,,camel-avro,,,,,,,0,,,,,,"Avro holds a cache of classloaders and other reflection related classes in a static map here:

https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java#L52-L57

Keys of that map are {{String}}s with classname.

The cache is never updated, and this breaks OSGi ability to update a new class definition, since avro *will keep pointing to the old version*.

This will lead to a situation where, on an OSGi platform, you are exposed to {{ClassCastException}} since the rest of the platform might see a different varsion than the old one cached by avro.

The attached fix is a simple way to entirely bypass this caching behavior with just public subclasses that turn off just the caching behavior.",,acosentino,githubbot,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://issues.jboss.org/browse/ENTESB-6017,,,,,,,,,,,9223372036854775807,,,Thu Sep 01 09:34:58 UTC 2016,,,,,,,Patch Available,,,,"0|i3344v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Sep/16 08:52;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1151
;;;","01/Sep/16 08:53;acosentino;Thanks for the PR :-);;;","01/Sep/16 09:29;paolo.antinori;I wonder if it'd be better to improve this with a component level flag that can enable/disable cache in avro datastructure, documented as not supported on OSGi.;;;","01/Sep/16 09:34;acosentino;Good idea. You can send another PR with the same issue ID. Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't use @ImportResource and configure() in the same SB app,CAMEL-10279,13001699,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chirino,chirino,chirino,31/Aug/16 15:05,01/Sep/16 21:03,14/Jul/23 05:50,31/Aug/16 17:45,,,,,,,,,,,,,,,2.18.0,,,,camel-spring-boot,,,,,,,0,,,,,,,,davsclaus,githubbot,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 01 21:03:13 UTC 2016,,,,,,,,,,,"0|i332nz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Aug/16 15:06;chirino;Seem like if you try to @ImportResource in a SB app that also defines a RouteBuilder, then the route builder is ignored.;;;","31/Aug/16 15:50;githubbot;GitHub user chirino opened a pull request:

    https://github.com/apache/camel/pull/1150

    Fix for CAMEL-10279 - Can't use @ImportResource and configure() in th…

    …e same SB app.
    
    This assumes there is always a RouteBuilder in a SB app.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/chirino/camel CAMEL-10279

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1150.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1150
    
----
commit 76f7f91dd680a7c38cde10b3b52943b4be80c0f0
Author: Hiram Chirino <hiram@hiramchirino.com>
Date:   2016-08-31T15:48:09Z

    Fix for CAMEL-10279 - Can't use @ImportResource and configure() in the same SB app.
    
    This assumes there is always a RouteBuilder in a SB app.

----
;;;","31/Aug/16 15:51;chirino;The https://github.com/apache/camel/pull/1150 PR gets this working, but it makes an assumption that SB app always have at least 1 route builder defined in them.  Is that OK?;;;","01/Sep/16 07:27;davsclaus;You can have a SB app without a Camel route, for example a SB app that uses Spring RestController etc and then uses a ProducerTemplate from the controller to leverage the many Camel components.

If you want to define routes in XML, then you can drop xml files in the camel directory as documented
http://camel.apache.org/spring-boot

Why do you say there must be at least 1 route builder? What is it in the code that makes this a requirement? And what happens if there is 0 route builder ?
;;;","01/Sep/16 12:55;chirino;Actually I think we are fine.  The PR's change disables starting up the camel context when @ImportResource(...) loads a spring xml with a <camelConext> defined in it when CamelAutoConfiguration is also being used.  It lets the RoutesCollector handle starting up the camel context.

So even in the case where no RouteBuilder in the SB project I think it should handle starting up context fine.
;;;","01/Sep/16 21:03;githubbot;Github user chirino closed the pull request at:

    https://github.com/apache/camel/pull/1150
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Incompatible versions of qpid in camel-amqp karaf feature,CAMEL-10278,13001595,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,jknetl,jknetl,31/Aug/16 09:15,31/Aug/16 09:57,14/Jul/23 05:50,31/Aug/16 09:56,2.17.0,,,,,,,,,,,,,,2.17.4,,,,karaf,,,,,,,0,,,,,,There are incompatible versions of qpid-jms-client and proton-j in camel-amqp feature. The qpid-jms-client 0.8.0 is dependent on proton-j 0.12.0 but there is proton-j 0.10 in the feature. This makes amqp over qpid-jms-client unusable since AmqpProvider calls method setEmitFlowEventOnSend on proton-j object which turns out in NoSuchMethodException in the AmqpProvider and the provider fails.,,acosentino,githubbot,jknetl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 31 09:57:49 UTC 2016,,,,,,,,,,,"0|i3320v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Aug/16 09:18;githubbot;GitHub user jknetl opened a pull request:

    https://github.com/apache/camel/pull/1147

    Fix qpid versions in camel-amqp feature

    qpid-jms-client 0.8.0 is incompatible with proton-j 0.10 so we need to
    bump up the proton-j to compatible 0.12.0.
    
    more details: https://issues.apache.org/jira/browse/CAMEL-10278

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jknetl/camel feature-qpid-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1147.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1147
    
----
commit 1611b4645ece490ee1de943ea253dc78158bb6d4
Author: Jakub Knetl <jknetl@redhat.com>
Date:   2016-08-31T09:10:16Z

    [features] Fix qpid versions
    
    qpid-jms-client 0.8.0 is incompatible with proton-j 0.10 so we need to
    bump up the proton-j to compatible 0.12.0

----
;;;","31/Aug/16 09:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1147
;;;","31/Aug/16 09:57;acosentino;Thanks for the PR ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Jetty] missing jmx object if custom thread pool is used,CAMEL-10273,13000436,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,paolo.antinori,paolo.antinori,26/Aug/16 15:59,27/Aug/16 08:41,14/Jul/23 05:50,27/Aug/16 08:41,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.0,,,camel-jetty,,,,,,,0,,,,,,"If a custom configuration for the ThreadPool is passed, the correspondent JMX object is not published.

The issue here is that enableJmx(), https://github.com/apache/camel/blob/camel-2.17.3/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java#L314

that adds the mbeans listeners is called only after setThread https://github.com/apache/camel/blob/camel-2.17.3/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java#L1177 method, so this explains how come the threadpool is not exposed on JMX.

I've put a simple PR that just adds a check for {{enableJmx}} flag at component level, but I wonder if I should make it smarter to take in account possible settings only at Endpoint level or instead if we should remove it the flag per Endpoint altogether.",,davsclaus,githubbot,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,https://issues.jboss.org/browse/ENTESB-6001,,,,,,,,,,,9223372036854775807,,,Sat Aug 27 08:41:03 UTC 2016,,,,,,,Patch Available,,,,"0|i32uvz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Aug/16 07:48;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1145

    CAMEL-10273 - Jetty. Fixes jmx for custom ThreadPools

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-10273

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1145.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1145
    
----
commit f70e1e30e397368e97142530dfc03cb0fcda1498
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2016-08-26T16:00:49Z

    CAMEL-10273 - Jetty. Fixes jmx for custom ThreadPools

----
;;;","27/Aug/16 08:40;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1145
;;;","27/Aug/16 08:41;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected behaviour in aggregator if recipient list is processed in parallel,CAMEL-10272,13000301,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Peter Keller,Peter Keller,26/Aug/16 07:46,02/Jan/17 14:18,14/Jul/23 05:50,01/Jan/17 15:01,2.16.3,2.17.3,,,,,,,,,,,,,2.19.0,,,,camel-core,,,,,,,0,,,,,,"h3. Problem

The {{oldExchange}} is {{null}} more than once in the aggregator if a recipient list is processed in parallel.

h3. Camel route

In my Camel route, a recipient list is worked of in parallel:
{code}
 from(""direct:start"")
    .to(""direct:pre"")
    .recipientList().method(new MyRecipientListBuilder())
        .stopOnException()
        .aggregationStrategy(new MyAggregationStrategy())
        .parallelProcessing()
    .end()
    .bean(new MyPostProcessor());
{code}

Snippet of {{MyAggregationStrategy}}:
{code}
@Override
@SuppressWarnings(""unchecked"")
public Exchange aggregate(final Exchange oldExchange, final Exchange newExchange) {
    if (oldExchange == null) {
        // this is the case more than once which is not expected!
    }
    // ...
{code}

{{oldExchange}} is null more than once which is not expected and which contradicts the contract with Camel.

h3. Analysis

Unfortunately, I am not able to provide a (simple) unit test for comprehending the problem. Furthermore our (complex) unit tests are not deterministic due to the root cause of the problem.

During the processing, Camel invokes {{ParallelAggregateTask.doAggregateInternal()}}. If aggregation is not done in parallel (as it is the case in our route), this is supposed to be done synchronously:

{code}
protected void doAggregateInternal(AggregationStrategy strategy, AtomicExchange result, Exchange exchange) {
    if (strategy != null) {
        // prepare the exchanges for aggregation
        Exchange oldExchange = result.get();
        ExchangeHelper.prepareAggregation(oldExchange, exchange);
        result.set(strategy.aggregate(oldExchange, exchange));
    }
} 
{code}

However, is it possible that we face a race condition in {{doAggregateInternal}} even if this method is supposed to be invoked synchronously?
","MacOS 10.11.6, JRE 1.7.0_79",aldettinger,davsclaus,githubbot,Peter Keller,tkopczynski,ushnash@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 02 14:18:43 UTC 2017,,,,,,,,,,,"0|i32u1z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Aug/16 18:25;ushnash@gmail.com;I'll take a look at this.;;;","24/Nov/16 18:18;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1310

    CAMEL 10272: Fixed few comments

    Note that this PR does not fix [CAMEL-10272](https://issues.apache.org/jira/browse/CAMEL-10272). I'll post on the issue tracker directly to details my findings.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1310.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1310
    
----
commit 42efb4ef220beb26e8a49c7e729c81d3e0054a63
Author: aldettinger <aldettinger@gmail.com>
Date:   2016-11-24T18:00:02Z

    CAMEL 10272: Fixed few comments

----
;;;","24/Nov/16 18:33;aldettinger;I don't think that we are facing such a simple race condition here. In the method _doAggregateInternal(...)_, _result.get(...)_ and _result.set(...)_ are not run concurrently.
A single thread is used at aggregation time, in the provided example at least.

However, _oldExchange_ could be null more than once when the user custom aggregation strategy throws a runtime exception:
{code}
public static class Router {
        public String[] routeTo() {
            return new String[] {""log:MSGROUTER_0?level=TRACE"", ""log:MSGROUTER_1?level=TRACE""};
        }
    }    

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"").
                recipientList().
                method(new Router()).
                aggregationStrategy(new AggregationStrategy(){
                    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
                        if (oldExchange == null) {
                            System.out.println(""oldExchange is null ""+newExchange.getExchangeId()+"" thread: ""+Thread.currentThread());
                        }
                        System.out.println(3/0); // throws java.lang.ArithmeticException
                        return null;
                    }
                }).
                parallelProcessing().
                end();
            }
        };
    }
{code}
outputs:
{noformat}
oldExchange is null ID-alex-42036-1479994398470-0-3 thread: Thread[Camel (camel-1) thread #2 - RecipientList-AggregateTask,5,main]
oldExchange is null ID-alex-42036-1479994398470-0-4 thread: Thread[Camel (camel-1) thread #2 - RecipientList-AggregateTask,5,main]
{noformat}
That said, I see the following drawbacks with the current implementation:
* The AggregationStrategy class javadoc lists a single case where oldExchange could be null whereas two exists
* This case could be difficult to debug from a camel user perspective. Camel kind of hides the runtime exception in the custom aggregation strategy.

From there, I see 2 paths to handle a runtime exception unwind from a custom aggregation strategy:
* Produce an ERROR log. We then need to correct the javadoc accordingly.
* Unwind the exception to the default error handler. Note that this is what happen when parallelProcessing is false.

Any thoughts on the right path then ?;;;","24/Nov/16 20:50;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1310
;;;","30/Nov/16 21:00;Peter Keller;Alex, thank you very much for the analysis. 

You are right: if an exception is thrown then {{oldExchange}} may be {{null}}. As this may be the case in our route, it is mysterious why the exception is thrown in a non-deterministic way (of course the root cause may be another multi-threading issue not directly correlated to Camel).

Note, if {{parallelAggregate()}} is used (as mentioned above we don't use this setup), then {{oldExchange}} may also be null. This can be shown using a debugger with setting a breakpoint in {{doAggregateInternal}} on the line with {{ExchangeHelper.prepareAggregation}}. Shouldn't Camel prevent {{oldExchange}} to be {{null}} in this case?

The logging of the (possible) exception caused by the aggregation strategy could help to trace down the cause. Of course this could be done in the implementation of the aggregation strategy itself with a try/catch clause without changing the Camel framework. 

Unwinding the exception to the default error handler may break existing routes which is not desirable. That said, I personally would prefer this possibility.
;;;","01/Dec/16 16:55;aldettinger;Peter, thanks for your inputs.

  As you don't use _parallelAggregate()_, it may not be the cause of this issue.
However, it's interesting to note that I could also produce _oldExchange_ to be null more than once with _parallelAggregate()_, even with a thread safe aggregation strategy.
It may be an itch to scratch in another ticket.

  Back to this issue, I will propose a PR to log such exceptions in DEBUG level so one could have more details when facing such a situation.
We could make a great step forward if you could reproduce the behavior once while logging/unwinding throwables from your aggregation strategy.
Or you could also test against master with debug log level if the PR is accepted.;;;","01/Dec/16 16:57;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1326

    CAMEL-10272: Added a debug log and completed the javadoc

    Please check [CAMEL-10272](https://issues.apache.org/jira/browse/CAMEL-10272) out for more details.
    sourcecheck and tests are ok.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1326.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1326
    
----
commit 2e3de5e889241e707054f01f9cf385aea72508fe
Author: aldettinger <aldettinger@gmail.com>
Date:   2016-12-01T15:48:48Z

    CAMEL-10272: Added a debug log covering for instance a runtime exception thrown from a custom aggregation strategy

commit b522d465467946a2640630e87d0854298c978953
Author: aldettinger <aldettinger@gmail.com>
Date:   2016-12-01T15:57:06Z

    CAMEL-10272: Completed the aggregation strategy javadoc

----
;;;","02/Dec/16 17:08;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1326
;;;","03/Dec/16 08:28;Peter Keller;Alex thank you for the patch.

I updated the summary and the description of the issue so that it better suits to the actual problem. I hope that everybody is fine with this.

The analysis of our problem showed that a {{java.util.ConcurrentModificationException}} was thrown in the aggregator. A non thread safe collection was accessed concurrently in every route of the recipient list as well as in the aggregator. This explains properly the unpredictable behaviour.

Thinking about the solution I think the correct way is to pass the exception to the error handler of the main route, even if this brakes the old behaviour. Perhaps this could be controlled by a new option?
;;;","07/Dec/16 20:16;aldettinger;Peter, happy that you finally sorted this out.
Implementing a new option is an interesting proposal. This way, some camel users may test the new behavior while the branch remains backward compatible.
I'll take a look at this, time permitting.;;;","27/Dec/16 11:18;githubbot;GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1367

    CAMEL-10272: Provide an option to stop further processing when an exc…

    …eption is thrown from an aggregation strategy while parallelProcessing is used.
    
    The proposed option is backward compatible, could be experimented by camel users on this branch, and may be elected to become the default behavior on a next major release.
    
    Check [CAMEL-10272](https://issues.apache.org/jira/browse/CAMEL-10272) out for more details.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1367.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1367
    
----
commit f6ec5a03062271886d30b2ccfd6cad4c11a8afbf
Author: aldettinger <aldettinger@gmail.com>
Date:   2016-12-27T09:55:18Z

    CAMEL-10272: Provide an option to stop further processing when an exception is thrown from an aggregation strategy while parallelProcessing is used.

----
;;;","01/Jan/17 15:01;davsclaus;Thanks for the PR;;;","02/Jan/17 14:18;githubbot;Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1367
;;;",,,,,,,,,,,,,,,,,,,
camel-jt400 - Failed to resolve endpoint,CAMEL-10271,12999992,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,rogueandroid,rogueandroid,25/Aug/16 12:10,15/Dec/16 16:07,14/Jul/23 05:50,15/Dec/16 16:07,2.17.3,,,,,,,,,,,,,,2.16.5,2.17.4,2.18.0,,camel-jt400,,,,,,,0,,,,,,"Apologies for creating this in core, as there does not seem to be an entry  for camel-jt400 (but the jar is distributed with 2.17.3)

Creating a data queue end point using JT400 as per the documentation crashes out when the endpoint creation starts. This seems identical to the SNMP issue CAMEL-8479 (as it produces identical output other than the component name). Ideally the JT400Endpoint would be updated to return true for isLenient, or the default properties would be cleared prior to DefaultEndpoint.createEndpoint being called. Have not been able to find how the original SNMP issue was corrected and have been unable to find a workaround for it.

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: jt400://XXXX:XXXX@alpha8.mdsuk.com/QSYS.LIB/AAAAAAAA.LIB/SENDJOB.DTAQ?consumer.initialDelay=2000&format=binary due to: There are 15 parameters that couldn't be set on the endpoint consumer. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown consumer parameters=[{backoffMultiplier=0, sendEmptyMessageWhenIdle=false, schedulerProperties=null, initialDelay=2000, backoffIdleThreshold=0, scheduler=null, delay=500, useFixedDelay=true, pollStrategy=org.apache.camel.impl.DefaultPollingConsumerPollStrategy@2172f79b, startScheduler=true, runLoggingLevel=TRACE, backoffErrorThreshold=0, greedy=false, scheduledExecutorService=null, timeUnit=MILLISECONDS}]
	at org.apache.camel.impl.DefaultEndpoint.configureConsumer(DefaultEndpoint.java:510) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.component.jt400.Jt400Endpoint.createConsumer(Jt400Endpoint.java:92) ~[camel-jt400-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:69) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:103) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3496) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3426) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3203) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3059) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2854) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2850) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2873) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2850) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2819) ~[camel-core-2.17.3.jar!/:2.17.3]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:270) ~[camel-spring-2.17.3.jar!/:2.17.3]
	at org.apache.camel.spring.SpringCamelContext.afterPropertiesSet(SpringCamelContext.java:122) ~[camel-spring-2.17.3.jar!/:2.17.3]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) ~[spring-beans-4.3.0.RELEASE.jar!/:4.3.0.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) ~[spring-beans-4.3.0.RELEASE.jar!/:4.3.0.RELEASE]",,davsclaus,jbonofre,rogueandroid,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 08 10:16:52 UTC 2016,,,,,,,,,,,"0|i32s53:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Sep/16 10:40;rogueandroid;Have re-tested this and no longer get the exception on startup.

 It appears to connect to the queue, but does not appear to actually be calling the JT400DataQueueConsumer->receive method any longer (and indeed will not let me add the consumer.delay property). How does the JT400DataQueueConsumer->receive get called by Camel to receive entries that appear on the queue? I cant see anything in the trace about the receive being called, and have tested it by connecting it to both existing and non-existing queue's, and adding entries to existing queues. No exceptions are thrown about the non-existing queues and no entries are picked up from the existing queues.

2016-09-05 11:37:16.328 DEBUG 9436 --- [main] c.m.c.f.launcher.CamelJobLauncherConfig  : Building route for Legacy Job Queue Trigger
2016-09-05 11:37:16.334 DEBUG 9436 --- [main] c.m.c.f.launcher.CamelJobLauncherConfig  : Using source queue jt400://CMP070:xxxxxx@arch1.mdsuk.com/QSYS.LIB/%LIBL%.LIB/BCH_LAUNCH.DTAQ
2016-09-05 11:37:16.336 DEBUG 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Adding routes from builder: Routes: []
2016-09-05 11:37:16.440 DEBUG 9436 --- [main] org.apache.camel.model.RouteDefinition   : Tracing is enabled on route: CamelJobQueueProcessor
2016-09-05 11:37:16.441 DEBUG 9436 --- [main] org.apache.camel.model.RouteDefinition   : Using AutoStartup true on route: CamelJobQueueProcessor
2016-09-05 11:37:16.447 DEBUG 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@7d75dce0 to resolve component with name: jt400
2016-09-05 11:37:16.448 DEBUG 9436 --- [main] o.a.camel.impl.DefaultComponentResolver  : Found component: jt400 in registry: null
2016-09-05 11:37:16.451 DEBUG 9436 --- [main] o.a.camel.impl.DefaultComponentResolver  : Found component: jt400 via type: org.apache.camel.component.jt400.Jt400Component via: META-INF/services/org/apache/camel/component/jt400
2016-09-05 11:37:16.476 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""jt400""
2016-09-05 11:37:16.476 DEBUG 9436 --- [main] org.apache.camel.impl.DefaultComponent   : Creating endpoint uri=[jt400://CMP070:xxxxxx@arch1.mdsuk.com/QSYS.LIB/%25LIBL%25.LIB/BCH_LAUNCH.DTAQ], path=[CMP070:xxxxxx@arch1.mdsuk.com/QSYS.LIB/%LIBL%.LIB/BCH_LAUNCH.DTAQ]
2016-09-05 11:37:16.477 TRACE 9436 --- [main] o.a.c.component.jt400.Jt400Component     : No AS400ConnectionPool instance specified in the URI - one will be provided.
2016-09-05 11:37:16.481  INFO 9436 --- [main] o.a.c.component.jt400.Jt400Component     : Instantiating the default connection pool ...
2016-09-05 11:37:16.504 DEBUG 9436 --- [main] o.a.camel.spring.SpringCamelContext      : jt400://CMP070:xxxxxx@arch1.mdsuk.com/QSYS.LIB/%25LIBL%25.LIB/BCH_LAUNCH.DTAQ converted to endpoint: Endpoint[jt400://CMP070:xxxxxx@arch1.mdsuk.com/QSYS.LIB/%25LIBL%25.LIB/BCH_LAUNCH.DTAQ] by component: org.apache.camel.component.jt400.Jt400Component@5b42abe3
2016-09-05 11:37:16.519 DEBUG 9436 --- [main] o.a.c.p.interceptor.DefaultChannel       : Initialize channel for target: 'process[Processor@0x4dab553a]'
2016-09-05 11:37:16.528 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=tracer,name=BacklogTracer
2016-09-05 11:37:16.538 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger
2016-09-05 11:37:16.574 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
2016-09-05 11:37:16.582 DEBUG 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@7d75dce0 to resolve component with name: hazelcast
2016-09-05 11:37:16.584 DEBUG 9436 --- [main] o.a.camel.impl.DefaultComponentResolver  : Found component: hazelcast in registry: null
2016-09-05 11:37:16.592 DEBUG 9436 --- [main] o.a.camel.impl.DefaultComponentResolver  : Found component: hazelcast via type: org.apache.camel.component.hazelcast.HazelcastComponent via: META-INF/services/org/apache/camel/component/hazelcast
2016-09-05 11:37:16.629 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""hazelcast""
2016-09-05 11:37:16.630 DEBUG 9436 --- [main] org.apache.camel.impl.DefaultComponent   : Creating endpoint uri=[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap], path=[map:jobNotificationQueue]
2016-09-05 11:37:16.633 DEBUG 9436 --- [main] o.a.camel.util.IntrospectionSupport      : Configured property: hazelcastInstanceName on bean: Endpoint[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap] with value: cmpbatchserver-1.0-bootstrap
2016-09-05 11:37:16.635 DEBUG 9436 --- [main] o.a.camel.spring.SpringCamelContext      : hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap converted to endpoint: Endpoint[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap] by component: org.apache.camel.component.hazelcast.HazelcastComponent@2afe8a31
2016-09-05 11:37:16.644 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=endpoints,name=""hazelcast://map:jobNotificationQueue\?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap""
2016-09-05 11:37:16.648 DEBUG 9436 --- [main] o.a.c.p.interceptor.DefaultChannel       : Initialize channel for target: 'To[hazelcast:map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap]'
2016-09-05 11:37:16.651 DEBUG 9436 --- [main] o.a.c.p.interceptor.DefaultChannel       : Initialize channel for target: 'SetHeader[CamelHazelcastOperationType, {31}]'
2016-09-05 11:37:16.667 DEBUG 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Warming up route id: CamelJobQueueProcessor having autoStartup=true
2016-09-05 11:37:16.667 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting services on route: CamelJobQueueProcessor
2016-09-05 11:37:16.677 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting child service on route: CamelJobQueueProcessor -> Pipeline[[Channel[DelegateSync[com.mdscem.cmp.framework.launcher.CamelLegacyJobQueueProcessor@4dab553a]], Channel[sendTo(Endpoint[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap])], Channel[SetHeader(CamelHazelcastOperationType, 31)]]]
2016-09-05 11:37:16.687 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=producers,name=HazelcastMapProducer(0x72c73ac3)
2016-09-05 11:37:16.687 DEBUG 9436 --- [main] o.a.c.c.h.map.HazelcastMapProducer       : Starting producer: Producer[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap]
2016-09-05 11:37:16.690 DEBUG 9436 --- [main] org.apache.camel.impl.ProducerCache      : Adding to producer cache with key: Endpoint[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap] for producer: Producer[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap]
2016-09-05 11:37:16.694 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting child service on route: CamelJobQueueProcessor -> Pipeline[[Channel[DelegateSync[com.mdscem.cmp.framework.launcher.CamelLegacyJobQueueProcessor@4dab553a]], Channel[sendTo(Endpoint[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap])], Channel[SetHeader(CamelHazelcastOperationType, 31)]]]
2016-09-05 11:37:16.695 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting child service on route: CamelJobQueueProcessor -> DelegateSync[com.mdscem.cmp.framework.launcher.CamelLegacyJobQueueProcessor@4dab553a]
2016-09-05 11:37:16.761 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""process1""
2016-09-05 11:37:16.761 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting child service on route: CamelJobQueueProcessor -> Channel[DelegateSync[com.mdscem.cmp.framework.launcher.CamelLegacyJobQueueProcessor@4dab553a]]
2016-09-05 11:37:16.762 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting child service on route: CamelJobQueueProcessor -> sendTo(Endpoint[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap])
2016-09-05 11:37:16.772 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""to1""
2016-09-05 11:37:16.772 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting child service on route: CamelJobQueueProcessor -> Channel[sendTo(Endpoint[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap])]
2016-09-05 11:37:16.773 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting child service on route: CamelJobQueueProcessor -> SetHeader(CamelHazelcastOperationType, 31)
2016-09-05 11:37:16.779 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""setHeader1""
2016-09-05 11:37:16.779 DEBUG 9436 --- [main] org.apache.camel.impl.RouteService       : Starting child service on route: CamelJobQueueProcessor -> Channel[SetHeader(CamelHazelcastOperationType, 31)]
2016-09-05 11:37:16.788 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""CamelJobQueueProcessor""
2016-09-05 11:37:16.789 DEBUG 9436 --- [main] o.a.camel.support.TimerListenerManager   : Added TimerListener: org.apache.camel.management.mbean.ManagedRoute@38781df9
2016-09-05 11:37:16.789 DEBUG 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Route: CamelJobQueueProcessor >>> EventDrivenConsumerRoute[Endpoint[jt400://CMP070:xxxxxx@arch1.mdsuk.com/QSYS.LIB/%25LIBL%25.LIB/BCH_LAUNCH.DTAQ] -> Pipeline[[Channel[DelegateSync[com.mdscem.cmp.framework.launcher.CamelLegacyJobQueueProcessor@4dab553a]], Channel[sendTo(Endpoint[hazelcast://map:jobNotificationQueue?hazelcastInstanceName=cmpbatchserver-1.0-bootstrap])], Channel[SetHeader(CamelHazelcastOperationType, 31)]]]]
2016-09-05 11:37:16.790 DEBUG 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Starting consumer (order: 1000) on route: CamelJobQueueProcessor
2016-09-05 11:37:16.797 DEBUG 9436 --- [main] o.a.c.management.DefaultManagementAgent  : Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=Jt400DataQueueConsumer(0x14f6940b)
2016-09-05 11:37:16.798 DEBUG 9436 --- [main] o.a.c.c.jt400.Jt400Configuration         : Getting an AS400 object for 'arch1.mdsuk.com/CMP070' from com.ibm.as400.access.AS400ConnectionPool@38e4838b.
2016-09-05 11:37:16.824  INFO 9436 --- [main] o.a.c.c.jt400.Jt400DataQueueService      : Connecting to Endpoint[jt400://CMP070:xxxxxx@arch1.mdsuk.com/QSYS.LIB/%25LIBL%25.LIB/BCH_LAUNCH.DTAQ]
2016-09-05 11:37:16.845  INFO 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Route: CamelJobQueueProcessor started and consuming from: Endpoint[jt400://CMP070:xxxxxx@arch1.mdsuk.com/QSYS.LIB/%25LIBL%25.LIB/BCH_LAUNCH.DTAQ]
2016-09-05 11:37:16.846  INFO 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.17.4-SNAPSHOT (CamelContext: camel-1) is starting
2016-09-05 11:37:16.846  INFO 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Total 1 routes, of which 1 are started.
2016-09-05 11:37:16.847  INFO 9436 --- [main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.17.4-SNAPSHOT (CamelContext: camel-1) started in 0.000 seconds

;;;","05/Sep/16 11:49;rogueandroid;Hi There. Have added some detail on to the comments, but appears that possibly as a result of this fix the queue is no longer being polled. Cannot see any evidence of the ->receive method being called, and throws an exception if i try and add the property consumer.delay.
;;;","05/Sep/16 16:24;davsclaus;I pushed a new fix can you test with latest source code.;;;","06/Sep/16 10:01;rogueandroid;Hi Claus

I have pulled the latest 2.17.4 source code and tried it again, but it still does not appear to be polling. I cant see the receive method being called (and it should log that at TRACE). I did try and manually call the receive, so i know it can connect to the queue and receive entries, but there does not appear to be any thread that is periodically calling the receive method.
;;;","06/Sep/16 10:06;davsclaus;The poll method in the consumer is called periodically as its scheduler based.

You can try to set a breakpoint there.

Also do a thread dump as maybe its blocked by the jt400 trying to poll a message. It uses a 30 sec timeout by default.;;;","06/Sep/16 10:12;davsclaus;Ups a missing super.doStart / doStop is in the code, fixing this now.;;;","06/Sep/16 10:13;davsclaus;Pushed fix to branches, can you build from source and test again?;;;","06/Sep/16 10:14;rogueandroid;will do. sadly i cant get out of this network using git, so have to pull and rebuild the whole source. takes a while.....;;;","06/Sep/16 10:19;davsclaus;Ah the fix is easy, you can do that with your current code manually. Its just super.doStart / doStop in those methods in the consumer.

See: https://github.com/apache/camel/commit/9025b8c32489ac078aa59a2687e4ac7b7d2cf928;;;","06/Sep/16 10:54;rogueandroid;looks to have done the trick. can see it polling the queue for new entries :)
;;;","06/Sep/16 10:56;rogueandroid;Yes. Definately works. I can see it hitting my processor now, so it is definately reading the items from the queue!

Many thanks Claus!

;;;","06/Sep/16 11:06;davsclaus;Yay good to hear. Thanks for testing. Not everyone has access to a real AS/400 box ;);;;","06/Sep/16 14:43;rogueandroid;No problem at all. Have fully tested end to end now and all seems to be working very nicely. Thanks for the quick turnaround!
;;;","30/Nov/16 10:50;jbonofre;I reopen this Jira as camel-jt400 2.15.x and 2.16.x are also impacted (and lot of users still use this version).

I will backport the fix on camel-2.15.x and camel-2.16.x branches.;;;","08/Dec/16 10:11;davsclaus;Have you backported these tickets?
Can you do this please.;;;","08/Dec/16 10:16;jbonofre;Not yet, I will tackle that this afternoon or tomorrow morning. Thanks !;;;",,,,,,,,,,,,,,,,
Error may still block mail-consumer ,CAMEL-10254,12998429,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Neffez,Neffez,19/Aug/16 08:23,22/Aug/16 16:08,14/Jul/23 05:50,22/Aug/16 16:08,2.15.3,2.17.3,,,,,,,,,,,,,2.17.4,2.18.0,,,camel-mail,,,,,,,0,,,,,,"If an error occurs before routing an email (email corrupt), the consumer blocks and does not process further emails. A similar issue was fixed with CAMEL-7474, but the issue still exists at another location.

CAMEL-7474 introduced a parameter ""skipFailedMessage"", which is used in Line 291 of the MailConsumer. If an error occurs in ""createExchanges"" (Line 128) the parameter is not evaluated.

Example stacktrace:

{code}
2016.08.19 10:10:35.613 DEBUG Camel (camel-1) thread #52 - pop3s://dev1@dev.de) Error populating the initial mail message attachments
org.apache.camel.RuntimeCamelException: Error populating the initial mail message attachments
	at org.apache.camel.component.mail.MailMessage.populateInitialAttachments(MailMessage.java:131)
	at org.apache.camel.impl.DefaultMessage.createAttachments(DefaultMessage.java:216)
	at org.apache.camel.impl.DefaultMessage.getAttachments(DefaultMessage.java:281)
	at org.apache.camel.component.mail.MailConsumer.createExchanges(MailConsumer.java:328)
	at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:121)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: javax.mail.MessagingException: Missing start boundary
	at javax.mail.internet.MimeMultipart.parsebm(MimeMultipart.java:882)
	at javax.mail.internet.MimeMultipart.parse(MimeMultipart.java:503)
	at javax.mail.internet.MimeMultipart.getCount(MimeMultipart.java:244)
	at org.apache.camel.component.mail.MailBinding.extractAttachmentsFromMultipart(MailBinding.java:304)
	at org.apache.camel.component.mail.MailBinding.extractAttachmentsFromMail(MailBinding.java:293)
	at org.apache.camel.component.mail.MailMessage.populateInitialAttachments(MailMessage.java:128)
	... 13 more
{code}

Results are the same as described in CAMEL-7474",,davsclaus,githubbot,Neffez,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 22 16:07:30 UTC 2016,,,,,,,,,,,"0|i32ii7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Aug/16 13:36;davsclaus;Thanks for reporting. 

Anyone is welcome to work on a patch / PR for this. We love contributions
http://camel.apache.org/contributing;;;","22/Aug/16 15:15;githubbot;GitHub user Neffez opened a pull request:

    https://github.com/apache/camel/pull/1133

    CAMEL-10254 evaluate skipFailedMessage on exception in createExchanges

    This fixes the blocking of the mail consumer, when receiving a corrupt mail. The exception is caught and the message may be skipped.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Neffez/camel CAMEL-10254

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1133.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1133
    
----
commit ca134ebf2feb8e07d6273699d2101d52b058914a
Author: Steffen Eitelmann <mail@steffen-eitelmann.com>
Date:   2016-08-22T11:09:20Z

    CAMEL-10254 evaluate skipFailedMessage on exception in createExchanges

----
;;;","22/Aug/16 16:07;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1133
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointer in ThrowExceptionProcessor.getTraceLabel,CAMEL-10253,12998230,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cpeninou,cpeninou,18/Aug/16 15:25,21/Aug/16 10:46,14/Jul/23 05:50,21/Aug/16 10:46,2.17.3,,,,,,,,,,,,,,2.16.4,2.17.4,2.18.0,,camel-core,,,,,,,0,,,,,,"When using
{code:title=ProcessorDefinition.java|borderStyle=solid}
 throwException(Class<? extends Exception> type, String message) 
{code}
to define a Exception and having the tracing set to *True* in Camel context, if  an exception occurred, it will call 

{code:title=ThrowExceptionProcessor.java|borderStyle=solid}
  public String getTraceLabel() {
        return ""throwException["" + this.exception.getClass().getSimpleName() + ""]"";
    }
{code}
But this.exception is null.
A patch could be:
{code:title=ThrowExceptionProcessor.java|borderStyle=solid}
    public String getTraceLabel() {
        String className= this.exception==null?this.type.getSimpleName():this.exception.getClass().getSimpleName();
        return ""throwException["" + className + ""]"";
    }
{code}
 

",,cpeninou,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 21 10:45:40 UTC 2016,,,,,,,,,,,"0|i32h9z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Aug/16 13:37;davsclaus;Thanks can you create a patch or better yet a github PR to fix this?
http://camel.apache.org/contributing;;;","21/Aug/16 09:58;githubbot;GitHub user micfra opened a pull request:

    https://github.com/apache/camel/pull/1130

    Fix CAMEL-10253: Add check on null

    Provide code as written in https://issues.apache.org/jira/browse/CAMEL-10253

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/micfra/camel CAMEL-10253

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1130.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1130
    
----
commit 3007d546431dd8dd9d422dac44d53b701c2fd46a
Author: Michael Frankfurter <micfra@micfra.net>
Date:   2016-08-21T09:50:57Z

    Fix CAMEL-10253: Add check on null

----
;;;","21/Aug/16 10:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1130
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The hawtdispatch-version should be 1.22 in the apache-camel-2.17.3-features.xml,CAMEL-10249,12997805,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xldai,xldai,17/Aug/16 03:53,18/Aug/16 06:39,14/Jul/23 05:50,18/Aug/16 06:39,2.17.3,,,,,,,,,,,,,,2.17.4,,,,karaf,,,,,,,0,,,,,,"The error is thrown when try to install the camel-mqtt feature into karaf container.
{code}
karaf@root()> feature:install camel-mqtt
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-mqtt; typ
e=karaf.feature; version=""[2.17.3,2.17.3]""; filter:=""(&(osgi.identity=camel-mqtt)(type=karaf.feature)(version>=2.17.3)(v
ersion<=2.17.3))"" [caused by: Unable to resolve camel-mqtt/2.17.3: missing requirement [camel-mqtt/2.17.3] osgi.identity
; osgi.identity=org.apache.camel.camel-mqtt; type=osgi.bundle; version=""[2.17.3,2.17.3]""; resolution:=mandatory [caused
by: Unable to resolve org.apache.camel.camel-mqtt/2.17.3: missing requirement [org.apache.camel.camel-mqtt/2.17.3] osgi.
wiring.package; filter:=""(&(osgi.wiring.package=org.fusesource.hawtdispatch)(version>=1.22.0)(!(version>=2.0.0)))""]]
{code}

The reason is mqtt-client expect org.fusesource.hawtdispatch.*;version=1.22, but it define hawtdispatch 1.21 in the apache-camel-2.17.3-features.xml
{code}
    <bundle dependency='true'>mvn:org.fusesource.hawtdispatch/hawtdispatch/1.21</bundle>
    <bundle dependency='true'>mvn:org.fusesource.hawtdispatch/hawtdispatch-transport/1.21</bundle>
{code}",Java 8,davsclaus,githubbot,xldai,xlding,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 18 06:39:13 UTC 2016,,,,,,,,,,,"0|i32enj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Aug/16 07:56;davsclaus;Can you provide a PR to fix this?
http://camel.apache.org/contributing;;;","17/Aug/16 07:57;davsclaus;A workaround is just to install 1.22 version manually first.;;;","17/Aug/16 07:59;xldai;@Claus, I will create the PR on 2.17.x;;;","18/Aug/16 03:47;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/1126

    fix CAMEL-10249

    upgrade hawtdispatch-version to 1.22

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel patch-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1126.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1126
    
----
commit 89cfe93f94bae678abd5743229a6e63abac7324e
Author: Xilai Dai <xldai@talend.com>
Date:   2016-08-18T03:45:28Z

    fix CAMEL-10249

----
;;;","18/Aug/16 06:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1126
;;;","18/Aug/16 06:39;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"When same netty endpoint producer is used twice in a route, BlockingOperationException is raised",CAMEL-10244,12997142,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tivv,tivv,13/Aug/16 17:23,15/Aug/16 15:40,14/Jul/23 05:50,15/Aug/16 15:40,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.0,,,camel-netty4,,,,,,,0,,,,,,"Due to synchronous nature of connection establishment, when same endpoint producer is used twice in same route (e.g. to make two sequential WS calls), BlockingOperationException is thrown:
{code}

java.lang.AssertionError: io.netty.util.concurrent.BlockingOperationException: DefaultChannelPromise@4360ffb3(incomplete)
	at org.apache.camel.component.netty4.NettyTCPChainedTest.sendFile(NettyTCPChainedTest.java:53)
	at org.apache.camel.component.netty4.NettyTCPChainedTest.testTCPChainedConnectionFromCallbackThread(NettyTCPChainedTest.java:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: io.netty.util.concurrent.BlockingOperationException: DefaultChannelPromise@4360ffb3(incomplete)
	at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:398)
	at io.netty.channel.DefaultChannelPromise.checkDeadLock(DefaultChannelPromise.java:157)
	at io.netty.util.concurrent.DefaultPromise.awaitUninterruptibly(DefaultPromise.java:254)
	at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:135)
	at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:28)
	at org.apache.camel.component.netty4.NettyProducer.openChannel(NettyProducer.java:488)
	at org.apache.camel.component.netty4.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:563)
	at org.apache.camel.component.netty4.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:558)
	at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1188)
	at org.apache.camel.component.netty4.NettyProducer.process(NettyProducer.java:210)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:44)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:138)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.RedeliveryErrorHandler$2.done(RedeliveryErrorHandler.java:554)
	at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:155)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.RedeliveryErrorHandler$2.done(RedeliveryErrorHandler.java:554)
	at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:155)
	at org.apache.camel.component.netty4.NettyProducer$NettyProducerCallback.done(NettyProducer.java:550)
	at org.apache.camel.component.netty4.NettyProducer$2.operationComplete(NettyProducer.java:338)
	at org.apache.camel.component.netty4.NettyProducer$2.operationComplete(NettyProducer.java:304)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:488)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:111)
	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82)
	at io.netty.channel.ChannelOutboundBuffer.safeSuccess(ChannelOutboundBuffer.java:673)
	at io.netty.channel.ChannelOutboundBuffer.remove(ChannelOutboundBuffer.java:263)
	at io.netty.channel.ChannelOutboundBuffer.removeBytes(ChannelOutboundBuffer.java:343)
	at io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:425)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:856)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:356)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:823)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1296)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:786)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:778)
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:759)
	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:786)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:778)
	at io.netty.channel.AbstractChannelHandlerContext.access$1500(AbstractChannelHandlerContext.java:38)
	at io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.write(AbstractChannelHandlerContext.java:1149)
	at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.run(AbstractChannelHandlerContext.java:1090)
	at io.netty.util.concurrent.SingleThreadEventExecutor.safeExecute(SingleThreadEventExecutor.java:451)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:418)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:401)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)
	at java.lang.Thread.run(Thread.java:745)
{code}",,davsclaus,githubbot,tivv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Mon Aug 15 08:43:15 UTC 2016,,,,,,,Patch Available,,,,"0|i32ak7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Aug/16 17:30;githubbot;GitHub user tivv opened a pull request:

    https://github.com/apache/camel/pull/1120

    CAMEL-10244: Make connection establishment fuly async

    This makes netty4 connection establishment fully async & fixes CAMEL-10244

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tivv/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1120.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1120
    
----
commit 56dbed31b95615fcd00d0de736344d11a753b2c2
Author: Vitalii Tymchyshyn <vit@tym.im>
Date:   2016-08-13T17:25:19Z

    CAMEL-10244: Make connection establishment fuly async

----
;;;","15/Aug/16 08:43;davsclaus;Thanks for the PR;;;","15/Aug/16 08:43;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1120
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Force camel-atom feature to install abdera-parser,CAMEL-10243,12997001,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,12/Aug/16 17:35,12/Aug/16 17:38,14/Jul/23 05:50,12/Aug/16 17:37,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.0,,,,,,,,,,0,,,,,,"Abdera-parser is already in the camel-atom feature but because camel-atom bundle has no compile dependency on it, it doesn't actually get installed with the feature. The parser is almost always required though so would be nice to always install this so folks don't have to install additional bundles after the camel-atom feature.",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 12 17:38:12 UTC 2016,,,,,,,,,,,"0|i329ov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Aug/16 17:38;janstey;[janstey@ghost features]$ git push origin 
Counting objects: 18, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (18/18), 1.32 KiB | 0 bytes/s, done.
Total 18 (delta 10), reused 0 (delta 0)
remote: camel git commit: CAMEL-10243 - Force camel-atom feature to install abdera-parser
remote: camel git commit: CAMEL-10243 - Force camel-atom feature to install abdera-parser
To https://git-wip-us.apache.org/repos/asf/camel.git
   291ea10..e500ce3  camel-2.17.x -> camel-2.17.x
   e3c9f1b..db1f8ea  master -> master
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-salesforce component never tries to reconnect after a disconnect,CAMEL-10238,12996618,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,rajesh734,rajesh734,11/Aug/16 13:39,30/Sep/16 08:18,14/Jul/23 05:50,30/Sep/16 08:18,2.17.2,2.17.3,2.18.0,,,,,,,,,,,,2.17.4,2.18.0,,,camel-salesforce,,,,,,,0,,,,,,"My connection to salesforce-streaming api gets disconnect automatically after 2 hours. This is because salesforce automatically disconnects the connection from server side. However, I was expecting camel-salesforce component to reconnect automatically after disconnect. But, it does not reconnect and I do not have a  hold or a way to reconnect. Seems to be a defect and a blocker to me.

Here is the trace log

{code}
[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=84, successful=true}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Connecting, transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=85, connectionType=long-polling}]
[36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=85, successful=true}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/connect {clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=85, successful=true}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: CONNECTED -> CONNECTED
[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=85, successful=true}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Connecting, transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=86, connectionType=long-polling}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: CONNECTED -> UNCONNECTED
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Messages failed [{clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=86, connectionType=long-polling}]

java.io.EOFException: HttpConnectionOverHTTP@12f0e719(l:/10.172.131.200:50574 <-> r:my-proxy.com/x.x.x.x:xx,closed=false)[HttpChannelOverHTTP@2a4927(exchange=HttpExchange@6ae1ae35 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@51fea1e0(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@44234ce9(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.earlyEOF(HttpReceiverOverHTTP.java:277) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1309) [jetty-http-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.shutdown(HttpReceiverOverHTTP.java:182) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:129) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:69) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:89) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:122) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544) [jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.14.v20151106.jar:9.2.14.v20151106]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_66]

[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {failure={exception=java.io.EOFException: HttpConnectionOverHTTP@12f0e719(l:/10.172.131.200:50574 <-> r:my-proxy.com/x.x.x.x:xx,closed=false)[HttpChannelOverHTTP@2a4927(exchange=HttpExchange@6ae1ae35 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@51fea1e0(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@44234ce9(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]], message={clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=86, connectionType=long-polling}, connectionType=long-polling}, channel=/meta/connect, id=86, subscription=null, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Connecting, transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, advice={timeout=0}, channel=/meta/connect, id=87, connectionType=long-polling}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: UNCONNECTED -> UNCONNECTED
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Messages failed [{clientId=3u9riwg6ag3r5dd3ay86i444f, advice={timeout=0}, channel=/meta/connect, id=87, connectionType=long-polling}]

org.eclipse.jetty.io.EofException: null
	at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.flush(SslConnection.java:723) ~[jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.io.WriteFlusher.flush(WriteFlusher.java:408) ~[jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.io.WriteFlusher.write(WriteFlusher.java:302) ~[jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.io.AbstractEndPoint.write(AbstractEndPoint.java:129) [jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpSenderOverHTTP.sendHeaders(HttpSenderOverHTTP.java:108) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpSender.send(HttpSender.java:204) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.send(HttpChannelOverHTTP.java:78) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP$Delegate.send(HttpConnectionOverHTTP.java:218) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.send(HttpConnectionOverHTTP.java:91) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpDestinationOverHTTP.send(HttpDestinationOverHTTP.java:36) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpDestinationOverHTTP.send(HttpDestinationOverHTTP.java:26) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.PoolingHttpDestination.process(PoolingHttpDestination.java:150) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.PoolingHttpDestination.send(PoolingHttpDestination.java:85) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.PoolingHttpDestination.send(PoolingHttpDestination.java:76) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpDestination.send(HttpDestination.java:187) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpClient.send(HttpClient.java:527) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:694) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:678) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.cometd.client.transport.LongPollingTransport.send(LongPollingTransport.java:191) [cometd-java-client-3.0.9.jar:na]
	at org.cometd.client.BayeuxClient$BayeuxClientState.transportSend(BayeuxClient.java:1430) [cometd-java-client-3.0.9.jar:na]
	at org.cometd.client.BayeuxClient$BayeuxClientState.send(BayeuxClient.java:1425) [cometd-java-client-3.0.9.jar:na]
	at org.cometd.client.BayeuxClient.sendConnect(BayeuxClient.java:482) [cometd-java-client-3.0.9.jar:na]
	at org.cometd.client.BayeuxClient$12.run(BayeuxClient.java:815) [cometd-java-client-3.0.9.jar:na]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_66]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_66]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_66]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_66]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_66]
Caused by: java.nio.channels.ClosedChannelException: null
	... 30 common frames omitted

[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {failure={exception=org.eclipse.jetty.io.EofException, message={clientId=3u9riwg6ag3r5dd3ay86i444f, advice={timeout=0}, channel=/meta/connect, id=87, connectionType=long-polling}, connectionType=long-polling}, channel=/meta/connect, id=87, subscription=null, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Connecting, transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, advice={timeout=0}, channel=/meta/connect, id=88, connectionType=long-polling}]
[36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=88, error=403::Unknown client, successful=false}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/connect {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=88, error=403::Unknown client, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: UNCONNECTED -> REHANDSHAKING
[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=88, error=403::Unknown client, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Handshaking on transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334: {supportedConnectionTypes=[long-polling], channel=/meta/handshake, version=1.0}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{ext={replay=true}, supportedConnectionTypes=[long-polling], channel=/meta/handshake, id=89, version=1.0}]
[36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=89, error=401::Authentication invalid, successful=false}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/handshake {ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=89, error=401::Authentication invalid, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: REHANDSHAKING -> TERMINATING
[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_HANDSHAKE]: {ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=89, error=401::Authentication invalid, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: TERMINATING -> DISCONNECTED
{code}",,davsclaus,dhirajsb,rajesh734,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/Sep/16 13:37;rajesh734;streaming-api-validation-jetty-debug.log;https://issues.apache.org/jira/secure/attachment/12826629/streaming-api-validation-jetty-debug.log","01/Sep/16 13:35;rajesh734;streaming-api-validation-jetty-debug.log;https://issues.apache.org/jira/secure/attachment/12826628/streaming-api-validation-jetty-debug.log","29/Aug/16 12:04;rajesh734;streaming-api-validation-jetty-debug.log;https://issues.apache.org/jira/secure/attachment/12825994/streaming-api-validation-jetty-debug.log","01/Sep/16 13:55;rajesh734;streaming-api-validation-jetty-debug.log.zip;https://issues.apache.org/jira/secure/attachment/12826632/streaming-api-validation-jetty-debug.log.zip",,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 30 08:18:45 UTC 2016,,,,,,,,,,,"0|i327bz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Aug/16 14:21;rajesh734;Did anyone get a chance to look into this?;;;","15/Aug/16 15:13;davsclaus;No

See here about support, and how to get help faster
http://camel.apache.org/support.html;;;","17/Aug/16 07:58;davsclaus;[~dhirajsb] do you have any thoughts on the camel-salesforce component and re-connection logic ;;;","17/Aug/16 16:57;dhirajsb;Rajesh, do you have any unusual environment settings/configuration, like going through a proxy, etc.? I'll test the latest source, but the connector has been tested before. Can you also post logs with jetty client debug turned on, when this error happens? 

Another thing to note is that the underlying jetty client is different in 2.17.x and 2.18.x, but the reconnect and resubscribe logic is the same in the component code. Have you tested with the latest versions of both branches? ;;;","17/Aug/16 20:00;rajesh734;Dhiraj, I tested it with 2.17.x and 2.18.x. Let me create a brand new workspace with 2.17.3 stable release and get you the log. 

Yes, I am making streaming request via an internal company proxy.;;;","19/Aug/16 05:24;rajesh734;here is the disconnect log for 2.18.x latest version: 

[2m2016-08-18 18:12:59.287[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpContent    [0;39m [2m:[0;39m Advanced content to last chunk java.nio.HeapByteBuffer[pos=0 lim=112 cap=112]
[2m2016-08-18 18:12:59.287[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m write: WriteFlusher@48800edd{IDLE} [HeapByteBuffer@5a1c37f9[p=0,l=476,c=4096,r=476]={<<<POST https://lm--...Length: 112\r\n\r\n>>>EfCQ7CXXAL3b3x77Q...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},HeapByteBuffer@795b0f98[p=0,l=112,c=112,r=112]={<<<[{""clientId"":""h1h...long-polling""}]>>>}]
[2m2016-08-18 18:12:59.288[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m update WriteFlusher@48800edd{WRITING}:IDLE-->WRITING
[2m2016-08-18 18:12:59.288[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] flush enter [java.nio.HeapByteBuffer[pos=0 lim=476 cap=4096], java.nio.HeapByteBuffer[pos=0 lim=112 cap=112]]
[2m2016-08-18 18:12:59.288[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/617,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] wrap Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 588 bytesProduced = 617
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,W,8/340000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,7/340000,SslConnection}{io=1,kio=1,kro=1} OK HeapByteBuffer@4171b175[p=0,l=617,c=17408,r=617]={<<<\x17\x03\x03\x02d\x00\x00\x00\x00\x00\x00\x00f\x1c-\xF3\x85...\xF0\xDcv\xE6F\x8aD\xAc""`\xFd\x18\xE95b>>>\xEe\x8b`\x9a\xF7\x1e=#V\x9f\xE6\x9e\xFb\x82\xF3V>...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m flushed 617 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,7/340000,SslConnection}{io=1,kio=1,kro=1}
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/0,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] flush exit, consumed 588
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m update WriteFlusher@48800edd{IDLE}:WRITING-->IDLE
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request committed HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request content HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
HeapByteBuffer@5322ab23[p=0,l=112,c=112,r=112]={<<<[{""clientId"":""h1h...long-polling""}]>>>}
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpContent    [0;39m [2m:[0;39m Advanced content past last chunk
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Content false consumed true for HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
[2m2016-08-18 18:12:59.290[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request success HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
[2m2016-08-18 18:12:59.290[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpExchange   [0;39m [2m:[0;39m Terminated request for HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null, result: null
[2m2016-08-18 18:12:59.290[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Terminating request HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop woken up from select, 1/3 selected
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Key interests updated 1 -> 0 on SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,43/340000,SslConnection}{io=1,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Local interests updating 1 -> 0 for SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,43/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Queued change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILL_INTERESTED-->FILLING SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m onFillable enter DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,51/340000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,43/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILL_INTERESTED-->FILLING HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m onFillable exit DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,51/340000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,43/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING-->IDLE SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Running change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop waiting on select
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=0,l=0,c=16384,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill enter
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m filled 718 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,43/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=718/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] filled 718 encrypted bytes
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=689} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] unwrap Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 718 bytesProduced = 689
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill exit
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Read 689 bytes DirectByteBuffer@593223d9[p=0,l=689,c=16384,r=689]={<<<HTTP/1.1 200 OK\r\n...essful"":false}]>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} from DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,51/340000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,0/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=0,l=689,c=16384,r=689]={<<<HTTP/1.1 200 OK\r\n...essful"":false}]>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m START --> RESPONSE_VERSION
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m RESPONSE_VERSION --> SPACE1
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m SPACE1 --> STATUS
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m STATUS --> SPACE2
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m SPACE2 --> REASON
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m REASON --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response begin HttpResponse[HTTP/1.1 200 OK]@65c1a10d
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> CONTENT
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response headers HttpResponse[HTTP/1.1 200 OK]@65c1a10d
Date: Thu, 18 Aug 2016 22:12:59 GMT
Content-Security-Policy-Report-Only: default-src https:; script-src https: 'unsafe-inline' 'unsafe-eval'; style-src https: 'unsafe-inline'; img-src https: data:; font-src https: data:; report-uri /_/ContentDomainCSPNoAuth?type=mydomain
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Salesforce-No-Proxy: true
Content-Type: application/json;charset=UTF-8
Content-Length: 137
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response content HttpResponse[HTTP/1.1 200 OK]@65c1a10d
DirectByteBufferR@4712228a[p=552,l=689,c=16384,r=137]={HTTP/1.1 200 OK\r\n...ath=/cometd\r\n\r\n<<<[{""advice"":{""inte...essful"":false}]>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m CONTENT --> END
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m reset HttpParser{s=END,137 of 137}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m END --> START
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response success HttpResponse[HTTP/1.1 200 OK]@65c1a10d
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpExchange   [0;39m [2m:[0;39m Terminated response for HttpExchange@6eebb258 req=TERMINATED/null@null res=TERMINATED/null@null, result: Result[HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df > HttpResponse[HTTP/1.1 200 OK]@65c1a10d] null
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response complete HttpResponse[HTTP/1.1 200 OK]@65c1a10d
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpChannel    [0;39m [2m:[0;39m HttpExchange@6eebb258 req=TERMINATED/null@null res=TERMINATED/null@null disassociated true from HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] released
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m Processing exchange null on HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] of HttpDestination[https://lm--agency.cs24.my.salesforce.com]6546371(via my.proxy.com:80),queue=0,pool=ConnectionPool[c=2/2,a=1,i=1]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.ConnectionPool [0;39m [2m:[0;39m Connection idle HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Request/Response succeeded: Result[HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df > HttpResponse[HTTP/1.1 200 OK]@65c1a10d] null
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.e.j.client.TimeoutCompleteListener    [0;39m [2m:[0;39m Cancelled (successfully: true) timeout task org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask@f94a8f8
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=103, error=403::Unknown client, successful=false}]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/connect {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=103, error=403::Unknown client, successful=false}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: CONNECTED -> REHANDSHAKING
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=103, error=403::Unknown client, successful=false}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=689,l=689,c=16384,r=0]={HTTP/1.1 200 OK\r\n...essful"":false}]<<<>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Handshaking on transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@61ab6521: {supportedConnectionTypes=[long-polling], channel=/meta/handshake, version=1.0}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill enter
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m filled 0 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,16/0,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] filled 0 encrypted bytes
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] unwrap Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill exit
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Read 0 bytes DirectByteBuffer@593223d9[p=689,l=689,c=16384,r=0]={HTTP/1.1 200 OK\r\n...essful"":false}]<<<>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} from DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,67/0,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,16/0,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m fillInterested HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{ext={replay=true}, supportedConnectionTypes=[long-polling], channel=/meta/handshake, id=104, version=1.0}]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING-->FILLING_FILL_INTERESTED HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING_FILL_INTERESTED-->FILL_INTERESTED HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m fillInterested SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m IDLE-->FILL_INTERESTED SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Local interests updating 0 -> 1 for SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=0,kro=1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Queued change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop woken up from select, 0/3 selected
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Running change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Key interests updated 0 -> 1 on SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=1,kro=1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop waiting on select
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36mo.e.j.client.TimeoutCompleteListener    [0;39m [2m:[0;39m Scheduled timeout task org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask@1df32f09 in 60000 ms for HttpRequest[POST /cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m Queued HttpRequest[POST /cometd/37.0/handshake HTTP/1.1]@2eb9379d for HttpDestination[https://lm--agency.cs24.my.salesforce.com]6546371(via my.proxy.com:80),queue=1,pool=ConnectionPool[c=2/2,a=0,i=2]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.ConnectionPool [0;39m [2m:[0;39m Connection active HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m Processing exchange HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null on HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] of HttpDestination[https://lm--agency.cs24.my.salesforce.com]6546371(via my.proxy.com:80),queue=0,pool=ConnectionPool[c=2/2,a=1,i=1]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.IdleTimeout        [0;39m [2m:[0;39m DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=1,kro=1} idle timeout check, elapsed: 0 ms, remaining: 120000 ms
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.IdleTimeout        [0;39m [2m:[0;39m SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/120000,SslConnection}{io=1,kio=1,kro=1} idle timeout check, elapsed: 0 ms, remaining: 120000 ms
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpChannel    [0;39m [2m:[0;39m HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null associated true to HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request begin HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request headers HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
Accept-Encoding: gzip
User-Agent: Jetty/9.2.17.v20160517
Content-Type: application/json;charset=UTF-8
Cookie: BAYEUX_BROWSER=93dd-dvcdg9sjhdq0is0pfju8t7h
Cookie: sfdc-stream=710144266.38175.0000
Authorization: OAuth 00D190000000WqD!AQEAQFYApiah298viTmAZevjtzeQzw_3MBYTiePeHZjAO3k80b6l0TA161S3ArBdfSxwZ7gLC92LpIuAeeMDvSLl3col3MxK
Host: lm--agency.cs24.my.salesforce.com
Content-Length: 124
Cookie: BrowserId=xCziREfCQ7CXXAL3b3x77Q
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpContent    [0;39m [2m:[0;39m Advanced content to last chunk java.nio.HeapByteBuffer[pos=0 lim=124 cap=124]
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m write: WriteFlusher@48800edd{IDLE} [HeapByteBuffer@5a1c37f9[p=0,l=520,c=4096,r=520]={<<<POST https://lm--...Length: 124\r\n\r\n>>>Qzw_3MBYTiePeHZjA...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},HeapByteBuffer@4982137a[p=0,l=124,c=124,r=124]={<<<[{""ext"":{""replay""...ersion"":""1.0""}]>>>}]
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m update WriteFlusher@48800edd{WRITING}:IDLE-->WRITING
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] flush enter [java.nio.HeapByteBuffer[pos=0 lim=520 cap=4096], java.nio.HeapByteBuffer[pos=0 lim=124 cap=124]]
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/673,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] wrap Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 644 bytesProduced = 673
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,W,16/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,16/120000,SslConnection}{io=1,kio=1,kro=1} OK HeapByteBuffer@4b887332[p=0,l=673,c=17408,r=673]={<<<\x17\x03\x03\x02\x9c\x00\x00\x00\x00\x00\x00\x00g\xDe\xAc\x8e\x97...\xF6mB\xA6\xCe\xD3f\x82\r\x92W~\t\xE3\x8e>>>cessful"":false}]\x17...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m flushed 673 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,16/120000,SslConnection}{io=1,kio=1,kro=1}
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/0,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] flush exit, consumed 644
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m update WriteFlusher@48800edd{IDLE}:WRITING-->IDLE
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request committed HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request content HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
HeapByteBuffer@4d0de624[p=0,l=124,c=124,r=124]={<<<[{""ext"":{""replay""...ersion"":""1.0""}]>>>}
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpContent    [0;39m [2m:[0;39m Advanced content past last chunk
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Content false consumed true for HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request success HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpExchange   [0;39m [2m:[0;39m Terminated request for HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null, result: null
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Terminating request HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop woken up from select, 1/3 selected
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Key interests updated 1 -> 0 on SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,241/120000,SslConnection}{io=1,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Local interests updating 1 -> 0 for SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,241/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Queued change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILL_INTERESTED-->FILLING SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m onFillable enter DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,257/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,241/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILL_INTERESTED-->FILLING HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m onFillable exit DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,257/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,241/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING-->IDLE SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Running change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop waiting on select
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=0,l=0,c=16384,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill enter
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m filled 633 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,241/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=633/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] filled 633 encrypted bytes
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=604} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] unwrap Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 633 bytesProduced = 604
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill exit
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Read 604 bytes DirectByteBuffer@593223d9[p=0,l=604,c=16384,r=604]={<<<HTTP/1.1 200 OK\r\n...essful"":false}]>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} from DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,257/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,0/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=0,l=604,c=16384,r=604]={<<<HTTP/1.1 200 OK\r\n...essful"":false}]>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m START --> RESPONSE_VERSION
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m RESPONSE_VERSION --> SPACE1
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m SPACE1 --> STATUS
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m STATUS --> SPACE2
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m SPACE2 --> REASON
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m REASON --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response begin HttpResponse[HTTP/1.1 200 OK]@22370a22
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> CONTENT
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response headers HttpResponse[HTTP/1.1 200 OK]@22370a22
Date: Thu, 18 Aug 2016 22:12:59 GMT
Content-Security-Policy-Report-Only: default-src https:; script-src https: 'unsafe-inline' 'unsafe-eval'; style-src https: 'unsafe-inline'; img-src https: data:; font-src https: data:; report-uri /_/ContentDomainCSPNoAuth?type=mydomain
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Salesforce-No-Proxy: true
Content-Type: application/json;charset=UTF-8
Content-Length: 151
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response content HttpResponse[HTTP/1.1 200 OK]@22370a22
DirectByteBufferR@7b7e433f[p=453,l=604,c=16384,r=151]={HTTP/1.1 200 OK\r\n...Length: 151\r\n\r\n<<<[{""ext"":{""replay""...essful"":false}]>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m CONTENT --> END
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m reset HttpParser{s=END,151 of 151}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m END --> START
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response success HttpResponse[HTTP/1.1 200 OK]@22370a22
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpExchange   [0;39m [2m:[0;39m Terminated response for HttpExchange@fbfca1d req=TERMINATED/null@null res=TERMINATED/null@null, result: Result[HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d > HttpResponse[HTTP/1.1 200 OK]@22370a22] null
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response complete HttpResponse[HTTP/1.1 200 OK]@22370a22
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpChannel    [0;39m [2m:[0;39m HttpExchange@fbfca1d req=TERMINATED/null@null res=TERMINATED/null@null disassociated true from HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] released
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m Processing exchange null on HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] of HttpDestination[https://lm--agency.cs24.my.salesforce.com]6546371(via my.proxy.com:80),queue=0,pool=ConnectionPool[c=2/2,a=1,i=1]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.ConnectionPool [0;39m [2m:[0;39m Connection idle HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Request/Response succeeded: Result[HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d > HttpResponse[HTTP/1.1 200 OK]@22370a22] null
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.e.j.client.TimeoutCompleteListener    [0;39m [2m:[0;39m Cancelled (successfully: true) timeout task org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask@1df32f09
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=104, error=401::Authentication invalid, successful=false}]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/handshake {ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=104, error=401::Authentication invalid, successful=false}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: REHANDSHAKING -> TERMINATING
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_HANDSHAKE]: {ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=104, error=401::Authentication invalid, successful=false}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: TERMINATING -> DISCONNECTED
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=604,l=604,c=16384,r=0]={HTTP/1.1 200 OK\r\n...essful"":false}]<<<>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill enter
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m filled 0 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,0/0,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] filled 0 encrypted bytes
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] unwrap Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill exit
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Read 0 bytes DirectByteBuffer@593223d9[p=604,l=604,c=16384,r=0]={HTTP/1.1 200 OK\r\n...essful"":false}]<<<>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} from DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,257/0,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,0/0,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m fillInterested HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING-->FILLING_FILL_INTERESTED HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING_FILL_INTERESTED-->FILL_INTERESTED HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m fillInterested SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m IDLE-->FILL_INTERESTED SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Local interests updating 0 -> 1 for SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=0,kro=1}
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Queued change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop woken up from select, 0/3 selected
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Running change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Key interests updated 0 -> 1 on SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=1,kro=1}
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop waiting on select
;;;","19/Aug/16 18:31;dhirajsb;Hi Rajesh, 

Please attach logs as files next time. From your log it looks like CometD tries to reconnect after the 2 hour expiry by sending new handshake messages (I tested this and it worked in my local tests), but in your test OAuth token has also expired and Salesforce responds with the following message but HTTP status 200:
{code}
{ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=104, error=401::Authentication invalid, successful=false}
{code}
The 401 is buried in the body, so {{SalesforceSecurityHandler}} in 2.18.x doesn't see it, and {{reconnect=none}} is causing CometD to terminate the connection. I'll also check what's going on in 2.17.x. 

I will create a test for this scenario and provide a way to handle it. BTW, is this consumer the only route in your application? I'm wondering why this wasn't seen earlier by other users. ;;;","19/Aug/16 20:03;rajesh734;Yes Dhiraj, this is the only route we defined for our new application. I would appreciate if you could fix this issue.

Thanks
Rajesh;;;","22/Aug/16 23:18;dhirajsb;I tried recreating your exact scenario, but couldn't. If I force the token to expire, Salesforce responds with a 401 HTTP Status, which is handled by {{SalesforceSecurityHandler}} (a little clumsily, which can be improved upon, but it's handled). In your case it seems like Salesforce is responding with the 401 inside the CometD message. I can write a little fix to simply renew the token when it sees the 401 inside a _connect_ response, but I won't be able to test it. You'd have to test the patch to confirm. ;;;","23/Aug/16 13:31;rajesh734;Sure, I can validate the fix. Please go ahead and commit your fix and let me know the branch details.;;;","24/Aug/16 18:45;rajesh734;Dhiraj, Have you committed the fix?;;;","25/Aug/16 00:12;dhirajsb;Rajesh, I'm working on a more elaborate solution, where the component will restart the underlying CometD client from scratch if Salesforce kicks it out unceremoniously (without letting it re-handshake and reconnect), like it did in your logs. 
I'm also streamlining subscription handling to make it more robust. I'm testing it now and will commit the fix later today.  ;;;","25/Aug/16 08:47;dhirajsb;Rajesh, I have pushed the fixes to master branch. Please test in your environment and let me know whether it fixes your issue. 

Also, note the following changes in behavior:
* Since subscriptions are created and handled asynchronously, the consumer throws {{SalesforceException}} when it is unable to subscribe for any reason. The error message will be {{Error subscribing to <topicName>: <reason>}}. The consumer won't attempt to re-subscribe and will not receive any messages from Salesforce after this error. The underlying cause has to be fixed and the consumer/route restarted to attempt to subscribe to the channel again. 
* For hard disconnects, it will try to reconnect with a pause between attempts based on backoff options in CometD, which are 1 second and 30 seconds for increment and max respectively. If needed CometD options could be made configurable in the future to make the backoff customizable. 
* If it can't reconnect after the pause between attempts exceeds max backoff, all consumers will throw a SalesforceException with a message {{Aborting Salesforce reconnect due to: <reason>}}. At which point, all consumers are again disconnected and the component will have to be restarted to try to reconnect to Salesforce. 

Hopefully this makes the consumer more robust and the error handling intuitive. Let me know if you have any feedback or other ideas. ;;;","25/Aug/16 16:31;dhirajsb;Rajesh, I also cherry picked the fixes into camel-2.17.x. Please verify on that branch as well. ;;;","26/Aug/16 21:30;dhirajsb;[~rajesh734], did you get a chance to test the fix? Let me know so I can mark this issue as resolved. ;;;","29/Aug/16 12:05;rajesh734;Dhiraj, still getting the same issue. I have attached the log here. This is for version 2.18.0-SNAPSHOT;;;","30/Aug/16 05:52;dhirajsb;[~rajesh734], I've pushed changes to handle failed CometD handshake to master and camel-2.17.x. Let me know whether this fixes your problem. ;;;","30/Aug/16 13:22;rajesh734;Dhiraj, what I mean by 2.18.0-SNAPSHOT is nothing but the master. I took the code from master which had the version named as 2.18.0-SNAPSHOT. 

If you want to try in 2.17.x then I can. I will try that today and update you with logs.;;;","30/Aug/16 14:37;dhirajsb;Yeah, I know that. I have pushed new changes to those branches. ;;;","31/Aug/16 13:48;rajesh734;Dhiraj, not able to pull your latest change via nexus repository. I guess it needs sometime to get the updates to nexus repository. I will update you once I test your latest change.;;;","01/Sep/16 13:37;rajesh734;Dhiraj, looks like your fix worked partially, meaning: When it gets into 403 error, it is reconnecting but, however it failed early morning EST due to 401 Authentication Invalid error.
I have attached the log which shows detailed information.
Note: Tested 2.17.X version;;;","01/Sep/16 13:55;rajesh734;Missed to attach another log, this one is the backed up one due to log overload.;;;","01/Sep/16 17:21;rajesh734;Please let me know if you want any more information;;;","02/Sep/16 17:49;dhirajsb;Pushed new changes to master and 2.17-x branches to ignore 403 errors, since that seems to happen in your tests even when the OAuth token is valid. Now it looks for a 401 handshake error before refreshing token. ;;;","02/Sep/16 19:17;rajesh734;Sure, let me validate this fix and let you know.;;;","07/Sep/16 15:12;rajesh734;Dhiraj, the latest fix seem to have fixed the reconnect issue. Now I see from log that, it reconnects after 401 error. But, however I found the following issue with master code(2.18.0-SNAPSHOT):

My subscription query has ID and other fields including name. When I receive my subscription message, I just get the ID data and not other fields data. This is working good in 2.17.x version. Even regular Rest API with SObject or query etc. not pulling data other than ID field in 2.18.0-SNAPSHOT version.

Can you please take care of this.;;;","07/Sep/16 15:44;rajesh734;I guess this is not due to this reconnect fix because 2.17.x works good. But, anyways thought I would share this with you.

I have one more question. 
During reconnect time, assume if we have subscription data coming from Salesforce, after reconnect will it fetch those events which are missed during reconnect? I have not tested this.;;;","07/Sep/16 16:47;dhirajsb;[~rajesh734], glad to hear this issue is solved. Normally Salesforce will not resubmit events you missed when you were not connected. For that 2.18 has added support for [Salesforce event reliability and durability|https://developer.salesforce.com/docs/atlas.en-us.api_streaming.meta/api_streaming/using_streaming_api_stateless.htm]. 

Please open a new issue for the 2.18 branch for the missing fields, along with a repeatable use case. ;;;","07/Sep/16 17:48;rajesh734;I have tested the replayId option in 2.18 but, what I would like is:

Update replayId during reconnect so that, the subscription begins from where it left off. By this way, it will be more reliable from Camel Salesforce perspective.

;;;","30/Sep/16 08:13;dhirajsb;[~rajesh734], it looks like the Salesforce CometD extension does update the ID data on it's own. Please confirm that it is working in your environment after a reconnect. I am going to mark this issue as resolved, since the original reconnect issue has been addressed. ;;;","30/Sep/16 08:14;dhirajsb;[~rajesh734], it looks like the Salesforce CometD extension does update the ID data on it's own. Please confirm that it is working in your environment after a reconnect. I am going to mark this issue as resolved, since the original reconnect issue has been addressed. ;;;","30/Sep/16 08:18;dhirajsb;Component now restarts the CometD Bayeux client on Handshake errors. Connect errors are handled by the underlying CometD client. ;;;"
Problem setting JMSX jms properties on OracleAQ,CAMEL-10237,12996562,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,preben,preben,11/Aug/16 08:55,22/Aug/16 10:01,14/Jul/23 05:50,22/Aug/16 10:01,2.17.2,2.17.3,,,,,,,,,,,,,2.17.4,2.18.0,,,camel-jms,,,,,,,0,,,,,,"See description in http://camel.465427.n5.nabble.com/possible-camel-jms-regression-in-2-17-2-td5786290.html
",,acosentino,anoordover,davsclaus,preben,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9995,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 22 10:01:03 UTC 2016,,,,,,,,,,,"0|i326zj:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"11/Aug/16 13:21;davsclaus;What is the exception hierachy of that Oracle AMQ exception. Can you see what JMSException it extends?;;;","11/Aug/16 20:21;anoordover;according to https://docs.oracle.com/cd/B12037_01/server.101/b12023/oracle/jms/AQjmsException.html it extends javax.jms.JMSException.
I checked this using idea and I see the same extension as mentioned in javadoc. So it extends javax.jms.JMSException;;;","12/Aug/16 05:43;preben;[~anoordover] Thanks Arno ;;;","15/Aug/16 06:21;preben;Digged a bit into this.

Turns out that it's only the JMSXUserID that is the problem. If I remove setting the JMSXUserID from https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java#L184 it works on OracleAQ.

Still there is a sligt difference in which JMSX headers get's populated between 2.17.1 and 2.17.2->

2.17.2 and newer ->
JMS_OracleDelay=0, JMS_OracleDeliveryMode=2, JMS_OracleTimestamp=1471240798892, JMSCorrelationID=null, JMSCorrelationIDAsBytes=null, JMSDeliveryMode=2, JMSDestination=INTAQ.YARN_UPDATE_HUB, JMSExpiration=0, JMSMessageID=ID:3A16F131215794F4E053B50D650A06C2, JMSPriority=1, JMSRedelivered=false, JMSReplyTo=null, JMSTimestamp=1471240798892, JMSType=null, JMSXGroupID=null}

2.17.1->
JMS_OracleDelay=0, JMS_OracleDeliveryMode=2, JMS_OracleTimestamp=1471240970894, JMSCorrelationID=null, JMSCorrelationIDAsBytes=null, JMSDeliveryMode=2, JMSDestination=INTAQ.YARN_UPDATE_HUB, JMSExpiration=0, JMSMessageID=ID:3A16FB721A86BFA8E053B50D650AA65F, JMSPriority=1, JMSRedelivered=false, JMSReplyTo=null, JMSTimestamp=1471240970894, JMSType=null, JMSXDeliveryCount=1, JMSXGroupID=null, JMSXRecvTimestamp=1471240970965, JMSXState=0, JMSXUserID=INTAQ}


;;;","15/Aug/16 08:58;davsclaus;Thanks Preben.

That code should only be used if the option includeAllJMSXProperties=true. I will add a fix for that.;;;","15/Aug/16 09:08;davsclaus;It is CAMEL-9995 that caused this problem.

;;;","15/Aug/16 10:58;preben;Yes it is it the change i https://issues.apache.org/jira/browse/CAMEL-9995 that causes the problem.
Properly the change from getOutFilter to getInFilter.

Actually I can make i work in 2 ways 
Either removing the line described above, or keep the https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsHeaderFilterStrategy.java#L39 as getOutFilter().add(""JMSXUserID"");

I'm not really aware of the background for the change, or what issue it solves.


 ;;;","15/Aug/16 11:41;preben;Forgot to mention that this proberly only occures when you have a route -> from(jms)...to(jms)

This will take the existing jms headers and copy/set them when calling the to(jms)
;;;","19/Aug/16 06:27;davsclaus;Another user hit by this problem also: http://camel.465427.n5.nabble.com/oracle-jms-AQjmsException-JMS-110-Property-JMSXDeliveryCount-not-writeable-tp5786620.html;;;","22/Aug/16 10:01;acosentino;I reverted the CAMEL-9995 commit on all the branches. This now should be resolved.;;;",,,,,,,,,,,,,,,,,,,,,,
BeanProccessor - method invocation with generics+annotations,CAMEL-10236,12996556,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bligny,bligny,11/Aug/16 08:00,13/Oct/16 08:23,14/Jul/23 05:50,13/Oct/16 08:23,2.17.2,,,,,,,,,,,,,,2.18.1,2.19.0,,,camel-core,,,,,,,0,,,,,,"The following code does not work:

{code:java}
public interface Transformer<T> {	
	 public Object convert(T input) throws Exception;
}

public class MyTransformer implements Transformer<InputStream> {
    @Override
    public Object convert(@Body InputStream body) {...}
}

from(""direct:foo"")
.transform().method(new MyTransformer(), ""convert"")
.log(""${body}"");
{code}

Stack trace:
{noformat}
java.lang.ClassCastException: [B cannot be cast to java.io.InputStream
	at net.haulogy.erpgis.esb.transformers.MyTransformer.convert(MyTransformer.java:1)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:408)
	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:279)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:252)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:177)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:68)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:211)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:126)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:138)
	at org.apache.camel.processor.TransformProcessor.process(TransformProcessor.java:50)
{noformat}

But this is working fine:
{code:java}
public class MyTransformer {
    public Object convert(@Body InputStream body) {...}
}

from(""direct:foo"")
.transform().method(new MyTransformer(), ""convert"")
.log(""${body}"");
{code}",,aldettinger,bligny,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 13 08:23:50 UTC 2016,,,,,,,,,,,"0|i326y7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Aug/16 07:41;bligny;Additional information: [B is the encoded type name for a byte array
(see http://stackoverflow.com/questions/4606864/what-kind-of-java-type-is-b)

The strange thing is that he capability of casting the *same* body to the *same* target type (InputStream) using the *same* method signature is depending on whether the bean is implementing or not the interface...;;;","12/Oct/16 17:04;aldettinger;I've reproduced the issue with camel-core/2.18.0-SNAPSHOT.
Since [this commit|https://github.com/apache/camel/pull/1204/commits/35319119a486b1acbc12a0a96a4ca2aa4f3e41ed] from this [pull request|https://github.com/apache/camel/pull/1204], the issue is fixed on camel-core/2.19.0-SNAPSHOT.
Moreover, committed tests are covering the case from this ticket.

So, at the end of the day, this issue is a duplicate of [CAMEL-10376|https://issues.apache.org/jira/browse/CAMEL-10376] and could be closed.;;;","13/Oct/16 08:23;davsclaus;Thanks for testing;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[camel-itest-karaf] CamelJbpmTest fails as it requires com.sun.tools.xjc,CAMEL-10232,12996233,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,10/Aug/16 10:14,10/Aug/16 15:32,14/Jul/23 05:50,10/Aug/16 15:32,,,,,,,,,,,,,,,2.18.0,,,,karaf,tests,,,,,,0,,,,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-08-10 10:14:46.0,,,,,,,,,,,"0|i324yf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[camel-itest-karaf] CamelIgniteTest fails as Ignite needs sun.nio.ch,CAMEL-10231,12996228,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,10/Aug/16 10:02,10/Aug/16 15:32,14/Jul/23 05:50,10/Aug/16 15:32,,,,,,,,,,,,,,,2.18.0,,,,karaf,tests,,,,,,0,,,,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-08-10 10:02:49.0,,,,,,,,,,,"0|i324xb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-rabbitmq - Race condition when stopping context with autoack=false,CAMEL-10229,12995983,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pcan,pcan,09/Aug/16 15:47,16/Aug/16 14:29,14/Jul/23 05:50,16/Aug/16 14:29,2.17.3,,,,,,,,,,,,,,2.17.4,2.18.0,,,camel-rabbitmq,,,,,,,1,autoack,rabbitmq,stop,,,"Run the following code and hit enter while one message is in unacked state (see RabbitMQ console):

{code:java}
public static void main(String[] args) throws Exception {
	CamelContext context = new DefaultCamelContext();

	context.addRoutes(new RouteBuilder() {
		@Override
		public void configure() {
			from(""rabbitmq://localhost/?queue=sourceQueue&skipExchangeDeclare=true&skipQueueDeclare=true&autoAck=false&prefetchEnabled=true&prefetchCount=1"")
					.delayer(5000)
					.setHeader(""rabbitmq.ROUTING_KEY"", constant(""destinationQueue""))
					.to(""rabbitmq://localhost/?skipExchangeDeclare=true&skipQueueDeclare=true&autoAck=false"")
					.routeId(""myRoute"");
		}
	});
	context.start();
	new BufferedReader(new InputStreamReader(System.in)).readLine();
	context.stop();
}
{code}

you get the following exception:

{noformat}
com.rabbitmq.client.impl.DefaultExceptionHandler: Consumer org.apache.camel.component.rabbitmq.RabbitConsumer@4c57777e (amq.ctag-dWpQw46flmamv0dM_Fa_Qg) method handleDelivery for channel AMQChannel(amqp://rabbit_user@127.0.0.1:5672/,1) threw an exception for channel AMQChannel(amqp://rabbit_user@127.0.0.1:5672/,1):
com.rabbitmq.client.AlreadyClosedException: channel is already closed due to clean channel shutdown; protocol method: #method<channel.close>(reply-code=200, reply-text=OK, class-id=0, method-id=0)
	at com.rabbitmq.client.impl.AMQChannel.ensureIsOpen(AMQChannel.java:195)
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:309)
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:303)
	at com.rabbitmq.client.impl.ChannelN.basicAck(ChannelN.java:1043)
	at org.apache.camel.component.rabbitmq.RabbitConsumer.handleDelivery(RabbitConsumer.java:108)
	at com.rabbitmq.client.impl.ConsumerDispatcher$5.run(ConsumerDispatcher.java:144)
	at com.rabbitmq.client.impl.ConsumerWorkService$WorkPoolRunnable.run(ConsumerWorkService.java:99)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{noformat}

I think that this is caused by a race condition between the main thread that runs channel.close() immediately after channel.basicCancel(tag) (see org.apache.camel.component.rabbitmq.RabbitConsumer) without waiting the channel.basicAck(deliveryTag, false) in handleDelivery().

Another bad side effect is that *you'll find a duplicate of a message* on the destinationQueue. For example if you have 10 initial messages in sourceQueue and you hit enter while it's processing the third one, you'll get 7 messages in sourceQueue and 4 messages in destinationQueue.

The correct behaviour should be the following:
1) Stop consumer: channel.basicCancel(tag)
2) Wait if there is a running consumer
3) The consumer acks the previous message
4) Close the channel",,githubbot,mpricope,pcan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 16 14:28:48 UTC 2016,,,,,,,,,,,"0|i323f3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Aug/16 14:50;githubbot;GitHub user mpricope opened a pull request:

    https://github.com/apache/camel/pull/1119

    Fix CAMEL-10229

    Use a semaphore to wait for the message to be processed when
    autoAck=false

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mpricope/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1119.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1119
    
----
commit 52aed832f59f423c53b6426a0dd36dfd0eed699f
Author: miti <pricope@textkernel.nl>
Date:   2016-08-12T14:41:55Z

    Fix CAMEL-10229
    
    Use a semaphore to wait for the message to be processed when
    autoAck=false

----
;;;","12/Aug/16 14:51;mpricope;Bumped in to this also while trying to implement some clean shutdown of our camel app.

I've put together a fix for this:

https://github.com/apache/camel/pull/1119

;;;","16/Aug/16 14:28;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1119
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Saxon is not thread safe,CAMEL-10225,12995484,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dave_bennison,dave_bennison,07/Aug/16 15:24,21/Sep/17 15:48,14/Jul/23 05:50,21/Sep/17 15:48,2.16.3,2.17.0,2.17.1,2.17.2,,,,,,,,,,,2.20.0,,,,camel-saxon,,,,,,,0,,,,,,"
We perform an XSLT transform within a Split. We added camel-saxon so that we could use XSLT 2 for one particular transformation. This works fine when run synchronously but when we switch parallel to true on the split we get the following errors:-

2016-08-07T16:09:02,142 [Camel (camel-1) thread #4 - Split] ERROR org.apache.camel.processor.DefaultErrorHandler |  |  |  |  
 Failed delivery for (MessageId: ID-dave-ThinkPad-Edge-E540-35771-1470582541027-0-27 on ExchangeId: ID-dave-ThinkPad-Edge-E540-35771-1470582541027-0-32). Exhausted after delivery attempt: 1 caught: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value <OrderResponseItem xmlns=""http://api.channeladvisor.com/webservices/"" xmlns:q3=""http://api.channeladvisor.com/datacontracts/orders"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""q3:OrderResponseDetailComplete"">
                <q3:NumberOfMatches>3</q3:NumberOfMatches>
                <q3:OrderTimeGMT>2016-07-04T08:07:38.893</q3:OrderTimeGMT>
                <q3:LastUpdateDate>2016-07-04T08:07:40.217</q3:LastUpdateDate>
                <q3:TotalOrderAmount>357.0000</q3:TotalOrderAmount>
                <q3:OrderState>Active</q3:OrderState>
                <q3:DateCancelledGMT xsi:nil=""true""/>
                <q3:OrderID>9564205</q3:OrderID>
                <q3:ClientOrderIdentifier>1000008</q3:ClientOrderIdentifier>
                <q3:SellerOrderID/>
                <q3:OrderStatus>
                    <q3:CheckoutStatus>Completed</q3:CheckoutStatus>
                    <q3:CheckoutDateGMT>2016-07-04T08:07:38.893</q3:CheckoutDateGMT>
                    <q3:PaymentSt... [Body clipped after 1000 chars, total length is 14996] due java.lang.NullPointerException. Processed by failure processor: FatalFallbackErrorHandler[Channel[Log(route2)[Error processing route: ${exception.stacktrace}]]]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [direct://in                                                                   ] [       378]
[route1            ] [to1               ] [direct:transformOrderResponseItemToConsignmentRoute                           ] [        12]
[route2            ] [log5              ] [log                                                                           ] [        11]
[                  ] [GeneralExceptionLo] [log                                                                           ] [         3]

Stacktrace
--------------------------------------------------------------------------------------------------------------------------------------- 
org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value <OrderResponseItem xmlns=""http://api.channeladvisor.com/webservices/"" xmlns:q3=""http://api.channeladvisor.com/datacontracts/orders"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""q3:OrderResponseDetailComplete"">
                <q3:NumberOfMatches>3</q3:NumberOfMatches>
                <q3:OrderTimeGMT>2016-07-04T08:07:38.893</q3:OrderTimeGMT>
                <q3:LastUpdateDate>2016-07-04T08:07:40.217</q3:LastUpdateDate>
                <q3:TotalOrderAmount>357.0000</q3:TotalOrderAmount>
                <q3:OrderState>Active</q3:OrderState>
                <q3:DateCancelledGMT xsi:nil=""true""/>
                <q3:OrderID>9564205</q3:OrderID>
                <q3:ClientOrderIdentifier>1000008</q3:ClientOrderIdentifier>
                <q3:SellerOrderID/>
                <q3:OrderStatus>
                    <q3:CheckoutStatus>Completed</q3:CheckoutStatus>
                    <q3:CheckoutDateGMT>2016-07-04T08:07:38.893</q3:CheckoutDateGMT>
                    <q3:PaymentSt... [Body clipped after 1000 chars, total length is 14996] due java.lang.NullPointerException
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:150) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:41) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.builder.ExpressionBuilder$64.evaluate(ExpressionBuilder.java:1533) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.LogProcessor.process(LogProcessor.java:53) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:827) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:85) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:320) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:305) [camel-core-2.17.2.jar:2.17.2]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_66]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_66]
Caused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1285) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:78) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[camel-core-2.17.2.jar:2.17.2]
	... 26 more
Caused by: java.lang.NullPointerException
	at org.xml.sax.helpers.NamespaceSupport$Context.declarePrefix(NamespaceSupport.java:628) ~[?:1.8.0_66]
	at org.xml.sax.helpers.NamespaceSupport.declarePrefix(NamespaceSupport.java:319) ~[?:1.8.0_66]
	at net.sf.saxon.dom.DOMSender.gatherNamespaces(DOMSender.java:304) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.dom.DOMSender.sendElement(DOMSender.java:125) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.dom.DOMSender.send(DOMSender.java:93) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.dom.DOMObjectModel.sendSource(DOMObjectModel.java:242) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.event.Sender.send(Sender.java:219) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.IdentityTransformer.transform(IdentityTransformer.java:46) ~[Saxon-HE-9.5.1-5.jar:?]
	at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:132) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:116) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.converter.jaxp.XmlConverter.toString(XmlConverter.java:238) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.converter.jaxp.XmlConverter.toString(XmlConverter.java:282) ~[camel-core-2.17.2.jar:2.17.2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_66]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_66]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_66]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[?:1.8.0_66]
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1281) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:78) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[camel-core-2.17.2.jar:2.17.2]
	... 26 more


I  created a test project (which I will try to attach) with a simple unit test. I found that if I remove camel-saxon then parallel appears to run fine (The unit test is not multithreaded but I can reach 20 runs without a problem). If I include camel-saxon the I start getting the problem above (usually within 8 runs of the unit test)

I noticed that camel-saxon uses an old version of Saxon (Saxon-HE-9.5.1-5) so I overrode this with the latest version (9.7.0-7) but I still get the problem.

I have tried against camel-saxon 2.17.2,2.17.1,2.17.0 and 2.16.3 (which required further Saxon fiddling).

I originally raised this problem on the mailing list here: http://camel.465427.n5.nabble.com/Camel-XSLT-Saxon-not-thread-safe-tc5785086.html",Java 1.8.0_66-b17 Ubuntu 15.10 and Windows 10,dave_bennison,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Aug/16 15:32;dave_bennison;camel-split-parrallel-xslt-bug.zip;https://issues.apache.org/jira/secure/attachment/12822473/camel-split-parrallel-xslt-bug.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 21 15:48:40 UTC 2017,,,,,,,,,,,"0|i320c7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Aug/16 15:32;dave_bennison;Attached test Eclipse project.

Run {{OrderConsignmentRouteBuilderTest.testParrallel()}}

camel-saxon can be removed from the POM and I've included a dependency to the latest version of Saxon so that the current (old) version of Saxon in camel-saxon can be over-ridden.;;;","21/Sep/17 13:28;davsclaus;The problem is that you log the message body, which then forces a type conversion to a String value which is not thread-safe in saxon.

Remove this line
{code}
            .log(LoggingLevel.INFO, ""Found order:-\n${body}"")
{code}

Then it works with parallel processing

The DOM structure under the hood is xerces based
{code}
com.sun.org.apache.xerces.internal.dom.DeferredElementNSImpl
{code}

Which is not a thread-safe DOM. I guess they somehow are linked together as they are split from the same original input source.;;;","21/Sep/17 13:36;davsclaus;Another alternative is to convert it to Document after the split
{code}
        .split(xp).parallelProcessing(isSplitParrallel)
            .convertBodyTo(Document.class)
{code};;;","21/Sep/17 15:17;davsclaus;I have now a solution. There is a new option you can turn on | off to enable thread safety. When enabled your test case passes.
The overhead is that camel needs to do a little bit of defensive copy of the DOM that the xpath expression evaluated as, so the DOM is thread-safe and can be processed individually by different threads concurrently.

Its likely safer to turn this on by default so end users don't hit these weird issues OOTB. And for people that really care then they can turn it off, if they don't use saxon or don't have problems. The overhead is as said that a clone of the node is created which takes up CPU and memory space.;;;","21/Sep/17 15:48;davsclaus;Okay we had to keep it backwards compatible as before, but you can now easily turn on thread safety mode for when you use saxon
{code}
        XPathExpression xp = orderResponseNamespaces.xpath(ORDER_RESPONSE_ITEM_SPLIT_XPATH);
        xp.setThreadSafety(true);
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Jcache: writeThrough option is never used,CAMEL-10221,12994874,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,04/Aug/16 12:07,04/Aug/16 12:56,14/Jul/23 05:50,04/Aug/16 12:56,,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-jcache,,,,,,,0,,,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-08-04 12:07:46.0,,,,,,,,,,,"0|i31wkn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove logging implementations from compile scope,CAMEL-10217,12994292,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,nferraro,nferraro,nferraro,02/Aug/16 14:47,08/Aug/16 08:01,14/Jul/23 05:50,08/Aug/16 08:01,,,,,,,,,,,,,,,2.18.0,,,,,,,,,,,0,,,,,,"Some components include logging implementations among their dependencies. If it is applicable (eg. if they are not hardcoded), they should be removed.

A quick script:
{code}
for comp in $(ls | grep ""camel-"" | grep -v "".iml""); do
	cd $comp
	mvn dependency:tree | grep 'log4j\|logback\|slf4j-simple\|slf4j-jdk14\|slf4j-log4j12' | grep -v test | xargs -I line echo ""$(pwd) line""
	cd ..
done
{code}

Shows the following problems:
{noformat}
./camel/components/camel-atmos [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-gora [INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-gora [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-hbase [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-jbpm [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-jbpm [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-jt400 [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-jt400 [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-krati [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-openshift [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-salesforce [INFO] +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-scr [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-scr [INFO] +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-spark [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-spark [INFO] |  |  +- log4j:apache-log4j-extras:jar:1.2.17:compile
./camel/components/camel-spark-rest [INFO] |  +- org.slf4j:slf4j-simple:jar:1.7.21:compile
./camel/components/camel-spring-boot [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-spring-boot [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-spring-boot [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-zipkin-starter [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-zipkin-starter [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-zipkin-starter [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-zookeeper [INFO] |  +- log4j:log4j:jar:1.2.17:compile
{noformat}

Spring-boot starters are allowed to have logging implementations. _org.slf4j:log4j-over-slf4j_ is not an implementation.",,davsclaus,githubbot,lb,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 08 08:01:14 UTC 2016,,,,,,,,,,,"0|i31szb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Aug/16 11:56;davsclaus;Maybe some of the archetypes uses log4j 1.x in their generated sample code. It could be a good idea to upgrade those to use lo4j v2 also;;;","05/Aug/16 11:00;nferraro;After a bit of analysis, the number of modules with logging issues is higher than expected, as _commons-logging_ was missing in the script (it is not an implementation, but needs to be bridged to work with slf4j):

{code}
for comp in $(ls | grep ""camel-"" | grep -v "".iml""); do
	cd $comp
	mvn dependency:tree | grep 'log4j\|logback\|slf4j-simple\|slf4j-jdk14\|slf4j-log4j12\|commons-logging' | grep -v test | xargs -I line echo ""$(pwd) line""
	cd ..
done
{code}

A clean solution to bring all modules to sl4j would be:
- Exclude all dependencies on logging implementation
- Include a slf4j legacy binding library (eg. _jcl-over-sl4fj_, _log4j-over-slf4j_) to replace the removed implementation

The main problems of the approach:
1) 
The number of exclusions that need to be put in each pom.xml is huge.
There are a number of hacks that can be used to prevent this pollution, but all of them have many drawbacks (eg. empty libraries, marking them as provided).

2)
Once I put a eg. _log4j-over-slf4j_ dependency in a pom.xml, people are not free to use _slf4j_log4jxx_ in their app (application closed to prevent stack overflow). If they want to use log4j (version 1 or 2) they will need to exclude _log4j-over-slf4j_ when importing the camel module. So this change does not simplify things for end users.
The only problem-free logging implementation for end-users will be _logback_.


When the target logging system is known a-priori, or a default system is used, as in spring-boot (where the logging system can be changed, but starters are configured to use _logback_), logging dependencies can be fixed.

For this Jira, I'm going to remove logging libraries from modules not using an implementation directly, because bridging libraries in camel modules does not seem to solve problems for the end users. I'll take also a look at generated sample code for the log4j12 issue.

For spring-boot, logging issues can be completely solved in (CAMEL-10222).;;;","05/Aug/16 11:46;lb;[~davsclaus], [~nferraro] 

I'm having a look on how complex it is to migrate all the test stuffs to log4j2 (CAMEL-10224), so far the properties migration seems to work fine.
I should have a branch ready for review by end of the day beginning next week.;;;","05/Aug/16 13:13;githubbot;GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1110

    CAMEL-10217: Removed logging implementation from compile scope in jbp…

    …m, jt400, scr, spark-rest

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10217

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1110.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1110
    
----
commit 2d9c0a177708a83756f70a230c8ae405df3f656d
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-05T13:12:14Z

    CAMEL-10217: Removed logging implementation from compile scope in jbpm, jt400, scr, spark-rest

----
;;;","05/Aug/16 13:18;nferraro;[~lb] I fixed the scope only where it was safe to do so. Some dependencies (eg. _slf4j-log4j12_) need to be changed in the upgrade to log4j v2.;;;","07/Aug/16 14:09;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1110
;;;","08/Aug/16 08:01;nferraro;Upgrade to log4j v2 to be handled in CAMEL-10224.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
EventDrivenPollingConsumer is not thread safe when used with ConsumerCache ,CAMEL-10215,12994102,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sidshar,sidshar,01/Aug/16 22:43,02/Aug/16 06:49,14/Jul/23 05:50,02/Aug/16 06:49,2.18.0,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-core,,,,,,,0,,,,,,"For static endpoints, if DefaultConsumerTemplate#receive() is used,  ConsumerCache will return the cached instance of PollingConsumer for every thread part of parallel processing of split/aggregate.

Now, if EventDrivenPollingConsumer is used, returning same cache instance causes race condition in receive and receive(long) as the methods are not thread safe. The ordering of beforePoll, poll and afterPoll needs to be synchronized, otherwise the consumer might end up being suspended in afterPoll and the client whose beforePoll couldn't wake up the suspended thread will get no data.

",,davsclaus,githubbot,sidshar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 02 06:49:45 UTC 2016,,,,,,,Patch Available,,,,"0|i31rtb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Aug/16 23:18;sidshar;Diff : https://github.com/ssharma/camel/commit/ba14d20f536be101eca6c5fcd425355f06f9adca;;;","01/Aug/16 23:46;githubbot;GitHub user ssharma opened a pull request:

    https://github.com/apache/camel/pull/1099

    https://issues.apache.org/jira/browse/CAMEL-10215 Synchronizing recei…

    Synchronizing EventDrivenPollingConsumer receive methods to make them thread safe when used with ConsumerCache

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssharma/camel upstream

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1099.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1099
    
----
commit eb0049ba5f0e3a377637e401a5a1c770a54b9bb4
Author: Siddharth Sharma <siddharth.sharma@jobvite-inc.com>
Date:   2016-08-01T22:49:16Z

    https://issues.apache.org/jira/browse/CAMEL-10215 Synchronizing receive methods

----
;;;","02/Aug/16 06:49;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1099
;;;","02/Aug/16 06:49;davsclaus;Thanks for reporting and the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-spring-dm - Cannot install in Karaf 4.0.x,CAMEL-10205,12993513,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/16 11:40,22/Aug/16 13:23,14/Jul/23 05:50,22/Aug/16 13:23,2.18.0,,,,,,,,,,,,,,2.18.0,,,,examples,karaf,,,,,,0,,,,,,"In a vanilla Karaf 4.0.5, then following the readme.md file of camel-example-spring-dm it fails with some lovely classloading

{code}
2016-07-29 13:39:34,713 | ERROR | ExtenderThread-1 | ContextLoaderListener            | 83 - org.springframework.osgi.extender - 1.2.1 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=camel-example-spring-dm, config=osgibundle:/META-INF/spring/*.xml))
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to create the JAXB binder; nested exception is javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:378)[61:org.apache.camel.camel-spring:2.18.0.SNAPSHOT]
	at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:59)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1432)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1422)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:187)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:147)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:101)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:495)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:335)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:164)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:136)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)[72:org.apache.servicemix.bundles.spring-context:3.2.14.RELEASE_1]
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:539)[72:org.apache.servicemix.bundles.spring-context:3.2.14.RELEASE_1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$800(AbstractDelegatedExecutionApplicationContext.java:69)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:269)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:247)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:214)[83:org.springframework.osgi.extender:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:169)[83:org.springframework.osgi.extender:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:716)[83:org.springframework.osgi.extender:1.2.1]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]
Caused by: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:281)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_31]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_31]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_31]
	at java.lang.reflect.Method.invoke(Method.java:483)[:1.8.0_31]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:143)[:2.7.0]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:310)[:2.7.0]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:446)[:2.7.0]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:409)[:2.7.0]
	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:31)[55:org.apache.camel.camel-core:2.18.0.SNAPSHOT]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:215)[61:org.apache.camel.camel-spring:2.18.0.SNAPSHOT]
	at org.apach
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-29 11:40:45.0,,,,,,,,,,,"0|i31o6f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mail consumer sets wrong Content-Type header for mails with attachment,CAMEL-10200,12993445,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,siano,siano,29/Jul/16 05:20,29/Jul/16 05:40,14/Jul/23 05:50,29/Jul/16 05:40,2.16.3,2.17.2,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-mail,,,,,,,0,,,,,,"If a mail with attachment is received the mail consumer components (imap and pop3) set the message body to a Multipart Message and take over all headers from the mail message.

All known consumers of the message body (including the mail (SMTP) producer) will convert the body into somthing else (using one of the provided type converters) and will receive the first text part of the messsage, which is the mail body. This is the behaviour one would expect.

Unfortunately the Content-Type header taken over from the Multipart mail will contain a multipart content type (including the MIME boundary) of the whole mail, not the content type of the entity usually used as mail body,

As a consequence the following route will always fail:
{code}
from(""pop3://james3@localhost?consumer.delay=1000"").removeHeader(""to"").to(""smtp://james4@localhost"");
{code}

The error message is.
{noformat}
2016-07-28 20:01:24,892 [ames2@localhost] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-WDFD30052822A-54830-1469728883014-0-1 on ExchangeId: ID-WDFD30052822A-54830-1469728883014-0-2). Exhausted after delivery attempt: 1 caught: javax.mail.MessagingException: Missing start boundary

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [pop3://james2@localhost?consumer.delay=1000                                   ] [        18]
[route1            ] [to1               ] [smtp://james3@localhost                                                       ] [        13]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
javax.mail.MessagingException: Missing start boundary
	at javax.mail.internet.MimeMultipart.parse(MimeMultipart.java:682)
	at javax.mail.internet.MimeMultipart.updateHeaders(MimeMultipart.java:513)
	at javax.mail.internet.MimeBodyPart.updateHeaders(MimeBodyPart.java:1483)
	at javax.mail.internet.MimeBodyPart.updateHeaders(MimeBodyPart.java:1131)
	at javax.mail.internet.MimeMultipart.updateHeaders(MimeMultipart.java:515)
	at javax.mail.internet.MimeBodyPart.updateHeaders(MimeBodyPart.java:1483)
	at javax.mail.internet.MimeMessage.updateHeaders(MimeMessage.java:2198)
	at javax.mail.internet.MimeMessage.saveChanges(MimeMessage.java:2159)
	at org.apache.camel.component.mail.DefaultJavaMailSender.send(DefaultJavaMailSender.java:118)
	at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:63)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:362)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:525)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:91)
	at org.apache.camel.component.mail.MailConsumer.processExchange(MailConsumer.java:382)
	at org.apache.camel.component.mail.MailConsumer.processBatch(MailConsumer.java:221)
	at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:128)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{noformat}

The provided patch will set the Content-Type header of the message to the content type of the first text part of the multipart (the one which is also returned by the type converters)",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-29 05:20:32.0,,,,,,,Patch Available,,,,"0|i31nrb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rest-dsl - automatic binding failure with waitForTaskToComplete=Never,CAMEL-10195,12993187,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fabryprog,fabryprog,28/Jul/16 08:55,05/Aug/16 05:55,14/Jul/23 05:50,05/Aug/16 05:55,2.17.2,,,,,,,,,,,,,,2.18.0,,,,camel-core,,,,,,,0,,,,,,"Hello,
Into my project i am using rest dsl.

when insert into my seda waitForTaskToComplete=Never attribute, automatic binding (json) is disabled!!!!

I create a simple camel example (see attachment)

To simulate it:
1. extract zip file
2. run ""mvn clean camel:run""

TEST SUCCESS

curl -X GET -H ""Content-type: application/json"" -H ""Accept: application/json""  localhost:8080/test/ok""

OUTPUT (JSON):

{
  ""id"" : 100.0
}

TEST FAILURE

curl -X GET -H ""Content-type: application/json"" -H ""Accept: application/json""localhost:8080/test/failure""

OUTPUT (HashMap.toString()):

{id=100.0}

Best regards

FabryProg",,davsclaus,fabryprog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/Jul/16 08:59;fabryprog;camel-10154.zip;https://issues.apache.org/jira/secure/attachment/12820679/camel-10154.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 03 15:19:36 UTC 2016,,,,,,,,,,,"0|i31m5z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jul/16 08:59;fabryprog;example project;;;","29/Jul/16 13:58;davsclaus;Thanks for reporting and the sample application.;;;","03/Aug/16 15:19;davsclaus;Needed an API change and thus only fixing this for next 2.18 release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Specifying jobFromHeader in URI option throws exception,CAMEL-10192,12993040,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,asegarra,asegarra,27/Jul/16 19:21,28/Jul/16 07:18,14/Jul/23 05:50,28/Jul/16 07:18,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-spring-batch,,,,,,,0,,,,,,"Setting the jobFromHeader option in the URI throws exception.

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: spring-batch://myJob?jobFromHeader= due to: Failed to resolve endpoint: spring-batch://myJob?jobFromHeader= due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{jobFromHeader=}]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:588) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:79) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:211) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:107) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:113) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:62) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:56) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:534) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:495) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:219) ~[camel-core-2.17.1.jar:2.17.1]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1069) ~[camel-core-2.17.1.jar:2.17.1]
	... 31 common frames omitted",,asegarra,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 28 07:18:38 UTC 2016,,,,,,,Patch Available,,,,"0|i31l9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jul/16 21:14;githubbot;GitHub user asegarra opened a pull request:

    https://github.com/apache/camel/pull/1089

    CAMEL-10192: Fix option jobFromHeader data type that was causing exception to be thrown if used.  

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/asegarra/camel CAMEL-10192

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1089.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1089
    
----
commit 6d70013dd12e6596eb8d315c3cc0e3ab9e4faa1d
Author: asegarra <angelsegarra@outlook.com>
Date:   2016-07-27T21:07:31Z

    CAMEL-10192: Fix option jobFromHeader data type that was causing exception to be thrown if used

----
;;;","28/Jul/16 07:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1089
;;;","28/Jul/16 07:18;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - fastExistsCheck issue,CAMEL-10185,12992526,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Jul/16 09:32,05/Aug/16 05:54,14/Jul/23 05:50,05/Aug/16 05:54,2.17.2,,,,,,,,,,,,,,2.16.4,2.17.4,2.18.0,,camel-ftp,,,,,,,0,,,,,,"See SO
https://github.com/apache/camel/commit/91c086b7af22b6cfaf2f66b2c872b752dc10a19c#commitcomment-18363186",,davsclaus,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 04 15:17:05 UTC 2016,,,,,,,,,,,"0|i31i33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Jul/16 09:32;davsclaus;Contributions is welcome;;;","04/Aug/16 06:40;onders;not sure if the issue is on. FtpChangedReadLockFastExistCheckTest passes.;;;","04/Aug/16 08:11;onders;please see my comment as well.

https://github.com/apache/camel/commit/91c086b7af22b6cfaf2f66b2c872b752dc10a19c
;;;","04/Aug/16 15:17;onders;issue is not valid,

https://github.com/apache/camel/commit/91c086b7af22b6cfaf2f66b2c872b752dc10a19c;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ChannelGroup option is not active for NettyProducer,CAMEL-10184,12992520,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,jybesson,jybesson,26/Jul/16 09:12,29/Jul/16 08:40,14/Jul/23 05:50,29/Jul/16 07:36,2.17.2,,,,,,,,,,,,,,2.18.0,,,,camel-netty4,,,,,,,0,,,,,,"The NettyProducer does not check if a valid ChannelGroup is declared in the NettyConfiguration and always instanciate a DefaultChannelGroup. It would be interesting to add this check, as done in NettyConsumer .



 ",,acosentino,githubbot,jybesson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 29 08:40:01 UTC 2016,,,,,,,,,,,"0|i31i1r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Jul/16 09:19;acosentino;Are you working on a patch for this? :-)

Contributions are welcome.;;;","26/Jul/16 09:29;jybesson;Yes I do and I would be pleased to contribute :-) I will join the mailing list and create a patch for this
;;;","26/Jul/16 09:29;acosentino;Great :-)

Thanks!;;;","29/Jul/16 07:15;githubbot;GitHub user JYBESSON opened a pull request:

    https://github.com/apache/camel/pull/1092

    CAMEL-10184 - Allow to use a custom ChannelGroup for NettyProducer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/JYBESSON/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1092.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1092
    
----
commit 0e57b837dfbd2d9e171ceb4be0a84965748abfe9
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-07-28T15:14:55Z

    CAMEL-10184 - Allow to use a custom ChannelGroup for NettyProducer

----
;;;","29/Jul/16 07:17;jybesson;Hello Andrea,
I just submitted : https://github.com/apache/camel/pull/1092
;;;","29/Jul/16 08:40;githubbot;Github user JYBESSON closed the pull request at:

    https://github.com/apache/camel/pull/1092
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-undertow: UndertowHttpBinding should be initialized in the endpoint and not at component level,CAMEL-10181,12992236,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,25/Jul/16 11:24,25/Jul/16 13:02,14/Jul/23 05:50,25/Jul/16 13:02,,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-undertow,,,,,,,0,,,,,,"If the UndertowHttpBinding is initialized at component level when someone defines a custom HeaderFilterStrategy it will be set at component level, so all the subsequent endpoints created will use this custom strategy instead of the default one. I'll move the UndertowHttpBinding initialization in the Undertow Endpoint.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 25 12:47:00 UTC 2016,,,,,,,,,,,"0|i31gan:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jul/16 12:47;acosentino;I used the same approach that we have in camel-http-common component.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-catalog: wireTap is missing from all oneOf lists,CAMEL-10177,12992166,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,25/Jul/16 07:27,25/Jul/16 07:32,14/Jul/23 05:50,25/Jul/16 07:32,,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-catalog,,,,,,,0,,,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-25 07:27:11.0,,,,,,,,,,,"0|i31fv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf RawMessageContentRedirectInterceptor should be able to handle the case that OutputStream is null for an outgoing message,CAMEL-10176,12992145,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,25/Jul/16 06:16,25/Jul/16 06:41,14/Jul/23 05:50,25/Jul/16 06:41,,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,,,,,,,,0,,,,,,"when use jms transport in camel-cxf endpoint, the outgoing message will use a Writer but not the OutputStream to send out message when the jms message is using text payload, currently RawMessageContentRedirectInterceptor not handle this case  ",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-25 06:16:47.0,,,,,,,,,,,"0|i31fqf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
weaveByToString throws UnsupportedOperationException on CBR,CAMEL-10174,12991806,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pmihnea,pmihnea,22/Jul/16 12:58,25/Jul/16 11:58,14/Jul/23 05:50,25/Jul/16 11:58,2.17.2,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-core,,,,,,,0,,,,,,"weaveByToString throws UnsupportedOperationException on CBR.
See the attached test case.",,davsclaus,pmihnea,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Jul/16 13:02;pmihnea;AdviceWithWeaveByToStringCBRTest.java;https://issues.apache.org/jira/secure/attachment/12819618/AdviceWithWeaveByToStringCBRTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 25 11:58:38 UTC 2016,,,,,,,,,,,"0|i31dn3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Jul/16 13:02;pmihnea;Here is the exception stack trace:
java.lang.UnsupportedOperationException
	at java.util.AbstractList.add(AbstractList.java:148)
	at org.apache.camel.builder.AdviceWithTasks$1.task(AdviceWithTasks.java:151)
	at org.apache.camel.model.RouteDefinition.adviceWith(RouteDefinition.java:281)
	at org.apache.camel.processor.interceptor.AdviceWithChoiceRouteTest.testAdviceWith(AdviceWithChoiceRouteTest.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
;;;","25/Jul/16 11:58;davsclaus;There is a new weaveByToUri in 2.17.3 that is better to use;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel CXF expired continuations cause memory leak,CAMEL-10171,12991654,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ddms,ddms,21/Jul/16 23:32,17/Aug/16 07:53,14/Jul/23 05:50,17/Aug/16 07:53,2.17.1,,,,,,,,,,,,,,2.17.4,2.18.0,,,camel-cxf,,,,,,,0,,,,,,"Looks like exchanges expired by CXF continuation timeout are being accumulated in InflightRepository. Tested with Camel 2.17.1 and cxf-rt-transports-http-jetty:

Dependencies:
{code}<dependencies>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
            <version>2.17.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cxf</artifactId>
            <version>2.17.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http-jetty</artifactId>
            <version>3.1.5</version>
        </dependency>
    </dependencies>{code}

Reproducer:
{code}import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.cxf.CxfEndpoint;
import org.apache.camel.component.cxf.DataFormat;
import org.apache.camel.impl.DefaultCamelContext;
import org.springframework.util.StreamUtils;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPMessage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

public class Sample {

    private final static String URI = ""http://127.0.0.1:8080/"";
    private final static long CONTINUATION_TIMEOUT = 100L;
    private final static long DELAYER_VALUE = 200L;
    private final static int SENDER_THREADS = Runtime.getRuntime().availableProcessors();
    private final static int MESSAGES_PER_SENDER = 10000;

    private static void setupCamel() throws Exception {
        final CamelContext camelContext = new DefaultCamelContext();
        final CxfEndpoint endpoint = (CxfEndpoint)camelContext.getEndpoint( ""cxf://"" + URI );
        endpoint.setContinuationTimeout( CONTINUATION_TIMEOUT );
        endpoint.setDataFormat( DataFormat.PAYLOAD );
        camelContext.addRoutes( new RouteBuilder() {
            public void configure() throws Exception {
                from( endpoint )
                .threads()
                .setBody( constant( ""<ok />"" ) )
                .delay( DELAYER_VALUE )
                .end();
            }
        });
        final TimerTask repoSizeReporter = new TimerTask() {
            public void run() {
                System.out.println( ""Inflight repository size: "" + camelContext.getInflightRepository().size() );
                System.gc();
                System.out.println( ""Memory usage: "" + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory())/(1024*1024) + ""MB"" );
            }
        };
        final Timer repoSizeReporterTimer = new Timer();
        repoSizeReporterTimer.schedule( repoSizeReporter, 1000, 1000 );
        camelContext.start();
    }

    private static byte[] createSoapMessage() throws Exception {
        final StringBuilder payloadBuilder = new StringBuilder( ""<payload>"" );
        for( int i = 0; i < 5000; i++ ) {
            payloadBuilder.append( ""<payloadElement />"" );
        }
        final String payload = payloadBuilder.append( ""</payload>"" ).toString();
        final DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        final Document payloadDocument = documentBuilder.parse( new ByteArrayInputStream( payload.getBytes() ) );
        final ByteArrayOutputStream soapOutStream = new ByteArrayOutputStream();
        final SOAPMessage message = MessageFactory.newInstance().createMessage();
        message.getSOAPBody().addDocument( payloadDocument );
        message.writeTo( soapOutStream );
        return soapOutStream.toByteArray();
    }

    private static Runnable soapSender() {
        return () -> {
            try {
                final byte[] soapMessage = createSoapMessage();
                for( int i = 0; i < MESSAGES_PER_SENDER; i++ ) {
                    final HttpURLConnection connection = (HttpURLConnection)new URL( URI ).openConnection();
                    connection.setDoOutput( true );
                    connection.setRequestProperty( ""Content-Type"", ""text/xml"" );
                    connection.setRequestProperty( ""SOAPAction"", ""\""\"""" );
                    connection.setRequestMethod( ""POST"" );
                    connection.setRequestProperty( ""Accept"", ""*/*"" );
                    connection.connect();
                    StreamUtils.copy( soapMessage, connection.getOutputStream() );
                    connection.getResponseCode();
                    connection.disconnect();
                }
            } catch ( final Exception ex ) {
                ex.printStackTrace();
            }
        };
    }

    public static void main(String[] args) throws Exception {
        setupCamel();
        final Executor executor = Executors.newFixedThreadPool( SENDER_THREADS );
        for( int i = 0; i < SENDER_THREADS; i++ ) {
            executor.execute( soapSender() );
        }
    }
}{code}",,davsclaus,ddms,githubbot,onders,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 17 07:53:34 UTC 2016,,,,,,,,,,,"0|i31cpb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jul/16 13:13;davsclaus;Thanks for the test case.

Sounds like some code in camel-cxf need to be triggered on a callback when a timeout happens on the continuation and mark the Camel exchange as server timeout error, and trigger the exchange done so its not counted as inflight.;;;","08/Aug/16 13:12;onders;I went through the problem. As i can see, cxf-rt-transports-http-jetty-3.1.7 has no such method to propagate the continuation time out back to camel-cxf. First, Servlet3Continuation and and JettyContinuationWrapper should have the required method implementation to query if timeout is expired and camel-cxf should have such implementation as the following;

          else if (continuation.isExpired()) {
                    // mark the exchange with server timeout error
                    // trigger the exhange as done so that it is not counted as inflight.
                    .....
          }

I will try and see if i can provide PR.
;;;","10/Aug/16 11:37;onders;I can get the expiry callback, however i can't get the exhange. Any suggestion?;;;","11/Aug/16 08:33;davsclaus;What information do you have in that callback?;;;","11/Aug/16 08:51;onders;let me explain what i did.
I found out that i need to detect continuation expiry in CxfConsumer.

I logged a ticket and it is partially fixed. (https://issues.apache.org/jira/browse/CXF-7002)
Because it is not provided via Contunation interface.

However, let's assume we have method access in Continuation interface (as i did in my local source)

and in CxfConsumer.asyncInvoke method i can add 

if(continuation.isExpired()) {
//...
// handle camel exchange
//
}

I know contunation is expired but i dont have the exchange.;;;","11/Aug/16 18:27;ddms;I think that is possible if {code}continuation.setObject(camelExchange){code} would be placed just before {code}continuation.suspend(cxfEndpoint.getContinuationTimeout()){code} instead of inside processing callback like it is now.

However, if you want to populate CxfExchange from Camel Exchange after expiration event - it may be not the best idea, because you're touching something that is still being processed somwhere else and you will most likely leak to the end-user something that programmer doesn't want him to see.

I think that the best would be to give programmer option to define callback on component (and/or endpoint) level that will let him populate CxfExchane himself in case of continuation timeout.;;;","13/Aug/16 20:44;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1122

    CAMEL-10171 memory leak when continuation expires

    setobject done earlier and exception set on camelExchange.
    Before being able to call isExpired method thru Continuation interface, please update your cxf to include this PRs as for below issues
    
    https://issues.apache.org/jira/browse/CXF-7011
    https://issues.apache.org/jira/browse/CXF-7002
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1122.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1122
    
----
commit 056c65d9995c4bd024d21f311218b9f93b5fdae5
Author: onders86 <ondersezgin@gmail.com>
Date:   2016-08-05T19:48:48Z

    Merge pull request #1 from apache/master
    
    CAMEL-6616

commit e01c6f81cc84a59bbc682949cdc9a2b7ac92d1b1
Author: önder sezgin <ondersezgin@gmail.com>
Date:   2016-08-05T22:50:41Z

    CAMEL-6616
    
    maxReconnect added

commit 2774c0f1f5aa7664c75ab58b791e78089429f682
Author: önder sezgin <ondersezgin@gmail.com>
Date:   2016-08-13T20:23:01Z

    Merge branch 'master' of https://github.com/apache/camel
    
    # Conflicts:
    #	components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConfiguration.java
    #	components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConsumer.java
    #	components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java

commit 96ca1764c925a60c15daf64983b6cee7e1549966
Author: önder sezgin <ondersezgin@gmail.com>
Date:   2016-08-13T20:38:41Z

    CAMEL-10171
    
    memory leak fixed and exception set on exchange

----
;;;","15/Aug/16 12:42;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1122
;;;","16/Aug/16 19:29;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1125

    CAMEL-10171 memory leak when continuation expires

    setobject done earlier and exception set on camelExchange.
    isExpired method call thru Continuation interface is cancelled and
    below issues became invalid as discussed in CXF-7011
    
    https://issues.apache.org/jira/browse/CXF-7002
    https://issues.apache.org/jira/browse/CXF-7011
    
    instead
    
    such block means the same;
    https://issues.apache.org/jira/browse/CXF-7011?focusedCommentId=15422696&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15422696


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel mymaster

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1125.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1125
    
----
commit 2e9bce8a064b6694cb7985955582baca90698b0c
Author: önder sezgin <ondersezgin@gmail.com>
Date:   2016-08-16T19:22:46Z

    CAMEL-10171 memory leak when continuation expires
    
    setobject done earlier and exception set on camelExchange.
    isExpired method call thru Continuation interface is cancelled and
    below issues became invalid as discussed in CXF-7011
    
    https://issues.apache.org/jira/browse/CXF-7002
    https://issues.apache.org/jira/browse/CXF-7011
    
    instead
    
    such block means the same;
    
    https://issues.apache.org/jira/browse/CXF-7011?focusedCommentId=15422696&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15422696

----
;;;","17/Aug/16 07:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1125
;;;","17/Aug/16 07:53;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,
DefaultCxfMessageMapper.getBasePath creates a incorrect http path,CAMEL-10165,12991231,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,zolyfarkas,zolyfarkas,20/Jul/16 19:47,11/Jan/18 14:25,14/Jul/23 05:50,11/Jan/18 14:25,2.17.2,,,,,,,,,,,,,,2.19.5,2.20.2,2.21.0,,camel-cxf,,,,,,,1,,,,,,"in DefaultCxfMessageMapper.java:

{code}
    protected String getBasePath(Exchange camelExchange) {
        String answer = camelExchange.getIn().getHeader(Exchange.HTTP_BASE_URI, String.class);
        if (answer == null) {
            answer = camelExchange.getFromEndpoint().getEndpointUri();
        }        
        return answer;
    }
{code}

camelExchange.getFromEndpoint().getEndpointUri()

in 2.14 returns a valid http URL for the jetty endpoint...]

meanwhile in 2.17 it return a camel url that includes the scheme and it breaks the semantics of this method. I had to change the method to:

{code}
    protected String getBasePath(Exchange camelExchange) {
        String answer = camelExchange.getIn().getHeader(Exchange.HTTP_BASE_URI, String.class);

        if (answer == null) {
            Endpoint fromEndpoint = camelExchange.getFromEndpoint();
            if (fromEndpoint instanceof HttpCommonEndpoint) {
              try {
                URI u = ((HttpCommonEndpoint) fromEndpoint). getHttpUri();
                answer = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(),
                        null, null).toString();
              } catch (URISyntaxException ex) {
                throw new RuntimeException(ex);
              }
            } else {
              return null;
            }
        }

        return answer;
    }
{code}

I am not sure this is the best way to deal with this, but it works...






",,davsclaus,kmackowiak,zolyfarkas,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Jan/18 15:33;kmackowiak;CAMEL_10165_test_and_bugfix.patch;https://issues.apache.org/jira/secure/attachment/12905488/CAMEL_10165_test_and_bugfix.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 11 14:25:30 UTC 2018,,,,,,,,,,,"0|i31a3b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jul/16 13:14;davsclaus;And what are you using that getBasePath method for ?

Are you doing some custom CXF / Camel code or in what situation do you have this problem?;;;","28/Jul/16 21:03;zolyfarkas;I do not use this method directly, it is being used in: DefaultCxfMessageMapper.createCxfMessageFromCamelExchange:

{code}
        ....
        String basePath = getBasePath(camelExchange);
        ....

        answer.put(org.apache.cxf.message.Message.BASE_PATH, basePath);
        ....
{code}

so the CXF message is created with a incorrect base path and the message does not find its destination....

;;;","29/Jul/16 13:59;davsclaus;Do you have an unit test or sample application that reproduces this issue?;;;","04/Aug/16 18:44;zolyfarkas;
basically all routes from jetty 9 to cxf 3.1.5 like:

{code}
    from(""jetty:http://{{http.host}}:{{http.port}}/somePath?matchOnUriPrefix=true"")
        .to(""cxfbean:someJaxRSService"");

{code}

were was not finding destination anymore after the 2.17.2 upgrade (from 2.14.4). (404)
All unit tests that were testing routes like above were failing, however they are unfortunately proprietary code coupled to a lot of non camel stuff...

if I would be to write a unit test to reproduce this that would depend solely on camel, camel-jetty9 and camel-cxf what would be the right place to put it in?

I patched the getBaseBath method in DefaultCxfMessageMapper to get past this issue for now.
;;;","10/Jan/18 15:33;kmackowiak;I experienced the same issue when upgrading from Camel 2.15.2 to 2.16.0. The bug is present also in latest version 2.20.1 . Here is a JUnit test that reproduces it:

{code}
public class Camel10165BugTest extends CamelTestSupport {

    private static final int PORT1 = CXFTestSupport.getPort(""Camel10165BugTest.1"");

    // NOTE: fails with camel 2.20.1, but passes for camel 2.15.2
    @Test
    public void testCallServiceWithBasePath() throws Exception {
        String request = ""abc"";
        String response = template.requestBody(""http://localhost:"" + PORT1 + ""/basePath/echo"", request, String.class);
        assertEquals(request, response);
    }

    // NOTE: passes with camel 2.20.1 and camel 2.15.2
    @Test
    public void testCallServiceWithoutBasePath() throws Exception {
        String request = ""abc"";
        String response = template.requestBody(""http://localhost:"" + PORT1 + ""/echo"", request, String.class);
        assertEquals(request, response);
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""jetty:http://localhost:"" + PORT1 + ""/?matchOnUriPrefix=true"")
                        .to(""cxfbean:echoService"");

                from(""jetty:http://localhost:"" + PORT1 + ""/basePath/?matchOnUriPrefix=true"")
                        .to(""cxfbean:echoService"");
            }
        };
    }

    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = super.createRegistry();
        registry.bind(""echoService"", new EchoService());
        return registry;
    }

    @Path(""echo"")
    public class EchoService {
        @POST
        public String echo(String request) {
            return request;
        }
    }
}
{code};;;","10/Jan/18 15:35;kmackowiak;I've attached a patch for version 2.20.x which contains a test and fix for this bug.;;;","11/Jan/18 14:25;davsclaus;Thanks for the patch. I added a fix for https as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - Does not propagate headers for outputType=StreamList,CAMEL-10161,12991011,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,dwtung,dwtung,20/Jul/16 06:18,22/Jul/16 03:47,14/Jul/23 05:50,21/Jul/16 12:12,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-sql,,,,,,,0,,,,,,"All headers are cleared when returning from 
to(""sql:<query>?outputType=StreamList"")",,dwtung,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 22 03:47:31 UTC 2016,,,,,,,Patch Available,,,,"0|i318qn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jul/16 06:19;dwtung;working on a patch;;;","20/Jul/16 06:46;githubbot;GitHub user drsquidop opened a pull request:

    https://github.com/apache/camel/pull/1082

    CAMEL-10161 Passthrough headers for outputType=StreamList

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/drsquidop/camel CAMEL-10161

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1082.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1082
    
----
commit b233564c22fb2b2aefbf2224b56bc2a078c9f81a
Author: Doug Tung <dwtung@isg.la>
Date:   2016-07-20T06:44:43Z

    CAMEL-10161 Passthrough headers for outputType=StreamList

----
;;;","22/Jul/16 03:47;githubbot;Github user drsquidop closed the pull request at:

    https://github.com/apache/camel/pull/1082
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Values in KafkaConstants don't fit their variable name,CAMEL-10157,12990720,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,OHolzma,OHolzma,19/Jul/16 11:04,20/Jul/16 12:03,14/Jul/23 05:50,20/Jul/16 12:02,2.16.3,2.17.2,2.18.0,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-kafka,,,,,,,0,,,,,,"Value of {{KafkaConstants.KEY = ""kafka.CONTENT_TYPE""}} and {{KafkaConstants.PARTITION = ""kafka.EXCHANGE_NAME""}} should match their variable name.
{code}
    public static final String PARTITION = ""kafka.PARTITION"";
    public static final String KEY = ""kafka.KEY"";
{code}
",,acosentino,OHolzma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 20 12:03:19 UTC 2016,,,,,,,,,,,"0|i316xz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jul/16 12:03;acosentino;Thanks for spotting this out [~OHolzma] :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reslet headers not getting filtered,CAMEL-10155,12990388,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,transamericamoon,transamericamoon,18/Jul/16 13:22,25/Jul/16 15:16,14/Jul/23 05:50,25/Jul/16 15:16,2.17.1,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-restlet,,,,,,,0,,,,,,"Due to the convoluted way reslet handles headers (they put headers inside the ""org.restlet.http.headers"") header, they are net getting filtered correctly.  

Just to add more details, this is a problem if you make 2 consecutive restlet request, because the headers from the first response will get sent to the next request without being filtered.  And if transfer-encoding is set, it can break things.

PR:
https://github.com/apache/camel/pull/1080",,davsclaus,transamericamoon,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 25 15:16:56 UTC 2016,,,,,,,Patch Available,,,,"0|i314w7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Jul/16 14:07;transamericamoon;https://github.com/apache/camel/pull/1080;;;","25/Jul/16 15:16;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[Camel-cxf] the spring version range in the Import-Package should be [3.2,4)",CAMEL-10153,12990260,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,xldai,xldai,18/Jul/16 06:14,20/Aug/16 13:44,14/Jul/23 05:50,20/Aug/16 13:44,2.17.2,,,,,,,,,,,,,,2.17.3,,,,camel-cxf,,,,,,,0,,,,,,"Camel 2.17.x upgraded spring version to 4.x in most of the components. but for camel-cxf component, it still has to use spring-dm and spring version 3.x, the spring version range in the Import-Package should keep [3.2,4), not [4.1,5).

Now the ERROR will happen when install camel-cxf feature into karaf container (in case of both Spring 4.x and Spring 3.x are installed in the container)

{code}
21:44:41,652 | ERROR | pool-1-thread-1 | al.service.BootFeaturesInstaller 128 | 9 - org.apache.karaf.features.core - 4.0.5 | Error installing boot features
org.osgi.service.resolver.ResolutionException: Uses constraint violation. Unable to resolve resource org.apache.camel.camel-cxf [org.apache.camel.camel-cxf/2.17.2] because it is exposed to package 'org.springframework.beans' from resources org.apache.servicemix.bundles.spring-beans [org.apache.servicemix.bundles.spring-beans/4.1.7.RELEASE_2] and org.apache.servicemix.bundles.spring-beans [org.apache.servicemix.bundles.spring-beans/3.2.14.RELEASE_1] via two dependency chains.

Chain 1:
org.apache.camel.camel-cxf [org.apache.camel.camel-cxf/2.17.2]
import: (&(osgi.wiring.package=org.springframework.beans)(version>=4.1.0)(!(version>=5.0.0)))

export: osgi.wiring.package: org.springframework.beans
org.apache.servicemix.bundles.spring-beans [org.apache.servicemix.bundles.spring-beans/4.1.7.RELEASE_2]

Chain 2:
org.apache.camel.camel-cxf [org.apache.camel.camel-cxf/2.17.2]
import: (&(osgi.wiring.package=org.apache.camel.spring)(version>=2.17.0)(!(version>=2.18.0)))

export: osgi.wiring.package=org.apache.camel.spring; uses:=org.springframework.beans
org.apache.camel.camel-spring [org.apache.camel.camel-spring/2.17.2]
import: (&(osgi.wiring.package=org.springframework.beans)(version>=3.2.0)(!(version>=4.0.0)))

export: osgi.wiring.package: org.springframework.beans
org.apache.servicemix.bundles.spring-beans [org.apache.servicemix.bundles.spring-beans/3.2.14.RELEASE_1]
at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:404)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:158)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:216)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:263)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1152)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:1048)[9:org.apache.karaf.features.core:4.0.5]
at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_91]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_91]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_91]
at java.lang.Thread.run(Thread.java:745)[:1.8.0_91]
{code}

To fix it, make change to the pom.xml
{code}
......
org.springframework*;version=""${spring-dm-version-range}"";resolution:=optional,
......
{code}
",Java 8,cschneider,xldai,xlding,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 19 11:43:15 UTC 2016,,,,,,,,,,,"0|i3143z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Jul/16 11:43;cschneider;Looks like in master the spring version for spring-dm is already extended and a separate spring-dm module is extracted. 

So I think it makes sense to limit the camel-cxf spring version to reflect the camel-spring limitations like you propose in the description. For later camel version we then seem to have a path to work with higher spring versions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - Query parameter count mismatch when using IN and other names in SQL,CAMEL-10151,12990034,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Jul/16 07:33,16/Jul/16 07:36,14/Jul/23 05:50,16/Jul/16 07:36,2.17.2,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-sql,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-sql-IN-query-number-of-parameters-mismatch-tp5785054.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-16 07:33:18.0,,,,,,,,,,,"0|i312pr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Apt: Check for empty lines in parseAsMap method of EndpointAnnotationProcessor,CAMEL-10150,12989790,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,15/Jul/16 13:17,18/Jul/16 11:07,14/Jul/23 05:50,18/Jul/16 11:07,2.17.2,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-apt,,,,,,,0,,,,,,,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-15 13:17:05.0,,,,,,,,,,,"0|i3117j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Ftp: SftpOperations use sendKeepAliveMsg instead of sendIgnore method,CAMEL-10149,12989707,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,15/Jul/16 08:18,15/Jul/16 09:02,14/Jul/23 05:50,15/Jul/16 09:02,,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-ftp,,,,,,,0,,,,,,"Some sftp daemons like proFtpd close the connection when they received an ignored package.

We can use sendKeepAliveMsg instead.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-15 08:18:49.0,,,,,,,,,,,"0|i310p3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MesssageHistory will take very long time for large expressions,CAMEL-10147,12989431,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,siano,siano,siano,14/Jul/16 12:09,15/Jul/16 06:57,14/Jul/23 05:50,15/Jul/16 06:57,2.17.1,,,,,,,,,,,,,,2.18.0,,,,camel-core,,,,,,,0,performance,,,,,"If a route contains a large expressen (a few MB) and an error occurs the message history feature will take a very long time.

The following code is a slightly modified unit test from camel-core (the only change is the String used in the constant expression).
{code}
import org.apache.camel.CamelExecutionException;
import org.apache.camel.ContextTestSupport;
import org.apache.camel.builder.RouteBuilder;

/**
 * @version 
 */
public class SedaInOutWithErrorTest extends ContextTestSupport {

    public void testInOutWithError() throws Exception {
        getMockEndpoint(""mock:result"").expectedMessageCount(0);

        try {
            template.requestBody(""direct:start"", ""Hello World"", String.class);
            fail(""Should have thrown an exception"");
        } catch (CamelExecutionException e) {
            assertIsInstanceOf(IllegalArgumentException.class, e.getCause());
            assertEquals(""Damn I cannot do this"", e.getCause().getMessage());
        }

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                StringBuilder sb = new StringBuilder();
                sb.append(""Something "");
                for (int i=0; i<1000000; i++) {
                    sb.append(""very "");
                }
                sb.append(""long"");
                
                from(""direct:start"").to(""seda:foo"");

                from(""seda:foo"").transform(constant(sb.toString()))
                    .throwException(new IllegalArgumentException(""Damn I cannot do this""))
                    .to(""mock:result"");
            }
        };
    }
}
{code}

This test will set the body to a 5MB test and then run into an error. This will run for a very long time, because MessageHelper.doDumpMessageHistoryStacktrace() will first run a URISupport.sanitizeUri() on the expression and then cut it off to 78 characters.

If we cut the expression of (e.g. to 100 characters) before doing the sanitizeUri() this will run much faster in this case (and not slower for smaller expressions).",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-14 12:09:55.0,,,,,,,,,,,"0|i30yzr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Git: Pull and Push operations require the remote Name and not the remote Path to git repository,CAMEL-10145,12989377,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,14/Jul/16 07:59,14/Jul/16 08:53,14/Jul/23 05:50,14/Jul/16 08:53,2.17.2,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-git,,,,,,,0,,,,,,"Using the remote Path to git Repository is causing errors during Pull and Push operations.

I'll add a new option remoteName in GitEndpoint to avoid this situation.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-14 07:59:09.0,,,,,,,,,,,"0|i30ynr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce keeps breaking backward compatibility by adding fields to older API versions,CAMEL-10144,12989317,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,14/Jul/16 02:06,27/Jul/16 20:44,14/Jul/23 05:50,14/Jul/16 06:41,2.17.2,2.18.0,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-salesforce,,,,,,,0,,,,,,"Salesforce adds fields to org.apache.camel.component.salesforce.api.dto.RestResources even after an API has been released. This needs to be handled in the component by ignoring unknown properties for that type. 

XStream doesn't support doing this for an single DTO, but it can be done for all types by using XStream.ignoreUknownProperties(). It will make it ignore all unknown properties for all inbuilt DTOs as wells user generated ones. But since the XML payload is less popular, hopefully this behavior won't be an issue. ",,dhirajsb,ssatguru,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 27 20:44:45 UTC 2016,,,,,,,,,,,"0|i30yaf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Jul/16 02:40;dhirajsb;This is a generic problem with Salesforce, so the solution is to follow the REST principle of ignoring unknown fields altogether. This behaviour will be common to JSON and XML and will avoid future issues where running code breaks in production because Salesforce decided to add fields from new APIs in responses to older API versions. ;;;","14/Jul/16 06:41;dhirajsb;Fixed on branches master and camel-2.17.x;;;","26/Jul/16 14:14;ssatguru;The fix doesn't seem to be working. 

As part if this fix the annotation 
@JsonIgnoreProperties(ignoreUnknown = true) 
was added to the base class  ""AbstractDTOBase"" 

https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/api/dto/AbstractDTOBase.java#L31

Unfortunately this annotation  has not been defined as ""@Inherited"" and  thus is not inherited by the sub classes. 

Maybe this annotation should be added to ""sobject-pojo.vm"" so that it gets added to each of the generated classes 

https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm;;;","26/Jul/16 17:53;dhirajsb;Interesting point about the {{@Inherited}} annotation, but the effect seems to be that it's being inherited. Try removing the annotation from {{AbstractDTOBase}} and running the test {{RestApiIntegrationTest.testGetResources}}, it should fail without the annotation on the base class. This is on both _master_ and _camel-2.17-x_ branches even though they use different version of jackson. ;;;","26/Jul/16 19:56;ssatguru;Never looked into RestResources. Let me check why that works. I suspect something to do with XStream VS Jackson processing
Now what I did look into and tested, was user generated DTO . So, for example, if I create a DTO for say Account sObject and then somebody, later on, adds a new,  say, a custom field, to Account, the deserialization fails. If the annotation is added to the generated class rather then the base class, deserialization  passes.;;;","26/Jul/16 21:40;dhirajsb;I ran the test {{RestApiIntegrationTest.testGetBlobField}} after commenting out the field [isBodySearchable|https://github.com/apache/camel/blob/camel-2.17.x/components/camel-salesforce/camel-salesforce-component/src/test/java/org/apache/camel/component/salesforce/dto/generated/Document.java#L201-L213] and it ran without any errors. If the annotation didn't work in the base class, the missing field would have caused the test to fail. BTW, the field does return a non-default {{true}} value when it's present in the class. 
Try your test by commenting out an existing field from the generated Account DTO. Not sure why that case would be different from when a new Salesforce field is added, but give it a shot. ;;;","27/Jul/16 20:44;ssatguru;You are right.
Its working as expected.
Not sure why though  :(
Please ignore

;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"Camel Salesforce component field LastActivityDate is typed with java.lang.String, which is not consistent with the Salesforce SOAP type ""xsd:date""",CAMEL-10143,12989258,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,13/Jul/16 21:41,14/Jul/16 06:42,14/Jul/23 05:50,14/Jul/16 06:42,2.17.1,2.18.0,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-salesforce,,,,,,,0,,,,,,"This field was not a valid date time field in older versions of the Salesforce APIs, hence it was left as String. 
It should now be converted into DateTime to work with latest Salesforce API and be mappable to dates in Hibernate for e.g.",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 14 06:42:32 UTC 2016,,,,,,,,,,,"0|i30xxb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Jul/16 06:42;dhirajsb;Fixed on branches master and camel-2.17.x, the field is now of type DateTime. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScheduledPollingConsumer properties,CAMEL-10142,12989142,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,colin.hartley@datagenicgroup.com,colin.hartley@datagenicgroup.com,13/Jul/16 15:07,15/Jul/16 13:21,14/Jul/23 05:50,15/Jul/16 13:21,2.17.1,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-core,,,,,,,0,,,,,,"It appears that support for a named scheduled polling consumer is there, but you have to have at least one scheduler.xxx property set before it utilises it. e.g. 

I have this configured: 
<bean id=""nps-scheduler"" class=""org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerScheduler"">
    <property name=""cron"" value=""0 * * * * ?""/>
</bean>

In my route, I reference it like this, but it doesn't use it: 
<from uri=""ftp://ftp.somewhere.com/path?scheduler=nps-scheduler"" />

If I add a scheduler property, it then uses it, e.g. 
<from uri=""ftp://ftp.somewhere.com/path?scheduler=nps-scheduler&amp;scheduler.triggerId=?"" />

Discussion with Claus Ibsen here: http://camel.465427.n5.nabble.com/ScheduledPollingConsumer-properties-td5785071.html

",,colin.hartley@datagenicgroup.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-13 15:07:11.0,,,,,,,,,,,"0|i30x7j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple verbs for same resource not working in camel-undertow (rest dsl),CAMEL-10139,12989084,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Steve973,Steve973,13/Jul/16 10:35,19/Feb/17 10:12,14/Jul/23 05:50,19/Feb/17 10:12,2.17.1,,,,,,,,,,,,,,2.19.0,,,,camel-undertow,,,,,,,0,,,,,,"The camel-undertow component does not seem to support multiple verbs for the same resource when using the rest dsl.
{code:title=Rest DSL Example|borderStyle=solid}
rest(""/example"")
  .get(""{pathParamHere}"").to(""bean:exampleBean?method=handleGet"")
  .put(""{pathParamHere}"").to(""bean:exampleBean?method=handlePut"");
{code}
The above example will result in only the ""put"" verb working, and the ""get"" resource not found.",,davsclaus,githubbot,scranton,Steve973,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 19 10:12:15 UTC 2017,,,,,,,,,,,"0|i30wun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jul/16 21:26;Steve973;It looks like the problem is in the UndertowRegistry class:
{code}
    public void registerConsumer(UndertowConsumer consumer) {
        UndertowEndpoint endpoint = consumer.getEndpoint();
        URI httpUri = endpoint.getHttpURI();
        if (host != null && !host.equals(httpUri.getHost())) {
            throw new IllegalArgumentException(""Cannot register UndertowConsumer on different host and same port: {}"" + host + "" "" + httpUri.getHost());
        } else {
            host = httpUri.getHost();
        }
        LOG.info(""Adding consumer to consumerRegistry: {}"", httpUri);
        consumersRegistry.put(endpoint.getEndpointUri(), consumer);
        if (sslContext != null && endpoint.getSslContext() != null) {
            throw new IllegalArgumentException(""Cannot register UndertowConsumer with different SSL config"");
        }
    }
{code}
When the same path/resource (as an endpoint uri) is added for different verbs, they are put into the registry with the same key.  Therefore, the last one wins, which is the behavior that I am seeing.;;;","13/Jul/16 21:54;Steve973;[~davsclaus] If the registry is being populated with the URIs as the keys, how do we differentiate between different verbs?;;;","13/Jul/16 21:57;Steve973;Here is my RouteBuilder configuration:
{code}
        restConfiguration()
                .component(""undertow"")
                .host(""localhost"").port(""8181"")
                .enableCORS(true);
        rest(""/timesheet"")
                .post(""/{timesheetId}"")
                .produces(MediaType.TEXT_PLAIN)
                .route()
                .bean(""timesheetService"", ""updateTimesheet"")
                .endRest()
                .get(""/{timesheetId}"")
                .produces(MediaType.TEXT_PLAIN)
                .route()
                .bean(""timesheetService"", ""getTimesheetById"");
{code}

Here is the relevant portion of the log when I start my wildfly-swarm deployment:
{code}
2016-07-13 17:01:46,730 INFO  [org.apache.camel.impl.converter.DefaultTypeConverter] (MSC service thread 1-8) Loaded 198 type converters
2016-07-13 17:01:46,743 INFO  [org.apache.camel.cdi.CdiCamelExtension] (MSC service thread 1-8) Camel CDI is starting Camel context [cdi-context]
2016-07-13 17:01:46,743 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Apache Camel 2.17.1 (CamelContext: cdi-context) is starting
2016-07-13 17:01:46,745 INFO  [org.apache.camel.management.ManagedManagementStrategy] (MSC service thread 1-8) JMX is enabled
2016-07-13 17:01:46,794 INFO  [org.wildfly.extension.camel] (MSC service thread 1-8) Camel context starting: cdi-context
2016-07-13 17:01:46,794 INFO  [org.wildfly.extension.camel] (MSC service thread 1-2) Bound camel naming object: java:jboss/camel/context/cdi-context
2016-07-13 17:01:46,811 INFO  [org.apache.camel.impl.DefaultRuntimeEndpointRegistry] (MSC service thread 1-8) Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
2016-07-13 17:01:46,863 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2016-07-13 17:01:46,863 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2016-07-13 17:01:46,895 INFO  [org.apache.camel.component.undertow.UndertowRegistry] (MSC service thread 1-8) Adding consumer to consumerRegistry: http://localhost:8181/timesheet/%7BtimesheetId%7D
2016-07-13 17:01:46,898 INFO  [org.wildfly.extension.camel] (MSC service thread 1-8) Add Camel endpoint: http://[::]:8181/timesheet/{timesheetId}
2016-07-13 17:01:46,898 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Route: route1 started and consuming from: Endpoint[http://localhost:8181/timesheet/%7BtimesheetId%7D?httpMethodRestrict=POST%2COPTIONS&optionsEnabled=true]
2016-07-13 17:01:46,899 INFO  [org.apache.camel.component.undertow.UndertowRegistry] (MSC service thread 1-8) Adding consumer to consumerRegistry: http://localhost:8181/timesheet/%7BtimesheetId%7D
2016-07-13 17:01:46,899 INFO  [org.wildfly.extension.camel] (MSC service thread 1-8) Add Camel endpoint: http://[::]:8181/timesheet/{timesheetId}
2016-07-13 17:01:46,899 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Route: route2 started and consuming from: Endpoint[http://localhost:8181/timesheet/%7BtimesheetId%7D?httpMethodRestrict=GET%2COPTIONS&optionsEnabled=true]
2016-07-13 17:01:46,899 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Total 2 routes, of which 2 are started.
2016-07-13 17:01:46,900 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Apache Camel 2.17.1 (CamelContext: cdi-context) started in 0.156 seconds
2016-07-13 17:01:47,254 INFO  [org.jboss.resteasy.resteasy_jaxrs.i18n] (ServerService Thread Pool -- 7) RESTEASY002225: Deploying javax.ws.rs.core.Application: class org.wildfly.swarm.generated.WildFlySwarmDefaultJAXRSApplication
2016-07-13 17:01:47,256 INFO  [org.wildfly.extension.undertow] (ServerService Thread Pool -- 7) WFLYUT0021: Registered web context: /
2016-07-13 17:01:47,257 INFO  [org.wildfly.extension.camel] (ServerService Thread Pool -- 7) Add Camel endpoint: http://[::]:8181
2
{code};;;","14/Jul/16 10:23;tdiesler;CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1246;;;","15/Jul/16 07:47;davsclaus;I cannot reproduce this on master and 2.17.x branch. I created an unit test
https://github.com/apache/camel/commit/6540a69cf9f8b4365386f8f0d446d4a0e15f646f;;;","15/Jul/16 07:49;davsclaus;When using get/verb etc. then the uri parameter httpMethodRestrict is used to restrict to GET PUT etc. And that is part of the uri, and should therefore not be duplicate.
;;;","15/Jul/16 10:21;tdiesler;The httpMethodRestrict parameter seem to be added late

{code}
Adding consumer to consumerRegistry: http://localhost:8080/camel/rest/hello/%7Bname%7D
Add Camel endpoint: http://127.0.0.1:8080/camel/rest/hello/{name}
Route: route1 started and consuming from: Endpoint[http://localhost:8080/camel/rest/hello/%7Bname%7D?httpMethodRestrict=GET]

Adding consumer to consumerRegistry: http://localhost:8080/camel/rest/hello/%7Bname%7D
Add Camel endpoint: http://127.0.0.1:8080/camel/rest/hello/{name}
Route: route2 started and consuming from: Endpoint[http://localhost:8080/camel/rest/hello/%7Bname%7D?httpMethodRestrict=POST]

Adding consumer to consumerRegistry: http://localhost:8080/camel/rest/hello/%7Bname%7D
Add Camel endpoint: http://127.0.0.1:8080/camel/rest/hello/{name}
Route: route3 started and consuming from: Endpoint[http://localhost:8080/camel/rest/hello/%7Bname%7D?httpMethodRestrict=PUT]
{code};;;","15/Jul/16 13:03;tdiesler;Please close, this is a wildfly-camel issue.;;;","18/Feb/17 21:07;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1476

    CAMEL-10139: added unit tests for all/most REST DSL components, and s…

    …eeing that only camel-undertow throws an HTTP status code 405 on some operations

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-10139

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1476.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1476
    
----
commit 419558f543fb76313c59d8b0e433b69fce9843e3
Author: Scott Cranton <scott@cranton.com>
Date:   2017-02-18T21:06:54Z

    CAMEL-10139: added unit tests for all/most REST DSL components, and seeing that only camel-undertow throws an HTTP status code 405 on some operations

----
;;;","18/Feb/17 21:08;scranton;Just created pull request - https://github.com/apache/camel/pull/1476 - with unit tests for most REST DSL components, and that only fails with camel-undertow with some of the HTTP operations returning a status code of 405;;;","18/Feb/17 22:14;scranton;Looks like in Undertow when you have for example /users and /users/{id} the code that adds the handlers is seeing those 2 paths (/users and /users/) as identical, and replacing the handler. In my unit test the /users/{id} handler wins, so the /users GET is no longer registered

https://github.com/undertow-io/undertow/blob/master/core/src/main/java/io/undertow/util/PathMatcher.java#L118

This feels like a bug in Undertow;;;","18/Feb/17 23:20;scranton;Fixed it in camel-undertow component by normalizing paths just like undertow handles, i.e. /users and /users/ are the same path

https://github.com/scranton/camel/blob/36032729b785bd17ca478db6ff21fd66f7d81ad0/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/handlers/CamelRootHandler.java#L171-L171;;;","19/Feb/17 08:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1476
;;;","19/Feb/17 10:12;davsclaus;Thanks Scott;;;",,,,,,,,,,,,,,,,,,
Missing Group attribute for Tokenize DSL added to the Body Expression,CAMEL-10136,12988292,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,11/Jul/16 13:44,27/Jul/16 07:46,14/Jul/23 05:50,27/Jul/16 07:46,,,,,,,,,,,,,,,2.17.3,2.18.0,,,,,,,,,,0,,,,,,"The option group (""<tokenize token=""\n"" group=""1000""/>"","".tokenize(""\n"", 1000)"") doesn't exist when we use the Tokenize DSL after a body expression
{code}
.split(body(String.class).tokenize(""\n"")).streaming()
{code}

but only when we create append the .tokenize() DSL to the splitter

{code}
.split().tokenize(""\n"",3).streaming()
{code}

Question : Is it the expected behaviour or something missing ?",,cmoulliard,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 15 13:53:32 UTC 2016,,,,,,,,,,,"0|i30sgf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jul/16 13:27;davsclaus;Yeah you should use convertBodyTo to convert the body to string before using the splitter with tokenize.;;;","15/Jul/16 13:53;cmoulliard;There is an inconsistency as the Java Fluent API "".split().tokenize(""\n"",3)"" supports the group option and not this other syntax "".split(body(String.class).tokenize(""\n""))"";;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jt400 - Need to call configure consumer,CAMEL-10128,12987114,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Jul/16 10:39,06/Jul/16 10:41,14/Jul/23 05:50,06/Jul/16 10:41,2.17.2,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Problem-with-JT400-DataQueue-tp5784876.html

When creating the consumer we must remember to call configureConsumer like all other component does.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-06 10:39:44.0,,,,,,,,,,,"0|i30l7r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Creating an InputStream from XMLStreamReader fails without default namespace,CAMEL-10120,12986596,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,siano,siano,siano,04/Jul/16 13:09,04/Jul/16 13:34,14/Jul/23 05:50,04/Jul/16 13:34,2.17.2,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-core,,,,,,,0,,,,,,"The XMLStreamReaderInputStream created by the StaxConverter will fail if the document does not define a default namespace, a tag contains an attribute without namespace prefix and the XMLStreamWriter from the JDK is used.

The error message is:
javax.xml.stream.XMLStreamException: NamespaceURI cannot be null
	at com.sun.xml.internal.stream.writers.XMLStreamWriterImpl.writeAttribute(XMLStreamWriterImpl.java:615)
	at org.apache.camel.converter.jaxp.XMLStreamReaderInputStream.ensureBuffering(XMLStreamReaderInputStream.java:106)

The fix is relatively simple: a check needs to be introduced that replaces null namespaceUris with empty namespace Uris.

The issue was introduced with CAMEL-10070.

The issue will not happen with unit tests because those use the woodstox Stax parser.",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-04 13:09:36.0,,,,,,,,,,,"0|i30i13:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Elasticsearch: Default pathHome option should work on all the platforms,CAMEL-10117,12986537,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,04/Jul/16 07:24,04/Jul/16 08:36,14/Jul/23 05:50,04/Jul/16 08:36,,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-elasticsearch,,,,,,,0,,,,,,"Currently we are using /usr/share/elasticsearch as default for the pathHome option.

Maybe we can change this default to something working for all the platforms.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-04 07:24:38.0,,,,,,,,,,,"0|i30hnz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in DefaultAsyncProcessorAwaitManager,CAMEL-10116,12986405,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,anoordover,wnagele,wnagele,02/Jul/16 12:55,07/Jul/16 21:53,14/Jul/23 05:50,07/Jul/16 21:53,2.17.1,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-core,,,,,,,0,,,,,,"The following statement can cause a NPE (line #256 in DefaultAsyncProcessorAwaitManager at version 2.17.1):
{{MessageHistory history = list.get(list.size() - 1);}}

{code}
java.lang.NullPointerException: null
        at org.apache.camel.impl.DefaultAsyncProcessorAwaitManager$AwaitThreadEntry.<init>(DefaultAsyncProcessorAwaitManager.java:257) ~[camel-core-2.17.1.jar!/:2.17.1]
        at org.apache.camel.impl.DefaultAsyncProcessorAwaitManager$AwaitThreadEntry.<init>(DefaultAsyncProcessorAwaitManager.java:238) ~[camel-core-2.17.1.jar!/:2.17.1]
        at org.apache.camel.impl.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:73) ~[camel-core-2.17.1.jar!/:2.17.1]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:122) ~[camel-core-2.17.1.jar!/:2.17.1]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87) ~[camel-core-2.17.1.jar!/:2.17.1]
        at org.apache.camel.component.stream.StreamConsumer.processLine(StreamConsumer.java:218) ~[camel-stream-2.17.1.jar!/:2.17.1]
        at org.apache.camel.component.stream.StreamConsumer.readFromStream(StreamConsumer.java:146) ~[camel-stream-2.17.1.jar!/:2.17.1]
        at org.apache.camel.component.stream.StreamConsumer.run(StreamConsumer.java:99) ~[camel-stream-2.17.1.jar!/:2.17.1]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
{code}",,anoordover,davsclaus,githubbot,wnagele,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 07 20:44:40 UTC 2016,,,,,,,,,,,"0|i30gun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Jul/16 13:14;anoordover;[~wnagele] we have been busy looking at this issue and we don't understand how you can get a NPE in that line of code.
The lines are controlled by ""if (list != null && !list.isEmpty()) {..."", so we don't expect a NPE on that line.
The only explanation we had would be that the MessageHistory list is mutated somewhere else.
We don't expect that to be the case but we have no other explanation.
We might clone the MessageHistory list before checking and use the clone, but we wouldn't expect that to be needed.

Therefore we would like to ask you for a little bit more information about this issue before making this change.

Can you provide this?;;;","04/Jul/16 13:48;wnagele;Hi Arno,

I was a bit surprised as well. My best guess was that since I am using threads() this is now multithreaded and maybe that this list is modified in two places simultaneously. Nowhere in my own code am I doing anything to MessageHistory. As a workaround I have actually disabled it in my routes atm.

The way the last element is accessed is ""ugly"" either way. If you control the list type I would suggest you move to a specific List implementation that supports retrieving the end (LinkedList for example).

Cheers,
Wolfgang;;;","04/Jul/16 18:39;anoordover;Notes so far:
- The List of MessageHistory might be added to the exchange in a thread unsafe manner;
- Sometimes a defensive copy is made of the List (e.g. line 152 in DefaultExchange, line 916 in ExchangeHelper);
- I found one place where the existence of Exchange.MESSAGE_HISTORY property is checked. If it isn't present it is created and added to the properties hashmap (CamelInternalProcessor line 746);

Questions:
- Should there be a new class introduced e.g. MessageHistories which hides the collection implementation for the message history functionality?
- Should there be a method in Exchange like putIfAbsent from the ConcurrentHashMap which adds a new element to the hashmap  if it isn't present or returns the existing element in a thread-safe manner?
- Should the defensive copy functionality be thread-safe? I don't know yet what would happen in a multi threaded solution.
- Do we need to make a defensive copy of the MESSAGE_HISTORY property when making a safe-copy of the properties? Maybe we shouldn't make a defensive copy and need to use the same instance. What happens when another thread adds a MessageHistory to the old properties map?
- Are there other places where the MESSAGE_HISTORY is added to the properties HashMap?

But the main question of course:
Could the CamelInternalProcessor be the cause of this problem?
;;;","05/Jul/16 07:48;davsclaus;Do the exchange complete fast? As I think its due the exchange is processed async and the await manager waits for that to complete, and where the NPE happens is where it ""stores"" where the exchange current is at (by looking at the history) and concurrently then the exchange is done, and its history is complete.

;;;","05/Jul/16 10:30;anoordover;The only reason why we store the latest history is (if I am correct without using my IDE) for dumpBlockedThread.
Is it acceptable to get last MessageHistory entry from the list when doing the dumpBlockedThread?;;;","05/Jul/16 10:42;davsclaus;Ah yeah it would be better to defer getting the data at that point, also that will will also be more accurate, as the history could have changed since the constructor doing it today.

So yeah you are welcome to move the logic to that point.;;;","05/Jul/16 18:35;githubbot;GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1063

    CAMEL-10116: Retrieve last MessageHistory when getting NodeId and Rou…

    Following changes are made:
    
    - MessageHistories is changed to LinkedList to facilitate getting last item;
    - The fetching of the NodeId and RouteId from the last MessageHistory in the AwaitThreadEntry is moved to the methods getNodeId and getRouteId.
    
    The test on AsyncProcessorAwaitManager is changed which shows that the dumping of the last NodeId and RouteId is error-prone.
    
    I suddenly see that I used java 8 optional and lambda's to get the last NodeId, so I guess this can't be cherry-picked to 2.17.3 as is. Sorry.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-10116

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1063.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1063
    
----
commit d940bf8d40279f14d1a677ceff0e5afc3f42e191
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-07-05T18:24:35Z

    CAMEL-10116: Retrieve last MessageHistory when getting NodeId and RouteId

----
;;;","07/Jul/16 20:44;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1063
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Kafka consumer stays running if no messages were received after shutdown start,CAMEL-10115,12986222,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,anoordover,vchekrii,vchekrii,01/Jul/16 15:50,04/Jul/16 12:34,14/Jul/23 05:50,04/Jul/16 12:34,2.17.1,,,,,,,,,,,,,,2.18.0,,,,camel-kafka,,,,,,,1,,,,,,"After triggering {{CamelContext#close()}} method the execution will reach {{org.apache.camel.component.kafka.KafkaConsumer#doStop}} where the shutdown of the executor instance will be triggered and where in it's turn the interruption of the submitted to the executor threads should happen (by reaching the native implementation of Thread#interrupt())

According to https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#interrupt-- interrupt method will only set a corresponding status to the thread, but will not terminate it. 

Problem is in the line {{KafkaConsumer.java:108}}:
{{ConsumerRecords<Object, Object> records = consumer.poll(Long.MAX_VALUE);}}

In the Kafka implementation of the poll method this will lead to almost infinite {{while}} loop which is not checking the thread status and this loop will exit only in case of receiving a message from a broker. Only after exciting the loop the interrupted status of the thread will be discovered and the thread will be terminated.

This leads to a couple of problems:
1. The KafkaConsumers remain alive until receiving at least one more message from the broker.
2. As the CamelContext at this point of time is most likely already shut down, the received message is not going to be processed, but will be acknowledged to the broker. So effectively the message gets lost.

A potential fix would be to either make the poll timeout reasonably small or configurable.
","Spring Boot 1.4.0.M3 with Tomcat
Java 8
Camel 2.17.1",anoordover,githubbot,vchekrii,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 04 12:34:41 UTC 2016,,,,,,,,,,,"0|i30fpz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jul/16 18:38;githubbot;GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1057

    CAMEL-10115: introduced pollTimeOutMs with default 30000

    Please provide comment about two things:
    - the default time of 30000ms for pollTimeOutMs;
    - the assumption that the configuration of the endpoint (see line 50 in KafkaConsumer) is never null.
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-10115

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1057.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1057
    
----
commit 2ee1ed1f2ef86310e750d7ce86f786add0b4535a
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-07-03T18:30:03Z

    CAMEL-10115: introduced pollTimeOutMs with default 30000

----
;;;","04/Jul/16 12:24;githubbot;Github user anoordover closed the pull request at:

    https://github.com/apache/camel/pull/1057
;;;","04/Jul/16 12:34;anoordover;Cherry-picking isn't easy in 2.17.x
Vote to have it back-ported to 2.17.3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Creating an InputStream from XMLStreamReader fails with ASCII default platform encoding,CAMEL-10111,12986101,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,siano,siano,siano,01/Jul/16 08:53,01/Jul/16 10:05,14/Jul/23 05:50,01/Jul/16 10:05,2.17.2,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-core,,,,,,,0,,,,,,"If a type conversion is performed between XMLStreamReader and the platform default encoding is not UTF-8 and the used Stax parser is the one from the JDK the conversion will fail.

The error message will look like that:
Caused by: javax.xml.stream.XMLStreamException: Underlying stream encoding 'ASCII' and input paramter for writeStartDocument() method 'utf-8' do not match.

The underlying issue was introduced with CAMEL-10070 and CAMEL-10080.

Unfortunately this cannot be unit tested, as in the unit tests the default platform encoding is UTF-8 and the used Stax parser is woodstox. Both conditions prevent the issue from occuring.",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-07-01 08:53:04.0,,,,,,,,,,,"0|i30ez3:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Marshaling using CSV will insert escape char in header if using a pipe as separator,CAMEL-10110,12985867,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,anoordover,tlandich,tlandich,30/Jun/16 20:04,01/Jul/16 23:31,14/Jul/23 05:50,01/Jul/16 23:31,2.15.2,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-bindy,,,,,,,0,,,,,,"This was an old bug that was supposedly resolved, but with version:2.15.2, the bug remains. The escape characters are still added into the Header Columns when marshaling back the object. 
e.g. 
Separator = \ \ |
Output: 
Header 1 \ | Header2 \ |...
Pls. advise when we can expect the fix.
Thanks.
Reply",Windows,anoordover,davsclaus,tlandich,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 01 23:31:09 UTC 2016,,,,,,,,,,,"0|i30e0f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Jun/16 20:54;anoordover;I don't understand that this can fail in your version. Looking at github I see a unittest that should fail according to your description (I think).
See https://github.com/apache/camel/blob/camel-2.15.2/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyPipeDelimiterTest.java

Can you provide more information so we might be able to reproduce your issue.
;;;","30/Jun/16 21:13;anoordover;In my experience it is sometimes best to start at the basics. Do you have an old camel-bindy jar somewhere?;;;","01/Jul/16 07:01;davsclaus;2.15.x is EOL. Try with a newer release such as 2.17.1;;;","01/Jul/16 21:49;tlandich;Thanks for your response.

Below is my code, which is working for the most part, except for the ""\"" char in the header columns.

-------------------------


import org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat;
...

public class From extends RouteBuilder  { 

  private String csvInputPath;
  private String csvOutputPath;

  public void configure() throws Exception {    

 ...
   BindyCsvDataFormat bindyFormat = new BindyCsvDataFormat( org.sample.model.MyMessage.class );

    from(csvInputPath)
      .removeProperty(Exchange.CHARSET_NAME)
      .unmarshal(bindyFormat)
      .split(body())
      .to(""direct:processMessage"");

    from(""direct:processMessage"")
      .doTry()
      .process(new MyMessageProcessor())
      .to(""direct:writeReport"")
      .doCatch(Throwable.class)
      .to(""direct:handleUnknownException"")
      .end();


    from(""direct:writeReport"")
      .aggregate(constant(true), batchAggregationStrategy())
      .completionTimeout(BATCH_TIME_OUT)
      .marshal(bindyFormat)
      .to(csvOutputPath);

    ...

  }
};;;","01/Jul/16 23:31;anoordover;The issue was about. the HEADER. Same trick as with normal lines is repeated for headers.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Mail consumer does not work with quartz scheduler,CAMEL-10104,12985639,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,siano,ivo_kulms,ivo_kulms,30/Jun/16 06:11,30/Jun/16 06:30,14/Jul/23 05:50,30/Jun/16 06:30,2.16.3,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-mail,,,,,,,0,,,,,,"Using the mail consumer with the quartz scheduler like

imap://myhost?scheduler=quartz2&scheduler.cron=0%2F5+*+0-23+%3F+*+*+*&scheduler.timeZone=Europe%2FBerlin

leads to an error:

""There are 2 scheduler parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint.""",,ivo_kulms,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-06-30 06:11:46.0,,,,,,,,,,,"0|i30clz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel FTP - Unknown parser type ,CAMEL-10103,12985055,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,anoordover,gsp,gsp,29/Jun/16 15:10,30/Jun/16 04:31,14/Jul/23 05:50,30/Jun/16 04:26,2.16.2,2.18.0,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-ftp,,,,,,,0,,,,,,"Some servers are not recognized by camel-ftp

 org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: WIN32 A N (WFTPD by Texas Imperial Software)
 org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: Linux Version: Cleo VLTrader/5.2.0.19 FTP server

LINUX and WIN32  are missing in OsgiParserFactory.createFileEntryParser(...)

For these servers 
UnixFTPEntryParser btw. NTFTPEntryParser will work.

 
",,anoordover,gsp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jun/16 15:32;gsp;Camel10103.Added_LINUX_and_Win32.patch;https://issues.apache.org/jira/secure/attachment/12814787/Camel10103.Added_LINUX_and_Win32.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 30 04:30:29 UTC 2016,,,,,,,Patch Available,,,,"0|i30bmv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jun/16 21:29;anoordover;patch is applied as noted;;;","30/Jun/16 04:30;anoordover;I think we should expose adaption of the behaviour of the OsgiParserFactory, so we can choose not to support certain parsers.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Linkedin: Sometimes LinkedInOAuthRequestFilter in API is using redirectQuery equal to null,CAMEL-10094,12983762,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,27/Jun/16 12:51,27/Jun/16 12:59,14/Jul/23 05:50,27/Jun/16 12:59,,,,,,,,,,,,,,,2.17.3,2.18.0,,,,,,,,,,0,,,,,,"Here: 

https://github.com/apache/camel/blob/master/components/camel-linkedin/camel-linkedin-api/src/main/java/org/apache/camel/component/linkedin/api/LinkedInOAuthRequestFilter.java#L208

Sometimes the redirectQuery is null. It's better to add a check and throw an exception in that case.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-06-27 12:51:57.0,,,,,,,,,,,"0|i306kv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Git: Always check if Git instance is null in GitProducer before closing,CAMEL-10091,12983389,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,27/Jun/16 06:54,27/Jun/16 07:35,14/Jul/23 05:50,27/Jun/16 07:35,2.17.1,,,,,,,,,,,,,,2.16.4,2.17.3,2.18.0,,camel-git,,,,,,,0,,,,,,We need to double check JGit Git class instance each time we want to close it.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-06-27 06:54:08.0,,,,,,,,,,,"0|i3049z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce doesn't support full ISO-8601 datetimes,CAMEL-10090,12983159,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,anoordover,anoordover,anoordover,25/Jun/16 18:32,11/Aug/16 19:59,14/Jul/23 05:50,11/Aug/16 19:59,2.17.1,,,,,,,,,,,,,,2.18.0,,,,camel-salesforce,,,,,,,0,,,,,,"See http://camel.465427.n5.nabble.com/camel-salesforce-component-date-time-issue-td5784399.html
When communicating old dates the timezone-offset in a ISO-8601 format contain seconds. This isn't supported by Salesforce.",,anoordover,davsclaus,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 02 19:12:10 UTC 2016,,,,,,,,,,,"0|i303gn:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"26/Jun/16 13:36;anoordover;[~davsclaus] can you decide what to do? I have the outlines of a patch available.
See my comments on the forum.;;;","27/Jun/16 14:48;davsclaus;I am not an almighty god that has to decide everything. You should always do what is in the best interrest of the community / Apache Camel.

If you have a good solution for this then go for that. Its best to work on this onwards eg mater branch, as patch releases shouldn't be ""change so much"". ;;;","27/Jun/16 18:08;anoordover;Use-case for old-dates wasn't clear, but testing this functionality showed 2.18.0 doesn't support jodatime at all. This is fixed.;;;","14/Jul/16 06:38;dhirajsb;Recent changes to remove JodaTime is causing a regression in integration tests run using -Psalesforce-test in the test {{RestApiIntegrationTest.testGetBlobField()}} when trying to parse a date of the format '2013-05-14T23:44:18.000+0000'. ;;;","18/Jul/16 18:29;anoordover;Googling salesforce I found a known issue with the GMT timezone where the colon misses.
The dateformatbuilders use a Z for GMT timezone. 
Due to my vacation I will provide a patch after three weeks. I don't know whether I will be able to test this. Can you?;;;","18/Jul/16 19:06;anoordover;The link https://developer.salesforce.com/forums/?id=906F00000009ACXIA2;;;","27/Jul/16 00:07;dhirajsb;Fixed with https://github.com/apache/camel/commit/cace59f0254e78cd1b1342c3ea1fc70c5dfb9b23 on master branch;;;","31/Jul/16 18:48;anoordover;Nice refactoring!
But the issue with the seconds in the timezone-offset for old dates is reintroduced.
The following corner-cases need to be taken into account (according to integrationtest with salesforce:
* Timezone offset should only use hours and minutes;
* Parts of seconds should only contain millis;
* Timezone ""UTC"" is rendered as 0000 when fetching from salesforce;
* Timezone ""UTC"" can be sent to salesforce as ""Z""

Btw the millis don't seem to be stored in salesforce.
[~dhirajsb], can you check this last statement?;;;","01/Aug/16 06:27;dhirajsb;[~anoordover], please add a unit test for the utility class to test these corner cases. 

Not sure about the statement about millis, in the sense that in my tests it showed milliseconds with 000 only, which is highly unlikely to be the actual instant. I think it's just Salesforce being cute, but I can't be 100% certain that it doesn't, and there is nothing stopping Salesforce from supporting it in the future. ;;;","02/Aug/16 19:12;anoordover;[~dhirajsb], I added a spock unittest.
I've set them all on Ignore.
You can do your stuff (I suppose)
I hope spock will work for you and the build-servers;;;",,,,,,,,,,,,,,,,,,,,,,
camel-kafka does not work in OSGI container,CAMEL-10087,12982329,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jmandawg,jmandawg,23/Jun/16 13:44,01/Jul/16 11:36,14/Jul/23 05:50,01/Jul/16 06:59,2.17.1,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-kafka,,,,,,,0,,,,,,"Currently this component is broken in OSGI environment due to this:

https://issues.apache.org/jira/browse/KAFKA-3218

We can leave it broken until they get their bugs worked out.  Or i can submit a PR with an intermediate fix that should work, as described in the jira noted above.


https://github.com/apache/camel/pull/1053",,davsclaus,dkulp,githubbot,jmandawg,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10069,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 01 11:36:35 UTC 2016,,,,,,,Patch Available,,,,"0|i2zz13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jun/16 13:55;githubbot;GitHub user transamericamoon opened a pull request:

    https://github.com/apache/camel/pull/1049

    CAMEL-10087 Fix for KAFKA-3218

    Temporary fix to get Kafka working inside OSGI containers

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jmandawg/camel CAMEL-10087

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1049.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1049
    
----
commit 7b6a21d92a110ef62228cb193fe83160e5261da2
Author: John Moon <john.moon@transamerica.com>
Date:   2016-06-23T13:52:39Z

    CAMEL-10087 Fix for KAFKA-3218

----
;;;","24/Jun/16 06:36;davsclaus;There has been other fixes like CAMEL-10069. Can you try with latest code to see if CAMEL-10069 resolves the issues. ;;;","24/Jun/16 12:17;jmandawg;Unfortunately, Latest code does not work, you can view the Kafka change i'm trying to work around here.  

https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L652

You can see that if the Thead classloader is not null, it will use it, and since bundles run in different threads it won't be able to find the ProducerConfig and you will get an error like this:

Exception in thread ""pool-136-thread-1"" java.lang.NoClassDefFoundError: Could not initialize class org.apache.kafka.clients.producer.ProducerConfig
at org.apache.kafka.clients.producer.KafkaProducer.<init>(KafkaProducer.java:194)

To reproduce just create a kafka producer in Karaf, it will fail on bundle startup.
;;;","24/Jun/16 14:45;jmandawg;Just to follow up, i tested my patch into the 2.17.1 tag and it works fine, so i don't know if the changes from  CAMEL-10069 are even necessary.

The test involved listening on one kafka topic and routing the messages (text) to another kafka topic.;;;","24/Jun/16 15:03;dkulp;The changes in CAMEL-10069 are definitely necessary, particularly in combination with your patch.   With your change to null out the context class loader, there would be no way for Kafka to load any serializers or partitioners that are part of the application bundle and configured in via the properties.   It would only be able to load those that are part of the Kafka client bundle itself. 
;;;","24/Jun/16 15:07;jmandawg;That is not correct, it will use the current class loader (which is what we want) if it is set to null.  Look at the kafka code here:

https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L652

Which will get the classloader from: 

Utils.class.getClassLoader();;;;","24/Jun/16 15:13;dkulp;
The Utils.class.getClassLoader() would NOT contain any custom serializer or partitioner.   That would only contain the Kafka client provided versions of those.   Any classes that the application provides for those would be unavailable.;;;","24/Jun/16 15:35;jmandawg;I can walk you through their code:

For example when you Create producer it creates the serializers:

this.keySerializer = config.getConfiguredInstance(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,
                        Serializer.class);

https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java#L305

Which calls into AbstractConfig.java
https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java#L197

Which calls into Utils.newInstance
https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L332

Which finally calls 
Utils.getContextOrKafkaClassLoader()

which uses the current classloader if it is set to null.  

So as you can see serializers and partitioners are created by the Utils class.  

Utils is inside the same bundle as all the Karaf stuff, that is why it needs to use the same class loader as Utils not of the calling thread.


;;;","24/Jun/16 15:37;jmandawg;My mistake, i see you are talking about ""CUSTOM"" Serializers that aren't inside the Karaf package.  My apologies;;;","24/Jun/16 15:49;dkulp;I understand that.  

If my producer has is configured as:
{code}
....to(""kafka:localhost:9999?topic=foo&serializerClass=com.dankulp.MySerializer"")
{code}
then that path above will NOT find my serializer.   It is not in the Kafka jar/bundle.   It's in MY application bundle which is currently the context classloader.   Thus, if you set the context classloader to null, then the changes for  CAMEL-10069 are 100% necessary.

Have you tried without your patch but WITH the CAMEL_10069 changes?   Is it the partitioner that its having problems loading?   I think if you add:
{code}
""&partioner=org.apache.kafka.clients.producer.internals.DefaultPartitioner""
{code}
to the config, it may work.   For some reason, KafkaConfiguration isn't returning that default value for the partitioner like it is for the serializers.  
;;;","24/Jun/16 16:16;jmandawg;I'm building camel-karaf from lastest 2.17.x -It is barfing on the serializer:

org.apache.camel.RuntimeCamelException: org.apache.kafka.common.config.ConfigException: Invalid value org.apache.kafka.common.serialization.StringDeserializer f
or configuration value.deserializer: Class org.apache.kafka.common.serialization.StringDeserializer could not be found.
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:138)[98:org.apache.camel.camel-spring:2.17.1]
        at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:340)[98:org.apache.camel.camel-spring:2.17.1]
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)[107:org.apache.servicem
ix.bundles.spring-context:3.2.14.RELEASE_1]
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)[107:org.apache.servicemix.bundles.sp
ring-context:3.2.14.RELEASE_1]
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:950)[107:org.apache.servicemix.bundles.s
pring-context:3.2.14.RELEASE_1]
        at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[112:org.sp
ringframework.osgi.core:1.2.1]
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[11
2:org.springframework.osgi.core:1.2.1]
        at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[112:org.springframework.osgi.core:1.2.1]
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.ja
va:320)[112:org.springframework.osgi.core:1.2.1]
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterAp
plicationContextExecutor.java:132)[113:org.springframework.osgi.extender:1.2.1]
        at java.lang.Thread.run(Thread.java:745)[:1.8.0_92-internal]
Caused by: org.apache.kafka.common.config.ConfigException: Invalid value org.apache.kafka.common.serialization.StringDeserializer for configuration value.deseri
alizer: Class org.apache.kafka.common.serialization.StringDeserializer could not be found.
        at org.apache.kafka.common.config.ConfigDef.parseType(ConfigDef.java:255)[149:wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1:0.0.0]
        at org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:145)[149:wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1:0.0.0]
        at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:49)[149:wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1:0.0.0]
        at org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:56)[149:wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1:0.0.0]
        at org.apache.kafka.clients.consumer.ConsumerConfig.<init>(ConsumerConfig.java:336)[149:wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1:0.0.0]
        at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:542)[149:wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1:0.0.0]
        at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:524)[149:wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1:0.0.0]
        at org.apache.camel.component.kafka.KafkaConsumer$KafkaFetchRecords.<init>(KafkaConsumer.java:97)[150:org.apache.camel.camel-kafka:2.17.2.SNAPSHOT]
        at org.apache.camel.component.kafka.KafkaConsumer.doStart(KafkaConsumer.java:67)[150:org.apache.camel.camel-kafka:2.17.2.SNAPSHOT]
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3269)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3563)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3499)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3429)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3197)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3053)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2848)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2844)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2867)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2844)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2813)[97:org.apache.camel.camel-core:2.17.1]
        at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:270)[98:org.apache.camel.camel-spring:2.17.1]
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:136)[98:org.apache.camel.camel-spring:2.17.1]
        ... 10 more
2016-06-24 16:12:11,103 | INFO  | om-component-in] | AbstractCoordinator              | 149 - wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1 - 0.0.0 | Attempt
to heart beat failed since the group is rebalancing, try to re-join group.
2016-06-24 16:12:11,201 | INFO  | omponent-in-xml] | AbstractCoordinator              | 149 - wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1 - 0.0.0 | Marking
the coordinator 2147482646 dead.
2016-06-24 16:12:12,356 | INFO  | om-component-in] | AbstractCoordinator              | 149 - wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1 - 0.0.0 | Attempt
to heart beat failed since the group is rebalancing, try to re-join group.
2016-06-24 16:12:12,453 | INFO  | om-component-in] | AbstractCoordinator              | 149 - wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1 - 0.0.0 | Attempt
to heart beat failed since the group is rebalancing, try to re-join group.
2016-06-24 16:12:12,468 | INFO  | om-component-in] | AbstractCoordinator              | 149 - wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1 - 0.0.0 | Attempt
to heart beat failed since the group is rebalancing, try to re-join group.
2016-06-24 16:12:12,569 | INFO  | omponent-in-xml] | AbstractCoordinator              | 149 - wrap_mvn_org.apache.kafka_kafka-clients_0.9.0.1 - 0.0.0 | Attempt;;;","24/Jun/16 16:28;dkulp;Any chance you could debug starting at line 84 of KafkaProducer?    In theory, the props file should have that string set to the StringDeserializer string which should then be replaced with the actual Class object that is found.   We search several classloaders to find that class.  ;;;","24/Jun/16 16:45;dkulp;Just did a test in Karaf using the latest 2.17.2-SNAPSHOT.   If I drop a simple blueprint route of:

{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
        <route>
            <from uri=""timer:simple?period=5000""/>
            <setBody>
                <simple>Hello World</simple>
            </setBody>
            <to uri=""kafka:localhost:9092?topic=camel""/>
        </route>
    </camelContext>
</blueprint>
{code}
into the deploy folder, the route works fine and I'm getting ""Hello World"" via the kafka-console-consumer.;;;","24/Jun/16 22:11;jmandawg;Sorry Jira was down for a long time...  I was able to debug, The problem is the consumer.  You only implemented the fix for the producer.  The consumer tries to create the following key classes:

{code}
partition.assignment.strategy=org.apache.kafka.clients.consumer.RangeAssignor
key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
{code}

I tried to implement your patch into the consumer, but it fails because it expects ""partition.assignment.strategy"" to be an array of strings.  

I don't know how you can work around that without modifying the kafka code.

For reference here what my route looks like:

{code:xml}
        <route>
            <from uri=""kafka:localhost:9092?topic=component-in&groupId=jman&autoOffsetReset=earliest&consumersCount=1"" />
            <log message=""Received from Kafka ${body}"" />
            <setHeader headerName=""kafka.PARTITION_KEY"">
                <constant>0</constant>
            </setHeader>
            <setHeader headerName=""kafka.CONTENT_TYPE"">
                <constant>1</constant>
            </setHeader>
            <to uri=""kafka:localhost:9092?topic=component-out&bridgeEndpoint=true"" />
        </route>
{code}


;;;","24/Jun/16 23:10;jmandawg;Another option would be to use the simple fix (setting thread classloader to null before consumer/producer creation) and then if you want to create custom partitioners/serializers install them as a fragment bundle to kafka.;;;","27/Jun/16 15:41;jmandawg;Daniel,

Any idea how we should fix the consumer?  It should work with your patch and the one i submitted combined. ;;;","28/Jun/16 15:34;jmandawg;I see you implemented the fix.  But you did not add the deserializers for the consumer.  You need to add these keys in your updateClassProperties method:

key.deserializer
value.deserializer

btw, you should probably use the kafka constants as well:

ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG
ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG
ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG
ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG

I can open another PR if you want me to.

-J
;;;","28/Jun/16 15:34;githubbot;Github user transamericamoon closed the pull request at:

    https://github.com/apache/camel/pull/1049
;;;","28/Jun/16 17:59;davsclaus;Yeah a PR sounds good.;;;","28/Jun/16 19:49;jmandawg;https://github.com/apache/camel/pull/1053
;;;","29/Jun/16 14:06;githubbot;Github user jmandawg closed the pull request at:

    https://github.com/apache/camel/pull/1053
;;;","29/Jun/16 18:22;jmandawg;Daniel,

We need to put the same fix (setting classloader to null) for the Producer as well.  The kafka ProducerConfig has a static initializer that creates the DefaultPartiioner by default no matter what.

Here is the kafka path:

Static initializer:
https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java#L293

Defines default partitioner:
https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java#L110

Creates default instance of partitioner
https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java#L663


Since this is a static it only gets call on the first reference to the class, so it doesn't take into account what is  passed in from the camel-kafka producer.

PR here:
https://github.com/apache/camel/pull/1054

;;;","29/Jun/16 18:47;githubbot;GitHub user jmandawg opened a pull request:

    https://github.com/apache/camel/pull/1054

    CAMEL-10087 Fix for kafka partitioner static initializer in OSGI env

    Sorry missed this:
    
    We need to put the same fix (setting classloader to null) for the Producer as well. The kafka ProducerConfig has a static initializer that creates the DefaultPartiioner by default no matter what.
    Here is the kafka path:
    Static initializer:
    https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java#L293
    Defines default partitioner:
    https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java#L110
    Creates default instance of partitioner
    https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java#L663
    Since this is a static it only gets call on the first reference to the class, so it doesn't take into account what is passed in from the camel-kafka producer.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jmandawg/camel CAMEL-10087-b

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1054.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1054
    
----
commit 6c7ae2d4b8938ed60e2778536f7b92fa55cf1cff
Author: John Moon <john.moon@transamerica.com>
Date:   2016-06-29T18:44:55Z

    Fix for kafka partitioner static initializer in OSGI env

----
;;;","01/Jul/16 06:59;davsclaus;Thanks for the PRs;;;","01/Jul/16 11:36;githubbot;Github user jmandawg closed the pull request at:

    https://github.com/apache/camel/pull/1054
;;;",,,,,,,
camel-api-component-maven-plugin doesn't handle inner class names in Javadoc,CAMEL-10082,12981454,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,21/Jun/16 18:42,21/Jun/16 23:09,14/Jul/23 05:50,21/Jun/16 23:09,2.17.1,2.18.0,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-core,,,,,,,0,,,,,,ApiMethodParser.forName() doesn't handle inner class names of the format package.OutClass.InnerClass from camel-api-component-maven-plugin's Javadoc parser. It needs to convert class names in this human readable format to package.OutClass$InnerClass form as expected by Class.forName().,,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 21 23:09:48 UTC 2016,,,,,,,,,,,"0|i2ztvj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Jun/16 23:09;dhirajsb;Fixed with commits on master and cherry-picked onto camel-2.17.x
master: https://github.com/apache/camel/commit/201583bce4bab6dda27b5e107b63af8d23a544f3
camel-2.17.x: https://github.com/apache/camel/commit/1192cbd2de0a961c2480510db2495571b43295e4;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka producer has problems loading serializers in OSGi,CAMEL-10069,12980204,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,17/Jun/16 14:13,23/Jun/16 14:30,14/Jul/23 05:50,22/Jun/16 19:50,,,,,,,,,,,,,,,2.17.2,,,,camel-kafka,,,,,,,0,,,,,,"
See https://issues.apache.org/jira/browse/KAFKA-3218

If the contextClassLoader is set, Kafka only uses that when looking for the dynamically loaded classes.   That means the users application bundle must import those classes which may not be the case since they are generally just configured in as strings.   We could pre-process those strings to check not just the application context but also the camel-kafka classloader and the kafka classloader so that the default serializers can be found.   

",,dkulp,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10087,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-06-17 14:13:39.0,,,,,,,,,,,"0|i2zmpr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extra request parameter sent by the camel-jetty component,CAMEL-10064,12979815,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,acartapanis,acartapanis,16/Jun/16 13:06,06/Sep/16 08:49,14/Jul/23 05:50,06/Sep/16 08:49,2.16.3,,,,,,,,,,,,,,2.17.4,2.18.0,,,camel-jetty,,,,,,,0,,,,,,"Trying to build a very simple HTTP proxy, exactly like described in the first code sample from http://camel.apache.org/how-to-use-camel-as-a-http-proxy-between-a-client-and-server.html.

Using wireshark to see exactly what is going on.

When i do a request on http://localhost:8080/myapp, the request that is sended to real server is http://realserverhostname:8090/myapp?bridgeEndpoint=true&throwExceptionOnFailure=false.

when i do a parameterized request http://localhost:8080/myapp?toto=tata, the request that is sended to real server is http://realserverhostname:8090/myapp?toto=tata.

So when the when there is no request param, the endpoint parameter bridgeEndpoint=true&throwExceptionOnFailure=false are sended to the realserver, and if there is param they are not sended.",,acartapanis,davsclaus,,,,,,,,,,,,,,,,,,,,,,CAMEL-4768,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 06 08:35:48 UTC 2016,,,,,,,,,,,"0|i2zkbj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Jun/16 14:31;acartapanis;Note that this is only happening with the camel-jetty component in the ""to"" endpoint.
This is not happening with camel-http or camel-http4.;;;","06/Sep/16 08:35;davsclaus;Thanks I have reproduced the issue and working on a fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel on Karaf 4.0.5: java.lang.NoClassDefFoundError: org/apache/karaf/util/StringEscapeUtils,CAMEL-10063,12979809,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mdo,mdo,16/Jun/16 12:48,21/Jun/16 08:56,14/Jul/23 05:50,21/Jun/16 08:56,2.18.0,,,,,,,,,,,,,,2.18.0,,,,,,,,,,,0,,,,,,"Stock Karaf, unpacked, started via bin/karaf, repo-add camel + Features camel-quartz2 and camel-blueprint (2.18.0.SNAPSHOT).

Deployed a blueprint with a Camel route. Shell shows the following error on issuing this command:
karaf@root()> camel:route-info route1
Error executing command: org/apache/karaf/util/StringEscapeUtils

Log:

java.lang.NoClassDefFoundError: org/apache/karaf/util/StringEscapeUtils
	at org.apache.camel.karaf.commands.internal.StringEscape.unescapeJava(StringEscape.java:25)
	at org.apache.camel.commands.RouteInfoCommand.executeOnRoute(RouteInfoCommand.java:52)
	at org.apache.camel.commands.AbstractRouteCommand.execute(AbstractRouteCommand.java:56)
	at org.apache.camel.karaf.commands.RouteInfo.doExecute(RouteInfo.java:35)
	at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:34)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:41)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:34)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.compat.CommandTracker$1.execute(CommandTracker.java:112)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:67)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:87)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:480)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:406)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:182)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:119)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:94)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.impl.console.ConsoleSessionImpl.run(ConsoleSessionImpl.java:270)[44:org.apache.karaf.shell.core:4.0.5]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_72]

","Karaf 4.0.5, Linux, JDK 1.8.0_72",davsclaus,mdo,,,,,,,,,,,,,,,,,,,,KARAF-4582,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 21 08:24:54 UTC 2016,,,,,,,,,,,"0|i2zka7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Jun/16 08:23;davsclaus;Works fine for us. Use the user forum / mailing list to get help first.;;;","21/Jun/16 08:24;davsclaus;Ah darn I did a mistake, I get the error too now.;;;","21/Jun/16 08:24;davsclaus;2016-06-21 10:24:02,294 | ERROR | nsole user karaf | ShellUtil                        | 44 - org.apache.karaf.shell.core - 4.0.5 | Exception caught while executing command
java.lang.NoClassDefFoundError: org/apache/karaf/util/StringEscapeUtils
	at org.apache.camel.karaf.commands.internal.StringEscape.unescapeJava(StringEscape.java:25)
	at org.apache.camel.commands.RouteInfoCommand.executeOnRoute(RouteInfoCommand.java:52)
	at org.apache.camel.commands.AbstractRouteCommand.execute(AbstractRouteCommand.java:56)
	at org.apache.camel.karaf.commands.RouteInfo.doExecute(RouteInfo.java:35)
	at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:34)[44:org.apache.karaf.shell.core:4.0.5];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot scan package to find custom converters,CAMEL-10060,12979367,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,nferraro,nferraro,nferraro,15/Jun/16 13:39,21/Jun/16 07:41,14/Jul/23 05:50,21/Jun/16 06:45,,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-spring-boot,,,,,,,0,,,,,,"When custom converters are included in a spring-boot nested jar, and the corresponding _META-INF/services/org/apache/camel/TypeConverter_ declares just the package containing the converters (not their full class names), spring-boot is not able to find them.

Eg. whenever you include the camel-core *test-jar* in a spring-boot application, the application crashes with the attached exception. This happens only when the application is packaged and launched with `java -jar myspringboot-with-nested-jars.jar`, everything works if the application is not packaged.

I experienced the same behavior with a sample module created ad hoc. The problem is related to package scanning, when full-qualified-class names are used in the descriptor there are no problems.

{noformat}
2016-06-14 17:45:56.208 ERROR 27164 --- [on(3)-127.0.0.1] o.s.boot.SpringApplication               : Application startup failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'configureComponent' defined in class path resource [org/apache/camel/component/event/springboot/EventComponentAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.component.event.EventComponent]: Factory method 'configureComponent' threw exception; nested exception is org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.converter.myconverter]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.apache.camel.ITestApplication.main(ITestApplication.java:31) [test.jar!/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:54) [test.jar!/:na]
	at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.launch(ArquillianSyncBootJarLauncher.java:44) [test.jar:na]
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:61) [test.jar:na]
	at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.run(ArquillianSyncBootJarLauncher.java:32) [test.jar:na]
	at org.apache.camel.itest.springboot.AbstractSpringBootTestSupport.startSpringBoot(AbstractSpringBootTestSupport.java:44) [test.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) [arquillian-junit.jar:na]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [arquillian-junit.jar:na]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) [arquillian-junit.jar:na]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$StatementLifecycleExecutor.invoke(Arquillian.java:463) [arquillian-junit.jar:na]
	at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:35) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:130) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:92) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:73) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:145) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:116) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.before(EventTestRunnerAdaptor.java:108) [arquillian-core.jar:na]
	at org.jboss.arquillian.junit.Arquillian$4.evaluate(Arquillian.java:241) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:426) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$5.evaluate(Arquillian.java:259) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$7$1.invoke(Arquillian.java:319) [arquillian-junit.jar:na]
	at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:35) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:130) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:92) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:73) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:145) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:116) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.fireCustomLifecycle(EventTestRunnerAdaptor.java:159) [arquillian-core.jar:na]
	at org.jboss.arquillian.junit.Arquillian$7.evaluate(Arquillian.java:312) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) [arquillian-junit.jar:na]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) [arquillian-junit.jar:na]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$2.evaluate(Arquillian.java:204) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:426) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$3.evaluate(Arquillian.java:218) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:166) [arquillian-junit.jar:na]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) [arquillian-junit.jar:na]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.container.JUnitTestRunner.execute(JUnitTestRunner.java:66) [arquillian-junit.jar:na]
	at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethodInternal(JMXTestRunner.java:135) [arquillian-container-se.jar:na]
	at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethod(JMXTestRunner.java:114) [arquillian-container-se.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71) [na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252) [na:1.8.0_91]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) [na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:324) [na:1.8.0_91]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) [na:1.8.0_91]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) [na:1.8.0_91]
	at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_91]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_91]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) [na:1.8.0_91]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) [na:1.8.0_91]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) [na:1.8.0_91]
	at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_91]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_91]
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.component.event.EventComponent]: Factory method 'configureComponent' threw exception; nested exception is org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.converter.myconverter]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 163 common frames omitted
Caused by: org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.converter.myconverter]
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:2361) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.component.event.springboot.EventComponentAutoConfiguration.configureComponent(EventComponentAutoConfiguration.java:47) ~[camel-spring-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.component.event.springboot.EventComponentAutoConfiguration$$EnhancerBySpringCGLIB$$44639dd6.CGLIB$configureComponent$0(<generated>) ~[camel-spring-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.component.event.springboot.EventComponentAutoConfiguration$$EnhancerBySpringCGLIB$$44639dd6$$FastClassBySpringCGLIB$$345be9ab.invoke(<generated>) ~[camel-spring-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.apache.camel.component.event.springboot.EventComponentAutoConfiguration$$EnhancerBySpringCGLIB$$44639dd6.configureComponent(<generated>) ~[camel-spring-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 164 common frames omitted
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.converter.myconverter]
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:119) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:602) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:53) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1277) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1237) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:2359) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	... 175 common frames omitted
{noformat}",,davsclaus,githubbot,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 21 07:41:31 UTC 2016,,,,,,,,,,,"0|i2zhwv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jun/16 13:47;davsclaus;The package scanning is deprecated and you should really use the FQN in the marker file to refer to your classes of type converters.;;;","15/Jun/16 13:50;davsclaus;A custom implementation of PackageScanClassResolver (extending the default) is likely needed for spring boot to be able to scan inside spring boot fat JARs;;;","15/Jun/16 13:56;nferraro;Yes, actually, I didn't want to use it, it's the camel-core test-jar, that is included transitively by several modules in test scope, that requires package scanning (making integration tests fail). I reported it also to understand if the same technique of package scanning is used elsewhere for some core feature.;;;","16/Jun/16 22:03;githubbot;GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1041

    CAMEL-10060: Added fat-jar aware package scan class resolver

    I've noticed that many modules currently use the package scan class resolver to find specific classes, so CAMEL-10060 is not related to custom converters only. Without a fat-jar-aware package scanner, some users could be unable to run a spring-boot multi-module project or use extension libraries.
    
    I extended the default class resolver, to let it search inside nested jars. The new resolver is configured automatically in the camel context when the spring-boot library is imported.
    
    I tested it with the offending jar and it works. If this gets merged, I'll add a specific integration test in the new spring-boot suite.
    
    Note: I needed to change the modifier of a private method of a core class (`DefaultPackageScanClassResolver`), in order to extend it without rewriting a lot of code. I think we should not care about version compatibility here, but I'm not sure.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10060

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1041.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1041
    
----
commit ac985393343a0192e8fbcf7253e59759f5418cc6
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-06-16T21:37:22Z

    CAMEL-10060: Added fat-jar aware package scan class resolver

----
;;;","21/Jun/16 06:45;davsclaus;Thanks for the PR;;;","21/Jun/16 07:41;githubbot;Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1041
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
netty4 reuseChannel not working as expected,CAMEL-10051,12977960,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,grigoriadis,grigoriadis,12/Jun/16 12:46,12/Jun/16 14:32,14/Jul/23 05:50,12/Jun/16 14:32,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-netty4,,,,,,,0,,,,,,"NettyProducer returns the channel to the pool every time a message is sent when the reuseChannel is set to true. It should instead return the channel to the pool only if the exchange is completed, so that other exchanges will not use the same channel.

I have the following problem:
I need to send messages to a legacy tcp server through a REST server.
The tcp server requires messages from one connection to be send in a specific order, for example in order to send COMMAND1 I have to first send PRE1 and PRE2 and then COMMAND1. The component is set to reuseChannel=true and be sync=true and i have the following exchange:
{code}
from(""direct:command1"")
    .setBody(constant(""PRE1""))
    .to(nettyEndpoint)
    .setBody(constant(""PRE2""))
    .to(nettyEndpoint)
    .setBody(constant(""COMMAND1""))
    .to(nettyEndpoint);
{code}
The problem is that the NettyProducer returns the channel to the pool every time i send a message. So if concurrent requests are sent to the REST server things get messy. 

NettyProducer supports this behavior, if the reuseChannel is set to true the producer adds an onCompletion listener on the exchange that returns the channel to the pool. The problem is that it also sets the callback of the NettyCamelState to a NettyProducerCallback which runs every time a message is send by the ClientChannelHandler and returns the channel to the pool.","Linux 4.6.1-1-default (OpenSuse Tumbleweed)
openjdk version ""1.8.0_77""
OpenJDK Runtime Environment (build 1.8.0_77-b03)
OpenJDK 64-Bit Server VM (build 25.77-b03, mixed mode)",davsclaus,githubbot,grigoriadis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jun 12 14:32:43 UTC 2016,,,,,,,,,,,"0|i2zcjr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Jun/16 12:51;githubbot;GitHub user grigoriadis opened a pull request:

    https://github.com/apache/camel/pull/1026

    CAMEL-10051 - Fixed issue with reuse channel.

    When reuseChannel is set to true, channel is not returned to the pool every time a message is sent

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grigoriadis/camel CAMEL-10051

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1026.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1026
    
----
commit 5c4672b4e38cb88b5ffda8b1092ef759cec1b4e8
Author: grigoriadis <grigoriadis@itsaur.com>
Date:   2016-06-12T12:48:41Z

    CAMEL-10051 - Fixed issue with reuse channel.

----
;;;","12/Jun/16 14:32;davsclaus;Thanks for the PR;;;","12/Jun/16 14:32;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1026
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in RoutingSlip,CAMEL-10048,12977892,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tashoyan,tashoyan,11/Jun/16 21:41,04/Jan/18 09:11,14/Jul/23 05:50,12/Jun/16 09:44,2.16.2,2.16.3,2.17.0,2.17.1,,,,,,,,,,,2.16.4,2.17.2,2.18.0,,camel-core,,,,,,,0,core,leak,routing,,,"RoutingSlip has a cache of error handlers implemented as a ConcurrentHashMap. This map stores error handlers as values, and uses some synthetic objects as keys. For some kind of destinations provided in routing slip, map lookup operation does not work. Hence, new error handlers are always added to the map and existing error handlers never reused. Finally, the program runs out of memory.
The synthetic keys are actually instances of class RoutingSlip.PreparedErrorHandler. Such key is based on two objects: RouteContext and destination Processor. Neither RouteContext nor Processor do not require their implementations to provide equals() and hashCode() methods. Strictly speaking, caching implementation in RoutingSlip is incorrect, because it uses hash map in the discouraged way. However, for some cases it works.
The problem occurs when routing slip contains a 'sync' destination, in other words - destination is a Processor that does not implement AsyncProcessor interface. RoutingSlip determines destination producer via ProducerCache.doInAsyncProducer(), and the latter uses AsyncProcessorConverterHelper.convert() method. This method creates new instance of Processor for every processor that is not an instance of AsyncProcessor. This is where the problem hides: new object has different hash code (defined by Object.hashCode()) and new object isn't equal to the object used as a key in the hash map (well, Object.equals()). Finally, new key for the hash map is calculated, lookup operation cannot find this key in the hash map, new key-value pair is put into the hash map.","java version ""1.8.0_51""
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)",nickolay_martinov,tashoyan,,,,,,172800,172800,,0%,172800,172800,,,,,,,,,CAMEL-10050,,CAMEL-12120,,,,,,,,,,,"11/Jun/16 21:47;tashoyan;RoutingSlipMemoryLeakTest.java;https://issues.apache.org/jira/secure/attachment/12809649/RoutingSlipMemoryLeakTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Important,,,,,,,,,9223372036854775807,,,Sun Jun 12 10:12:18 UTC 2016,,,,,,,,,,,"0|i2zc4n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Jun/16 21:47;tashoyan;Adding a unit test to reproduce;;;","11/Jun/16 21:59;tashoyan;How to fix?
I think, the best way is to remove this dangerous caching at all. There might be a temptation to implement equals() and hashCode() methods in the helper class AsyncProcessorConverterHelper.ProcessorToAsyncProcessorBridge in a way to delegate both these calls to the processor wrapped by this class. However, the root cause of the problem is the incorrect usage of a hash map. Key must implement equals() and hashCode(). We cannot require all implementations of Processor and RouteContext to implement these methods - it would be an unmotivated bloating of their contracts with irrelevant functionality. Error handlers in RoutingSlip are short-living objects, they shouldn't get into Old Gen, so GC will clean them without significant performance overhead.;;;","12/Jun/16 10:12;tashoyan;Hello Claus,
Is it ok to use Processor as a key in a hash map? Should every implementer keep this in mind and provide equals() and hashCode()? Javadoc in Processor interface tells nothing about it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Jaxb: objectFactory is never checked. This leads to performance degradation.,CAMEL-10043,12977591,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,10/Jun/16 12:28,04/Jul/16 08:54,14/Jul/23 05:50,10/Jun/16 13:44,,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-jaxb,,,,,,,0,,,,,,Since the option is always true and we have performance degradation we need to set the default to false too.,,acosentino,pascal.schumacher@t-systems.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 04 08:54:31 UTC 2016,,,,,,,,,,,"0|i2za9z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jun/16 13:12;acosentino;We should set the ObjectFactory option to false for the DataFormat too.;;;","04/Jul/16 08:50;pascal.schumacher@t-systems.com;The JaxbDataFormat change (objectFactory=false) breaks marshalling of non-XmlRootElement JaxB objects. In Camel 2.17.1 this worked out of the box, in Camel 2.17.2 you have to call JaxbDataFormat#setObjectFactory(true) to make it work.;;;","04/Jul/16 08:54;acosentino;We should add a note to docs about this. Thanks [~pascal.schumacher@t-systems.com] :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LinkedIn broke login in LinnkedIn component by adding a redundant reference to the callback url,CAMEL-10039,12977496,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,10/Jun/16 06:10,10/Jun/16 06:25,14/Jul/23 05:50,10/Jun/16 06:25,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,,,,,,,,0,camel-linkedin,,,,,,,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 10 06:25:38 UTC 2016,,,,,,,,,,,"0|i2z9ov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jun/16 06:25;dhirajsb;Fixed on master with commit https://github.com/apache/camel/commit/fd57cfcabcb93e64d3a51737b470faf32de1404e and cherry-picked onto camel-2.17.x branch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BlueprintPropertiesParser breaks propertyPlaceholder fallbackToUnaugmentedProperty behavior,CAMEL-10038,12977274,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ggrzybek,MattZ,MattZ,09/Jun/16 16:13,19/Dec/19 17:29,14/Jul/23 05:50,21/Jul/16 07:17,2.15.1,,,,,,,,,,,,,,2.17.3,2.18.0,,,camel-blueprint,,,,,,,0,patch,,,,,"When BlueprintPropertiesParser parses an ""augmented"" property key that is not found (i.e. value is null), it does not return the null value so that the fallbackToUnaugmentedProperty=""true"" (default) behavior can run. Instead, it immediately throws an IllegalArgumentException.
As a result, it appears to be impossible to take advantage of fallbackToUnaugmentedProperty=""true"" behavior when using the Blueprint properties resolver/parser.
I discovered this against Red Hat's JBoss Fuse impl of Camel, but am reporting it here because it appears to be a bug in base Camel. More details in comments.","Camel 2.15.1.redhat-620133
JBoss Fuse 6.2.0.redhat-133

openjdk version ""1.8.0_45""
OpenJDK Runtime Environment (build 1.8.0_45-b13)
OpenJDK 64-Bit Server VM (build 25.45-b02, mixed mode)

Linux 3.10.0-229.1.2.el7.x86_64 #1 SMP Fri Mar 6 17:12:08 EST 2015 x86_64 GNU/Linux (RHEL 7)",davsclaus,ggrzybek,githubbot,MattZ,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7630,,,,,,,,"13/Jul/16 22:38;MattZ;CAMEL-10038.patch;https://issues.apache.org/jira/secure/attachment/12817822/CAMEL-10038.patch","09/Jun/16 16:23;MattZ;camel-context.xml;https://issues.apache.org/jira/secure/attachment/12809223/camel-context.xml","09/Jun/16 16:23;MattZ;example.bpp.fallback.cfg;https://issues.apache.org/jira/secure/attachment/12809224/example.bpp.fallback.cfg",,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 25 15:27:36 UTC 2016,,,,,,,Patch Available,,,,"0|i2z8bj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jun/16 16:19;MattZ;In DefaultPropertiesParser:

{code:language=java}
String augmentedKey = getAugmentedKey(key);
boolean shouldFallback = fallbackToUnaugmentedProperty && !key.equals(augmentedKey);

String value = doGetPropertyValue(augmentedKey);
if (value == null && shouldFallback) {
    log.debug(""Property with key [{}] not found, attempting with unaugmented key: {}"", augmentedKey, key);
    value = doGetPropertyValue(key);
}
{code}

i.e. When an augmented property key is not found (null value) the lookup is
retried with the UNaugmented property key.

However, DefaultPropertiesParser actually gets ""wrapped"" by
BlueprintPropertiesParser, and we see the following at the end of the
parseProperty(String, String, Properties) method:

{code:language=java}
if (answer == null) {
    throw new IllegalArgumentException(""Property placeholder key: "" + key + "" not found"");
}
{code}

In a nutshell:
BlueprintPP gets an augmented property key and null value, and *should* be returning null so that DefaultPP can do its fallback behavior (which will ultimately throw the IllegalArgumentException itself if the property value is still null after fallback behavior. But instead, BlueprintPP throws an exception and the fallback behavior never happens.

Actual log events demonstrating this:

Here's what SHOULD happen: (this requires disabling the Blueprint properties resolver and bypassing BlueprintPropertiesParser altogether)

{noformat}
2016-06-09 10:50:27,531 | DEBUG | rint Extender: 3 | PropertiesComponent              | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133
 | Parsed location: file:etc/example.bpp.fallback.cfg
2016-06-09 10:50:27,531 | DEBUG | rint Extender: 3 | DefaultPropertiesParser          | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Augmenting property key [CamelLogDebugBodyMaxChars] with prefix: LOCAL.
2016-06-09 10:50:27,532 | DEBUG | rint Extender: 3 | DefaultPropertiesParser          | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Property with key [LOCAL.CamelLogDebugBodyMaxChars] not found, attempting with unaugmented key: CamelLogDebugBodyMaxChars
{noformat}

But here's what ACTUALLY happens when Blueprint properties resolver and parser are used: (the defaults)

{noformat}
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | PropertiesComponent              | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Parsed location: blueprint:example-bpp-fallback-property-placeholder
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | BlueprintPropertiesParser        | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Augmenting property key [CamelLogDebugBodyMaxChars] with prefix: LOCAL.
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | BlueprintPropertiesParser        | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Blueprint parsed property key: LOCAL.CamelLogDebugBodyMaxChars as value: null
2016-06-09 10:42:37,665 | ERROR | rint Extender: 2 | BlueprintCamelContext            | ?                                   ? | 204 - org.apache.camel.camel-blueprint - 2.15.1.redhat-620133
 | Error occurred during starting Camel: CamelContext(example-bpp-fallback) ... because of Error getting property: CamelLogDebugBodyMaxChars
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1028)[198:org.apache.camel.camel-core:2.15.1.r
edhat-620133]
...
Caused by: java.lang.IllegalArgumentException: Property placeholder key: LOCAL.CamelLogDebugBodyMaxChars not found
        at org.apache.camel.blueprint.BlueprintPropertiesParser.parseProperty(BlueprintPropertiesParser.java:164)[204:org.apach
e.camel.camel-blueprint:2.15.1.redhat-620133]
{noformat}
;;;","09/Jun/16 16:23;MattZ;Here is an example Camel context and properties file that demonstrate the problem and one possible workaround.

Also attached is a patch (but it is *UNTESTED* at the moment).
;;;","14/Jun/16 21:18;MattZ;This appears to be the commit where the bug was introduced:
https://github.com/apache/camel/commit/07841d5be1175be1e9f383497588ff4e29e3008e

The thrown IllegalArgumentException was added in this commit, but I'm not sure why - it fundamentally changes (breaks) the behavior but is not directly relevant (as far as I can tell) to the stated fix in the commit message.

Is there some reason why Blueprint should explicitly *not* support falling back to unaugmented properties when the placeholder property services do not find an augmented key?;;;","15/Jun/16 15:35;MattZ;Disregard the patch - it will not work. After looking into this further, and trying a number of workarounds, it is apparent that BlueprintPropertiesParser is simply not capable of handling augmented properties properly. The choice appears to be either (a) use Blueprint property placeholder and not augmented properties or (b) use augmented properties and not Blueprint property placeholder. Unfortunately this is a significant blocker for me.

I am still trying other workarounds, but at the very least the Camel documentation should be updated as it is very misleading. The documentation for fallbackToUnaugmentedProperty makes no mention of this behavior being impossible with a bridged Blueprint property placeholder, nor does camel-blueprint javadoc.;;;","26/Jun/16 09:40;davsclaus;You are welcome to update the documentation. See here how to edit
http://camel.apache.org/how-do-i-edit-the-website.html;;;","26/Jun/16 23:29;MattZ;Thanks, I'll look into this.;;;","13/Jul/16 22:33;githubbot;GitHub user mzipay opened a pull request:

    https://github.com/apache/camel/pull/1075

    CAMEL-10038 don't throw exception if BlueprintPropertiesParser#parseP…

    …roperty would return null (breaks fallbackToUnaugmentedProperty behavior, and an exception will be thrown anyway by the parent DefaultPropertiesParser if the value is still null after fallback)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mzipay/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1075.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1075
    
----
commit affda62f8654a2862650cdf5142371ebb4649703
Author: Zipay, Matthew <mzipay@contractor.express.com>
Date:   2016-07-13T21:51:15Z

    CAMEL-10038 don't throw exception if BlueprintPropertiesParser#parseProperty would return null (breaks fallbackToUnaugmentedProperty behavior, and an exception will be thrown anyway by the parent DefaultPropertiesParser if the value is still null after fallback)

----
;;;","13/Jul/16 22:38;MattZ;It does seem after all that the fix is as simple as I thought initially (simpler, actually) - just removing the thrown IllegalArgumentException from BlueprintPropertiesParser#parseProperty does the trick.

I have been running locally with a binary-patched camel-blueprint JAR containing this change, and the issue is completely resolved.

(Not sure why the throw was ever added in the first place, as the parent DefaultPropertiesParser already throws IllegalArgumentException if the property doesn't evaluate.)

I opened https://github.com/apache/camel/pull/1075 for this change, but attaching the patch here as well.;;;","15/Jul/16 06:46;davsclaus;Thanks for the PR but it causes a test to fail now in camel-test-blueprint. Also it would be good if you could do an unit test that validates your use-case.

Tests run: 3, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 4.318 sec <<< FAILURE! - in org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest
test(org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest)  Time elapsed: 2.687 sec  <<< FAILURE!
java.lang.AssertionError:

Expected: ""Property placeholder key: destination not found""
     but: was ""Property with key [destination] not found in properties from text: {{destination}}""
	at org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest.setUp(ConfigAdminNoDefaultValuesBlueprintCreationTest.java:34)

test(org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest)  Time elapsed: 0.766 sec  <<< FAILURE!

;;;","15/Jul/16 06:49;ggrzybek;Sorry for not looking at this issue yet... I'll try next week.;;;","15/Jul/16 06:49;ggrzybek;Sorry for not looking at this issue yet... I'll try next week.;;;","15/Jul/16 17:44;MattZ;Ah yes, that makes sense - the exception message (when the property can't be evaluated even with fallback) is now coming from DefaultPropertiesParser rather than from BlueprintPropertiesParser. I'm working on a unit test, but haven't been able to get it into a working state yet (I opened pull request regardless because there isn't even any *existing* test case for BlueprintPropertiesParser to begin with).;;;","15/Jul/16 17:50;MattZ;No worries; I have an acceptable workaround at the moment. Please take your time.

For my particular case, getting the fix merged into master doesn't even really help immediately (we are using camel-blueprint-2.15.1.redhat-620133.jar). But I wanted to make sure to get the fix in first, then go from there.
;;;","19/Jul/16 19:43;MattZ;I updated the pull request with a change that fixes the existing ConfigAdminNoDefaultValuesBlueprintCreationTest test case. Still working on a new test case to specifically exercise the fallback behavior for BlueprintPropertiesParser.;;;","20/Jul/16 16:02;MattZ;[~davsclaus] and [~ggrzybek], the pull request now includes a unit test for the fallbackToUnaugmentedProperty relative to BlueprintPropertiesParser.

Both org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest and the new org.apache.camel.test.blueprint.BlueprintAugmentedPropertiesFallbackTest test cases are now passing on 2.18-SNAPSHOT.;;;","21/Jul/16 07:16;ggrzybek;[~MattZ] thanks for PR. I've finally checked it and it looks good. You're right with the exception - it's not needed and the broken test was just checking wrong exception message (bad, bad idea to literally assert exception messages ;)).

Commit fix in {{master}}: https://github.com/apache/camel/commit/5127a6598582cb370dd46de6c510d0762695daaa (and later commits for tests)
Commit fix in {{camel-2.17.x}}: https://github.com/apache/camel/commit/2ffd8e0d83aa3a79c43cb73186fc7fa1ed07ca0a (and later commits for tests)

I've added yet another test to check scenario with {{fallbackToUnaugmentedProperty=""false""}}: https://github.com/apache/camel/commit/e13c890faf48fd11c3e5f716395edee16457d0fc;;;","21/Jul/16 13:10;MattZ;Thanks, much appreciated!;;;","25/Jul/16 15:27;githubbot;Github user mzipay closed the pull request at:

    https://github.com/apache/camel/pull/1075
;;;",,,,,,,,,,,,,,
Spring-boot health check causes application startup failure,CAMEL-10034,12977143,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,nferraro,nferraro,09/Jun/16 08:50,15/Jun/16 12:58,14/Jul/23 05:50,09/Jun/16 09:10,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-spring-boot,,,,,,,0,,,,,,"After the introducion of the health check in CAMEL-10026, I get the attached exception on a sample application that depends on spring-boot-starter and camel-spring-boot-starter.

The problem seems to be related to the following dependency on the camel-spring-boot module:
{noformat}
<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-actuator</artifactId>
      <optional>true</optional>
      <version>${spring-boot-version}</version>
</dependency>
{noformat}

The dependency is declared as *optional*, but the HealthCheck component inherits from org.springframework.boot.actuate.health.AbstractHealthIndicator.

A project importing the camel-spring-boot module does not import transitively the actuator module, so I get the exception.

If the application does not start, the dependency cannot be *optional*.

Excaption:
{noformat}
java.lang.IllegalStateException: Could not evaluate condition on org.apache.camel.spring.boot.health.CamelHealthAutoConfiguration#camelHealthIndicator due to org/springframework/boot/actuate/health/AbstractHealthIndicator not found. Make sure your own configuration does not rely on that class. This can also happen if you are @ComponentScanning a springframework package (e.g. if you put a @ComponentScan in the default package by mistake)
	at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:55) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:178) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:116) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:333) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:98) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:678) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:520) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.apache.camel.itest.springboot.ITestBoot.main(ITestBoot.java:29) [test.jar!/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:54) [test.jar!/:na]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.lang.NoClassDefFoundError: org/springframework/boot/actuate/health/AbstractHealthIndicator
	at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.8.0_91]
	at java.lang.ClassLoader.defineClass(ClassLoader.java:763) ~[na:1.8.0_91]
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) ~[na:1.8.0_91]
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) ~[na:1.8.0_91]
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73) ~[na:1.8.0_91]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:368) ~[na:1.8.0_91]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:362) ~[na:1.8.0_91]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_91]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:361) ~[na:1.8.0_91]
	at org.springframework.boot.loader.LaunchedURLClassLoader.doLoadClass(LaunchedURLClassLoader.java:170) ~[test.jar!/:na]
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:142) ~[test.jar!/:na]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_91]
	at org.springframework.core.type.classreading.AnnotationReadingVisitorUtils.convertClassValues(AnnotationReadingVisitorUtils.java:73) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getAnnotationAttributes(MethodMetadataReadingVisitor.java:125) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getAnnotationAttributes(MethodMetadataReadingVisitor.java:118) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.core.type.classreading.MethodMetadataReadingVisitor.getAnnotationAttributes(MethodMetadataReadingVisitor.java:45) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.boot.autoconfigure.condition.OnBeanCondition$BeanSearchSpec.<init>(OnBeanCondition.java:274) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:111) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	... 22 common frames omitted
Caused by: java.lang.ClassNotFoundException: org.springframework.boot.actuate.health.AbstractHealthIndicator
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_91]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_91]
	at org.springframework.boot.loader.LaunchedURLClassLoader.doLoadClass(LaunchedURLClassLoader.java:178) ~[test.jar!/:na]
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:142) ~[test.jar!/:na]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_91]
	... 41 common frames omitted
{noformat}",,davsclaus,githubbot,nferraro,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 15 12:58:55 UTC 2016,,,,,,,,,,,"0|i2z7if:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jun/16 09:10;davsclaus;Thanks for reporting.;;;","09/Jun/16 09:32;nferraro;Great, it works!;;;","15/Jun/16 08:11;githubbot;GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1034

    CAMEL-10034: prevent component scan of health indicator

    The CamelHealthIndicator should not be marked as @Component, because it would be initialized also by the component scanner if it is enabled on the package.
    
    Putting spring-boot base package on 'org.apache.camel' causes issues if the actuator lib is not present in the classpath.
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10034

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1034.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1034
    
----
commit f46c45997ae98c56da22bd48c7bbff16b6dbd0c0
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-06-15T08:08:02Z

    CAMEL-10034: prevent component scan of health indicator

----
;;;","15/Jun/16 12:58;githubbot;Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1034
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-avro - Cannot install in karaf,CAMEL-10033,12977117,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,davsclaus,davsclaus,09/Jun/16 06:56,09/Jun/16 08:05,14/Jul/23 05:50,09/Jun/16 08:05,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-avro,karaf,,,,,,0,,,,,,It hangs during installation in karaf,,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 09 08:05:14 UTC 2016,,,,,,,,,,,"0|i2z7cn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jun/16 08:05;acosentino;We were missing jetty6-bundle-version property in parent POM and camel-avro is using it in its Karaf feature definition.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-braintree - Cannot install in Karaf,CAMEL-10032,12977115,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,davsclaus,davsclaus,09/Jun/16 06:46,09/Jun/16 13:26,14/Jul/23 05:50,09/Jun/16 13:26,2.18.0,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-braintree,karaf,,,,,,0,,,,,,"karaf@root()> feature:install camel-braintree
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-braintree; type=karaf.feature; version=""[2.18.0.SNAPSHOT,2.18.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-braintree)(type=karaf.feature)(version>=2.18.0.SNAPSHOT)(version<=2.18.0.SNAPSHOT))"" [caused by: Unable to resolve camel-braintree/2.18.0.SNAPSHOT: missing requirement [camel-braintree/2.18.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-braintree; type=osgi.bundle; version=""[2.18.0.SNAPSHOT,2.18.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-braintree/2.18.0.SNAPSHOT: missing requirement [org.apache.camel.camel-braintree/2.18.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.slf4j.bridge)(version>=1.6.0)(!(version>=2.0.0)))"" [caused by: Unable to resolve jul.to.slf4j/1.7.21: missing requirement [jul.to.slf4j/1.7.21] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.slf4j)(version>=1.7.21))""]]]",,davsclaus,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 09 08:51:03 UTC 2016,,,,,,,,,,,"0|i2z7c7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jun/16 06:52;davsclaus;Its because of CAMEL-9776;;;","09/Jun/16 07:27;lb;[~davsclaus] souldn't slf4j-version in camel aligned with the slf4j version pax-logging supports ? higher now seems 1.7.13;;;","09/Jun/16 08:47;davsclaus;Its jul-to-slf4j itself that has a very specific import range

{code}
Export-Package: org.slf4j.bridge;version=1.7.21;uses:=""org.slf4j,org.s
 lf4j.spi""
Import-Package: org.slf4j;version=1.7.21,org.slf4j.spi;version=1.7.21
{code}

;;;","09/Jun/16 08:48;davsclaus;Ideally it should be [1.7,2) or [1.7,1.8).

But its the usual OSGi troubles where 3rd party dont generate good osgi manifests. ;;;","09/Jun/16 08:50;davsclaus;Since you hardcode the slf4j bridge in camel-braintree, you could try to shade it so it wont have OSGi trouble. Or remove it.;;;","09/Jun/16 08:51;lb;Yes I know but I do not think we can get the OSGI manfiest to be changed, I'll see if I can get rid of jul-to-slf4j ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in Mina2Producer/Mina2Consumer when closing connections with disconnect=true,CAMEL-10024,12976333,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,anoordover,niels@harremoes.dk,niels@harremoes.dk,07/Jun/16 07:39,27/Jan/17 14:45,14/Jul/23 05:50,23/Jun/16 20:47,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-mina2,,,,,,,0,,,,,,"There is a race condition in the Mina2Producer when trying to close connections after use by setting disconnect=true or
setting CamelMina2CloseSessionWhenComplete=true. 
Connections will not be fully closed in the method maybeDisconnectOnDone. 
The call to session.close(true) returns a CloseFuture - one must await this to ensure the session is really closed.

In the current implementation, there is no await on the CloseFuture. This means that the producer will be returned to the pool before the session is closed. If the next call comes right after, it is very likely that it will get the same producer and that the session will suddenly be closed while in use, leading to errors like 

ExchangeTimedOutException: The OUT message was not received within 30000 ms

or 

java.lang.IllegalStateException: handler cannot be set while the service is active.

The fix is trivial - just change line 221 in Mina2Producer.java from
{code:java}
session.close(true);
{code} 
to 
{code:java}
long timeout = getEndpoint().getConfiguration().getTimeout();          
CloseFuture closeFuture = session.close(true);  
closeFuture.awaitUninterruptibly(timeout, TimeUnit.MILLISECONDS);
{code}

But the unit testing might be more complex.
There might be a similar issue in Mina2Consumer - but I could not provoke it as easily.

Here is a small program demonstrating the problem - on my system it will fail within the first 50 iterations. When looking at the debug log, it is clear that the connections are closed too late - after the next iteration has started.
{code:java}

import org.apache.camel.*;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.slf4j.*;

/**
 * Demonstrating race condition
 */
public class Main {
    public static void main(String[] args) throws Exception {

        System.setProperty(""org.slf4j.simpleLogger.log.org.apache.camel.component.mina2.Mina2Producer"", ""trace"");
        System.setProperty(""org.slf4j.simpleLogger.log.org.apache.mina.filter.logging.LoggingFilter"", ""trace"");
        
        Logger logger = LoggerFactory.getLogger(Main.class);
        CamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""mina2:tcp://localhost:20000?sync=true"").setBody(simple(""Hello ${in.body}""));
            }
        });

        ProducerTemplate producerTemplate = context.createProducerTemplate();
        context.start();
        try {
            for (int i = 0; i < 10000; i++) {
                logger.info(""---- Call # "" + i);
                String result = (String) producerTemplate.requestBody(""mina2:tcp://localhost:20000?disconnect=true&timeout=1000&sync=true&minaLogger=true"", ""world "" + i);
                logger.info(""---- End call # "" + i + "": "" + result);
            }
        } finally {
            context.stop();
        }
    }
}
{code}

",Tested on Windows using Java 1.8.0_91,acosentino,anoordover,davsclaus,githubbot,niels@harremoes.dk,vandenbrink@zorgdomein.nl,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-10756,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 18 18:22:50 UTC 2016,,,,,,,,,,,"0|i2z2in:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Jun/16 08:06;acosentino;Contributions are more than welcome:
http://camel.apache.org/contributing.html

:-);;;","07/Jun/16 11:15;acosentino;Since this issue is labeled with ""novice"", I removed myself from assignee. I hope someone else would like to give help here :-);;;","07/Jun/16 19:01;niels@harremoes.dk;On further analysis, this is not trivial. :-(

I have written the following unit test to demonstrate the issue. Even with the fix I suggested, I still get this error:
{code}
java.lang.IllegalStateException: handler cannot be set while the service is active.
	at org.apache.mina.core.service.AbstractIoService.setHandler(AbstractIoService.java:357)
	at org.apache.camel.component.mina2.Mina2Producer.openConnection(Mina2Producer.java:267)
	at org.apache.camel.component.mina2.Mina2Producer.doProcess(Mina2Producer.java:125)
	at org.apache.camel.component.mina2.Mina2Producer.process(Mina2Producer.java:112)
	at org.apache.camel.component.mina2.Mina2DisconnectTest.testCloseSessionWhenCompleteManyTimes(Mina2DisconnectTest.java:56)
{code}

Here is the test:

{code}
public class Mina2DisconnectRaceConditionTest extends BaseMina2Test {

    /**
     * This is a test for issue CAMEL-10024 - the closing must complete before we return from the producer
     * @throws Exception
     */
    @Test
    public void testCloseSessionWhenCompleteManyTimes() throws Exception {
        final String endpointUri = String.format(""mina2:tcp://localhost:%1$s?sync=true&textline=true&disconnect=true&minaLogger=true"", getPort());
        Mina2Producer producer = (Mina2Producer) context.getEndpoint(endpointUri).createProducer();
        // Access session to check that the session is really closed
        Field field = producer.getClass().getDeclaredField(""session"");
        field.setAccessible(true);

        for(int i = 0; i < 1000; i++) {
            System.out.println(i);
            Exchange e = new DefaultExchange(context,ExchangePattern.InOut);
            e.getIn().setBody(""Chad"");
            producer.process(e);
            final IoSession ioSession = (IoSession) field.get(producer);
            assertTrue(ioSession.getCloseFuture().isDone());
            Object out = e.getOut().getBody();
            assertEquals(""Bye Chad"", out);
        }
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            public void configure() throws Exception {
                from(String.format(""mina2:tcp://localhost:%1$s?sync=true&textline=true&disconnect=true"", getPort())).process(new Processor() {

                    public void process(Exchange exchange) throws Exception {
                        String body = exchange.getIn().getBody(String.class);
                        exchange.getOut().setBody(""Bye "" + body);
                    }
                });
            }
        };
    }
}
{code};;;","08/Jun/16 07:33;niels@harremoes.dk;Oops - it isn't novice level after all. It's ust me who is a novice with mina2;;;","12/Jun/16 09:26;vandenbrink@zorgdomein.nl;I'm wondering, why is the handler being set for every new connection. Why not set it just once in the constructor?

Edit:
Just tried it myself. If I move the setHandler call to the constructor (line 96) and apply your fix for the CloseFuture I no longer get any ExchangeTimedOutExceptions or IllegalStateExceptions when I run the unit test you provided. 

I do sometimes get these: org.apache.camel.CamelExchangeException: Cannot write body: java.lang.String using session: (0x0000006D: nio socket, client, 0.0.0.0/0.0.0.0:59297 => null). Exchange[]
  at org.apache.camel.component.mina2.Mina2Helper.writeBody(Mina2Helper.java:58);;;","12/Jun/16 20:39;anoordover;The last exception comes from a 10 seconds time-out when writing the body.;;;","13/Jun/16 06:56;niels@harremoes.dk;It would be nice to fix that one too, since we see it in production as well. Do you have any idea why this would happen? ;;;","13/Jun/16 07:16;anoordover;No I don't know yet.
But when doing a multithreaded test I recieve the wrong response in a
thread when doing sync communication.

Things that need to be checked:
I guess a camel processor can be shared.
I guess a mina session should not be shared but fetched inside the process
method.

Are my guesses correct?
Op 13 jun. 2016 8:57 a.m. schreef ""Niels Ull Harremoes (JIRA)"" <

;;;","13/Jun/16 07:25;niels@harremoes.dk;If we do this, would it be an idea to let the handler be a final member variable? 
So we would not call 
  ResponseHandler handler = (ResponseHandler) session.getHandler();
in doProcess, but just access the member directly?


;;;","13/Jun/16 07:30;niels@harremoes.dk;I am pretty sure producers are NOT meant to be shared - in a multithreaded test, you should call createProducer in each thread. Did you do this?

The context maintains a ProducerCache.
;;;","13/Jun/16 08:13;acosentino;A camel processor can be shared among different threads.

http://stackoverflow.com/questions/19869761/getting-lock-on-camel-processor

Multiple threads can reuse the same instance during routing messages in Camel.;;;","13/Jun/16 08:35;niels@harremoes.dk;Thanks for clearing this up. I guess this shoots a hole in the ""create the handler in the constructor"" proposal :-(;;;","13/Jun/16 08:38;acosentino;Maybe we need to involve [~davsclaus] in this discussion :-);;;","13/Jun/16 11:28;anoordover;It seems that producers with isSingleton = false are being constructed once per thread.;;;","13/Jun/16 13:09;anoordover;I think I see two things:
- You shouldn't close a consumer (after investigating the methods being called in the ReceiveHandler by adding loggers);
- The call to sessionClosed when closing the producer sometimes seems to be delayed (a CountDownLatch for waiting for the call of this method seems to be needed).;;;","17/Jun/16 14:48;githubbot;GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1043

    CAMEL-10024: sync on close and deprecation

    Synchronizing on close method in handler

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-10024

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1043.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1043
    
----
commit fe41b1bb9ac743214a6f6baba393a251e55037fc
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-06-17T14:47:14Z

    CAMEL-10024: sync on close and deprecation

----
;;;","18/Jun/16 08:11;anoordover;Can someone review the PR? I don't want make a mess of it.;;;","18/Jun/16 12:27;vandenbrink@zorgdomein.nl;Well, I'm not a camel expert, but I added a few comments anyway :-P;;;","22/Jun/16 12:35;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1043
;;;","24/Jun/16 06:08;vandenbrink@zorgdomein.nl;Nice!
Will this fix also be merged to 2.17.x ? I would love to have this in the next release.;;;","25/Jun/16 05:52;davsclaus;Arno, remember to put the fix versions when resolving a JIRA ticket;;;","17/Jul/16 16:15;vandenbrink@zorgdomein.nl;Ok, so I've been testing this fix in our production environment and things have improved quite a bit (no more IllegalStateExceptions).
There is however still a scenario in which an unexpected ExchangeTimedOutException is thrown: that is when the TCP connection is closed remotely. It's easily reproducible with the Mina2DisconnectRaceConditionTest, just add ""&disconnect=true"" to the uri of the mina consumer.

I think it's because in this case the session is already closing before the producer has a chance to actively close it (and wait for that to be done). 

Any ideas on how to fix this?;;;","18/Jul/16 08:42;anoordover;I don't know whether the consumer should close the connection. Can you check open ports during the test without the disconnect on the consumer. I am on vacation so... ;;;","18/Jul/16 08:53;vandenbrink@zorgdomein.nl;But in the real world that's out of my control. A server can close the connection after sending a response.;;;","18/Jul/16 18:22;anoordover;I added some logging during my development. I noticed strange behavior when doing a disconnect on the consumer side. Disconnects seemed very sparse. I mean that not every message seemed to trigger a disconnect. Sometimes it seemed that the producer used a channel that got disconnected during transmission. The consumer seemed to do this.
Gijsbert, can you try to get more information from the Mina developers asking about why, when and how to use disconnect? ;;;",,,,,,,
Fix syntax for ironmq component,CAMEL-10017,12975455,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,aurelien.pupier,aurelien.pupier,03/Jun/16 11:28,03/Jun/16 13:17,14/Jul/23 05:50,03/Jun/16 13:14,2.17.0,2.17.1,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-ironmq,,,,,,,0,,,,,,replace ironmq:queue by ironmq:queueName,,aurelien.pupier,githubbot,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 03 13:17:09 UTC 2016,,,,,,,,,,,"0|i2yxuf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jun/16 11:54;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1012

    CAMEL-10017: Fix Ironmq Syntax

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-10017-FixIronmqSyntax

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1012.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1012
    
----
commit 2932ad471d9ef215a8dfe91291964b25b2915310
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-06-03T11:53:43Z

    CAMEL-10017: Fix Ironmq Syntax

----
;;;","03/Jun/16 13:17;githubbot;Github user apupier closed the pull request at:

    https://github.com/apache/camel/pull/1012
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for crypto component,CAMEL-10016,12975454,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,aurelien.pupier,aurelien.pupier,03/Jun/16 11:27,08/Jun/16 13:06,14/Jul/23 05:50,08/Jun/16 13:06,2.17.0,2.17.1,,,,,,,,,,,,,2.16.4,2.17.2,2.18.0,, camel-crypto,,,,,,,0,,,,,,replace crypto:cryptoOperation:name by crypto:cryptoOperation,,aurelien.pupier,githubbot,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 08 13:03:53 UTC 2016,,,,,,,,,,,"0|i2yxu7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jun/16 11:47;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1010

    CAMEL-10016: Fix Crypto Syntax

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-10016-FixCryptoSyntax

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1010.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1010
    
----
commit deb8c094fdefcc4a74c6e2c90c8456fd7bb5bb0e
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-06-03T11:46:43Z

    CAMEL-10016: Fix Crypto Syntax

----
;;;","08/Jun/16 13:03;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1010
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for braintree component,CAMEL-10015,12975453,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,aurelien.pupier,aurelien.pupier,03/Jun/16 11:26,03/Jun/16 13:16,14/Jul/23 05:50,03/Jun/16 13:15,2.17.0,2.17.1,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-braintree,,,,,,,0,,,,,,replace braintree:name by braintree:apiName/methodName,,aurelien.pupier,githubbot,,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 03 13:16:54 UTC 2016,,,,,,,,,,,"0|i2yxtz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jun/16 11:50;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1011

    CAMEL-10015: Fix Braintree Syntax

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-10015-FixBraintreeSyntax

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1011.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1011
    
----
commit 24704ac142d227e1ad32f7bd38e26bcf99438030
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-06-03T11:49:32Z

    CAMEL-10015: Fix Braintree Syntax

----
;;;","03/Jun/16 13:16;githubbot;Github user apupier closed the pull request at:

    https://github.com/apache/camel/pull/1011
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix syntax for kubernetes component,CAMEL-10014,12975452,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,aurelien.pupier,aurelien.pupier,03/Jun/16 11:25,03/Jun/16 13:15,14/Jul/23 05:50,03/Jun/16 13:15,2.17.0,2.17.1,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-kubernetes,,,,,,,0,,,,,,replace kubernetes:master by kubernetes:masterUrl,,acosentino,aurelien.pupier,githubbot,,,,,,,,,,,,,,,,,,,,,CAMEL-10013,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 03 13:12:59 UTC 2016,,,,,,,,,,,"0|i2yxtr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jun/16 11:42;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1009

    CAMEL-10014: Fix Kubernetes Syntax

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-10014-FixKubernetesSyntax

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1009.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1009
    
----
commit a309994fc1f1fc07102181365350283ea4a6be6b
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-06-03T11:39:09Z

    CAMEL-10014: Fix Kubernetes Syntax

----
;;;","03/Jun/16 11:44;acosentino;Oh nice! :-) You were faster than me :-)
;;;","03/Jun/16 11:57;aurelien.pupier;[~ancosen] Yeah, i'm am the faster!! ^^
I pushed PR for the 4 components with the same kind of issue.

I don't know how to write a test easily to avoid that this kind of errors occurs again. I linked this jira tasks to implement it [CAMEL-10013];;;","03/Jun/16 12:09;acosentino;Yeah, already merged. 

Need some time because I'm unable to push to https://git1-us-west.apache.org/repos/asf/camel.git actually, it seems to be an outage. ;;;","03/Jun/16 13:12;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1009
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a Path Home option in camel-elasticsearch configuration,CAMEL-10012,12975402,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,03/Jun/16 07:30,03/Jun/16 07:52,14/Jul/23 05:50,03/Jun/16 07:52,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-elasticsearch,,,,,,,0,,,,,,"Otherwise we get errors.

https://github.com/elastic/elasticsearch/blob/v2.2.0/core/src/main/java/org/elasticsearch/env/Environment.java#L101

https://github.com/elastic/elasticsearch/blob/v2.3.3/core/src/main/java/org/elasticsearch/env/Environment.java#L101",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-06-03 07:30:31.0,,,,,,,,,,,"0|i2yxin:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Overlap in management name for multiple contexts in OSGi bundle,CAMEL-10011,12975182,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,02/Jun/16 14:45,02/Jun/16 15:02,14/Jul/23 05:50,02/Jun/16 15:02,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,,,,,,,,0,,,,,,Problem is that OsgiManagementNameStrategy uses only the bundle symbolic name for the management name used for each CamelContext. So if you have multiple CamelContexts per bundle this creates overlap in the naming. ,,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-06-02 14:45:35.0,,,,,,,,,,,"0|i2yw5r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using <to> with id and ref fails,CAMEL-10009,12975100,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Jun/16 09:06,03/Jun/16 08:47,14/Jul/23 05:50,03/Jun/16 08:47,2.17.1,,,,,,,,,,,,,,2.16.4,2.17.2,2.18.0,,camel-core,camel-spring,,,,,,0,,,,,,"If you use spring and then refer to an endpoint

{code}
        <endpoint id=""csv2json"" uri=""dozer:csv2json?sourceModel=org.acme.Customer&amp;targetModel=org.globex.Account&amp;marshalId=json&amp;unmarshalId=csv&amp;mappingFile=transformation.xml""/>
{code}

And then in a route has
{code}
                <to id=""_to2"" ref=""csv2json""/>
{code}

Then you get this spring error
{code}
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'ref' of bean class [org.apache.camel.spring.CamelEndpointFactoryBean]: Bean property 'ref' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 02 09:09:59 UTC 2016,,,,,,,,,,,"0|i2yvnj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Jun/16 09:09;davsclaus;If you use
{code}
  <to ref=""csv2json""/>
{code}

then it works;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring Karaf feature is incompatible with camel-jms,CAMEL-10008,12974854,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,01/Jun/16 16:36,24/Feb/17 13:37,14/Jul/23 05:50,24/Feb/17 13:37,2.17.1,,,,,,,,,,,,,,2.19.0,,,,camel-jms,camel-spring,karaf,,,,,0,,,,,,"*camel-jms requires spring [4.1,5):*

{code}
karaf@root()> feature:info camel-jms
Feature camel-jms 2.17.1
Feature has no configuration
Feature has no configuration files
Feature depends on:
  camel-core 2.17.1
  spring [4.1,5)
  spring-jms [4.1,5)
Feature contains followed bundles:
  mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
  mvn:commons-pool/commons-pool/1.6
  mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/1.1.1
  mvn:org.apache.camel/camel-jms/2.17.1
Feature has no conditionals.
{code}

*camel-spring requires spring [3.2,4):* (because spring-dm no longer works with 4.x and above)

{code}
karaf@root()> feature:info camel-spring
Feature camel-spring 2.17.1
Feature has no configuration
Feature has no configuration files
Feature depends on:
  spring [3.2,4)
  spring-dm [1.2,2)
  spring-tx [3.2,4)
  camel-core 2.17.1
Feature contains followed bundles:
  mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
  mvn:org.apache.camel/camel-spring/2.17.1
Feature has no conditionals.
{code}

Installing both Camel features leads to several versions of Spring getting installed in the container.",,davsclaus,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 24 13:37:26 UTC 2017,,,,,,,,,,,"0|i2yu4v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jun/16 08:04;davsclaus;This is expected as different features may use different versions of Spring.

In Camel 2.18 we have a camel-spring-dm module for users that want to use Spring-DM that uses Spring 3.2.x.
And the camel-spring no longer include spring-dm so it is using Spring 4.x.;;;","03/Jun/16 08:33;raulvk;[~davsclaus] – the problem is not camel-spring, but camel-jms which depends on spring [4.1,5). Thus dragging in the 4.x dependency and not coexisting with 3.x.
Also, the import version ranges of camel-jms are [4,5), so it's not just a feature issue.;;;","24/Feb/17 13:37;davsclaus;karaf@root()> la | grep -i spring
65 | Active   |  30 | 4.2.8.RELEASE_1 | Apache ServiceMix :: Bundles :: spring-aop
66 | Active   |  30 | 4.2.8.RELEASE_1 | Apache ServiceMix :: Bundles :: spring-beans
67 | Active   |  30 | 4.2.8.RELEASE_1 | Apache ServiceMix :: Bundles :: spring-context
68 | Active   |  30 | 4.2.8.RELEASE_1 | Apache ServiceMix :: Bundles :: spring-context-support
69 | Active   |  30 | 4.2.8.RELEASE_1 | Apache ServiceMix :: Bundles :: spring-core
70 | Active   |  30 | 4.2.8.RELEASE_1 | Apache ServiceMix :: Bundles :: spring-expression
71 | Active   |  30 | 4.2.8.RELEASE_1 | Apache ServiceMix :: Bundles :: spring-jms
72 | Active   |  30 | 4.2.8.RELEASE_1 | Apache ServiceMix :: Bundles :: spring-tx
73 | Active   |  50 | 2.19.0.SNAPSHOT | camel-spring
karaf@root()> la | grep -i camel
52 | Active   |  50 | 2.19.0.SNAPSHOT | camel-blueprint
53 | Active   |  50 | 2.19.0.SNAPSHOT | camel-catalog
54 | Active   |  50 | 2.19.0.SNAPSHOT | camel-commands-core
55 | Active   |  50 | 2.19.0.SNAPSHOT | camel-core
56 | Active   |  80 | 2.19.0.SNAPSHOT | camel-karaf-commands
60 | Active   |  50 | 2.19.0.SNAPSHOT | camel-jms
73 | Active   |  50 | 2.19.0.SNAPSHOT | camel-spring;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HDFS2 - ClassNotFoundException - org.apache.htrace.SamplerBuilder,CAMEL-10005,12974460,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,01/Jun/16 06:37,01/Jun/16 07:23,14/Jul/23 05:50,01/Jun/16 07:23,,,,,,,,,,,,,,,2.17.2,2.18.0,,,,,,,,,,0,,,,,,"When running in Karaf, the following exception may be thrown:

{code}
Caused by: java.lang.NoClassDefFoundError: org/apache/htrace/SamplerBuilder
	at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:635)
	at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:619)
	at org.apache.hadoop.hdfs.DistributedFileSystem.initialize(DistributedFileSystem.java:149)
	at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2653)
	at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:92)
	at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2687)
	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2669)
	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:371)
	at org.apache.camel.component.hdfs2.HdfsOsgiHelper.<init>(HdfsOsgiHelper.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.8.0_91]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)[:1.8.0_91]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.8.0_91]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)[:1.8.0_91]
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:148)[197:org.apache.servicemix.bundles.spring-beans:3.2.16.RELEASE_1]
	... 18 more
{code}

this is because camel-hdfs2 features lacks org.apache.htrace/htrace-core/3.1.0-incubating",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-06-01 06:37:13.0,,,,,,,,,,,"0|i2ys2f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in Failover Loadbalancer,CAMEL-9994,12973037,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,LeeK,LeeK,26/May/16 11:45,23/Aug/16 14:32,14/Jul/23 05:50,29/May/16 09:39,2.15.3,2.16.1,2.17.1,,,,,,,,,,,,2.17.2,2.18.0,,,camel-core,,,,,,,0,failover,jms,loadbalancer,,,"Calling the route below with 2 threads simultaneously, when the messages timeout, I get a deadlock. The issue seems to be with  CorrelationTimeoutMap.onEviction() where a thread is trying to acquire a lock while holding another lock (another thread tries to do the same).

I have created a simple project to demonstrate the issue: 
https://github.com/leechinkong/CamelFailoverLoadbalancer

from(""direct:test"")
        .loadBalance()
        .failover(3, true, true)
        .inOut(""jms:testRqQueue1?replyTo=testRsQueue1&useMessageIDAsCorrelationID=true"",""jms:testRqQueue2?replyTo=testRsQueue2&useMessageIDAsCorrelationID=true"");

Thread dump: 

""Camel (camel-1) thread #0 - JmsReplyManagerTimeoutChecker[testRsQueue1]"":
    at sun.misc.Unsafe.park(Native Method)
    - parking to wait for  <0x00000007aca28f60> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:867)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1197)
    at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:214)
    at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:290)
    at org.apache.camel.support.DefaultTimeoutMap.putIfAbsent(DefaultTimeoutMap.java:116)
    at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.putIfAbsent(CorrelationTimeoutMap.java:108)
    at org.apache.camel.component.jms.reply.ReplyManagerSupport.registerReply(ReplyManagerSupport.java:105)
    at org.apache.camel.component.jms.JmsProducer$1.createMessage(JmsProducer.java:227)
    at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:282)
    at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:225)
    at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$1.doInJms(JmsConfiguration.java:239)
    at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:493)
    at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:236)
    at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:409)
    at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:239)
    at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:150)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:91)
    at org.apache.camel.builder.NoErrorHandlerBuilder$1.process(NoErrorHandlerBuilder.java:40)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
    at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
    at org.apache.camel.processor.FatalFallbackErrorHandler.process(FatalFallbackErrorHandler.java:49)
    at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:896)
    at org.apache.camel.processor.RedeliveryErrorHandler.processAsyncErrorHandler(RedeliveryErrorHandler.java:561)
    at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:466)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:86)
    at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:139)
    at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:250)
    at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:145)
    at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:250)
    at org.apache.camel.builder.NoErrorHandlerBuilder$1$1.done(NoErrorHandlerBuilder.java:44)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:86)
    at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:139)
    at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:179)
    at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onTimeout(TemporaryQueueReplyHandler.java:61)
    at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:54)
    at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:30)
    at org.apache.camel.support.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:230)
    at org.apache.camel.support.DefaultTimeoutMap.run(DefaultTimeoutMap.java:180)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)

Found 1 deadlock.","Mac OSX + ActiveMQ, Solaris + MQ",davsclaus,laurent149,LeeK,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6439,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 23 14:32:54 UTC 2016,,,,,,,,,,,"0|i2yjaf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/May/16 08:06;davsclaus;Thanks for the sample project I was able to reproduce it here also with latest Camel version.;;;","30/May/16 13:45;LeeK;Thanks for fixing it so quick. I have tested on the fix on my application - all good.

Would it be possible to patch the existing release? i.e. 2.17.1
If not, do you have a rough release date for 2.17.2? ;;;","23/Aug/16 14:32;laurent149;Hello [~davsclaus],

I'm hitting the exact same issue and I'm unfortunately stuck with ServiceMix 6.1.0 / Camel 2.16.1.
Any workaround to suggest on this version of Camel?

Many thanks!

Laurent;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
add NPE guard for camel-cxf RawMessageContentRedirectInterceptor,CAMEL-9993,12972933,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,26/May/16 02:49,26/May/16 03:16,14/Jul/23 05:50,26/May/16 03:16,,,,,,,,,,,,,,,2.16.4,2.17.2,2.18.0,,,,,,,,,0,,,,,,just in case the MEP is InOnly so OutputStream is null,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-05-26 02:49:38.0,,,,,,,,,,,"0|i2yinb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MIME-Multipart Data Format is inconsistent if trying to unmarshal non-MIME data,CAMEL-9986,12972297,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,siano,siano,siano,24/May/16 07:07,24/May/16 07:47,14/Jul/23 05:50,24/May/16 07:47,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-mail,,,,,,,0,,,,,,"If data that is not a MIME-Multipart is tried to marshal with the headersInline option set to false, no error is thrown and the message is left as the original message.
In case the headersInline option is set to true, an empty message is returned.
The provided patch changes the behavior that it also tries to return the original message in case the message is not a mime-multipart and headersInline is set to true. However there are limits to this: If the message body is a stream and stream caching is not enabled it is necessary to read the stream in order to find out whether this is a MIME-Multipart or not. Afterwards the message body will be empty (as with the previous implementation). ",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-05-24 07:07:47.0,,,,,,,,,,,"0|i2yeqf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitConsumer.stop() doesn't stop underlying AutorecoveringConnection obtained from supplied ConnectionFactory,CAMEL-9984,12972051,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,daknin,daknin,23/May/16 12:53,26/May/16 17:10,14/Jul/23 05:50,24/May/16 09:53,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-rabbitmq,,,,,,,0,,,,,,"If I have a ConnectionFactory defined as:
{code:borderStyle=solid}
ConnectionFactory connectionFactory = new ConnectionFactory();
connectionFactory.setAutomaticRecoveryEnabled(true);
connectionFactory.setUsername(username);
connectionFactory.setPassword(password);
{code}
And a Camel route defined like:
{code:borderStyle=solid}
rabbitmq://localhost:5672/MyExchange?connectionFactory=#connectionFactory&exchangeType=direct&queue=MyQueue&routingKey=MyRoutingKey
{code}
Performing these steps:
* Start my application and it connects to Rabbit and consumes messages
* Shutdown the RabbbitMQ server
* Shutdown my Camel application

The application doesn't stop fully because the automatic recovery mechanism has background threads running. It carries on indefinately logging messages like:
{code:borderStyle=solid}
	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:106)
	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:102)
	at com.rabbitmq.client.impl.AMQConnection.start(AMQConnection.java:350)
	at com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory.newConnection(RecoveryAwareAMQConnectionFactory.java:37)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.recoverConnection(AutorecoveringConnection.java:476)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.beginAutomaticRecovery(AutorecoveringConnection.java:444)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.access$000(AutorecoveringConnection.java:53)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection$1.shutdownCompleted(AutorecoveringConnection.java:383)
	at com.rabbitmq.client.impl.ShutdownNotifierComponent.notifyListeners(ShutdownNotifierComponent.java:75)
	at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:578)
{code}
Looking at org.apache.camel.component.rabbitmq.RabbitConsumer.stop()
{code:borderStyle=solid}
    public void stop() throws IOException, TimeoutException {
        stopping = true;
        if (channel == null) {
            return;
        }
        channel.basicCancel(tag);
        try {
            channel.close();
        } catch (TimeoutException e) {
            log.error(""Timeout occured"");
            throw e;
        }
    }
{code}
The calls to channel.basicCancel(tag) and channel.close() both throw com.rabbitmq.client.AlreadyClosedException when the server has closed the connection which stops the automatic recovery thread from being halted. Checking whether the channel is open before the calls to channel.basicCancel(tag) and channel.close() seems to fix the issue.
{code:borderStyle=solid}
    public void stop() throws IOException, TimeoutException {
        stopping = true;
        if (channel == null) {
            return;
        }
        if (tag != null && isChannelOpen()) {
            channel.basicCancel(tag);
        }
        try {
            if (isChannelOpen()) {
                channel.close();
            }
        } catch (TimeoutException e) {
            log.error(""Timeout occured"");
            throw e;
        }
    }
{code}

I'll submit a PR later",,daknin,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 26 17:10:45 UTC 2016,,,,,,,,,,,"0|i2yd7z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/May/16 07:03;davsclaus;Thanks for reporting. Looking forward to the PR;;;","24/May/16 08:27;githubbot;GitHub user daknin opened a pull request:

    https://github.com/apache/camel/pull/996

    CAMEL-9984: Rabbit MQ connection is not closed when channel has been closed by server.

    This fixes closing Rabbit MQ connections when the server has already closed the channel / connection. I created an issue at https://issues.apache.org/jira/browse/CAMEL-9984 with full details.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/daknin/camel CAMEL-9984

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/996.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #996
    
----
commit 09613cb4c3be053195e1c9f68f3a485d0003d24d
Author: Darrell King <darrell.king@hermes-europe.co.uk>
Date:   2016-05-24T08:18:53Z

    CAMEL-9984: Rabbit MQ connection is not closed when channel has been closed by server.

----
;;;","24/May/16 09:53;davsclaus;Thanks for the PR;;;","24/May/16 11:18;daknin;Closing now that PR is merged;;;","26/May/16 17:10;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/996
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Marshalling fixed length record with links fails,CAMEL-9982,12971895,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,anoordover,anoordover,22/May/16 18:42,23/May/16 06:10,14/Jul/23 05:50,23/May/16 06:10,2.17.1,,,,,,,,,,,,,,2.18.0,,,,camel-bindy,,,,,,,0,,,,,,"When a fixed length record contains a ""Link"" marshalling doesn't take this field into account while with unmarshalling it is unmarshalled.
Issue comes from a difference in building the model in BindyCsvDataFormat and BindyFixedLengthDataFormat. In the csv-format all field are taken into account that have the ""Link""  annotation.",,anoordover,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 23 06:10:36 UTC 2016,,,,,,,,,,,"0|i2yc9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/May/16 19:02;githubbot;GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/992

    CAMEL-9982

    Patch for CAMEL-9982. Added unittest and added fields with ""Link""  annotation to model for Fixed Length.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-9982

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/992.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #992
    
----
commit 739a750c0b37a5244d459e601903d0491feace3c
Author: Arno Noordover <arno@noordover.net>
Date:   2016-05-22T18:59:10Z

    CAMEL-9982

----
;;;","22/May/16 19:09;anoordover;I found this issue when I was busy trying to refactor the marshalling functionality using stream and lambda expression.
I have a question about this:
Shouldn't we advice developers to wrap unchecked exceptions in a component specific unchecked exception. Refactoring to lambda expressions (Function, Consumer) isn't always possible without changing the functionality.;;;","23/May/16 06:10;davsclaus;Thanks for the PR.;;;","23/May/16 06:10;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/992
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelSpringJUnit4ClassRunner registers listeners twice,CAMEL-9981,12971825,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gardellajuanpablo,gardellajuanpablo,21/May/16 21:17,23/May/16 06:55,14/Jul/23 05:50,23/May/16 06:55,2.14.0,2.15.0,2.17.1,,,,,,,,,,,,2.17.2,2.18.0,,,camel-test,,,,,,,0,test,,,,,"Using camel-test-spring I found that CamelSpringJUnit4ClassRunner registers the listener twice. This causes the following error in transactional tests:
{noformat}
java.lang.IllegalStateException: Cannot start a new transaction without ending the existing transaction.
{noformat}

To fix it, it is required to only add the expected listeners :
{code:java}
line:57
         public CamelTestContextManager(Class<?> testClass) {
            super(testClass);

            // inject Camel first, and then disable jmx and add the stop-watch
            // WARNING: The listeners are registered within the super class.
            /// DON'T get current listeners.
            // List<TestExecutionListener> list = getTestExecutionListeners();
            //
            List<TestExecutionListener> list = new ArrayList<TestExecutionListener>(3);

            list.add(new CamelSpringTestContextLoaderTestExecutionListener());
            list.add(new DisableJmxTestExecutionListener());
            list.add(new StopWatchTestExecutionListener());
            OrderComparator.sort(list);
            registerTestExecutionListeners(list);
        }

{code}

Spring version: 4.2.5.",ALL,davsclaus,gardellajuanpablo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/May/16 00:25;gardellajuanpablo;camel-9981-test.zip;https://issues.apache.org/jira/secure/attachment/12805558/camel-9981-test.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Important,,,,,,,,,9223372036854775807,,,Mon May 23 06:55:01 UTC 2016,,,,,,,,,,,"0|i2ybtr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/May/16 07:30;davsclaus;We have 1000s of tests at Camel and have not encountered what problem you report. Do you have a sample project / unit test that reproduces the issue.

Nevertheless we can improve the code to only add the listener if a previous listener hasn't been added.;;;","23/May/16 00:25;gardellajuanpablo;Attached a test to reproduce it. Also attached the fix.;;;","23/May/16 06:55;davsclaus;Thanks for the test case.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Kafka: configuration type mismatch for parameter acks,CAMEL-9978,12971492,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,20/May/16 10:25,24/May/16 07:05,14/Jul/23 05:50,24/May/16 07:05,,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-kafka,,,,,,,0,,,,,,"See nabble

http://camel.465427.n5.nabble.com/Camel-Kafka-component-configuration-type-mis-match-td5782820.html",,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 22 07:51:50 UTC 2016,,,,,,,,,,,"0|i2y9rr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/May/16 10:53;davsclaus;If the option can only be ""0"" ""1"" or ""all"" then we should add that as enums=""0,1,all"" to the UriParam so we know that.;;;","22/May/16 07:51;acosentino;Done :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CdiCamelExtension.shouldDeployDefaultCamelContext throws NPE with primitive injection points,CAMEL-9973,12970389,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,antonin.stefanutti,thibof,thibof,17/May/16 14:48,23/May/16 08:26,14/Jul/23 05:50,20/May/16 16:51,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-cdi,,,,,,,0,,,,,,"The NPE prevents Camel to start :
{code}
java.lang.NullPointerException
	at org.apache.camel.cdi.CdiCamelExtension.shouldDeployDefaultCamelContext(CdiCamelExtension.java:310)
	at org.apache.camel.cdi.CdiCamelExtension.afterBeanDiscovery(CdiCamelExtension.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:88)
	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:144)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:309)
	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:124)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:287)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:265)
	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:271)
	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:260)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:154)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:148)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)
	at org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent.fire(AbstractDefinitionContainerEvent.java:42)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.fire(AfterBeanDiscoveryImpl.java:61)
	at org.jboss.weld.bootstrap.WeldStartup.deployBeans(WeldStartup.java:423)
	at org.jboss.weld.bootstrap.WeldBootstrap.deployBeans(WeldBootstrap.java:83)
{code}

The issue seems to be related to CAMEL-9904.

It works well when I get back to version 2.17.0.","Suse SLES 12
Java 1.8.0_u91 and 1.8.0_u92
WildFly 10.0",antonin.stefanutti,thibof,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 23 08:26:13 UTC 2016,,,,,,,,,,,"0|i2y2z3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/May/16 07:45;antonin.stefanutti;[~thibof], would that be possible for you to share a bit more info (like the bean class code excerpt) about the bean and the injection point for which the following line in {{CdiCamelExtension}} throws the NPE:
{code}
if (!getRawType(ip.getType()).getPackage().getName().startsWith(""org.apache.camel"")) {
    continue;
}
{code}

That gives us a bit more context and identify the proper fix for your issue.;;;","20/May/16 14:02;thibof;The following injection point is the cause :

@Inject
@ConfigProperty(""authentication.required"")
private boolean authRequired;

In this case, the getPackage() returns null.

I think that by extension, when the injection point type is a primitive, the package is null.

Is it possible to add a check on the expression getRawType(ip.getType()).getPackage() to avoid the problem ?;;;","20/May/16 16:51;antonin.stefanutti;[~thibof], thanks. I've just fixed it.;;;","23/May/16 08:26;thibof;Great ! Thanks a lot.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Explicitly add Connection Close HTTP header with a parameter in URI,CAMEL-9972,12970337,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,17/May/16 11:46,18/May/16 08:52,14/Jul/23 05:50,18/May/16 08:52,,,,,,,,,,,,,,,2.18.0,,,,camel-ahc,camel-http,camel-http4,camel-jetty,,,,0,,,,,,It should be good if we are able to set a connection close header in all our HTTP components. Best approach should be add a parameter connectionClose disabled by default (false value).,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue May 17 14:30:52 UTC 2016,,,,,,,,,,,"0|i2y2nj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/May/16 14:30;acosentino;No need for camel-netty-http and camel-netty-http4. They already have the mechanism for connection close header.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelFileLength header is wrong for long write file,CAMEL-9970,12969998,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sergey.monichev,sergey.monichev,16/May/16 13:30,03/Jul/18 14:41,14/Jul/23 05:50,20/May/16 07:08,2.16.3,,,,,,,,,,,,,,2.18.0,,,,camel-core,,,,,,,0,patch,,,,,"Given a long write file slowfile.dat. Camel polls the file and stores its parameters (length, lastModified...). Camel tries to get exclusive read lock and fails as file is writing by someone, next time Camel gets lock. But file was changed and its parameters are wrong.
The solution is pretty simple - check the file length and lastModified when exclusive read lock is granted and update them.

Here is a patch: http://pastebin.com/2vyF8BTU
",,davsclaus,sergey.monichev,,,,,,,,,,,,,,,,,,,,,CAMEL-12613,,,,,,,,,,,,"16/May/16 14:10;sergey.monichev;CAMEL_9970__CamelFileLength_header_is_wrong_for_long_write_file.patch;https://issues.apache.org/jira/secure/attachment/12804176/CAMEL_9970__CamelFileLength_header_is_wrong_for_long_write_file.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Tue May 17 06:52:45 UTC 2016,,,,,,,Patch Available,,,,"0|i2y0k7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/May/16 06:52;davsclaus;Should probably do this in a way to reapply the file headers after the lock was granted so it works generic.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel restlet not populating body form parameters correctly for x-www-form-urlencoded,CAMEL-9968,12969685,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jmandawg,jmandawg,13/May/16 22:49,20/May/16 05:07,14/Jul/23 05:50,20/May/16 05:07,2.17.1,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-restlet,,,,,,,1,,,,,,"Currently for x-www-form-urlencoded post request camel puts the body into a form key with a null value:
{code}
if ((Method.PUT == method || Method.POST == method) && MediaType.APPLICATION_WWW_FORM.equals(mediaType, true)) {
            form = new Form();
            // must use string based for forms
            String body = exchange.getIn().getBody(String.class);
            if (body != null) {
                form.add(body, null);
            }
        }
{code}

Which results in a body like this:

name=jay&password=secret

ending up with a form parameter looking like this: 
name%3Djay%26password%3Dsecret=null


I think something like this should be used to correctly set the key values.

{code}
if ((Method.PUT == method || Method.POST == method) && MediaType.APPLICATION_WWW_FORM.equals(mediaType, true)) {
            form = new Form();
            // must use string based for forms
            String body = exchange.getIn().getBody(String.class);
            if (body != null) {
                List<NameValuePair> pairs = URLEncodedUtils.parse(body, Charset.forName(""UTF-8""));
                for(NameValuePair p : pairs){
                	form.add(p.getName(), p.getValue());
                }
            }
        }
{code}",,aldrine.einsteen,davsclaus,jmandawg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 20 05:07:47 UTC 2016,,,,,,,,,,,"0|i2xymn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/May/16 08:28;davsclaus;Are you able to work on a patch / PR to fix this?;;;","15/May/16 11:33;jmandawg;Yes if this solution looks good to you.  I'm not sure if there is a better way to determine the charset othere than to just hard code it.   ;;;","16/May/16 07:38;davsclaus;Yeah you can get the charset from the current exchange using

org.apache.camel.util.IOHelper#getCharsetName(org.apache.camel.Exchange, boolean)

And if you pass in true as the boolean you will use the JVM platform default charset as fallback.;;;","17/May/16 11:03;aldrine.einsteen;Hi Jay and Claus,

Is this issue still open? If not can I submit a patch?;;;","17/May/16 11:16;aldrine.einsteen;The following worked:
        // Use forms only for PUT, POST and x-www-form-urlencoded
        if ((Method.PUT == method || Method.POST == method) && MediaType.APPLICATION_WWW_FORM.equals(mediaType, true)) {
            form = new Form();
            // must use string based for forms
            String body = exchange.getIn().getBody(String.class);
            if (body != null) {
                List<NameValuePair> nameValuePairs = URLEncodedUtils.parse(body, Charset.forName(IOHelper.getCharsetName(exchange)));
                for (NameValuePair nameValuePair : nameValuePairs) {
                    form.add(nameValuePair.getName(), nameValuePair.getValue());
                }
            }
        };;;","17/May/16 11:37;davsclaus;Yeah a patch or PR on github is much welcome. PR on github is often easier to manage and also allow to keep track of your contributions.;;;","18/May/16 00:23;jmandawg;PR #985 submitted.;;;","20/May/16 05:07;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,
create ReaderInputStream align encoding with Exchange,CAMEL-9960,12968174,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,12/May/16 02:38,12/May/16 05:32,14/Jul/23 05:50,12/May/16 05:32,,,,,,,,,,,,,,,2.16.4,2.17.2,2.18.0,,camel-cxf,,,,,,,0,,,,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-05-12 02:38:23.0,,,,,,,,,,,"0|i2xpcn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-ssh: Review logic in doStart and doStop in the SshConsumer and SshProducer,CAMEL-9953,12965808,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,07/May/16 08:34,07/May/16 09:09,14/Jul/23 05:50,07/May/16 09:09,2.18.0,,,,,,,,,,,,,,2.16.4,2.17.2,2.18.0,,camel-ssh,,,,,,,0,,,,,,We need to create the client before calling super start and in the doStop method we need to stop the scheduler before stopping and nulling the client.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-05-07 08:34:41.0,,,,,,,,,,,"0|i2xatr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Setup default values for thread-connected properties in WebSocket component,CAMEL-9951,12965574,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,mbasovni,mbasovni,06/May/16 12:20,09/May/16 11:43,14/Jul/23 05:50,09/May/16 11:43,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-websocket,,,,,,,0,,,,,,"If you do not set properties {{minThreads}} or {{maxThreads}} or method {{getThreadPool()}} returns {{null}} the you will get {{RuntimeCamelException}} and websocket cosumer will not be created. These attributes were not required in previous versions of camel. Websocket component now uses Jetty 9. If these properties are really required why do not use some default values?

e.g.
{code:java}
minThreads = 1
maxThreads = Runtime.getRuntime().availableProcessors()
{code}

https://github.com/apache/camel/blob/master/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java#L341",,mbasovni,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-05-06 12:20:49.0,,,,,,,,,,,"0|i2x9dj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel-Websocket: NPE in case minThreads, maxThreads and getThreadPool equals to null",CAMEL-9950,12965558,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,06/May/16 10:55,06/May/16 11:16,14/Jul/23 05:50,06/May/16 11:16,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-websocket,,,,,,,0,,,,,,We need to manage this situation.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-05-06 10:55:12.0,,,,,,,,,,,"0|i2x99z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blueprint bug ARIES-1544 causes issues in Olingo2 configuration,CAMEL-9941,12964747,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,03/May/16 18:50,01/Jun/16 07:41,14/Jul/23 05:50,01/Jun/16 07:41,2.17.0,2.18.0,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-olingo2,,,,,,,0,,,,,,"Due to Blueprint bug ARIES-1544, the {{setConfiguration()}} method overridden in Olingo2Component for Camel documentation, MUST have a matching {{getConfiguration()}} method. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 01 07:41:51 UTC 2016,,,,,,,,,,,"0|i2x49r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/May/16 19:04;dhirajsb;Fixed with commit https://github.com/apache/camel/commit/58b7fb38429a3bd9bba79b8d4b438d9b02a2be81 and cherry-picked on camel-2.17.x;;;","01/Jun/16 07:37;dhirajsb;LinkedIn component must also be similarly patched for the underlying Blueprint issue. ;;;","01/Jun/16 07:41;dhirajsb;Fixed with commit https://github.com/apache/camel/commit/52f88a23c46d89d1b9e3590f2e30ec7a48a37341 and cherry-picked on {{camel-2.17.x}} branch. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rest DSL passes blank query parameters as null,CAMEL-9935,12964306,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mattsicker,mattsicker,02/May/16 14:16,23/May/17 13:06,14/Jul/23 05:50,23/May/17 13:06,2.16.2,2.17.0,,,,,,,,,,,,,2.19.1,2.20.0,,,rest,,,,,,,3,,,,,,"First, [see my companion project|https://github.com/jvz/plus-in-query]. My problem here is that if you send a query parameter without a value:

{code}
curl http://localhost:8080/piq/test?foo
{code}

or if you send just a single space:

{code}
curl http://localhost:8080/piq/test?foo=+
{code}

you can see that the header is null. For context, this route sets the body to {{true}} if the {{foo}} header is null, or {{false}} otherwise.","Java 1.8.0_66, Maven 3.3.3 (from Spring Boot maven wrapper), Netty 4.x",mattsicker,onurakdemir,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 20 13:47:14 UTC 2016,,,,,,,,,,,"0|i2x1jr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jun/16 08:24;onurakdemir;By default DefaultNettyHttpBinding class ignores blank spaces, (allowEmptyValues is false )

Is it the correct way to change allowEmptyValues to true?;;;","20/Jun/16 13:47;mattsicker;Why oh why would it be considered proper behavior to trim data in a low level library like this by default? Magic by default is usually wrong (for example, see how URL decoding is not done by default in rest-dsl).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing raw type in CDI parameterized event endpoint URI,CAMEL-9934,12964292,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,antonin.stefanutti,antonin.stefanutti,antonin.stefanutti,02/May/16 13:24,02/May/16 13:27,14/Jul/23 05:50,02/May/16 13:26,,,,,,,,,,,,,,,,,,,camel-cdi,,,,,,,0,,,,,,,,antonin.stefanutti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-05-02 13:24:02.0,,,,,,,,,,,"0|i2x1gn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-CSV marshalling breaks characters not in default charset,CAMEL-9933,12964206,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,siano,siano,siano,02/May/16 05:31,02/May/16 09:51,14/Jul/23 05:50,02/May/16 09:51,2.16.3,2.17.0,,,,,,,,,,,,,2.16.4,2.17.2,2.18.0,,camel-csv,,,,,,,0,,,,,,"Marshalling data with camel-csv will use the JVM default encoding instead of the one configured for the message. This will break non-ascii characters, especially if the platform default encoding does not support them (e.g. because the platform default encoding is ASCII)",,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-05-02 05:31:18.0,,,,,,,,,,,"0|i2x0xr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restlet - Using synchronous=false with no error handler leak inflight exchange,CAMEL-9929,12963833,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Apr/16 12:10,29/Apr/16 12:13,14/Jul/23 05:50,29/Apr/16 12:13,2.17.0,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-restlet,,,,,,,0,,,,,,invoking restlet component within a recipientList EIP with noErrorHandler configured on route is causing DefaultExchange's to build up in org.apache.camel.impl.DefaultInflightRepository.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-29 12:10:18.0,,,,,,,,,,,"0|i2wymv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP Proxy support in Salesforce component is broken with upgrade to Jetty9,CAMEL-9926,12963751,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,29/Apr/16 03:03,23/May/16 18:25,14/Jul/23 05:50,23/May/16 18:25,2.17.1,2.18.0,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-salesforce,,,,,,,0,,,,,,"HTTP Proxy support in Jetty9 Client is broken, which causes HTTP Proxy tests in the Salesforce components to fail. 

They have been marked as ignored for now, but it MUST be fixed in Jetty9 ASAP and the component updated to use the new version of Jetty9 client with working support for Proxy authentication. ",,acosentino,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9925,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 23 18:25:44 UTC 2016,,,,,,,,,,,"0|i2wy4n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/May/16 09:52;acosentino;Looking at this https://github.com/eclipse/jetty.project/blob/master/VERSION.txt

The fix:

353 Jetty Client doesn't forward authentication headers with redirects when using proxy

can be of any help?;;;","10/May/16 18:20;dhirajsb;Created Jetty github issues https://github.com/eclipse/jetty.project/issues/560 along with a test case that fails on latest 9.2.x branch. I've also tested the Salesforce test case with latest Jetty 9.3 version, and it fails with another reason, but I think the root cause is the same. ;;;","23/May/16 18:25;dhirajsb;Updated jetty client version to 9.2.17.v20160517 with commit https://github.com/apache/camel/commit/79fbb6a3b8362396774eb14c408edbbf2558dd91 and merged to camel-2.17.x branch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dozer variable mapping doesn't work on karaf,CAMEL-9921,12963395,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,igarashitm,igarashitm,28/Apr/16 06:32,09/May/16 12:20,14/Jul/23 05:50,05/May/16 10:18,2.15.6,2.17.0,2.18.0,,,,,,,,,,,,2.16.4,2.17.2,2.18.0,,camel-dozer,karaf,,,,,,0,,,,,,"The configuration variables defined in transformation.xml is not resolved to the value on karaf. Attached reproducer [^CAMEL-9921.tgz] shows this behavior using Pax Exam, camel-2.18-SNAPSHOT and karaf-4.0.5.

h4. Steps to reproduce
# Unpack [^CAMEL-9921.tgz]
# Run 'mvn clean package'
# PaxExamTest fails with following error, which shows the variable mapping doesn't work in karaf while it succeeds in CamelBlueprintTest
{code}
test(org.apache.camel.component.dozer.PaxExamTest)  Time elapsed: 15.878 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[ACME-SALES]> but was:<[${CUST_ID}]>
    at org.apache.camel.component.dozer.PaxExamTest.test(PaxExamTest.java:89)
{code}",,davsclaus,githubbot,igarashitm,tadayosi,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/May/16 06:10;igarashitm;CAMEL-9921.tgz;https://issues.apache.org/jira/secure/attachment/12801691/CAMEL-9921.tgz",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 09 12:20:51 UTC 2016,,,,,,,,,,,"0|i2wvxj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Apr/16 07:06;davsclaus;Camel 2.15.x is EOL.;;;","28/Apr/16 07:08;davsclaus;Try with Camel 2.16.x, 2.17.x or 2.18.x.

Karaf 2.x is no longer supported either from 2.18 onwards.;;;","28/Apr/16 07:17;igarashitm;Same outcome with camel-2.17.0;;;","28/Apr/16 07:19;davsclaus;Try with karaf 4.x and Camel 2.17;;;","28/Apr/16 07:27;davsclaus;And what exactly has that felix gogo import, is it a camel component or some of your own bundles/features or from fuse? ;;;","28/Apr/16 07:30;igarashitm;It looks the camel-karaf-commands requires org.apache.felix.gogo.commands
{code}
Error executing command: Can't install feature xml-to-json/0.0.0: 	
Could not start bundle mvn:org.apache.camel.karaf/camel-karaf-commands/2.18-SNAPSHOT in feature(s) camel-core-2.18-SNAPSHOT: Unresolved constraint in bundle org.apache.camel.karaf.camel-karaf-commands [61]: Unable to resolve 61.0: missing requirement [61.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.felix.gogo.commands)(version>=0.16.0)(!(version>=1.0.0)))
{code};;;","28/Apr/16 07:32;davsclaus;Yes Camel 2.18 requires Karaf 4 (or 3.x but 4.x is the main target).;;;","28/Apr/16 07:48;igarashitm;Tried camel-2.17.0&karaf-container-4.0.5, same outcome.;;;","28/Apr/16 09:32;davsclaus;Works fine with karaf 4.0.4 and camel 2.17.0
{code}
karaf@root()> camel:route-list
 Context        Route          Status              Total #       Failed #     Inflight #   Uptime
 -------        -----          ------              -------       --------     ----------   ------
 camel-1        route1         Started                   0              0              0   51.470 seconds
karaf@root()> camel:route-show route1
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route customId=""false"" id=""route1"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""file:/tmp/inbox?fileName=abc-order.xml""/>
    <setHeader headerName=""approval"" id=""setHeader1"">
        <constant>AUTO</constant>
    </setHeader>
    <to uri=""ref:xml2json"" id=""to1""/>
    <to uri=""file:/tmp/outbox?fileName=xyz-order.json"" id=""to2""/>
</route>
{code}

karaf@root()> info
Karaf
  Karaf version               4.0.4;;;","28/Apr/16 09:36;igarashitm;That's weird, did you really see ""origin"":""Web"" in the /tmp/outbox/xyz-order.json?;;;","28/Apr/16 09:42;davsclaus;Create a small unit test on current community code that reproduces the issue.
Do not report commercial companies software problems here.;;;","28/Apr/16 09:43;davsclaus;You report a problem with feature install that works fine. Make an unit test with current code that tests the variable stuff. Then we can use that to reproduce the issue on Apache Camel source code.;;;","28/Apr/16 09:53;igarashitm;camel-2.17.0, karaf-4.0.5 and the xml-to-json example are all opensource. And it doesn't reproduce in unit test.;;;","28/Apr/16 10:39;davsclaus;Tomohisa, will work on an unit test we can include in camel-dozer as test. And then a smaller example (separated from fuseide) that we can use to track down the osgi issue.

Mind that dozer is not OSGi friendly so it may be that this functionailty is not supported/working on OSGi.;;;","02/May/16 00:48;igarashitm;Tried camel-test-blueprint, but it doesn't reproduce the problem. I'll try pax exam for next.
https://github.com/igarashitm/camel/commit/8defd3f99efcb2277d4c8f36ea38fad6d33bd3ab;;;","02/May/16 06:10;igarashitm;A reproducer using Pax Exam.;;;","05/May/16 08:49;davsclaus;So its OSGi not able to load some expression factory for el

    public static ExpressionFactory newInstance(Properties properties) {
        return (ExpressionFactory)FactoryFinder.find(""javax.el.ExpressionFactory"", ""com.sun.el.ExpressionFactoryImpl"", properties);
    }
;;;","05/May/16 09:58;davsclaus;This was tricky to get resolved on OSGi as we need to load the glashfish EL that dozer is using. But now it prints

{code}
2016-05-05 11:57:55,574 | INFO  | #8 - timer://foo | route10                          | 55 - org.apache.camel.camel-core - 2.18.0.SNAPSHOT | Before: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<ABCOrder>
    <header>
        <status>GOLD</status>
    </header>
</ABCOrder>

2016-05-05 11:57:55,622 | INFO  | #8 - timer://foo | route10                          | 55 - org.apache.camel.camel-core - 2.18.0.SNAPSHOT | After: org.apache.camel.component.dozer.example.xyz.XYZOrder@2ab3ae9c for customer: ACME-SALES
{code}

when running in karaf. Notice the variable has been replaced to ACME-SALES;;;","09/May/16 11:26;tdiesler;The fix for this is may not be valid for other runtime environments (e.g. wildfly). It makes assumptions on the TCCL and a (non-existent) value of sysprop ""javax.el.ExpressionFactory"".

;;;","09/May/16 11:28;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/980

    [CAMEL-9921] Use default EL init with fallback to Glassfish impl

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9921

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/980.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #980
    
----
commit 4fec9449afb067903ea6dfb6b2978c7a40c92b04
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-05-09T11:28:00Z

    [CAMEL-9921] Use default EL init with fallback to Glassfish impl

----
;;;","09/May/16 11:44;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/980
;;;","09/May/16 12:12;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/981

    [CAMEL-9921] Use Glassfish EL when available with fallback to default

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9921

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/981.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #981
    
----
commit 250de646dcbac60506a5921a24dabf36c3379503
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-05-09T11:28:00Z

    [CAMEL-9921] Use Glassfish EL when available with fallback to default

----
;;;","09/May/16 12:20;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/981
;;;",,,,,,,,,
Handle SocketTimeoutException on accept,CAMEL-9920,12963263,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,27/Apr/16 18:57,28/Apr/16 15:16,14/Jul/23 05:50,28/Apr/16 07:11,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-mllp,,,,,,,0,,,,,,The MLLP receiver logs and error when a SocketTimeoutException is encountered while waiting for a connection.  It will not successfully accept connections after that.,,githubbot,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 28 15:16:16 UTC 2016,,,,,,,,,,,"0|i2wv47:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Apr/16 19:13;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/966

    CAMEL-9920 - Handle SocketTimeoutException on accept

    Handle the SocketTimeoutException in the accept loop.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9920

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/966.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #966
    
----
commit 6668ae1b3ffad3c6d20562616c9c814e2b3ffc7c
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-04-27T19:11:23Z

    CAMEL-9920 - Handle SocketTimeoutException on accept

----
;;;","28/Apr/16 15:16;githubbot;Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/966
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support observing route events filtered by route id in Camel CDI,CAMEL-9918,12963099,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,antonin.stefanutti,antonin.stefanutti,antonin.stefanutti,27/Apr/16 14:49,27/Apr/16 15:19,14/Jul/23 05:50,27/Apr/16 15:19,,,,,,,,,,,,,,,2.18.0,,,,camel-cdi,,,,,,,0,,,,,,,,antonin.stefanutti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-27 14:49:58.0,,,,,,,,,,,"0|i2wu5b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Route stopped events are sent in inconsistent order,CAMEL-9917,12963091,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,antonin.stefanutti,antonin.stefanutti,antonin.stefanutti,27/Apr/16 14:37,27/Apr/16 14:42,14/Jul/23 05:50,27/Apr/16 14:42,2.17.0,,,,,,,,,,,,,,2.18.0,,,,camel-core,,,,,,,0,,,,,,,,antonin.stefanutti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-27 14:37:24.0,,,,,,,,,,,"0|i2wu3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RestBindingMode auto not honored,CAMEL-9911,12962306,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,johndament,johndament,johndament,25/Apr/16 17:18,28/Apr/16 23:59,14/Jul/23 05:50,27/Apr/16 06:31,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-core,,,,,,,0,,,,,,"The usage of rest binding mode is confusing/doesn't work consistently.

If you look at the field definition:

{code}
    @XmlAttribute @Metadata(defaultValue = ""auto"")
    private RestBindingMode bindingMode;
{code}

You would expect that the default value is ""auto"" but in fact there is no default when running.

You need to explicitly set it in configuration, like this:

{code}
restConfiguration()
                .component(""jetty"")
                .port(9097)
                .bindingMode(RestBindingMode.auto)
        ;
{code}",,davsclaus,githubbot,johndament,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 28 23:59:35 UTC 2016,,,,,,,,,,,"0|i2wp93:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Apr/16 06:55;davsclaus;Ah yeah we should ""null"" be defaulted to be ""auto"". You are welcome to work on a patch / PR.;;;","27/Apr/16 02:01;johndament;I'm assuming you'll take care of merging into 2.18?

I also can't find the source for http://camel.apache.org/rest-dsl.html as I'd like to update the default binding mode.;;;","27/Apr/16 02:03;githubbot;GitHub user johnament opened a pull request:

    https://github.com/apache/camel/pull/964

    CAMEL-9911 Match the default defined in metadata to POJO based instan…

    …tiation.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnament/camel camel-2.17.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/964.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #964
    
----
commit e3062dff4a1f4cdbc4ed647aef99bc00c6e76557
Author: John D. Ament <johndament@apache.org>
Date:   2016-04-27T02:02:53Z

    CAMEL-9911 Match the default defined in metadata to POJO based instantiation.

----
;;;","27/Apr/16 06:24;davsclaus;The default has essentially been off. So we are setting that as the default. Changing to auto will break behavior for existing users.;;;","27/Apr/16 06:25;davsclaus;And off is also the default mode in the rest-dsl docs at
http://camel.apache.org/rest-dsl;;;","28/Apr/16 23:59;githubbot;Github user johnament closed the pull request at:

    https://github.com/apache/camel/pull/964
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - Should allow null values as a valid value,CAMEL-9906,12962000,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Apr/16 06:07,23/Apr/16 06:53,14/Jul/23 05:50,23/Apr/16 06:53,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-sql,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/2-17-0-NULLs-are-not-allowed-with-named-parameter-in-SQL-component-tp5781552.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-23 06:07:08.0,,,,,,,,,,,"0|i2wndb:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DumpRouteStatsAsXml do not work when jmx domain is customized,CAMEL-9903,12961638,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gterral,gterral,22/Apr/16 13:29,22/Apr/16 19:07,14/Jul/23 05:50,22/Apr/16 19:07,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-core,,,,,,,0,,,,,,"According to the documentation ([Here|http://camel.apache.org/camel-jmx.html]) we can customize the jmx domain name.

When the domain name is different from org.apache.camel all the dumpRouteStatsAsXml are empty and does not work anymore.

After some investigation it is because the MBean operation does not take into account the runtime domain name and only use ""org.apache.camel"" ([here|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java#L489]) 

I've done a unit test to reproduce and tried to do a fix,",,davsclaus,githubbot,gterral,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 22 19:07:40 UTC 2016,,,,,,,,,,,"0|i2wl7z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Apr/16 14:10;davsclaus;Thanks we love contributions
http://camel.apache.org/contributing

You would need to find ""org.apache.camel:"" used in jmx names, and then replace that with the domain name configured on the management strategy.
;;;","22/Apr/16 14:52;githubbot;GitHub user guillaumeterral opened a pull request:

    https://github.com/apache/camel/pull/956

    CAMEL-9903 Fix jmx operations when jmx domain is custom + test

    I retrieve the jmx domain from the management agent where it has been customized using JVM property or ManagementAgent bean according to http://camel.apache.org/camel-jmx.html 
    
    This domain is then used in all the calls made to retrieve statistics
    
    Unit Test has been added to test those operations with a custom jmx domain name

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/guillaumeterral/camel CAMEL-9903

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/956.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #956
    
----
commit c77eafe539be8b05ab1b5fe1c7ce7fb44a7ad754
Author: Guillaume Terral <guillaumeterral@github.com>
Date:   2016-04-22T14:35:28Z

    CAMEL-9903 Fix jmx operations when jmx domain is custom + test

----
;;;","22/Apr/16 14:53;gterral;Pull Request is available here: https://github.com/apache/camel/pull/956;;;","22/Apr/16 19:07;davsclaus;Thanks for the PR;;;","22/Apr/16 19:07;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/956
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SimpleBuilder throws NullPointerException when replacing string using regexAll method and the regex contains },CAMEL-9898,12960695,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ltsall,ltsall,21/Apr/16 10:17,21/Apr/16 19:42,14/Jul/23 05:50,21/Apr/16 19:42,2.17.0,,,,,,,,,,,,,,2.18.0,,,,camel-core,,,,,,,0,,,,,," 
Add this unit test in org.apache.camel.builder.SimpleBuilderTest to reproduce the issue. Only fails when the regex contains }

{code}
public  void testRegexAllWithPlaceHolders() {
        exchange.getIn().setHeader(""activateUrl"", ""http://some/rest/api/(id)/activate"");
        assertEquals(""http://some/rest/api/12/activate"",SimpleBuilder.simple(""${header.activateUrl.replaceAll(\""\\(id\\)\"",\""12\"")}"").evaluate(exchange,String.class));

        //passes when contains { only
        exchange.getIn().setHeader(""activateUrl"", ""http://some/rest/api/{id/activate"");
        assertEquals(""http://some/rest/api/12/activate"",SimpleBuilder.simple(""${header.activateUrl.replaceAll(\""\\{id\"",\""12\"")}"").evaluate(exchange,String.class));


        String replaced  = ""http://some/rest/api/{id}/activate"".replaceAll(""\\{id\\}"",""12"");
        assertEquals( ""http://some/rest/api/12/activate"", replaced);
        /// But throws throws NullPointerException when regexALl inside a simple expression
        exchange.getIn().setHeader(""activateUrl"", ""http://some/rest/api/{id}/activate"");
        assertEquals(""http://some/rest/api/12/activate"",SimpleBuilder.simple(""${header.activateUrl.replaceAll(\""\\{id\\}\"",\""12\"")}"").evaluate(exchange,String.class));
    }
{code}",,davsclaus,ltsall,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 21 18:54:30 UTC 2016,,,,,,,,,,,"0|i2wfv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Apr/16 13:26;davsclaus;You can use groovy or mvel to call such methods.;;;","21/Apr/16 13:27;davsclaus;The simple parser sounds like is not detecting the closing } is in the quote and thus not the paired close } for the command itself.;;;","21/Apr/16 13:40;ltsall;Sure there are alternatives, but I thought It would be good to report it. I always prefer the simple language, when it's possible.;;;","21/Apr/16 18:54;davsclaus;We can improve the parser to support escaping curly-bracket-end so its not mistakenly taken as a function end marker.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadletter Failure processor is invoked even if error handling strategy defines to continue routing,CAMEL-9896,12960663,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,nikhilkumar578@gmail.com,nikhilkumar578@gmail.com,21/Apr/16 08:31,23/Apr/16 09:04,14/Jul/23 05:50,23/Apr/16 09:04,2.15.6,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-core,,,,,,,0,,,,,,"When a DeadLetterChannel is used as context scoped error handling strategy with FailureProcessor set and a route scoped error handling strategy is defined to continue routing in case of certain exception classes, then it is observed that even in case of exceptions which belong to exceptions defined in OnException clause, the dead letter's failure processor is still triggered. 

A test case to simulate this behaviour is pasted. 
http://pastebin.com/raw/cfQhsJj0 - contains test case.
http://pastebin.com/raw/K6wZc9Yh - test output",stage,davsclaus,guru.gv,nikhilkumar578@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,http://pastebin.com/raw/cfQhsJj0,,Patch,,,,,,,,,9223372036854775807,,,Sat Apr 23 09:04:46 UTC 2016,,,,,,,,,,,"0|i2wfnz:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"22/Apr/16 09:52;guru.gv;+1 I am facing this issue too, what is the expected behaviour? 
Would there be a work around? ;;;","23/Apr/16 08:08;davsclaus;Thanks for reporting. I have reproduced the issue and work on a fix;;;","23/Apr/16 09:04;davsclaus;Thanks for reporting and the test;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ApplicationReadyEvent not dispatched if camel.springboot.main-run-controller = true,CAMEL-9891,12960330,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,20/Apr/16 12:47,20/Apr/16 15:37,14/Jul/23 05:50,20/Apr/16 15:37,,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-spring-boot,,,,,,,0,,,,,,"Please see the discussion here: http://camel.465427.n5.nabble.com/Spring-Boot-and-Camel-2-17-HangupSupport-Removed-td5781339.html#a5781417

Workaround:
- set camel.springboot.main-run-controller to false
- manually run ApplicationController ctx.getBean(CamelSpringBootApplicationController.class).run()",,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-20 12:47:48.0,,,,,,,,,,,"0|i2wdm7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Migrate Camel-websocket to Jetty9,CAMEL-9890,12960303,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,acosentino,acosentino,20/Apr/16 11:16,20/Apr/16 13:03,14/Jul/23 05:50,20/Apr/16 13:03,2.18.0,,,,,,,,,,,,,,2.18.0,,,,camel-websocket,,,,,,,0,,,,,,I guess it's time to switch to Jetty 9.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8789,,,CAMEL-8789,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-20 11:16:30.0,,,,,,,,,,,"0|i2wdg7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
onCompletion not called on Splitter configured with CompletionAwareAggregationStrategy and shareUnitOfWork=true,CAMEL-9887,12960040,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jwilliamson,jwilliamson,19/Apr/16 16:02,24/Apr/16 13:49,14/Jul/23 05:50,24/Apr/16 13:49,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-core,,,,,,,0,,,,,,"In 2.17.0, if a Splitter is configured with shareUnitOfWork=true, then its AggregationStrategy is now wrapped by a ShareUnitOfWorkAggregationStrategy. This causes the following code from *MulticastProcessor.doDone()* to fail to invoke onCompletion when the configured strategy implements CompletionAwareAggregationStrategy.

{noformat}
if (strategy instanceof CompletionAwareAggregationStrategy) {
    ((CompletionAwareAggregationStrategy) strategy).onCompletion(subExchange);
}
{noformat}

It appears the change was a part of CAMEL-9573.

I haven't completely analyzed the shared unit of work changes but one possible approach to fix this would be to have the ShareUnitOfWorkAggregationStrategy implement CompletionAwareAggregationStrategy and then have its onCompletionMethod delegate to the wrapped strategy iff it also implements CompletionAwareAggregationStrategy.
",,jwilliamson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-19 16:02:22.0,,,,,,,,,,,"0|i2wbtr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator completionPredicate unusable with scala DSL,CAMEL-9881,12959964,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bgaudaen,bgaudaen,19/Apr/16 11:38,20/Apr/16 14:35,14/Jul/23 05:50,19/Apr/16 17:39,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-scala,,,,,,,0,,,,,,"Due to the method declaration of completionPredicate in {{org.apache.camel.scala.dsl.SAggregateDefinition}} makes it impossible to use a completion predicate.
Method should be declared as:
{noformat}
def completionPredicate(filter: Exchange => Any) = {
{noformat}

Pull request to follow.",,bgaudaen,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,CAMEL-9892,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 20 07:57:44 UTC 2016,,,,,,,,,,,"0|i2wbcv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Apr/16 11:50;githubbot;GitHub user bgaudaen opened a pull request:

    https://github.com/apache/camel/pull/950

    CAMEL-9881 Fixed completionPredicate method definition

    Fixed completionPredicate method definition
    Added a simple unit test

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bgaudaen/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/950.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #950
    
----
commit eeffd20c775369e9f6ea3f07220260ebdf5945c1
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-04-19T11:40:46Z

    CAMEL-9881 Fixed completionPredicate method definition for scala DSL and added a simple unit test

----
;;;","19/Apr/16 17:39;davsclaus;Thanks for the PR.

You are welcome to improved and fix more on the camel-scala DSL;;;","20/Apr/16 07:57;githubbot;Github user bgaudaen closed the pull request at:

    https://github.com/apache/camel/pull/950
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Jetty consumer endpoint incorrectly handles multipart/form-data,CAMEL-9874,12959583,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rpozarickij,rpozarickij,18/Apr/16 09:05,28/Apr/16 08:28,14/Jul/23 05:50,28/Apr/16 08:28,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-jetty,,,,,,,0,,,,,,"The problem lies in the way Camel Jetty (camel-jetty9 to be precise) handles multipart/form-data requets.

The issue consists of two parts:
* NPE is thrown if no Content-Type is specified in a part;
* Only application/octet-stream part Content-Type is supported (not sure whether it actually should be relevant)

Location in code:
https://github.com/apache/camel/blob/c134e5a6e104c60ddcd198341718a37f0a4401ba/components/camel-jetty9/src/main/java/org/apache/camel/component/jetty9/AttachmentHttpBinding.java#L53

To reproduce:
{code}
from(""jetty:http://0.0.0.0:8028"").process((e) -> {});
{code}

The call (generated from postman)
{code}
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse(""multipart/form-data; boundary=---011000010111000001101001"");
RequestBody body = RequestBody.create(mediaType, ""-----011000010111000001101001\r\nContent-Disposition: form-data; name=\""test\""\r\n\r\ntest\r\n-----011000010111000001101001--"");
Request request = new Request.Builder()
  .url(""http://localhost:8028/"")
  .post(body)
  .addHeader(""content-type"", ""multipart/form-data; boundary=---011000010111000001101001"")
  .addHeader(""cache-control"", ""no-cache"")
  .addHeader(""postman-token"", ""a9fd95b6-04b9-ea7a-687e-ff828ea00774"")
  .build();

Response response = client.newCall(request).execute();
{code}


Exception:
{code}
org.apache.camel.RuntimeCamelException: Cannot populate attachments
        at org.apache.camel.component.jetty9.AttachmentHttpBinding.populateAttachments(AttachmentHttpBinding.java:56) ~[camel-jetty-2.17.0.jar!/:2.17.0]
        at org.apache.camel.http.common.DefaultHttpBinding.readRequest(DefaultHttpBinding.java:176) ~[camel-http-common-2.17.0.jar!/:2.17.0]
        at org.apache.camel.http.common.HttpMessage.<init>(HttpMessage.java:52) ~[camel-http-common-2.17.0.jar!/:2.17.0]
        at org.apache.camel.component.jetty.CamelContinuationServlet.service(CamelContinuationServlet.java:161) ~[camel-jetty-common-2.17.0.jar!/:2.17.0]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[javax.servlet-api-3.1.0.jar!/:3.1.0]
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812) ~[jetty-servlet-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669) ~[jetty-servlet-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.servlets.MultiPartFilter.doFilter(MultiPartFilter.java:200) ~[jetty-servlets-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:43) ~[camel-jetty-common-2.17.0.jar!/:2.17.0]
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) ~[jetty-servlet-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) [jetty-servlet-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127) [jetty-server-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061) [jetty-server-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.server.Server.handle(Server.java:499) [jetty-server-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311) [jetty-server-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257) [jetty-server-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544) [jetty-io-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.15.v20160210.jar!/:9.2.15.v20160210]
        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]
Caused by: java.lang.NullPointerException: null
        at org.apache.camel.component.jetty9.AttachmentHttpBinding.populateAttachments(AttachmentHttpBinding.java:48) ~[camel-jetty-2.17.0.jar!/:2.17.0]
        ... 22 common frames omitted
{code}

SO: https://stackoverflow.com/questions/36656340/how-to-upload-a-file-via-multipart-form-data-file-upload-to-camel-jetty-2-17-0",,davsclaus,rpozarickij,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 28 07:55:12 UTC 2016,,,,,,,,,,,"0|i2w907:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Apr/16 07:55;davsclaus;Thanks for reporting, indeed there is that NPE and the content-type do not make so much sense to be only that type. I am removing that restriction, and then your test-case works now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VetoCamelContextStartException with rethrowException=false cases MainSupport class to hang,CAMEL-9872,12959498,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jimih,jimih,17/Apr/16 22:40,24/Apr/16 09:07,14/Jul/23 05:50,24/Apr/16 09:07,2.17.0,,,,,,,,,,,,,,2.18.0,,,,camel-core,,,,,,,0,,,,,,"Hi,

I just created my own LifecycleStrategy implementation, that performs some sanity checks on context startup, and throws a VetoCamelContextStartException if it detects a problem. But since I only want a user friendly error message to be printed, and no stack trace, I opted to have rethrowException=false. That caused Camel to abort the start of the context. But it keeps the process running, instead of letting it terminate. If I use rethrowException=false the process terminates as expected.

When debugging this in Eclipse, I see that Camel get stuck in the method waitUntilCompleted() in org.apache.camel.main.MainSupport.

I use Apache Camel 2.17.0, Camel Spring (XML), and start the process using org.apache.camel.spring.Main. When asking about this behaivor in the user mailing list, Claus Ibsen hinted that this is a bug that I should report here. Apparently the Main class doesn't handle the veto properly.

Regards
/Jimi",,jimih,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-17 22:40:07.0,,,,,,,,,,,"0|i2w8hb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IndexOutOfBoundsException when MSH-18 is not present,CAMEL-9867,12958512,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hqstevenson,hqstevenson,hqstevenson,13/Apr/16 15:49,14/Apr/16 05:43,14/Jul/23 05:50,14/Apr/16 05:43,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-mllp,,,,,,,0,,,,,,The MLLP Consumer is throwing a IndexOutOfBoundsException when the MSH segment doesn't contain enough segments to populate the headers.,,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Important,,,,,,,,,9223372036854775807,,,2016-04-13 15:49:33.0,,,,,,,,,,,"0|i2w2ef:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@PropertyInject doesn't work with Spring-Boot,CAMEL-9866,12958459,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,trohovsky,jnupponen,jnupponen,13/Apr/16 12:51,14/Apr/16 08:35,14/Jul/23 05:50,14/Apr/16 05:43,2.16.3,2.17.0,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-spring-boot,,,,,,,0,,,,,,"When I upgraded Camel Spring-Boot project to use Camel 2.16.3 from Camel 2.16.2 the @PropertyInject annotations broke.

The problem occurs when using the annotation in a Spring-Boot application like this
{code:java}
@SpringBootApplication
public class MySpringBootRouter extends FatJarRouter {

    @PropertyInject(""inject-value"")
    private String injectedValue;
    
    @Override
    public void configure() {
        from(""timer:trigger"")
        .log(""PropertyInject: ""+injectedValue);
    }
}
{code}

Running the code above with command
{noformat}
mvn spring-boot:run
{noformat}

causes the following exception:
{noformat}
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:478)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mySpringBootRouter': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: mySpringBootRouter; nested exception is org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Cannot add component as its already previously added: properties
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.apache.camel.spring.boot.FatJarRouter.main(FatJarRouter.java:26)
	... 6 more
Caused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: mySpringBootRouter; nested exception is org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Cannot add component as its already previously added: properties
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:154)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	... 19 more
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Cannot add component as its already previously added: properties
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1680)
	at org.apache.camel.impl.CamelPostProcessorHelper.getInjectionPropertyValue(CamelPostProcessorHelper.java:263)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectFieldProperty(DefaultCamelBeanPostProcessor.java:206)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor$1.doWith(DefaultCamelBeanPostProcessor.java:172)
	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:73)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:168)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:82)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148)
	... 22 more
Caused by: java.lang.IllegalArgumentException: Cannot add component as its already previously added: properties
	at org.apache.camel.impl.DefaultCamelContext.addComponent(DefaultCamelContext.java:370)
	at org.apache.camel.util.CamelContextHelper.lookupPropertiesComponent(CamelContextHelper.java:578)
	at org.apache.camel.impl.CamelPostProcessorHelper.getInjectionPropertyValue(CamelPostProcessorHelper.java:237)
	... 28 more
{noformat}

Using placeholders like {noformat}.log(""{{inject-value}}""){noformat} still works just as before. I tried to browse through changes between 2.16.2 and 2.16.3 but I didn't catch any obvious reason for this problem.

I created a runnable demo of the problem here: https://github.com/jnupponen/camel-properties-component-spring-boot-problem",,davsclaus,githubbot,jnupponen,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 14 08:35:36 UTC 2016,,,,,,,,,,,"0|i2w22n:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"13/Apr/16 20:57;trohovsky;The problem was introduced in CAMEL-9431. It should be enough to not add the properties component in https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/CamelAutoConfiguration.java#L132, because it is added later later in https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java#L578;;;","13/Apr/16 20:57;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/945

    CAMEL-9866 @PropertyInject doesn't work with Spring-Boot

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-9866

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/945.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #945
    
----
commit 805a59ee3af0db151b2af45e836698398433ba54
Author: Tomas Rohovsky <tomasrohovsky@seznam.cz>
Date:   2016-04-13T20:34:35Z

    CAMEL-9866 @PropertyInject doesn't work with Spring-Boot

----
;;;","14/Apr/16 05:43;davsclaus;Thanks for the PR;;;","14/Apr/16 05:53;jnupponen;Thank you, Tomas!;;;","14/Apr/16 08:35;githubbot;Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/945
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
loopDoWhile will loop forever if using ahc component in the loop.,CAMEL-9863,12958382,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sanigo@gmail.com,sanigo@gmail.com,13/Apr/16 07:16,13/Apr/16 09:22,14/Jul/23 05:50,13/Apr/16 09:22,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-core,,,,,,,0,,,,,,"I have tested several times. The loop condition will not be checked if ahc component is in the loop.
        from(""quartz2://jf-log/trigger3?trigger.repeatInterval=2&trigger.repeatCount=0"")
            .loopDoWhile(body().isNotEqualTo(""done""))
              .setHeader(Exchange.HTTP_METHOD, constant(""GET""))
              .to(""ahc:https://www.baidu.com/"")
              .choice()
              .when(exchangeProperty(""CamelLoopIndex"").isEqualTo(3))
                .setBody(constant(""done""))
                .endChoice()
              .end()
            .end()
            .to(""mock:result"");
The loop will be infinite, the workarround is to use http component instead of ahc.",,davsclaus,sanigo@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 13 09:04:29 UTC 2016,,,,,,,,,,,"0|i2w1lj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Apr/16 07:48;davsclaus;Provide more details;;;","13/Apr/16 08:26;sanigo@gmail.com;A sample test route is provided now.;;;","13/Apr/16 09:04;davsclaus;Thanks I have re produced the issue and its a bug in the do while loop;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential NPE in UndertowComponent.unregisterConsumer,CAMEL-9862,12958100,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jamesnetherton,jamesnetherton,12/Apr/16 12:51,13/Apr/16 17:30,14/Jul/23 05:50,13/Apr/16 11:36,2.16.3,2.17.0,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-undertow,,,,,,,0,,,,,,"There's a potential NPE in the UndertowComponent class when Undertow consumers are stopped. Here's a snippet from the unregisterConsumer method:

{code}
    public void unregisterConsumer(UndertowConsumer consumer) {
        int port = consumer.getEndpoint().getHttpURI().getPort();
        if (serversRegistry.containsKey(port)) {
            serversRegistry.get(port).unregisterConsumer(consumer);
        }
        if (serversRegistry.get(port).isEmpty()) {
          // stuff happens here
        }
    }
{code}

If serversRegistry.containsKey returns false for the given port, then we should not be proceeding to call methods like isEmpty afterwards.",,davsclaus,githubbot,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 13 17:30:06 UTC 2016,,,,,,,,,,,"0|i2vzuv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Apr/16 07:49;davsclaus;Can you do a PR;;;","13/Apr/16 11:18;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/943

    [CAMEL-9862] Fix potential NPE in UndertowComponent.unregisterConsumer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-9862

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/943.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #943
    
----
commit 6d0fd96ef197073cb345823bf7f5adb9d0a554df
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-04-13T10:48:11Z

    [CAMEL-9862] Fix potential NPE in UndertowComponent.unregisterConsumer

----
;;;","13/Apr/16 11:36;davsclaus;Thanks for the PR;;;","13/Apr/16 17:30;githubbot;Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/943
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Stream Cache contains duplicate namespace definition,CAMEL-9854,12957676,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ay,siano,siano,11/Apr/16 11:52,28/Apr/16 12:18,14/Jul/23 05:50,28/Apr/16 12:18,2.16.3,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,,,,,,,,0,,,,,,"If stream caching is enabled for incoming messages in Camel-CXF and a namespace defined on the SOAP envelope is also defined on the root tag of the payload document the XML contained within the stream cache contains a duplicate namespace definition.

See attached unit test for details",,ay,davsclaus,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Apr/16 11:55;siano;0001-CAMEL-9854-CXF-Stream-Cache-contains-duplicate-names.patch;https://issues.apache.org/jira/secure/attachment/12798016/0001-CAMEL-9854-CXF-Stream-Cache-contains-duplicate-names.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 28 12:17:36 UTC 2016,,,,,,,Patch Available,,,,"0|i2vx8v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Apr/16 11:57;siano;BTW: The underlying issue was always there, but it only manifests in conjunction with the fix for CAMEL-9774;;;","12/Apr/16 12:55;ay;This code will potentially mutate the original nsmap and I am wondering if we need to extract the valid prefixes without mutating the original nsmap object. It seems to be the nsmap is used once and disposed after its single use, so mutating the nsmap will be okay.

If someone sees some concern, please let me know.
If not, I will proceed to apply this patch.
regards, aki;;;","28/Apr/16 11:01;davsclaus;Aki did you commit this and can this ticket be closed? And set the fix versions.;;;","28/Apr/16 12:17;ay;Hi Claus,
I think I committed the patch but forgot to set this ticket as resolved.
thanks.
regards, aki;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-CXF: Possible NPE in DefaultCXFBinding,CAMEL-9853,12957655,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,11/Apr/16 09:48,11/Apr/16 10:19,14/Jul/23 05:50,11/Apr/16 10:19,,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-cxf,,,,,,,0,,,,,,"https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java#L690-L696

It is possible to pass an header value with null and if the headerFilterStrategy allow null values this will throw an NPE",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-11 09:48:17.0,,,,,,,,,,,"0|i2vx47:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-weather: freegeoip.net is no longer available. Need switch to something else.,CAMEL-9852,12957614,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,11/Apr/16 06:25,11/Apr/16 07:14,14/Jul/23 05:50,11/Apr/16 07:14,,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-weather,,,,,,,0,,,,,,"We have two choices:

https://freegeoip.io/json
http://ip-api.com/json

The first seems to be the successor of freegeoip.net. So I guess we can go with them and maybe take a look, sometimes, if they are up and running.
",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-11 06:25:33.0,,,,,,,,,,,"0|i2vwv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Zookeeper RoutePolicy failing to create znode,CAMEL-9851,12957576,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mtran,mtran,10/Apr/16 23:39,17/Apr/16 22:59,14/Jul/23 05:50,15/Apr/16 06:54,2.17.0,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-zookeeper,,,,,,,0,,,,,,"I am trying to setup a ZooKeeper route policy like this

ZooKeeperRoutePolicy policy = new ZooKeeperRoutePolicy(""zookeeper:localhost/regexTest1?create=true"", 1);
from(""direct:start"").routePolicy(policy).to(“mock:end”);

And when I run my unit test to trigger the route, I get the following exception in my logs

{noformat}
Node '/regexTest1/192.168.202.25-3306c9d2-1354-4dbe-aaff-846eee5bb60d' did not exist, creating it.
Error setting up election node /regexTest1/192.168.202.25-25829641-de1f-4389-9bb6-2967ea60de1a
org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /regexTest1/192.168.202.25-25829641-de1f-4389-9bb6-2967ea60de1a
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:111) ~[zookeeper-3.4.8.jar:3.4.8--1]
	at org.apache.zookeeper.KeeperException.create(KeeperException.java:51) ~[zookeeper-3.4.8.jar:3.4.8--1]
	at org.apache.zookeeper.ZooKeeper.create(ZooKeeper.java:783) ~[zookeeper-3.4.8.jar:3.4.8--1]
	at org.apache.camel.component.zookeeper.operations.CreateOperation.getResult(CreateOperation.java:52) ~[camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.component.zookeeper.operations.ZooKeeperOperation.get(ZooKeeperOperation.java:70) ~[camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.component.zookeeper.ZookeeperProducer.createNode(ZookeeperProducer.java:222) ~[camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.component.zookeeper.ZookeeperProducer.synchronouslySetData(ZookeeperProducer.java:238) ~[camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.component.zookeeper.ZookeeperProducer.process(ZookeeperProducer.java:88) ~[camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:412) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:380) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:270) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:380) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:205) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:119) [camel-core-2.17.0.jar:2.17.0]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.createCandidateNode(ZooKeeperElection.java:146) [camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.testAndCreateCandidateNode(ZooKeeperElection.java:116) [camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.isMaster(ZooKeeperElection.java:92) [camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperRoutePolicy.onExchangeBegin(ZooKeeperRoutePolicy.java:79) [camel-zookeeper-2.17.0.jar:2.17.0]
	at org.apache.camel.processor.CamelInternalProcessor$RoutePolicyAdvice.before(CamelInternalProcessor.java:483) [camel-core-2.17.0.jar:2.17.0]
{noformat}

It looks like it knows the znode doesn’t exist but seems to be unable to create it? From the zookeeper server side logs, I can see incoming connections and it returning the error that the znode doesn’t exist but doesn’t look like there’s any attempts to create it after that.

I’ve tried using the zookeeper component directly in my route and I am able to create/write/read from a znode fine so it seems like it’s just failing in the route policy for some reason.

I am using Camel 2.17.0 and zookeeper 3.4.8


I’ve investigated this further and the exception is thrown from the ZooKeeper.create method. Camel is actually trying to create a znode with a path /regexTest1/192.168.202.25-25829641-de1f-4389-9bb6-2967ea60de1a without creating the parent node /regexTest1 first. 

According to the Zookeeper.create method documentation 

""If the parent node does not exist in the ZooKeeper, a KeeperException
    * with error code KeeperException.NoNode will be thrown.""

And I don’t see anywhere in Camel’s code where it is creating the parent nodes first before attempting to create the final node for master election.

So I removed the path off the uri for the route policy like this

ZooKeeperRoutePolicy policy = new ZooKeeperRoutePolicy(""zookeeper:localhost"", 1);

And it has gotten past that error but now has encountered a different error where it has trouble creating a threadpool.

{noformat}
2016-04-08 11:47:15,071 [main] ERROR org.apache.camel.component.zookeeper.policy.ZooKeeperElection - Error configuring ZookeeperElection
java.lang.IllegalArgumentException: id for thread pool org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@1ec912d7[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0][Camel-Zookeeper Ops executor] must be specified and not empty
	at org.apache.camel.util.ObjectHelper.notEmpty(ObjectHelper.java:351) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultExecutorServiceManager.onThreadPoolCreated(DefaultExecutorServiceManager.java:522) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultExecutorServiceManager.newThreadPool(DefaultExecutorServiceManager.java:191) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultExecutorServiceManager.newFixedThreadPool(DefaultExecutorServiceManager.java:230) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.component.zookeeper.ZooKeeperConsumer.doStart(ZooKeeperConsumer.java:72) ~[camel-zookeeper-2.16.0.jar:2.16.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3219) ~[camel-core-2.16.0.jar:2.16.0]
{noformat}",mac,davsclaus,mtran,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Apr 17 22:44:58 UTC 2016,,,,,,,,,,,"0|i2vwmn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Apr/16 05:43;davsclaus;The last stacktrace is with Camel 2.16.0. Can you make sure you use the same version eg 2.17.0;;;","15/Apr/16 06:03;davsclaus;The other error is because there is no path. We would need to fix that in the consumer.;;;","15/Apr/16 06:54;davsclaus;Thanks for reporting;;;","17/Apr/16 22:44;mtran;-Just tried the fix in the snapshot and it works, thank you very much!-

Sorry that was premature, I wasn't using your fix. When I actually tried to use the snapshot it didn't work but I think it's because the Apache Maven snapshot repo is out of date (https://repository.apache.org/content/repositories/snapshots/org/apache/camel/apache-camel/2.17-SNAPSHOT/)

And I can't find an updated one. I'll just test this when it is released. Thanks for your help anyway.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Twitter: truncation has no effect,CAMEL-9850,12957532,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,binfalse,binfalse,10/Apr/16 11:35,13/Apr/16 10:40,14/Jul/23 05:50,13/Apr/16 10:35,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-twitter,,,,,,,0,,,,,,"h3. Problem
The current version of camel-twitter implements a truncation that does not have any effect:
[UserProducer.java#L66|https://github.com/apache/camel/blob/83383c6318b1861d82d447165714f976e62229ab/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/producer/UserProducer.java#L66]

{code:java}
if (status.length() > 160) {
    log.warn(""Message is longer than 160 characters. Message will be truncated!"");
    status = status.substring(0, 160);
}
{code}

Status updates were truncated to 160 chars if they were longer. 

However, the twitter limit is 140 chars. Updates with a length of 141-160 will not be truncated and fail; updates with a length of more than 160 will be truncated to 160 chars and still fail.
Moreover, there are longer messages that are nevertheless compliant with the 140 char limit. See for example URLs: every URL is shortened using twitter's t.co shortener. Thus, even very long URLs occupy just a handful characters and the character counting, as used in camel-twitter, fails.


h3. Proposals
To fix this issue I prepared three proposals:

h4. Remove Truncation
As the truncation has no effect anyway it could simply be deleted. See my [commit b96035b on github|https://github.com/binfalse/camel/commit/b96035b239974e3ddf4cb1c9a84258e11b9a1433].

h4. Update Truncation
Update the current code to truncate to 140 chars. See my [commit 83b3f30 on github|https://github.com/binfalse/camel/commit/83b3f30c3ff993c50a250fd1085d7830c6570b62].

h4. Introduce an optional Truncation
As explained above, there are valid messages with more than 140 characters, eg. containing long URLs (see above). Using the previous solution it would not be possible to tweet them.
Thus, based on [commit 83b3f30|https://github.com/binfalse/camel/commit/83b3f30c3ff993c50a250fd1085d7830c6570b62] I implemented optional truncation in my [commit bbbff05 on github|https://github.com/binfalse/camel/commit/bbbff051f3f982711e91ea60fb86b9218b567d63].
That way, the client can decide whether messages should be truncated or not. There is a new flag {{truncate}} that can be used what creating an endpoint, eg.:

{code}
twitter://timeline/user?consumerKey=%s&...&truncate=true
{code}

However, if deciding for {{truncate=false}} the client should be aware that updating twitter may fail raising a {{twitter4j.TwitterException}}.

I nevertheless set the default value to false, as this best reflects the previous behaviour and will not break other code.",,binfalse,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 13 10:40:16 UTC 2016,,,,,,,Patch Available,,,,"0|i2vwcv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Apr/16 10:35;davsclaus;Yeah Martin that sounds good. Can you do a PR or patch file?;;;","12/Apr/16 10:35;davsclaus;Frankly I think we should just remove the truncation and let twtitter deal with it, if its too long it will complain anyway.;;;","13/Apr/16 09:31;githubbot;GitHub user binfalse opened a pull request:

    https://github.com/apache/camel/pull/942

    camel-twitter: remove truncation

    This removes the non-effective truncation of messages to be sent to twitter.
    See https://issues.apache.org/jira/browse/CAMEL-9850

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/binfalse/camel twitter-no-truncation

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/942.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #942
    
----
commit cbada76346fa0aae74128b2b74aa3a834144ea63
Author: Martin Scharm <martin@binfalse.de>
Date:   2016-04-09T09:53:12Z

    camel-xmpp: fix private chat response issue
    
    Responding to a private chat wasn't able because the message was always sent to
    
        String participant = exchange.getIn().getHeader(XmppConstants.TO, String.class);
    
    However, the `XmppConstants.TO` in such messages is the camel instance
    (which received the message) and not the chat's other participant.
    Thus, responding to a chat message always resultet in a message to itself.
    This patch fixes that issue and addresses messages always to
    
        String participant = endpoint.getParticipant();

commit cb1b8f6337c4795fc9d5046c204ff1e5dc86d533
Author: Martin Scharm <martin@binfalse.de>
Date:   2016-04-09T10:05:03Z

    Merge branch 'master' of github.com:binfalse/camel

commit b31266e5b0f29c596288f1432a55445a60b4888b
Author: Martin Scharm <martin@binfalse.de>
Date:   2016-04-10T08:33:17Z

    Merge github.com:apache/camel

commit b96035b239974e3ddf4cb1c9a84258e11b9a1433
Author: Martin Scharm <martin@binfalse.de>
Date:   2016-04-10T08:36:52Z

    camel-twitter: removed the truncation
    
    Twitter status updates were truncated to 160 chars if they were longer.
    However the twitter limit is 140 chars, so this truncation didn't have
    any effect and I removed it.

----
;;;","13/Apr/16 10:35;davsclaus;Thanks for the PR;;;","13/Apr/16 10:40;githubbot;Github user binfalse closed the pull request at:

    https://github.com/apache/camel/pull/942
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
XMPP: private chat response issue,CAMEL-9847,12957437,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,binfalse,binfalse,09/Apr/16 10:39,10/Apr/16 10:49,14/Jul/23 05:50,10/Apr/16 06:07,2.17.0,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-xmpp,,,,,,,0,,,,,,"There is an issue in the {{org.apache.camel.component.xmpp.XmppPrivateChatProducer}} that prevents responding to XMPP private chat messages. The participant's address is obtained as

{code:java}
String participant = exchange.getIn().getHeader(XmppConstants.TO, String.class);
{code}
(see https://github.com/apache/camel/blob/4ad8bcfde6ba931e526cd8680e211a397c6c71e7/components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java#L68)


In case of an incoming message that is the camel instance itself, not the participant. However, from that it creates the outgoing message just as

{code:java}
message.setTo(participant);
{code}
(see https://github.com/apache/camel/blob/4ad8bcfde6ba931e526cd8680e211a397c6c71e7/components/camel-xmpp/src/main/java/org/apache/camel/component/xmpp/XmppPrivateChatProducer.java#L82)

Thus, responding to a chat message always results in a message to itself and not the chat's other participant. 


I fixed the issue in https://github.com/binfalse/camel/commit/cbada76346fa0aae74128b2b74aa3a834144ea63 by using the {{endpoint.getParticipant()}} to set the receipient of the message. Based on that I created a pull request on github: https://github.com/apache/camel/pull/938",jdk1.8.0_65,binfalse,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Apr 10 10:49:32 UTC 2016,,,,,,,Patch Available,,,,"0|i2vvrr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Apr/16 10:44;githubbot;GitHub user binfalse opened a pull request:

    https://github.com/apache/camel/pull/938

     camel-xmpp: fix private chat response issue 

    This fixes the issue with XMPP private chat responses, see https://issues.apache.org/jira/browse/CAMEL-9847

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/binfalse/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/938.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #938
    
----
commit cbada76346fa0aae74128b2b74aa3a834144ea63
Author: Martin Scharm <martin@binfalse.de>
Date:   2016-04-09T09:53:12Z

    camel-xmpp: fix private chat response issue
    
    Responding to a private chat wasn't able because the message was always sent to
    
        String participant = exchange.getIn().getHeader(XmppConstants.TO, String.class);
    
    However, the `XmppConstants.TO` in such messages is the camel instance
    (which received the message) and not the chat's other participant.
    Thus, responding to a chat message always resultet in a message to itself.
    This patch fixes that issue and addresses messages always to
    
        String participant = endpoint.getParticipant();

commit cb1b8f6337c4795fc9d5046c204ff1e5dc86d533
Author: Martin Scharm <martin@binfalse.de>
Date:   2016-04-09T10:05:03Z

    Merge branch 'master' of github.com:binfalse/camel

----
;;;","09/Apr/16 23:27;binfalse;Just for references:
I stumbled upon this issue a week ago and created CAMEL-9804. But after I didn't receive a reply on the mailing list (https://mail-archives.apache.org/mod_mbox/camel-users/201604.mbox/%3C5703E694.7060208%40binfalse.de%3E), I started to investigate the issue myself and created the above mentioned patch and pull request.;;;","10/Apr/16 10:49;githubbot;Github user binfalse closed the pull request at:

    https://github.com/apache/camel/pull/938
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in MIME-Multipart Data Format if no file name is defined on attachment,CAMEL-9841,12957210,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,siano,siano,08/Apr/16 13:31,09/Apr/16 05:56,14/Jul/23 05:50,09/Apr/16 05:56,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-mail,,,,,,,0,,,,,,"If an MIME-Multipart message is unmarshalled into a Camel Message with attachments and the attachment parts do not have a file name defined, the MIME-Multipart data format will throw a NullPointerException (because the file name is used as the key for the map where the DataHandler is stored in the Camel Message).

The provided patch checks whether there is a file name defined on the data handler. If this is not the case the Content-ID header of the attachment is used, if that is also not defined a unique id is generated for the key.

See the two attached MIME-Multipart documents used in the unit tests for details.",,davsclaus,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Apr/16 13:46;siano;0001-NPE-in-MIME-Multipart-Data-Format-if-no-file-name-is.patch;https://issues.apache.org/jira/secure/attachment/12797729/0001-NPE-in-MIME-Multipart-Data-Format-if-no-file-name-is.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 09 05:56:59 UTC 2016,,,,,,,Patch Available,,,,"0|i2vudb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Apr/16 05:56;davsclaus;Thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InfinispanIdempotentRepository should force return values for RemoteCaches ,CAMEL-9840,12957146,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,08/Apr/16 08:44,08/Apr/16 14:52,14/Jul/23 05:50,08/Apr/16 14:52,,,,,,,,,,,,,,,2.18.0,,,,camel-infinispan,,,,,,,0,,,,,,See http://camel.465427.n5.nabble.com/infinispan-Idempotent-and-RemoteCacheManager-td5780600.html#a5780723,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-08 08:44:29.0,,,,,,,,,,,"0|i2vtz3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WatchConsumer does not properly set watchIndex,CAMEL-9834,12956843,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,lb,lb,lb,07/Apr/16 12:09,27/Apr/16 10:49,14/Jul/23 05:50,27/Apr/16 10:49,,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-etcd,,,,,,,0,,,,,,,,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-07 12:09:41.0,,,,,,,,,,,"0|i2vs3z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger seems to inject empty headers,CAMEL-9828,12956788,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdudgeon,tdudgeon,07/Apr/16 08:06,07/Apr/16 10:34,14/Jul/23 05:50,07/Apr/16 10:34,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-swagger,,,,,,,0,,,,,,"See http://camel.465427.n5.nabble.com/swagger-injects-empty-headers-in-2-17-0-td5780620.html
key part copied below.

I have routes built using REST DSL, and this includes swagger definitions.
With 2.1.6.2 all was good.
On switching to 2.17.0 I find that having a swagger query parameter definition causes a header property to be defined as an empty string even when there is no query parameter defined.
As an example, the REST DSL snippet looks like this:

.post(""/{notebookid}/e"").description(""Description ..."")
.bindingMode(RestBindingMode.json).produces(""application/json"")
.outType(Foo.class)
.param().name(""notebookid"").type(path).description(""Notebook ID"").dataType(""long"").endParam()

.param().name(""parent"").type(query).description(""The parent"").dataType(""long"").required(false).endParam()
.route()
.process((Exchange exch) -> {
    Long parent = exch.getIn().getHeader(""parent"", Long.class);
    ...
})
.endRest()

""parent"" is an optional query param.
With 2.16.2 there was no ""parent"" header.
With 2.17.0 a ""parent"" header is magically added with the value being the empty string, which causes the TypeConversion to Long to blow up. 

If I remove the swagger params then it works OK again.
",,davsclaus,tdudgeon,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 07 10:34:05 UTC 2016,,,,,,,,,,,"0|i2vrrr:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"07/Apr/16 10:34;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-cxf should be able to handle InOnly MEP for the RAW|MESSAGE dataFormat",CAMEL-9821,12956357,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,06/Apr/16 02:29,13/Apr/16 02:02,14/Jul/23 05:50,06/Apr/16 08:43,,,,,,,,,,,,,,,2.16.3,2.17.1,3.0.0,,camel-cxf,,,,,,,0,,,,,,"In case when use MESSAGE|RAW dataFormat, which means don't read the underlying InputStream so that can't determine the MEP(Message Exchange Pattern) from the incoming message, so that need specify the mep explicitly",,davidkarlsen,ffang,,,,,,,,,,,,,,,,,,CAMEL-9574,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 13 01:59:43 UTC 2016,,,,,,,,,,,"0|i2vp4f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Apr/16 17:33;davidkarlsen;Could https://issues.apache.org/jira/browse/CAMEL-9574 be fixed along this one?;;;","13/Apr/16 01:59;ffang;Yes, I believe so.

Cheers

Freeman;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SFTP readLock=changed does not work with readLockMinAge option,CAMEL-9820,12956281,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,_harini_,_harini_,05/Apr/16 20:42,06/Apr/16 10:09,14/Jul/23 05:50,06/Apr/16 10:09,2.16.1,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,,,,,,,,0,,,,,,"For the feature I am building, I need to use SFTP to fetch files to process. When it comes to large files, I want to be able to pick up a file for processing only when its been completely written. In order to achieve this, I tried the following combination suggesting the file age should be 10 minutes or more.

readLock=changed
readLockMinAge=10m 

This did not work as expected and kept picking up the files in the next poll as soon as the write has started. I found the following while debugging.

In class SftpChangedExclusiveReadLockStrategy,  

long startTime = (new Date()).getTime();  ==> returns time in milliseconds as long
newLastModified = f.getAttrs().getMTime();  ==> returns time in seconds as int casted to long.

Hence when the following check is made, the comparison becomes to be between newLastModified which is in seconds and newOlderThan in milliseconds hence never quite honoring the readLockMinAge specified.

(minAge != 0 && newLastModified < newOlderThan)

It looks like there should be 
newLastModified = f.getAttrs().getMTime() * 1000; 
to convert this to milliseconds.
",,_harini_,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-05 20:42:04.0,,,,,,,,,,,"0|i2vonj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty8 test missing dependency,CAMEL-9819,12956229,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,aphelio,aphelio,05/Apr/16 18:04,06/Apr/16 06:53,14/Jul/23 05:50,05/Apr/16 18:51,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-jetty,,,,,,,0,test,,,,,"When performing a clean build after a fresh clone of camel, the camel-jetty8 component fails to compile due to a missing org.apache.httpcomponents.httpclient dependency.

The camel-jetty8 component relies on camel-jetty9 tests:

{code:xml}
<configuration>
  <target>
    <copy todir=""target/generated/src/test/java"">
      <fileset dir=""../camel-jetty9/src/test/java"" />
    </copy>
  </target>
</configuration>
{code}

My attempted build failed at HttpBridgeBigFormPostRouteTest.java","java version ""1.7.0_91""
OpenJDK Runtime Environment (rhel-2.6.2.1.el7_1-x86_64 u91-b00)
OpenJDK 64-Bit Server VM (build 24.91-b01, mixed mode)

Maven 3.3.9",acosentino,aphelio,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Apr/16 18:05;aphelio;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12797134/patchfile.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Wed Apr 06 06:53:19 UTC 2016,,,,,,,Patch Available,,,,"0|i2vobz:",9223372036854775807,Unit Test Broken,,,,,,,,,,,,,,,,,,,"05/Apr/16 18:35;githubbot;GitHub user davgordo opened a pull request:

    https://github.com/apache/camel/pull/930

    CAMEL-9819: add httpclient to camel-jetty9 test dependencies

    The camel-jetty8 component fails to compile for me because of a problem with a missing dependency, described here: [CAMEL-9819](https://issues.apache.org/jira/browse/CAMEL-9819)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davgordo/camel CAMEL-9819

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/930.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #930
    
----
commit 0437f7db6be6e259962185069e75313b2b54748b
Author: David Gordon <davgordo@redhat.com>
Date:   2016-04-05T18:28:36Z

    CAMEL-9819: add httpclient from org.apache.httpcomponents to test dependencies for camel-jetty9

----
;;;","05/Apr/16 18:46;acosentino;Thanks, my mistake.

I forget to add the dependency on jetty8 too.

Many thanks :-);;;","05/Apr/16 18:48;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/930
;;;","05/Apr/16 18:51;acosentino;[~aphelio], many thanks! :-)

Fixed!;;;","05/Apr/16 18:53;aphelio;My pleasure. It's an honor to contribute to Camel for the first time! :)));;;","06/Apr/16 06:53;acosentino;We love contributions :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Zookeeper route policy requires first message to check if online.,CAMEL-9813,12955860,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jlpedrosa,jlpedrosa,04/Apr/16 18:25,28/Oct/16 09:13,14/Jul/23 05:50,28/Oct/16 09:13,2.17.0,,,,,,,,,,,,,,2.19.0,,,,camel-zookeeper,,,,,,,0,,,,,,"Hi All

i've been investigaten after I found the same issue as described in the email chain (http://camel.465427.n5.nabble.com/Zookeeper-Route-Policy-not-respected-on-route-with-sftp-consumer-td5771610.html)

The issue lies in the fact that ZookeeperRoutePolicy (ZRP from now on) waits to check if that node is master after the first message have been recived (which causes exception in the logs, and of course attempts to process messages).

What it does is simply throw an exception if we are not master... which stops the route, sounds like we should not even the start the route in the first place if we are not master. 

I've been playing around, trying to implement the first check in the onStart or onInit, the problem is that ZRP depends on a internal route injected on the policy, I guess that is why the original developer did it in ExchangeBegin instead of in start or onInit, to overcome the issue.


{code:java}
   private class ElectoralMonitorRoute extends RouteBuilder {
...
...
            from(zep).id(""election-route-"" + candidateName).sort(body(), comparator).process(new Processor() {
                @Override
                public void process(Exchange e) throws Exception {
                    @SuppressWarnings(""unchecked"")
                    List<String> candidates = e.getIn().getMandatoryBody(List.class);
                    // we cannot use the binary search here and the candidates a not sorted in the normal way
                    /**
                     * check if the item at this location starts with this nodes
                     * candidate name
                     */
                    int location = findCandidateLocationInCandidatesList(candidates, candidateName); 
                    if (location != -1) {
                        // set the nodes
                        masterNode.set(location <= enabledCount);
                        LOG.debug(""This node is number '{}' on the candidate list, election is configured for the top '{}'. this node will be {}"",
                                new Object[]{location, enabledCount, masterNode.get() ? ""enabled"" : ""disabled""}
                        );
                    }
                    electionComplete.countDown();

                    notifyElectionWatchers();
                }
{code}

which makes a route dependant on another to start, which is hard to solve in a clean way.

Also i found that for some routes (my case) it also does not start them automatically because they are stopped and not suspended:

{code}
  public static boolean resumeService(Object service) throws Exception {
        if (service instanceof SuspendableService) {
            SuspendableService ss = (SuspendableService) service;
            if (ss.isSuspended()) {
                LOG.debug(""Resuming service {}"", service);
                ss.resume();
                return true;
            } else {
                return false;
            }
        } else {
            startService(service);
            return true;
        }
    }
{code}

","Java 1.8
wildfly 10.0.0
camel 2.17.0",davsclaus,jlpedrosa,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-6924,CAMEL-10292,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 06 09:29:18 UTC 2016,,,,,,,,,,,"0|i2vm27:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Apr/16 11:13;jlpedrosa;Hi
I've been reviewing this in detail, I think this implementation is broken by design.

A route to start correctly depends on another route that is created by the first route (the option chosen by the original developer of wait to the first message to trigger the failure does not seem good enough to my point of view). I'm working on a RoutePolicy implemented usign curator on top of zookeeper, seems simple, if it works fine, I'll suply the code.
[~davsclaus] any feedback?
;;;","05/Apr/16 17:52;jlpedrosa;Hi, 
I've been made a working implementation using curator. It would need a litlte bit of javadoc and maybe polish, but functional without loosing messages. 

;;;","06/Apr/16 05:17;davsclaus;Jose sounds good about Curator. There is an existing ticket about that CAMEL-6924;;;","08/Apr/16 14:26;jlpedrosa;I'll review that issue, my implementation only covers RoutePolicy, not Consumer or producer.

Is it good enough to start a new component? camel-curator? or should we use zookpeer name and use curator on top?

JL;;;","09/Apr/16 05:49;davsclaus;Yeah use curator on top of zookeeper. curator is for using zk easier.;;;","06/Sep/16 08:57;davsclaus;I think [~lb] fixed this yesterday.;;;","06/Sep/16 09:29;lb;Not yet for zookeeper, should work on this before eow;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel leaves Kafka consumers running after shutdown,CAMEL-9812,12955753,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,jlpedrosa,jlpedrosa,04/Apr/16 13:00,05/Apr/16 11:19,14/Jul/23 05:50,05/Apr/16 09:24,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-kafka,,,,,,,0,,,,,,"After shutting down a camel context, there are still threads running kafka consumers. 

In the logs after the shutdown I can see:

{noformat}
14:45:57,455 INFO  [org.apache.camel.spring.SpringCamelContext] (ServerService Thread Pool -- 81) Apache Camel 2.17.0 (CamelContext: ucms-camel-ctx) uptime 25.047 seconds
14:45:57,455 INFO  [org.apache.camel.spring.SpringCamelContext] (ServerService Thread Pool -- 81) Apache Camel 2.17.0 (CamelContext: ucms-camel-ctx) is shutdown in 0.856 seconds
14:45:57,494 INFO  [org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean] (ServerService Thread Pool -- 81) Closing JPA EntityManagerFactory for persistence unit 'default'
14:45:57,652 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-3) WFLYSRV0028: Stopped deployment ucms-wildfly-container-3.0.1-SNAPSHOT.war (runtime-name: ucms-wildfly-container-3.0.1-SNAPSHOT.war) in 1098ms
14:45:57,906 INFO  [org.jboss.as.repository] (DeploymentScanner-threads - 2) WFLYDR0002: Content removed from location /opt/wildfly/standalone/data/content/20/13979a02e4b4ec178461d06c2de59fbf424215/content
14:45:57,916 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 2) WFLYSRV0009: Undeployed ""ucms-wildfly-container-3.0.1-SNAPSHOT.war"" (runtime-name: ""ucms-wildfly-container-3.0.1-SNAPSHOT.war"")
14:46:24,972 INFO  [org.apache.kafka.clients.consumer.internals.AbstractCoordinator] (Camel (ucms-camel-ctx) thread #0 - KafkaTopic[ucmsControlTopic]) Marking the coordinator 2147483647 dead.
14:46:26,467 INFO  [org.apache.kafka.clients.consumer.internals.AbstractCoordinator] (Camel (ucms-camel-ctx) thread #2 - KafkaTopic[TOPIC1]) Marking the coordinator 2147483647 dead.
{noformat}

So in theory the context is stopped, but I can see threads running with the polling of the sockets of kafka consumers (see attached immage).

This deployed in an application server (wilfly in my case), causes a lot of issues, because apps get deployed and undeployed without stopping the  JVM, but threads from previous deployments are left there.

Please also bear in mind that kafka (9.0.1) throws warning messages due to the fact that un expected config items are thrown to the kafka consumer properties.

{noformat}
14:45:33,840 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.ticket.renew.window.factor = 0.8 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.kinit.cmd = /usr/bin/kinit was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.ticket.renew.jitter = 0.05 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.keystore.type = JKS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.trustmanager.algorithm = PKIX was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration sasl.kerberos.min.time.before.relogin = 60000 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.protocol = TLS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.enabled.protocols = TLSv1.2,TLSv1.1,TLSv1 was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.truststore.type = JKS was supplied but isn't a known config.
14:45:33,841 WARN  [org.apache.kafka.clients.consumer.ConsumerConfig] (ServerService Thread Pool -- 76) The configuration ssl.keymanager.algorithm = SunX509 was supplied but isn't a known config.
{noformat}

Thanks!


","wildfly 10
Java 1.8
Camel: 2.17.0",acosentino,davsclaus,jlpedrosa,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Apr/16 13:26;jlpedrosa;kafkaThreadStack.png;https://issues.apache.org/jira/secure/attachment/12796825/kafkaThreadStack.png",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 05 11:19:48 UTC 2016,,,,,,,,,,,"0|i2vlef:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Apr/16 13:56;davsclaus;Thanks for reporting. Sound like the consumer need to call some stop/shutdown on kafka somewhere if its not already doing that, or missing something.;;;","04/Apr/16 13:58;acosentino;I will take a look :-);;;","05/Apr/16 09:23;acosentino;It seems we weren't closing the consumer. Now it should be ok.

I guess we should take a look to Consumer Group to make possible the use of multiple consumers on the same topics.

Also we need to review the kafka properties, but I guess this should be in another JIRA;;;","05/Apr/16 10:02;jlpedrosa;Do you want me to open the other ticket?;;;","05/Apr/16 10:24;acosentino;Yes, please :-) This way we can trace better.;;;","05/Apr/16 11:08;jlpedrosa;done, https://issues.apache.org/jira/browse/CAMEL-9818;;;","05/Apr/16 11:19;acosentino;Thanks :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,
Blocking of CXF consumer endpoint by http GET request,CAMEL-9807,12955721,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,joerg,joerg,04/Apr/16 10:30,04/Apr/16 12:35,14/Jul/23 05:50,04/Apr/16 12:35,2.16.2,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-cxf,,,,,,,0,,,,,,"Hi,
by chance we found a problem that can create a security risk. The scenario is a CXF WS consumer endpoint configured without WSDL and right after that a step, e.g. a setHeader that uses an XPath to access the CXF payload. When you now create a http GET request on the endpoint (normally it should be POST) then the error No type converter available to convert from type: org.apache.camel.component.cxf.converter.CachedCxfPayload to the required type: javax.xml.transform.sax.SAXSource with value org.apache.camel.component.cxf.converter.CachedCxfPayload@45812dad
is thrown.
First of all it is surprising that CXF accepts the request. Second a type conversion like that is possible. The reason for this error message is within the type converter coding. The converter returns a null object for the not existing payload of the GET request but this is interpreted as there is no type converter available. One could say that this is just a bad error message but more over the type converter is now kind of black-listed internally. That means the next calls being correct or wrong will not look for a type converter but return immedeately the above error. That means the endpoint is blocked until the scenario is restarted. This seems to be more efficient than a DOS attack (but of course one has to have access rights). I provide a simple patch that raises a runtime exception in the CXF type converter when there is no payload. I am not 100% sure whether this is the best way to fix it. Maybe GET requests should be blocked already in CXF. I also could imagine that somethin like that is also possible in other components. 
We use Camel 2.16.2 and I tested it in CXF 2.16.3 and it is not fixed.  ",,davsclaus,joerg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Apr/16 10:31;joerg;CXFTypeConverter.patch;https://issues.apache.org/jira/secure/attachment/12796798/CXFTypeConverter.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 04 12:35:08 UTC 2016,,,,,,,Patch Available,,,,"0|i2vl7b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Apr/16 12:35;davsclaus;Thanks for reporting and the patch. I modified it a bit and added a 2nd test that does a bit more testing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - body not copied from in to out when useing outputHeader and outputType=SelectOne when sql doesn't return a result,CAMEL-9805,12955685,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,Thomas.Bender@flatironssolutions.com,Thomas.Bender@flatironssolutions.com,04/Apr/16 06:24,28/Apr/16 08:15,14/Jul/23 05:50,28/Apr/16 08:15,2.17.0,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-sql,,,,,,,0,,,,,,"When using the options outputHeader and outputType=SelectOne the body of the Exchange is not copied from in to out when the select returns no data..

Probably root is line 175-185 of SqlProducer.java that is missing an else for the above mentioned case.

{code}
if (data != null) { // <--- Missing the else
// for noop=true we still want to enrich with the row count header
  if (getEndpoint().isNoop()) {
    exchange.getOut().setBody(exchange.getIn().getBody());
  } else if (getEndpoint().getOutputHeader() != null) {
    exchange.getOut().setBody(exchange.getIn().getBody());
    exchange.getOut().setHeader(getEndpoint().getOutputHeader(), data);
  } else {
    exchange.getOut().setBody(data); 
  }
  exchange.getOut().setHeader(SqlConstants.SQL_ROW_COUNT, 1);
}
{code}

following could be added (untested)

{code}
else { // if data == null
if (getEndpoint().isNoop()) {
                                        exchange.getOut().setBody(exchange.getIn().getBody());
                                    } else if (getEndpoint().getOutputHeader() != null) {
                                        exchange.getOut().setBody(exchange.getIn().getBody());
                                    }
 exchange.getOut().setHeader(SqlConstants.SQL_ROW_COUNT, 0);
}
{code}

",,acosentino,davsclaus,Thomas.Bender@flatironssolutions.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Apr/16 06:26;Thomas.Bender@flatironssolutions.com;CamelSqlComponentTest.java;https://issues.apache.org/jira/secure/attachment/12796779/CamelSqlComponentTest.java","04/Apr/16 06:26;Thomas.Bender@flatironssolutions.com;db-camel-data.sql;https://issues.apache.org/jira/secure/attachment/12796780/db-camel-data.sql","04/Apr/16 06:26;Thomas.Bender@flatironssolutions.com;db-camel-schema.sql;https://issues.apache.org/jira/secure/attachment/12796781/db-camel-schema.sql",,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 28 08:15:57 UTC 2016,,,,,,,,,,,"0|i2vkzb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Apr/16 06:26;Thomas.Bender@flatironssolutions.com;Attached a testcase.;;;","28/Apr/16 07:12;davsclaus;Andrea do you have time to work on this today so we can get this fixed in the upcoming 2.17.1 release?;;;","28/Apr/16 07:14;acosentino;Yes, sorry I forget about this issue.;;;","28/Apr/16 08:15;acosentino;Resolved.

[~Thomas.Bender@flatironssolutions.com], sorry for the delay. Thanks for spotting this and for the test case too.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http4 - The producer should check the response header in the reply for content-type,CAMEL-9794,12955361,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,01/Apr/16 17:24,01/Apr/16 17:28,14/Jul/23 05:50,01/Apr/16 17:28,,,,,,,,,,,,,,,2.16.3,2.17.1,2.18.0,,camel-http4,,,,,,,0,,,,,,"[16:51:09]  <mbasovni>	davsclaus: ping
[16:51:50]  <mbasovni>	davsclaus: Hi, I have one question to the following line - https://github.com/apache/camel/blob/master/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java#L326",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-04-01 17:24:28.0,,,,,,,,,,,"0|i2vizj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"PropertyPlaceHolder not loading Property, thinks it is a Parameter",CAMEL-9793,12955337,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,flavouski,flavouski,01/Apr/16 15:55,02/Apr/16 07:05,14/Jul/23 05:50,02/Apr/16 07:05,2.16.2,2.17.0,,,,,,,,,,,,,2.16.3,2.17.1,2.18.0,,camel-swagger,rest,,,,,,0,,,,,,"When loading a standard rest service into Camel and setting up Swagger.
{code}
rest(""{{BASE_URL}}"").get(""/{customerId}"").description(""..."")...
{code}

The {{Base_URL}} portion is
1. interpreted as a parameter much like {customerId}, i.e. the JSON displays: ""{BASE_URL}"" and ""customerId"" as the parameter name (removing outside curly brace)
2. the associated property is not loaded from the properties file

The Property Place Holder portion though works for the rest-dsl configuration:
{code}
 restConfiguration().apiProperty(""api.title"", ""{{spring.application.name}}"")
{code}",,davsclaus,flavouski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 02 07:05:14 UTC 2016,,,,,,,,,,,"0|i2viu7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Apr/16 15:58;davsclaus;Yeah I think this is fixed. Try with 2.17.0 or the upcoming 2.16.3-SNAPSHOT;;;","01/Apr/16 16:05;flavouski;I'll try double checking the newly created bugs with the latest and updating them.;;;","01/Apr/16 18:37;flavouski;Still displays as: 
{code}
{
name: ""{BASE_URL}"",
in: ""path"",
description: """",
required: true,
type: ""string""
}
{code};;;","02/Apr/16 07:05;davsclaus;Thanks found the bug;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Input always a drop-down,CAMEL-9792,12955335,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,flavouski,flavouski,01/Apr/16 15:46,01/Apr/16 18:31,14/Jul/23 05:50,01/Apr/16 18:31,2.16.2,,,,,,,,,,,,,,2.17.0,,,,camel-swagger,,,,,,,0,,,,,,"The json below contains an empty enum:
{code:title=swagger.json|borderStyle=solid}
parameters: [
  {...
    name: ""customerId"",
    in: ""path"",
    description: ""The customer ID/RCIF number."",
    required: true,
    type: ""string"",
    enum: [ ]
  }
],...
{code}

But the Camel Code below code has no ""allowableValues"":
{code:title=camel.java|borderStyle=solid}
rest(baseUrl)
    //--------Swagger Documentation--------
    .description(""Retrieve Customer based on ID number"")
    .produces(MediaType.APPLICATION_JSON_VALUE)
  .get(""/{customerId}"")
    //--------Swagger Documentation--------
    .param().name(""customerId"").type(RestParamType.path).description(""The customer IDnumber."").required(true).dataType(""string"").endParam()
  .route()...;
{code}

This empty enum value forces the UI to produce an empty uneditable drop-down, when it should be a text-box.

Based on the latest master branch of https://github.com/swagger-api/swagger-ui",,flavouski,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 01 18:31:05 UTC 2016,,,,,,,,,,,"0|i2vitr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Apr/16 18:31;flavouski;empty enum removed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel polling the files from S3 only once if deleteAfterRead is false,CAMEL-9784,12954937,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yog.jira,yog.jira,31/Mar/16 12:28,28/Apr/16 07:05,14/Jul/23 05:50,28/Apr/16 07:05,2.17.0,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-aws,,,,,,,0,aws-s3,,,,,"if deleteAfterRead option is kept false while fetching all the files in the S3 bucket to linux machine, Camel polls all the files only once. I tried to debug org.apache.camel.component.aws.s3.S3Consumer.java class inside method poll() there is check for filesConsumed boolean variable which seems to be always true after the first polling and then it never access any files.

Same issue was reported http://stackoverflow.com/questions/34193738/apache-camel-s3-only-do-polling-once but the suggestion was to downgrade to 2.16.0 which has many different issues which got fixed in 2.17.0",Linux operating system,davsclaus,yog.jira,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8431,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,http://stackoverflow.com/questions/34193738/apache-camel-s3-only-do-polling-once,,,,,,,,,,,9223372036854775807,,,Thu Apr 28 06:59:39 UTC 2016,,,,,,,,,,,"0|i2vgdb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Apr/16 11:56;davsclaus;Can you work on a patch to fix this?;;;","27/Apr/16 18:39;davsclaus;Have you configured the fileName option? What is the actual endpoint configuration you are using? 

The one time polling only happens if you set the fileName. Its there to avoid polling the same file over and over again. That said I dont think the fileName option have so much value if it can only be used to poll a single file once.;;;","28/Apr/16 06:59;davsclaus;I was able to reproduce the issue and working on a fix;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot install camel-hazelcast in Karaf 3.x,CAMEL-9780,12954757,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mattsicker,mattsicker,30/Mar/16 20:42,15/Apr/16 12:39,14/Jul/23 05:50,31/Mar/16 08:27,2.17.0,,,,,,,,,,,,,,2.17.1,,,,camel-hazelcast,karaf,,,,,,1,,,,,,"From a fresh copy of Karaf 3.0.6, I execute the following commands:

{code}
feature:repo-add mvn:org.apache.camel.karaf/apache-camel/2.17.0/xml/features
feature:install camel-hazelcast
{code}

This gives me the following error:

{code}
Error executing command: Can't install feature camel-hazelcast/0.0.0:
Could not start bundle mvn:com.hazelcast/hazelcast/3.6 in feature(s) camel-hazelcast-2.17.0, camel-vertx-2.17.0: Activator start error in bundle com.hazelcast [77].
{code}

The stack trace from the log:

{code}
java.lang.IllegalStateException: Can't install feature camel-hazelcast/0.0.0:
Could not start bundle mvn:com.hazelcast/hazelcast/3.6 in feature(s) camel-hazelcast-2.17.0, camel-vertx-2.17.0: Activator start error in bundle com.hazelcast [77].
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeature(FeaturesServiceImpl.java:393)
	at Proxy40b297a4_bee2_4205_a5cf_e9ad778f5a4c.installFeature(Unknown Source)
	at org.apache.karaf.features.command.InstallFeatureCommand.doExecute(InstallFeatureCommand.java:72)
	at org.apache.karaf.features.command.FeaturesCommandSupport.doExecute(FeaturesCommandSupport.java:38)
	at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)[27:org.apache.karaf.shell.console:3.0.6]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)[27:org.apache.karaf.shell.console:3.0.6]
	at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)[27:org.apache.karaf.shell.console:3.0.6]
	at Proxy8567097e_b23c_4923_8fe4_f1ff64ddf37e.execute(Unknown Source)[:]
	at Proxy8567097e_b23c_4923_8fe4_f1ff64ddf37e.execute(Unknown Source)[:]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[27:org.apache.karaf.shell.console:3.0.6]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:480)[27:org.apache.karaf.shell.console:3.0.6]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:406)[27:org.apache.karaf.shell.console:3.0.6]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[27:org.apache.karaf.shell.console:3.0.6]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:182)[27:org.apache.karaf.shell.console:3.0.6]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:119)[27:org.apache.karaf.shell.console:3.0.6]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:94)
	at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:210)
	at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1$1.run(LocalConsoleManager.java:109)
	at java.security.AccessController.doPrivileged(Native Method)[:1.8.0_66]
	at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)[28:org.apache.karaf.jaas.modules:3.0.6]
	at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1.run(LocalConsoleManager.java:102)[27:org.apache.karaf.shell.console:3.0.6]
{code}

I can't tell if this is a problem in Camel or Hazelcast. I was already using camel-hazelcast in Camel 2.16.2 and it worked fine during installation.","Karaf 3.0.6, Java 1.8.0_66, Mac OS X 10.11.3",davsclaus,ggrzybek,mattsicker,srinivas@live.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 15 12:39:56 UTC 2016,,,,,,,,,,,"0|i2vf9b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Mar/16 06:02;davsclaus;Its hazelcast I think. Install a version that is either newer or older to make it work. 
;;;","31/Mar/16 08:20;davsclaus;This works in Karaf 4.x

{code}
davsclaus:/opt/apache-karaf-4.0.4/$ bin/karaf
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (4.0.4)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'system:shutdown' or 'logout' to shutdown Karaf.

karaf@root()> feature:repo-add camel 2.17.0
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.17.0/xml/features
karaf@root()> feature
feature                       feature:export-bundles        feature:info                  feature:install               feature:list                  feature:regions               feature:repo-add
feature:repo-list             feature:repo-refresh          feature:repo-remove           feature:requirement-add       feature:requirement-list      feature:requirement-remove    feature:start
feature:stop                  feature:uninstall             feature:version-list
karaf@root()> feature:install camel
karaf@root()> feature:install camel-hazelcast
{code};;;","31/Mar/16 08:22;davsclaus;Seems like hazelcast 3.6.1 works;;;","31/Mar/16 14:12;srinivas@live.com;[~cibsen@e-ma.net] Do you have instructions on how can I do that? I know camel-hazelcast 2.17 is pointing to 3.6.0 but not sure how can I change it to 3.6.1, appreciate your help.;;;","31/Mar/16 14:16;davsclaus;Just install 3.6.1 first, and then camel-hazelcast afterwards

install mvn:xxx/3.6.1

where xxx is the hazlecast maven name. You can find it using features:info camel-hazelcast.;;;","31/Mar/16 14:48;mattsicker;Thanks for the quick response, Claus.;;;","31/Mar/16 16:10;srinivas@live.com;[~cibsen@e-ma.net] Thanks for the response, I have followed your instructions and installed the bundles. I have tried to start hazelcast bundle received below error. 

Error executing command: Error executing command on bundles:
	Unable to execute command on bundle 259: Unresolved constraint in bundle com.hazelcast [259]: Unable to resolve 259.0: missing requirement [259.0] osgi.wiring.package; (osgi.wiring.package=com.hazelcast.client.impl.protocol.codec)

Is there anything that I am missing? 

{code}
karaf@root()> feature:info camel-hazelcast
Feature camel-hazelcast 2.17.0
Feature has no configuration
Feature has no configuration files
Feature depends on:
  camel-core 2.17.0
  transaction 0.0.0
Feature contains followed bundles:
  mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.scripting-api-1.0/2.6.0
  mvn:com.eclipsesource.minimal-json/minimal-json/0.9.4
  mvn:com.hazelcast/hazelcast/3.6
  mvn:com.hazelcast/hazelcast-client/3.6
  mvn:org.apache.camel/camel-hazelcast/2.17.0
Feature has no conditionals.
karaf@root()> install mvn:com.hazelcast/hazelcast/3.6.1
Bundle ID: 258
karaf@root()> install mvn:com.hazelcast/hazelcast-client/3.6.1
Bundle ID: 259
karaf@root()> install  mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.scripting-api-1.0/2.6.0
Bundle ID: 111
karaf@root()> install   mvn:com.eclipsesource.minimal-json/minimal-json/0.9.4
Bundle ID: 260
karaf@root()> install   mvn:org.apache.camel/camel-hazelcast/2.17.0
Bundle ID: 261

259 | Installed |  80 | 3.6.1                              | hazelcast
260 | Installed |  80 | 3.6.1                              | hazelcast-client
261 | Installed |  80 | 2.17.0                             | camel-hazelcast

karaf@root()> start 259
Error executing command: Error executing command on bundles:
	Unable to execute command on bundle 259: Unresolved constraint in bundle com.hazelcast [259]: Unable to resolve 259.0: missing requirement [259.0] osgi.wiring.package; (osgi.wiring.package=com.hazelcast.client.impl.protocol.codec)
{code}


diag has more details

{code}
karaf@root()> diag
hazelcast (259)
---------------
Status: Installed
Unsatisfied Requirements:
[259.0] osgi.wiring.package; (osgi.wiring.package=com.hazelcast.client.impl.protocol.codec)
[259.0] osgi.wiring.package; (&(osgi.wiring.package=javax.cache)(version>=1.0.0)(!(version>=2.0.0)))
[259.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.configuration)
[259.0] osgi.wiring.package; (&(osgi.wiring.package=javax.cache.event)(version>=1.0.0)(!(version>=2.0.0)))
[259.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.expiry)
[259.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.integration)
[259.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.management)
[259.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.processor)
[259.0] osgi.wiring.package; (&(osgi.wiring.package=javax.cache.spi)(version>=1.0.0)(!(version>=2.0.0)))
[259.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.logging.log4j)(version>=2.0.0)(!(version>=3.0.0)))
[259.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.logging.log4j.spi)(version>=2.0.0)(!(version>=3.0.0)))
[259.0] osgi.wiring.package; (&(osgi.wiring.package=org.jruby.embed.jsr223)(version>=1.7.0)(!(version>=2.0.0)))


hazelcast-client (260)
----------------------
Status: Installed
Unsatisfied Requirements:
[260.0] osgi.wiring.host; (&(osgi.wiring.host=com.hazelcast)(bundle-version>=0.0.0))
[260.0] osgi.wiring.package; (&(osgi.wiring.package=javax.cache)(version>=1.0.0)(!(version>=2.0.0)))
[260.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.configuration)
[260.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.expiry)
[260.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.integration)
[260.0] osgi.wiring.package; (osgi.wiring.package=javax.cache.processor)
[260.0] osgi.wiring.package; (&(osgi.wiring.package=javax.cache.spi)(version>=1.0.0)(!(version>=2.0.0)))
[260.0] osgi.wiring.package; (osgi.wiring.package=org.apache.logging.log4j)


camel-hazelcast (261)
---------------------
Status: Installed
Unsatisfied Requirements:
[261.0] osgi.wiring.package; (&(osgi.wiring.package=com.hazelcast.config)(version>=3.2.0)(!(version>=4.0.0)))
[261.0] osgi.wiring.package; (&(osgi.wiring.package=com.hazelcast.core)(version>=3.2.0)(!(version>=4.0.0)))
[261.0] osgi.wiring.package; (&(osgi.wiring.package=com.hazelcast.map.listener)(version>=3.2.0)(!(version>=4.0.0)))
[261.0] osgi.wiring.package; (&(osgi.wiring.package=com.hazelcast.query)(version>=3.2.0)(!(version>=4.0.0)))
[261.0] osgi.wiring.package; (&(osgi.wiring.package=com.hazelcast.ringbuffer)(version>=3.2.0)(!(version>=4.0.0)))
[261.0] osgi.wiring.package; (&(osgi.wiring.package=com.hazelcast.transaction)(version>=3.2.0)(!(version>=4.0.0)))
{code}
;;;","31/Mar/16 16:24;davsclaus;Install the client first.

And use the mailing list / user forum to get help. JIRA is NOT for that;;;","31/Mar/16 16:38;srinivas@live.com;sure, I will use mailing list going forward.;;;","15/Apr/16 12:39;ggrzybek;hazelcast 3.6.1 has OSGi problem. It's fixed [here|https://github.com/hazelcast/hazelcast/pull/7630];;;",,,,,,,,,,,,,,,,,,,,,,
camel-netty4-http - Using no port number issue,CAMEL-9779,12954658,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Mar/16 15:25,30/Mar/16 15:35,14/Jul/23 05:50,30/Mar/16 15:34,2.17.0,,,,,,,,,,,,,,2.16.3,2.17.1,2.18.0,,camel-netty-http,camel-netty4-http,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/netty4-http-IllegalArgumentException-port-out-of-range-1-tp5779995.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 30 15:35:07 UTC 2016,,,,,,,,,,,"0|i2venb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Mar/16 15:35;davsclaus;The work around is to use port 80 etc;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-zipfile - Using zip iterator with dataformat may fail,CAMEL-9777,12954629,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,30/Mar/16 13:32,30/Mar/16 13:34,14/Jul/23 05:50,30/Mar/16 13:34,2.17.0,,,,,,,,,,,,,,2.16.3,2.17.1,2.18.0,,camel-zipfile,,,,,,,0,,,,,,The zip entry may say the current size of the entry is -1 while there is still data.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-30 13:32:59.0,,,,,,,,,,,"0|i2vegv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFPayload may lose CDATA sections under stream caching,CAMEL-9774,12954555,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,30/Mar/16 08:06,30/Mar/16 10:32,14/Jul/23 05:50,30/Mar/16 08:15,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.1,2.18.0,,camel-cxf,,,,,,,0,,,,,,"CAMEL-8410 introduced CachedCXFPayload to add stream-caching support to CXFPayload. This may use during its sequence of conversions the default java.xml.transform.Transformer to convert javax.xml.transform.stax.StAXSource to SAX, which will then drop CDATA sections because its CDATA handling is empty.
http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/com/sun/org/apache/xalan/internal/xsltc/trax/StAXStream2SAX.java#StAXStream2SAX.handleCDATA%28%29

To avoid this, CachedCXFPayload can use the conversion utility already included in CXF.",,ay,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8410,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 30 08:15:40 UTC 2016,,,,,,,,,,,"0|i2vdzz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Mar/16 08:15;ay;switched to use CXF's StaxUtils instead of default Transformer and this also simplified the conversion steps.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP[4] component disableStreamCache issue: java.io.IOException: Attempted read from closed stream.,CAMEL-9768,12953848,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,erwelch,erwelch,27/Mar/16 14:33,07/Apr/16 08:43,14/Jul/23 05:50,07/Apr/16 08:43,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-http4,,,,,,,0,,,,,,"This issue is related to CAMEL-7638 which was recently fixed/released in 2.17.0

I was doing some testing with disableStreamCache=true on a http4 producer and am getting ""java.io.IOException: Attempted read from closed stream""

The stack trace shows the error occurring when trying to copy the input stream to an output stream inside the DefaultHttpBinding copyStream methods (i am using camel as a proxy from a sevlet component (consumer) to an http4 component (producer)).

I think though, I see the root cause of this issue.  Inside the HttpProducer process method.

{code}
// lets store the result in the output message.
        HttpResponse httpResponse = null;
        try {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Executing http {} method: {}"", httpRequest.getMethod(), httpRequest.getURI().toString());
            }
            httpResponse = executeMethod(httpRequest);
            int responseCode = httpResponse.getStatusLine().getStatusCode();
            LOG.debug(""Http responseCode: {}"", responseCode);

            if (!throwException) {
                // if we do not use failed exception then populate response for all response codes
                populateResponse(exchange, httpRequest, httpResponse, in, strategy, responseCode);
            } else {
                boolean ok = HttpHelper.isStatusCodeOk(responseCode, getEndpoint().getOkStatusCodeRange());
                if (ok) {
                    // only populate response for OK response
                    populateResponse(exchange, httpRequest, httpResponse, in, strategy, responseCode);
                } else {
                    // operation failed so populate exception to throw
                    throw populateHttpOperationFailedException(exchange, httpRequest, httpResponse, responseCode);
                }
            }
        } finally {
            if (httpResponse != null) {
                try {
                    EntityUtils.consume(httpResponse.getEntity());
                } catch (IOException e) {
                    // nothing we could do
                }
            }
        }
{code}

Specifically, that finally block at the end.

When disableStreamCache=true is set on the Producer, the raw input stream is put in the exchange body, which was the change fixed by CAMEL-7638

However, the finally block is consuming and closing that input stream making it unusable later when we try to copy it to the servlet output stream to send back to the caller.

I think the fix for this would be to check the endpoint to see if disableStreamCaching is set prior to consuming the entity in the finally block, perhaps something like this:

{code}
    ...
    } finally {
            if (httpResponse != null && !getEndpoint().isDisableStreamCache()) {
                try {
                    EntityUtils.consume(httpResponse.getEntity());
                } catch (IOException e) {
                    // nothing we could do
                }
            }
        }
{code}",,davsclaus,erwelch,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 07 08:43:28 UTC 2016,,,,,,,,,,,"0|i2v9nj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Mar/16 10:35;davsclaus;Thanks yeah that sounds like a real fix. 

Can you provide a patch or PR for this?;;;","30/Mar/16 17:18;erwelch;I've not done a PR before but willing to give it a try!;;;","06/Apr/16 05:26;davsclaus;How is it going?;;;","06/Apr/16 11:37;githubbot;GitHub user erwelch opened a pull request:

    https://github.com/apache/camel/pull/932

    CAMEL-9768 HTTP[4] component disableStreamCache issue

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/erwelch/camel CAMEL-9768

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/932.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #932
    
----
commit 37fcca3e88940e5d07122b4d63f5837ba8ca0f17
Author: Edward Welch <ed@edjusted.com>
Date:   2016-04-06T11:35:10Z

    Check to see if disableStreamCache is enabled before consuming the httpResponse entity

----
;;;","07/Apr/16 08:43;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/932
;;;","07/Apr/16 08:43;davsclaus;Thanks. I added a so the stream is closed later so we cleanup nicely.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
CDI deployment problem in JBoss EAP 6.3,CAMEL-9767,12953847,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,antonin.stefanutti,saschag,saschag,27/Mar/16 13:32,29/Mar/16 09:36,14/Jul/23 05:50,29/Mar/16 09:34,2.17.0,,,,,,,,,,,,,,2.17.1,2.18.0,,,camel-cdi,,,,,,,0,,,,,,"I tried to upgrade my project to the new camel version. Sadly after changeing the version I got the following exception. 

{code}
org.jboss.solder.config.xml.util.XmlConfigurationException: Wrong root namespace for XML config file, expected:urn:java:ee, http://java.sun.com/xml/ns/javaee or no namespace, found:http://xmlns.jcp.org/xml/ns/javaee at vfs:/C:/workspace/xxx/xxx-ear/target/xxx.ear/lib/camel-cdi-2.17.0.jar/META-INF/beans.xml:22
	at org.jboss.solder.config.xml.model.ModelBuilder.build(ModelBuilder.java:72)
	at org.jboss.solder.config.xml.bootstrap.XmlConfigExtension.beforeBeanDiscovery(XmlConfigExtension.java:93)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.weld.util.reflection.SecureReflections$13.work(SecureReflections.java:267)
	at org.jboss.weld.util.reflection.SecureReflectionAccess.run(SecureReflectionAccess.java:52)
	at org.jboss.weld.util.reflection.SecureReflectionAccess.runAsInvocation(SecureReflectionAccess.java:137)
	at org.jboss.weld.util.reflection.SecureReflections.invoke(SecureReflections.java:263)
	at org.jboss.weld.introspector.jlr.WeldMethodImpl.invokeOnInstance(WeldMethodImpl.java:164)
	at org.jboss.weld.introspector.ForwardingWeldMethod.invokeOnInstance(ForwardingWeldMethod.java:51)
	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:154)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:245)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:233)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:213)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:75)
	at org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent.fire(AbstractDefinitionContainerEvent.java:46)
	at org.jboss.weld.bootstrap.events.BeforeBeanDiscoveryImpl.fire(BeforeBeanDiscoveryImpl.java:46)
	at org.jboss.weld.bootstrap.WeldBootstrap.startInitialization(WeldBootstrap.java:335)
	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:62)
	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1980)
	at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1913)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
{code}

It looks like the namespace in the beans.xml is JEE7 specific.","Java7
JBoss EAP 6.3",antonin.stefanutti,davsclaus,saschag,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 29 09:36:41 UTC 2016,,,,,,,,,,,"0|i2v9nb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Mar/16 16:26;davsclaus;[~antonin.stefanutti] wonder if you know about this. 

;;;","29/Mar/16 08:13;antonin.stefanutti;[~saschag] The new Camel CDI component is compatible with CDI 1.0 / Java EE 6 (and newer). However, it uses the new http://xmlns.jcp.org/xml/ns/javaee/ namespace instead of the http://java.sun.com/xml/ns/javaee/ one prior to Oracle changed them http://www.oracle.com/webfolder/technetwork/jsc/xml/ns/javaee/index.html#7. And apparently very old versions of Weld, even back when it was called Solder / Seam complain.

I'm going to revert back to the old one and do some testing. If everything passes, I'll push the change.;;;","29/Mar/16 08:31;saschag;[~antonin.stefanutti] As soon as I did remove the namespace JBoss stopped complaining. The guys from guava solved this problem by releasing a second version with a special classifier (https://github.com/google/guava/issues/1527).;;;","29/Mar/16 09:36;antonin.stefanutti;[~saschag] thanks. So I removed the namespace and did some thorough testing. It works fine. I've just pushed the change and merged it into {{2.17.x}} branch so that the fix will be available in the next {{2.17.1}} release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-itest-karaf - Cannot install in karaf 4 Unknown protocol: wrap,CAMEL-9766,12953822,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Mar/16 07:16,19/Dec/19 17:36,14/Jul/23 05:50,27/Mar/16 16:25,,,,,,,,,,,,,,,2.18.0,,,,karaf,tests,,,,,,0,,,,,,"When running

cd tests/camel-itest-karaf
mvn test -Dtest=CamelAmqpTest -Pkaraf4

It fails installing karaf 4 with an error
{code}
Caused by: java.io.IOException: Error downloading wrap:file:/Users/davsclaus/.m2/repository/org/apache/qpid/proton-j/0.10/proton-j-0.10.jar
	at org.apache.karaf.features.internal.download.impl.AbstractRetryableDownloadTask.run(AbstractRetryableDownloadTask.java:67)[9:org.apache.karaf.features.core:4.0.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_31]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)[:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.8.0_31]
	... 3 more
Caused by: java.io.IOException: Could not download [wrap:file:/Users/davsclaus/.m2/repository/org/apache/qpid/proton-j/0.10/proton-j-0.10.jar]
	at org.apache.karaf.features.internal.download.impl.SimpleDownloadTask.download(SimpleDownloadTask.java:90)[9:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.download.impl.AbstractRetryableDownloadTask.run(AbstractRetryableDownloadTask.java:58)[9:org.apache.karaf.features.core:4.0.4]
	... 7 more
Caused by: java.net.MalformedURLException: Unknown protocol: wrap
	at java.net.URL.<init>(URL.java:620)[:1.8.0_31]
	at java.net.URL.<init>(URL.java:483)[:1.8.0_31]
	at java.net.URL.<init>(URL.java:432)[:1.8.0_31]
	at org.apache.karaf.features.internal.download.impl.SimpleDownloadTask.download(SimpleDownloadTask.java:62)[9:org.apache.karaf.features.core:4.0.4]
	... 8 more
Caused by: java.lang.IllegalStateException: Unknown protocol: wrap
	at org.apache.felix.framework.URLHandlersStreamHandlerProxy.parseURL(URLHandlersStreamHandlerProxy.java:373)[org.apache.felix.framework-5.4.0.jar:]
	at java.net.URL.<init>(URL.java:615)[:1.8.0_31]
	... 11 more
{code}

So for some odd reason karaf cannot install bundles that has been wrapped. The initial feature set in karaf includes wrap

{code}
2016-03-27 09:08:56,229 | INFO  | pool-7-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.0.4 | Adding features: test-dependencies/[0,0.0.0], instance/[4.0.4,4.0.4], package/[4.0.4,4.0.4], log/[4.0.4,4.0.4], camel-core/[2.18.0.SNAPSHOT,2.18.0.SNAPSHOT], ssh/[4.0.4,4.0.4], aries-blueprint/[4.0.4,4.0.4], exam/[4.8.0,4.8.0], system/[4.0.4,4.0.4], feature/[4.0.4,4.0.4], shell/[4.0.4,4.0.4], management/[4.0.4,4.0.4], service/[4.0.4,4.0.4], camel-blueprint/[2.18.0.SNAPSHOT,2.18.0.SNAPSHOT], jaas/[4.0.4,4.0.4], shell-compat/[4.0.4,4.0.4], deployer/[4.0.4,4.0.4], diagnostic/[4.0.4,4.0.4], wrap/[0,0.0.0], bundle/[4.0.4,4.0.4], config/[4.0.4,4.0.4], kar/[4.0.4,4.0.4], camel-amqp/[2.18.0.SNAPSHOT,2.18.0.SNAPSHOT]
2016-03-27 09:10:52,997 | ERROR | pool-7-thread-1  | BootFeaturesInstaller            | 9 - org.apache.karaf.features.core - 4.0.4 | Error installing boot features
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 27 16:25:23 UTC 2016,,,,,,,,,,,"0|i2v9hr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Mar/16 07:17;davsclaus;[~gnodet] wonder if you may be able to figure out what is wrong?

The same tests runs fine in Karaf 2.x. if you run

cd tests/camel-itest-karaf
mvn test -Dtest=CamelAmqpTest
;;;","27/Mar/16 10:08;davsclaus;I found a different way of installing the features in these tests, so we install those features later, and not during boot as that is where karaf 4 fails.

;;;","27/Mar/16 13:38;davsclaus;There is a run-tests.sh script that runs these tests more reliably than using mvn clean install does. The latter tend to hang after 10-20 tests or so.

;;;","27/Mar/16 16:25;davsclaus;I found a new way of testing that works.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing qpid-amqp-1-0-client-jms dependency in the camel-amqp feature,CAMEL-9749,12953098,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xldai,xldai,24/Mar/16 05:50,02/Apr/16 09:21,14/Jul/23 05:50,02/Apr/16 09:21,2.16.2,,,,,,,,,,,,,,2.16.3,,,,karaf,,,,,,,0,,,,,,"There is error exception when trying to install camel-amqp feature install karaf OSGi container with command: feature:install camel-amqp
{code}
13:45:39,884 | ERROR | nsole user karaf | he.karaf.shell.support.ShellUtil  149 | 52 - org.apache.karaf.shell.core - 4.0.4 | Exception caught while executing command
org.osgi.service.resolver.ResolutionException: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-amqp; type=karaf.feature; version=""[2.16.2,2.16.2]""; filter:=""(&(osgi.identity=camel-amqp)(type=karaf.feature)(version>=2.16.2)(version<=2.16.2))"" [caused by: Unable to resolve camel-amqp/2.16.2: missing requirement [camel-amqp/2.16.2] osgi.identity; osgi.identity=org.apache.camel.camel-amqp; type=osgi.bundle; version=""[2.16.2,2.16.2]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-amqp/2.16.2: missing requirement [org.apache.camel.camel-amqp/2.16.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.apache.qpid.amqp_1_0.jms.impl)(version>=0.20.0)(!(version>=1.0.0)))""]]
{code}

the camel-amqp 2.16.2 bundle introduce a new qpid-amqp-1-0-client-jms dependency, it should be also added into camel-amqp feature definition.

Fix proposal (tested):
{code}
<bundle>wrap:mvn:org.apache.qpid/qpid-amqp-1-0-client-jms/0.28$Bundle-SymbolicName=qpid-amqp-1-0-client-jms&amp;Bundle-Version=0.28&amp;Export-Package=org.apache.qpid.amqp_1_0.jms.*;version=0.28</bundle>
{code}",Java 8,davsclaus,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 02 09:21:42 UTC 2016,,,,,,,,,,,"0|i2v50v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Mar/16 10:25;davsclaus;Can you provide the fix as a patch or PR?;;;","28/Mar/16 08:54;xldai;Seems the dependencies is changed in the latest 2.16.x camel-amqp component pom.xml 
{code}
 -      <artifactId>qpid-amqp-1-0-client-jms</artifactId>
-      <version>${qpid-version}</version>
+      <artifactId>qpid-jms-client</artifactId>
+      <version>${qpid-jms-client-version}</version>
{code}

The qpid-amqp-1-0-client-jms is replaced with qpid-jms-client. in this case, my fix is not useful anymore.;;;","02/Apr/16 09:21;davsclaus;Just test with snapshot and you can install camel-amqp now;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mina2Consumer exception handler do close session also for IOException,CAMEL-9739,12952401,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,thopap,thopap,22/Mar/16 11:31,22/Mar/16 12:47,14/Jul/23 05:50,22/Mar/16 12:47,2.16.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.1,2.18.0,camel-mina2,,,,,,,0,,,,,,"The camel-mina2 consumer Exception handler ({{org.apache.camel.component.mina2.Mina2Consumer.ReceiveHandler.exceptionCaught(IoSession, Throwable)}}
Is an implementation of the Mina2 interface {{org.apache.mina.core.service.IoHandler}}. The Javadoc Mina2 documentation of exceptionCaught explicitly mention, that Mina2 will close the connection for all IOExceptions automatically. But camel-mina2 seems to close the connection for any kind of exception.

*Current behavior:* If an error occurs on the transport layer (e.g. secure TCP connection where the certificate was not trusted and a SSLException occure), I saw the following warning:
{code}
org.apache.camel.component.mina2.Mina2Consumer#exceptionCaught(376) - Closing session as an exception was thrown from MINA
{code}
And also an error from mina2:
{code}
org.apache.mina.filter.ssl.SslHandler#destroy(210) - Unexpected exception from SSLEngine.closeInbound().
"" javax.net.ssl.SSLException: Inbound closed before receiving peer's close_notify: possible truncation attack?
{code}

From a functional perspective, beside the annoying log entries, it looks like the SSL error details are sometime not send properly back to the client.

*Current workaround:* I don’t have one.

*Suggested bugfix:* Implement the Mina2Consumer exception handling similar to {{org.apache.mina.handler.stream.StreamIoHandler.exceptionCaught(IoSession, Throwable)}} and do not handle IoException and simply rethrow them. E.g.
{code}
if (cause instanceof IOException) {
	LOG.info(""IOException will be closed by Mina itself"")
	return;
}
{code}
",,acosentino,davsclaus,thopap,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Mar/16 12:02;thopap;IoException.patch;https://issues.apache.org/jira/secure/attachment/12794746/IoException.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 22 12:47:26 UTC 2016,,,,,,,,,,,"0|i2v0pz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Mar/16 12:09;davsclaus;And this as well. And then change the INFO logging to DEBUG so its not noisy.;;;","22/Mar/16 12:47;acosentino;Done.

[~thopap] many thanks for the patch :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Thread leak for camel-mina2 consumers,CAMEL-9738,12952392,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,thopap,thopap,22/Mar/16 10:55,22/Mar/16 12:20,14/Jul/23 05:50,22/Mar/16 12:20,2.16.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.1,2.18.0,camel-mina2,,,,,,,0,,,,,,"The camel-mina2 consumer ({{org.apache.camel.component.mina2.Mina2Consumer.doStart()}}) internally start a Mina2 IoAcceptor ({{org.apache.mina.core.service.IoAcceptor}}), but the {{org.apache.camel.component.mina2.Mina2Consumer.doStop()}} do not invoke {{acceptor.dispose(true);}} to release the threadpool started by Mina2.

*Current behavior:* While stopping the web application, the threadpool started by Mina2 IoAcceptor will not be stopped, so we have several thread which do not properly shutdown.

*Current workaround:* I create custom CamelShutdownStrategy and collect all Mina2Consumer and invoke Mina2consumer.getAcceptor.dispose(true); OR as an alternative create a dedicated consumer and overwrite the stop method of the Mina2 consumer as seen here: https://github.com/oehf/ipf/commit/12fdde8df7ebbbb7cd9966aadeab3ea3bed8fe75

*Suggested bugfix:* In {{org.apache.camel.component.mina2.Mina2Consumer.doShutdown()}} call the IoAcceptor dispose(true) method after unbind from the address.
",,acosentino,davsclaus,thopap,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Mar/16 11:55;thopap;ConsumerDispose.patch;https://issues.apache.org/jira/secure/attachment/12794745/ConsumerDispose.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 22 12:20:10 UTC 2016,,,,,,,,,,,"0|i2v0nz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Mar/16 11:24;acosentino;Are you working on a patch? Thanks for spotting this :-);;;","22/Mar/16 11:58;thopap;I have attached a patch to this issue.;;;","22/Mar/16 11:59;acosentino;Thank you, I'll review it and merge it.;;;","22/Mar/16 12:07;davsclaus;Andrea can you backport this to all those active branches.;;;","22/Mar/16 12:09;acosentino;Yes :-);;;","22/Mar/16 12:20;acosentino;Done.

[~thopap] many thanks for the patch :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-swagger-java - Issue in appendModels in the reader,CAMEL-9732,12952072,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Mar/16 15:52,21/Mar/16 16:01,14/Jul/23 05:50,21/Mar/16 16:01,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-swagger,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Re-Bug-in-RestSwaggerReader-appendModels-need-confirmation-td5779271.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-21 15:52:08.0,,,,,,,,,,,"0|i2uyov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-josql: the sql script language does not work,CAMEL-9731,12952016,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,21/Mar/16 12:58,21/Mar/16 13:33,14/Jul/23 05:50,21/Mar/16 13:33,2.15.5,2.16.2,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,,,,,,,,0,,,,,,In OSGi the Sql script language doesn't seem to work.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-21 12:58:20.0,,,,,,,,,,,"0|i2uycf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in camel-jaxb when using in OSGi running from CamelTestBlueprint,CAMEL-9730,12952006,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Mar/16 12:28,21/Mar/16 21:02,14/Jul/23 05:50,21/Mar/16 12:54,2.17.0,,,,,,,,,,,,,,2.17.0,,,,camel-jaxb,osgi,,,,,,0,,,,,,"You can get this stacktrace with a camel-jaxb in testing using camel-test-blueprint.

{code}
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot load type converters using OSGi bundle: 28
	at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader.load(Activator.java:380)
	at org.apache.camel.core.osgi.OsgiTypeConverter.createRegistry(OsgiTypeConverter.java:219)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getDelegate(OsgiTypeConverter.java:185)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getStatistics(OsgiTypeConverter.java:160)
	at org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(DefaultCamelContext.java:3625)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2977)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2848)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2844)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2867)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2844)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2813)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:240)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Caused by: java.lang.NullPointerException: null
	at org.apache.camel.converter.jaxb.FallbackTypeConverter.setCamelContext(FallbackTypeConverter.java:116)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.addFallbackTypeConverter(BaseTypeConverterRegistry.java:462)
	at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader$Loader.load(Activator.java:471)
	at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader.load(Activator.java:378)
	at org.apache.camel.core.osgi.OsgiTypeConverter.createRegistry(OsgiTypeConverter.java:219)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getDelegate(OsgiTypeConverter.java:185)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getStatistics(OsgiTypeConverter.java:160)
	at org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(DefaultCamelContext.java:3625)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2977)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2848)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2844)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2867)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2844)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2813)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:240)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
{code}",,davsclaus,rcazambuja,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/Mar/16 20:56;rcazambuja;CAMEL-9730.patch;https://issues.apache.org/jira/secure/attachment/12794603/CAMEL-9730.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 21 20:53:43 UTC 2016,,,,,,,,,,,"0|i2uya7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Mar/16 20:53;rcazambuja;I believe that some commit related to this fix may have broken the build of class OsgiSpringCamelContext in camel-spring at camel-2.17.x branch.
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] C:\git\camel\components\camel-spring\src\main\java\org\apache\camel\osgi\OsgiSpringCamelContext.java:[48,15] error: constructor OsgiTypeConverter in class OsgiTypeConverter cannot be applied to given types;
[INFO] 1 error
[INFO] -------------------------------------------------------------


I believe the patch attached can solve the problem.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"change Reader to InputStream if the camel-cxf endpoint use RAW|MESSAGE DataFormat",CAMEL-9728,12951963,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,21/Mar/16 08:20,21/Mar/16 08:37,14/Jul/23 05:50,21/Mar/16 08:37,,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.1,2.18.0,,,,,,,,0,,,,,,"In most case when camel-cxf endpoint use RAW|MESSAGE DataFormat, DefaultCxfBinding.getContentFromCxf just return InputStream already, however in some cases such as use cxf jms transport with byte[] jms type, as cxf message content stored in a StringReader,  this make DefaultCxfBinding.getContentFromCxf  return NULL",,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-21 08:20:19.0,,,,,,,,,,,"0|i2uy0n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[OSGi] The camel-kafka feature can't be installed into karaf container completely,CAMEL-9718,12951067,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xldai,xldai,17/Mar/16 02:11,17/Mar/16 06:50,14/Jul/23 05:50,17/Mar/16 06:50,2.16.2,,,,,,,,,,,,,,2.16.3,,,,karaf,,,,,,,0,,,,,,"When trying to install the camel-kafka feature into karaf OSGi container, the com.101tec/zkclient/0.5 bundle can't be installed dur to it's wrong Import-Package section in the MANIFEST.
{code}
Caused by: java.lang.Exception: Unable to start bundle wrap:mvn:com.101tec/zkclient/0.5
	at org.apache.karaf.bundle.command.Install.execute(Install.java:98)[24:org.apache.karaf.bundle.core:4.0.4]
	... 11 more
Caused by: org.osgi.framework.BundleException: Unable to resolve com.101tec.zkclient [65](R 65.0): missing requirement [com.101tec.zkclient [65](R 65.0)] osgi.wiring.package; (osgi.wiring.package=org.apache.jute) Unresolved requirements: [[com.101tec.zkclient [65](R 65.0)] osgi.wiring.package; (osgi.wiring.package=org.apache.jute)]
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4111)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2117)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.karaf.bundle.command.Install.execute(Install.java:96)[24:org.apache.karaf.bundle.core:4.0.4]
	... 11 more
{code}

The package name: org.apache.jute and org.apache.zookeeper.proto should be removed from Import-Package, seems it's got fixed from zkclient project version 0.8.
https://github.com/sgroschupf/zkclient/commit/bbe5db97991ff10c2ba90338bc50a98eb24361fb

so this issue can be fixed by upgrade zkclient from 0.5 to 0.8 (as long as the 0.8 version is available from maven centre)
",Java 8,davsclaus,githubbot,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 17 06:50:56 UTC 2016,,,,,,,,,,,"0|i2usyf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Mar/16 05:53;davsclaus;Can you provide a patch or PR for the 2.16.x branch?;;;","17/Mar/16 06:34;githubbot;GitHub user xldai opened a pull request:

    https://github.com/apache/camel/pull/907

    fix CAMEL-9718 by upgrade zkclient to 0.8

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xldai/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/907.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #907
    
----
commit 47c9c416bd2487f704fa17710a8ea256a873d461
Author: Xilai Dai <xldai@talend.com>
Date:   2016-03-17T06:33:35Z

    fix CAMEL-9718 by upgrade zkclient to 0.8

----
;;;","17/Mar/16 06:49;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/907
;;;","17/Mar/16 06:50;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-boon - Unmarshal to Map does not work,CAMEL-9714,12950766,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Mar/16 07:52,16/Mar/16 08:04,14/Jul/23 05:50,16/Mar/16 08:04,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-boon,,,,,,,0,,,,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-16 07:52:43.0,,,,,,,,,,,"0|i2ur3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can not set custom Jetty HttpClient to producer endpoint,CAMEL-9713,12950597,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,joeluo,joeluo,15/Mar/16 17:13,16/Mar/16 07:17,14/Jul/23 05:50,15/Mar/16 19:48,2.15.1,,,,,,,,,,,,,,2.17.0,,,,camel-jetty,,,,,,,0,,,,,,"The camel-jetty page has a ""httpClient"" option that can be set on camel-jetty producer endpoint and it says:
{code}
To use a shared org.eclipse.jetty.client.HttpClient for all producers created by this endpoint. This option should only be used in special circumstances.
This option should only be used in special circumstances.
{code}

In some cases, user might want to set a shard Jetty HttpClient among camel-jetty producer endpoints. For instance, user might use recipientList with camel-jetty producer endpoint to support multiple dynamically created URLs. So setting a shared Jetty HttpClient with a shared thread pool would be ideal to avoid exploding number of producer endpoints + their own producer thread pools in this use case. However, there is no way to set it to camel-jetty producer endpoint.",,davsclaus,joeluo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Mar/16 17:19;joeluo;camel-jetty-shared-client-patch.txt;https://issues.apache.org/jira/secure/attachment/12793593/camel-jetty-shared-client-patch.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 16 07:17:06 UTC 2016,,,,,,,Patch Available,,,,"0|i2uq1z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Mar/16 19:26;davsclaus;The option was mistakenly just called client, so you can use that name in that release.;;;","15/Mar/16 21:21;joeluo;I am afraid that it won't work with changes on JettyHttpEndpoint.java only. We still need to change JettyHttpComponent.java class createEndpoint method to resolve the ""httpClient"" option and then set the HttpClient to the endpoint:
{code}
protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
...
     HttpClient httpClient = resolveAndRemoveReferenceParameter(parameters, ""httpClient"", HttpClient.class);
...
    if (httpClient != null) {
        endpoint.setHttpClient(httpClient);
    }
...
{code};;;","16/Mar/16 07:17;davsclaus;Ah yeah the uri is rebuild for the producer to call with those non camel parameters, and therefore we need to remove the client also. Thanks Joe.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Dozer Component - Fails to load custom function due to NPE ,CAMEL-9710,12950561,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,trohovsky,ranjit.nethi@gmail.com,ranjit.nethi@gmail.com,15/Mar/16 15:38,16/Mar/16 07:12,14/Jul/23 05:50,16/Mar/16 07:11,2.16.1,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-dozer,,,,,,,0,,,,,,"Camel Dozer component throws NPE, when using custom converter as shown in the following example. 

 <mapping>
    <class-a>org.example.A</class-a>
    <class-b>org.example.B</class-b>
    <field custom-converter-id=""_customMapping"" 
        custom-converter-param=""org.example.CustomMapper,mapCustomer"">
      <a>sourceField</a>
      <b>destinationField</b>
    </field>
  </mapping>

When the sourceField value is null in the Class A,Fails to load custom function and  throws RuntimeException caused due to NPE.

Issue with Code: (
------------------------
Class: CustomMapper
Method: invokeFunction
Line# 117

        Object customObj;
        Method method = null;
        try {
            Class<?> customClass = resolver.resolveClass(className);
            customObj = customClass.newInstance();

            // If a specific mapping operation has been supplied use that
            if (operation != null && prmTypesAndValues != null) {
                method = selectMethod(customClass, operation, source, prmTypesAndValues);
            } else if (operation != null) {
                method = customClass.getMethod(operation, source.getClass()); // ***** THIS LINE CAUSES NPE, as source is NULL */
            } else {
                method = selectMethod(customClass, source);
            }
        } catch (Exception e) {
            throw new RuntimeException(""Failed to load custom function"", e);
        }



StackTrace:
-------------------
java.lang.RuntimeException: Failed to load custom function
	at org.apache.camel.component.dozer.CustomMapper.mapCustom(CustomMapper.java:122)
	at org.apache.camel.component.dozer.CustomMapper.convert(CustomMapper.java:46)
	at org.dozer.MappingProcessor.mapUsingCustomConverterInstance(MappingProcessor.java:977)
	at org.dozer.MappingProcessor.mapFromFieldMap(MappingProcessor.java:355)
	at org.dozer.MappingProcessor.mapField(MappingProcessor.java:307)
	at org.dozer.MappingProcessor.map(MappingProcessor.java:267)
	at org.dozer.MappingProcessor.mapToDestObject(MappingProcessor.java:216)
	at org.dozer.MappingProcessor.createByCreationDirectiveAndMap(MappingProcessor.java:196)
	at org.dozer.MappingProcessor.mapGeneral(MappingProcessor.java:170)
	at org.dozer.MappingProcessor.map(MappingProcessor.java:104)
	at org.dozer.MappingProcessor.map(MappingProcessor.java:99)
	at org.dozer.DozerBeanMapper.map(DozerBeanMapper.java:120)
	at org.apache.camel.component.dozer.DozerProducer.process(DozerProducer.java:82)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:141)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.interceptor.HandleFaultInterceptor.process(HandleFaultInterceptor.java:42)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:91)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:412)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:380)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:270)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:380)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:221)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
	at com.ta.shop.integration.routes.doz.DozerJsonTest.testDozerHappyPath(DozerJsonTest.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.dozer.CustomMapper.mapCustom(CustomMapper.java:117)
",Any,davsclaus,githubbot,ranjit.nethi@gmail.com,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 16 07:11:47 UTC 2016,,,,,,,,,,,"0|i2uptz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Mar/16 18:04;trohovsky;I guess your Dozer mapping definition is incorrect, specifically {{custom-converter-param=""org.example.CustomMapper,mapCustomer""}}. See http://dozer.sourceforge.net/documentation/customconverter.html#Configurable_Custom_Converters.;;;","15/Mar/16 18:33;ranjit.nethi@gmail.com;Using Dozer standalone, and using configure custom converters with DozerMapper works just fine.
For ex, the config below works good for me:
	      <field custom-converter-id=""myCustomConverter"">
			<a>makeModel.code</a>
			<b>make</b>
		</field>

The problem is with the camel-dozer component, when implemented as suggested in the following page:
http://camel.apache.org/dozer.html
and using camel dozer endpoint like: 
dozer:transfromJSONFormatToCanonical?mappingFile=dozerMapping.xml&targetModel=com.test.canonical.schemas.nouns.WorkOrder;;;","15/Mar/16 19:51;trohovsky;I am working on the fix, will be available soon.;;;","15/Mar/16 20:16;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/905

    CAMEL-9710 Use sourceClass instead of source.getClass() to prevent NPE

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-9710

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/905.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #905
    
----
commit ef7e0591ae84fd77a40739ffdf8fde3df7199949
Author: Tomas Rohovsky <tomasrohovsky@seznam.cz>
Date:   2016-03-15T20:13:27Z

    CAMEL-9710 Use sourceClass instead of source.getClass() to prevent NPE

----
;;;","16/Mar/16 07:11;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/905
;;;","16/Mar/16 07:11;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Infinispan endpoint requires infinispan-query-dsl,CAMEL-9703,12949861,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tdiesler,tdiesler,14/Mar/16 12:17,14/Mar/16 12:31,14/Jul/23 05:50,14/Mar/16 12:31,,,,,,,,,,,,,,,2.17.0,,,,,,,,,,,0,,,,,,"{code}
java.lang.NoClassDefFoundError: org/infinispan/query/api/continuous/ContinuousQueryListener
	at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:198)
	at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:363)
	at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:351)
	at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:93)
	at org.apache.camel.component.infinispan.InfinispanEndpoint.createConsumer(InfinispanEndpoint.java:49)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:69)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:98)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3490)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3420)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3197)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3053)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2848)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2844)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2867)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2844)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2813)
	at org.wildfly.camel.test.infinispan.InfinispanIntegrationTest.testCacheEntryModifiedEvent(InfinispanIntegrationTest.java:255)
{code}",,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 14 12:30:25 UTC 2016,,,,,,,,,,,"0|i2uljb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Mar/16 12:18;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/899

    [CAMEL-9703] Infinispan endpoint requires infinispan-query-dsl

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9703

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/899.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #899
    
----
commit f1cb08f587f888ca317338490d3705c54b3a868c
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-03-14T12:18:10Z

    [CAMEL-9703] Infinispan endpoint requires infinispan-query-dsl

----
;;;","14/Mar/16 12:30;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/899
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
seda - discardIfNoConsumers=true do not call on completions ,CAMEL-9700,12949077,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Mar/16 13:09,11/Mar/16 13:14,14/Jul/23 05:50,11/Mar/16 13:14,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-core,,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/35938139/how-to-release-file-lock-with-camel-when-not-consuming-from-seda-queue/35940850#35940850",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-11 13:09:42.0,,,,,,,,,,,"0|i2uilz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-servlet karaf feature misses dependency on camel-core,CAMEL-9698,12948845,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,dzalbo,dzalbo,10/Mar/16 16:41,13/Mar/16 20:19,14/Jul/23 05:50,13/Mar/16 08:09,2.16.1,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-servlet,karaf,,,,,,0,,,,,,"Installing camel-servlet fails, as it looks like the dependency on camel-core has been removed from the features.xml

{noformat}
org.osgi.service.resolver.ResolutionException: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-servlet; type=karaf.feature; version=""[2.16.1,2.16.1]""; filter:=""(&(osgi.identity=camel-servlet)(type=karaf.feature)(version>=2.16.1)(version<=2.16.1))"" [caused by: Unable to resolve camel-servlet/2.16.1: missing requirement [camel-servlet/2.16.1] osgi.identity; osgi.identity=org.apache.camel.camel-servlet; type=osgi.bundle; version=""[2.16.1,2.16.1]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-servlet/2.16.1: missing requirement [org.apache.camel.camel-servlet/2.16.1] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.apache.camel)(version>=2.16.0)(!(version>=2.17.0)))""]]
	at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:235)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:158)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:216)[7:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:263)[7:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1089)[7:org.apache.karaf.features.core:4.0.4]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:985)[7:org.apache.karaf.features.core:4.0.4]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_66]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_66]
{noformat}


Indeed this is definition from features.xml (current SNAPSHOT version)

{code:xml}
<feature name='camel-servlet' version='${project.version}' resolver='(obr)' start-level='50'>
    <details> camel-servlet need to access the http OSGi services </details>
    <feature>http</feature>
    <bundle>mvn:org.apache.camel/camel-http-common/${project.version}</bundle>
    <bundle>mvn:org.apache.camel/camel-servlet/${project.version}</bundle>
  </feature>
{code}",,davsclaus,dzalbo,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 13 20:19:36 UTC 2016,,,,,,,,,,,"0|i2uh73:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Mar/16 16:55;davsclaus;Just install camel first which you really should;;;","10/Mar/16 16:56;davsclaus;A PR to fix this is welcome
http://camel.apache.org/contributing;;;","10/Mar/16 17:12;dzalbo;Yup, that's an easy fix indeed :)

But all other components seem to have that dependency. I'll make the PR.;;;","11/Mar/16 08:09;davsclaus;Wonder if you have time today to do the PR as we want to cut the 2.17 release this weekend or start of next week.;;;","11/Mar/16 10:05;githubbot;GitHub user dzalbo opened a pull request:

    https://github.com/apache/camel/pull/894

    CAMEL-9698 fix for camel-servlet karaf features

    Added dependency for camel-core in camel-servlet karaf feature (so that it can be installed without pre-installing camel-core)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dzalbo/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/894.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #894
    
----
commit 9403a8f4a4342923e1b1147ab33182c326ceb175
Author: Vladimir Dzalbo <v.dzalbo@mielooandalexander.com>
Date:   2016-03-11T09:38:06Z

    CAMEL-9698 fix for camel-servlet karaf features

----
;;;","13/Mar/16 20:19;githubbot;Github user dzalbo closed the pull request at:

    https://github.com/apache/camel/pull/894
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Websocket Component Failing to Install in Karaf 4,CAMEL-9689,12948549,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Rizon,Rizon,09/Mar/16 21:25,09/Mar/18 06:48,14/Jul/23 05:50,15/Mar/16 07:20,2.16.2,,,,,,,,,,,,,,2.17.0,,,,camel-websocket,karaf,,,,,,0,,,,,,"When installing the camel-websocket component in Karaf 4.0.4 the process hangs.

When I try to install via Karaf's hot deploy I get:

karaf@root()> ERROR: Bundle org.apache.camel.camel-websocket [94] Error starting file:/opt/apache-karaf-4.0.4/deploy/camel-websocket-2.16.2.jar (org.osgi.framework.BundleException: Unable to resolve org.apache.camel.camel-websocket [94](R 94.0): missing requirement [org.apache.camel.camel-websocket [94](R 94.0)] osgi.wiring.package; (&(osgi.wiring.package=javax.servlet)(version>=2.6.0)(!(version>=3.0.0))) Unresolved requirements: [[org.apache.camel.camel-websocket [94](R 94.0)] osgi.wiring.package; (&(osgi.wiring.package=javax.servlet)(version>=2.6.0)(!(version>=3.0.0)))]) org.osgi.framework.BundleException: Unable to resolve org.apache.camel.camel-websocket [94](R 94.0): missing requirement [org.apache.camel.camel-websocket [94](R 94.0)] osgi.wiring.package; (&(osgi.wiring.package=javax.servlet)(version>=2.6.0)(!(version>=3.0.0))) Unresolved requirements: [[org.apache.camel.camel-websocket [94](R 94.0)] osgi.wiring.package; (&(osgi.wiring.package=javax.servlet)(version>=2.6.0)(!(version>=3.0.0)))] at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4111) at org.apache.felix.framework.Felix.startBundle(Felix.java:2117) at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1371) at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:308) at java.lang.Thread.run(Thread.java:745)","Oracle Java 8, Apache Karaf 4.0.4",acosentino,davsclaus,Rizon,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,http://stackoverflow.com/questions/35918507/camel-websocket-component-fails-to-install-into-karaf,,,,,,,,,,,9223372036854775807,,,Fri Mar 09 06:48:56 UTC 2018,,,,,,,,,,,"0|i2ufdb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Mar/16 15:32;Rizon;Added StackOverflow URL:  http://stackoverflow.com/questions/35918507/camel-websocket-component-fails-to-install-into-karaf;;;","11/Mar/16 08:11;davsclaus;You need to install servlet 2.6;;;","11/Mar/16 08:12;davsclaus;And it uses jetty 8 and karaf 4 comes with jetty 9 - so you cannot run this easily in karaf 4. Camel 2.18 will drop support for old karaf versions and upgrade camel-websocket to be jetty 9 based.;;;","11/Mar/16 12:50;Rizon;Thank you Claus.  Is the release date of Camel 2.18 known?  I'll try using karaf 3.0.6 for now.;;;","13/Mar/16 08:08;davsclaus;We did some recent improves in the karaf features file so this can install on karaf 4 now.

You can help test the 2.17 release by building the source code and test it on your karaf 4
http://camel.465427.n5.nabble.com/HEADS-UP-Camel-2-17-and-Apache-Karaf-changes-td5778952.html;;;","09/Mar/18 05:39;xldai;This ERROR still happening on Camel 2.17.x (including the latest 2.17.7) when installing the camel-websocket feature on to Karaf 4.x
{code:java}
(osgi.wiring.package=javax.servlet)(version>=2.6.0)() not found.(version>=3.0.0)))
{code}
Camel-websocket bundle ask for javax.servlet [2.6,3), but actually there is no any existing servlet-api match this version range, means no quick workaround for it.

In case of there is a plan release a new 2.17.8 in the future, this commit should be backport into 2.17 branch. 
 [https://github.com/apache/camel/commit/e42ef725cd2d6dd09ebfaf24b0ead6b2fa393174#diff-1d6685bb3f3fa3de309de0d7419f7393];;;","09/Mar/18 06:48;acosentino;No plan for 2.17.8;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-swagger - Should use resolved placeholders in output,CAMEL-9687,12948479,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Mar/16 18:30,10/Mar/16 07:07,14/Jul/23 05:50,10/Mar/16 07:07,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-swagger,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-swagger-java-not-parse-property-tp5778734.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-09 18:30:36.0,,,,,,,,,,,"0|i2uexr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-aws - Using cron scheduler on aws-s3 do not work,CAMEL-9686,12948405,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Mar/16 14:18,09/Mar/16 14:22,14/Jul/23 05:50,09/Mar/16 14:21,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-aws,,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/35865863/camel-aws-s3-cron-schedule",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-09 14:18:45.0,,,,,,,,,,,"0|i2uehb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stream caching is broken under Spring Boot,CAMEL-9680,12948013,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jgogstad,jgogstad,08/Mar/16 14:11,09/Mar/16 09:58,14/Jul/23 05:50,09/Mar/16 09:58,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-spring-boot,,,,,,,0,,,,,,"As documented in the [camel-spring-boot documentation|https://camel.apache.org/spring-boot.html], camel-spring-boot will delegate type conversion to Spring by default (see {{org.apache.camel.spring.boot.TypeConversionConfiguration}}). Whenever the body of a route changes to a List, Spring believes it can convert it and fails. See the supplied test.

The runs correctly if the {{SpringTypeConverter}} is removed.

{code:java|title=StreamCachingTest.java}
package com.example.bugs;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.spring.boot.SpringTypeConverter;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.core.convert.ConversionService;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.DefaultConversionService;

import java.io.File;
import java.io.FileInputStream;
import java.util.List;

import static java.util.Arrays.asList;

public class StreamCachingTest extends CamelTestSupport {

    public static final String URI_END_OF_ROUTE = ""mock:end_of_route"";

    @EndpointInject(uri = URI_END_OF_ROUTE)
    private MockEndpoint endOfRoute;

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                context.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter(context, new ConversionService[]{new DefaultConversionService()}), true);

                from(""direct:foo"")
                    .streamCaching()
                    .bean(MyBean.class)
                    .to(URI_END_OF_ROUTE);
            }
        };
    }

    @Test
    public void stream_caching_with_spring() throws Exception {
        endOfRoute.expectedMessageCount(1);

        template.sendBody(""direct:foo"", new FileInputStream(new File(""src/main/resources/banner.txt"")));

        endOfRoute.assertIsSatisfied();

    }

    public static class MyBean {
        public List<Integer> someNumbers() {
            return asList(1, 2, 3);
        }
    }

    /**
     * Copied from org.apache.camel.spring.boot.TypeConversionConfiguration (they are package protected)
     **/
    @Bean
    SpringTypeConverter springTypeConverter(CamelContext camelContext, ConversionService[] conversionServices) {
        SpringTypeConverter springTypeConverter = new SpringTypeConverter(asList(conversionServices));
        camelContext.getTypeConverterRegistry().addFallbackTypeConverter(springTypeConverter, true);
        return springTypeConverter;
    }

    @ConditionalOnMissingBean
    @Bean
    ConversionService defaultCamelConversionService(ApplicationContext applicationContext) {
        DefaultConversionService service = new DefaultConversionService();
        for (Converter converter : applicationContext.getBeansOfType(Converter.class).values()) {
            service.addConverter(converter);
        }
        return service;
    }
}
{code}

Result:
{code:none}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-CAW811-53239-1457446127171-0-2][Message: 1,2,3]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1658)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:646)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:471)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:467)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:139)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
	at no.avinor.agressointegration.StreamCachingTest.stream_caching_with_spring(StreamCachingTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.StreamCache with value 1,2,3 due Failed to convert from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache] for value '[1, 2, 3]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:610)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:137)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)
	at org.apache.camel.impl.DefaultStreamCachingStrategy.cache(DefaultStreamCachingStrategy.java:189)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:765)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:744)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:412)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:380)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:270)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:380)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:221)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
	... 34 more
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache] for value '[1, 2, 3]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176)
	at org.apache.camel.spring.boot.SpringTypeConverter.convertTo(SpringTypeConverter.java:40)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:333)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:120)
	... 54 more
Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [org.apache.camel.StreamCache]
	at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:313)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:195)
	at org.springframework.core.convert.support.CollectionToObjectConverter.convert(CollectionToObjectConverter.java:64)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)
	... 59 more
{code}",,davsclaus,jgogstad,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Important,,,,,,,,,9223372036854775807,,,Wed Mar 09 09:58:27 UTC 2016,,,,,,,,,,,"0|i2uc27:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Mar/16 18:40;davsclaus;Yeah I start to wonder what the benefit for Camel would be with the spring type converter? Maybe we should disable it by default.;;;","09/Mar/16 09:33;davsclaus;[~hekonsek] do you remember what value-add the spring type converters would give us? ;;;","09/Mar/16 09:49;davsclaus;Okay its a bug in spring type converter where it returns true in the canConvert method, and then fail just right after calling convert. 

I am going to skip stream cache types.;;;","09/Mar/16 09:55;davsclaus;You can turn off this type converter with setting in your app properties

camel.springboot.typeConversion=false;;;","09/Mar/16 09:58;davsclaus;Thanks for reporting and the test.

I have fixed the type converter to not attempt converter camel stuff.

We can then consider turning off the bridge type converter all together by default if it causes more trouble.

Or if it really makes sense to have it enabled? I wonder what it brings to the table for Camel users?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
doTry .. doFinally should run the finally block for fault messages also,CAMEL-9673,12947632,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Mar/16 07:53,07/Mar/16 08:21,14/Jul/23 05:50,07/Mar/16 08:21,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-core,,,,,,,0,,,,,,"If a message has fault flag, then a doFinally block is only executed the first processor. We should ensure the entire block is processed like we do if an exception was thrown. The same kind of logic should apply for fault.",,davsclaus,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-07 07:53:31.0,,,,,,,,,,,"0|i2u9pr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException with interceptFrom,CAMEL-9672,12947623,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,siano,siano,07/Mar/16 06:55,07/Mar/16 08:58,14/Jul/23 05:50,07/Mar/16 08:58,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-core,jmx,,,,,,0,,,,,,"If a statement like

{code:java}
interceptFrom().when(simple(""${header.foo} == 'bar'"")).to(""mock:intercepted"");
{code}

is available in a route builder with JMX enabled the startup will fail in Camel 2.16.2 (and the current 2.17-SNAPSHOT) with a ClassCastException in line 310 of DefaultManagementObjectStrategy.

The generated processor is a FilterProcessor, but the resulting definition is a WhenDefinition not a FilterDefinition.

The reason is that CAMEL-8992 introduced a too precise class check for this.

The attached patch relexes the class constraint on the definition.",,davsclaus,siano,zgl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Mar/16 07:38;siano;0001-CAMEL-9672-ClassCastException-with-interceptFrom.patch;https://issues.apache.org/jira/secure/attachment/12791731/0001-CAMEL-9672-ClassCastException-with-interceptFrom.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 07 08:58:46 UTC 2016,,,,,,,Patch Available,,,,"0|i2u9nr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Mar/16 07:03;siano;One more comment about the patch: It does not contain a unit test because I was unsure where that would go. For testing I edited an arbitrary test in camel-test by adding above line to the route builder and overloding the useJms() method (that it always returns true instead of false) but I rather guess this is not the real place where the unit test for this should go.;;;","07/Mar/16 07:11;davsclaus;Thanks yeah JMX tests should go in the management directory. Maybe you can work on an unit test there as it would be great to have one to ensure this bug do not re-appear.;;;","07/Mar/16 07:38;siano;The attached patch does also contain a test for the issue (and the fix is improved);;;","07/Mar/16 08:58;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-ftp: No error message on invalid credentials,CAMEL-9670,12946932,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,dreske,dreske,04/Mar/16 09:32,04/Mar/16 10:44,14/Jul/23 05:50,04/Mar/16 10:44,2.14.2,2.15.5,2.16.2,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-ftp,,,,,,,0,,,,,,"As result of CAMEL-8718 the connection will be closed on invalid credentials before throwing an exception.

But disconnecting the ftpclient will reset the reply string, so the exception message is null.
The attached patch will store the reply string before disconnecting.",,acosentino,dreske,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Mar/16 10:30;dreske;camel-ftp.patch;https://issues.apache.org/jira/secure/attachment/12791440/camel-ftp.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 04 10:44:27 UTC 2016,,,,,,,Patch Available,,,,"0|i2u5e7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Mar/16 09:45;acosentino;Hi [~dreske],

I guess you need to rebase your patch with the latest code from camel-2.16.x branch.

It would be better if you recreate your patch against the camel-ftp from master branch, then we will backport your fix on the other branches.

Thanks for your contributions! :-);;;","04/Mar/16 10:30;dreske;Yes, the patch was based on 2.14.4
I've updated it.;;;","04/Mar/16 10:44;acosentino;Applied on master branch, camel-2.16.x branch and camel-2.15.x branch.

Thanks for the patch :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add lzf to DataFormatsDefinition,CAMEL-9668,12946599,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,lb,lb,03/Mar/16 16:32,04/Mar/16 08:50,14/Jul/23 05:50,04/Mar/16 08:50,,,,,,,,,,,,,,,,,,,camel-core,,,,,,,0,,,,,,,,githubbot,lb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 04 08:16:20 UTC 2016,,,,,,,,,,,"0|i2u3vr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Mar/16 16:40;githubbot;GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/884

    CAMEL-9668 - Add lzf to DataFormatsDefinition

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9668

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/884.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #884
    
----
commit 6a250904ecaf6ab1cfd595f6f537e293067d381c
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-03T16:39:45Z

    CAMEL-9668 - Add lzf to DataFormatsDefinition

----
;;;","04/Mar/16 08:16;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/884
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Safe copy of DefaultExchange does not propagate 'fault' property ,CAMEL-9666,12946491,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mbasovni,mbasovni,03/Mar/16 09:48,05/Mar/16 08:26,14/Jul/23 05:50,04/Mar/16 08:38,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-core,,,,,,,0,,,,,,"{{fault}} property should be copied in the following places:

https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java#L100
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java#L107

Consequences:
{{DefaultExchange#isFault()}} does not work if {{exception}} property is not set.",,davsclaus,githubbot,mbasovni,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 05 08:26:28 UTC 2016,,,,,,,,,,,"0|i2u37r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Mar/16 09:55;mbasovni;I am working on fix.;;;","03/Mar/16 10:21;githubbot;GitHub user basovnik opened a pull request:

    https://github.com/apache/camel/pull/882

    CAMEL-9666: Propagate 'fault' property to soft copy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/basovnik/camel CAMEL-9666

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/882.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #882
    
----
commit dbd9c0c6bf0203a0ab6c82876f5ee936f479fcba
Author: Martin Basovnik <mbasovni@redhat.com>
Date:   2016-03-03T10:19:04Z

    CAMEL-9666: Propagate 'fault' property to soft copy

----
;;;","03/Mar/16 10:21;mbasovni;https://github.com/apache/camel/pull/882;;;","04/Mar/16 08:38;davsclaus;Thanks for the PR;;;","05/Mar/16 08:26;githubbot;Github user basovnik closed the pull request at:

    https://github.com/apache/camel/pull/882
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ahc-ws Consumer does not connect,CAMEL-9665,12946170,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tom_guenter,tom_guenter,02/Mar/16 15:06,06/Mar/16 11:37,14/Jul/23 05:50,06/Mar/16 11:37,2.16.1,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-ahc-ws,,,,,,,0,,,,,,"WsEndpoint.connect(WsConsumer) should connect to the WebSocket server in case this is not already done. 

The test case (WsProducerConsumerTest.java) only works, since the producer is connecting first and the consumer is using the same connection. If no producer is used, then no connection is created and the consumer will not receive any messages.

Suggestion:

{code}
  void connect(final WsConsumer wsConsumer)
  {
    this.consumers.add(wsConsumer);

    if (this.websocket == null || !this.websocket.isOpen())
    {
      this.connect();
    }
  }
{code}",,davsclaus,tom_guenter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 06 11:37:36 UTC 2016,,,,,,,,,,,"0|i2u18f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/16 11:37;davsclaus;Thanks for reporting and the suggestion.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultRestletBinding.populateRestletRequestFromExchange uses wrong mediaType comparison,CAMEL-9664,12946169,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wblancqu,wblancqu,02/Mar/16 15:05,04/Mar/16 14:10,14/Jul/23 05:50,04/Mar/16 14:10,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-restlet,,,,,,,0,,,,,,"We are trying to bind an incoming POST REST call with Content-Type application/x-www-form-urlencoded to an outgoing one. The incoming request body containing the url encoded form does not get transferred to the outgoing one. We investigated and saw there's a bug in 
DefaultRestletBinding.populateRestletRequestFromExchange:180 (2.16.2):

if (request.getMethod() == Method.GET || (request.getMethod() == Method.POST && mediaType == MediaType.APPLICATION_WWW_FORM)) {

The mediaType gets compared using ==. This is wrong. The condition always evaluates to false although the configured Content-Type within the header is ""application/x-www-form-urlencoded"" (or in our case ""application/x-www-form-urlencoded; charset=ISO-8859-1"").",,wblancqu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-03-02 15:05:07.0,,,,,,,,,,,"0|i2u187:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP producers crash when Exchange.HTTP_URI header contains unencoded unsafe characters,CAMEL-9660,12946060,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tadayosi,tadayosi,02/Mar/16 06:22,07/Mar/16 01:49,14/Jul/23 05:50,04/Mar/16 09:43,2.16.2,2.17.0,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-http,camel-http-common,camel-http4,camel-jetty,,,,0,,,,,,"For instance,
{code:java}
template.sendBodyAndHeader(""jetty:http://localhost:9000/test?bridgeEndpoint=true"", ""Hello World"", Exchange.HTTP_URI, ""/<>{}"");
{code}
this test code crashes with the following error:
{code}
java.net.URISyntaxException: Illegal character in path at index 1: /<>{}
{code}
It is because there are places in the HTTP producers code where they are trying to create a {{java.net.URI}} instance based on the unsafe string ""/<>{}"".

This issue causes practical problems when bridging between Netty HTTP consumer endpoints and those HTTP producer endpoints, since Netty consumers route IN messages with {{Exchange.HTTP_URI}} header being unencoded.",,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9658,CAMEL-9442,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 07 01:49:09 UTC 2016,,,,,,,,,,,"0|i2u0jz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Mar/16 06:29;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/878

    CAMEL-9660 - HTTP producers crash when Exchange.HTTP_URI header contains unencoded unsafe characters

    Please review and merge it. Thanks!
    
    https://issues.jboss.org/browse/ENTESB-4737

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-9660

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/878.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #878
    
----
commit 01c0cd4fa33eec1e64e19967c5f4a0a7fa7a8545
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-03-02T06:26:46Z

    CAMEL-9660 - HTTP producers crash when Exchange.HTTP_URI header contains unencoded unsafe characters

----
;;;","07/Mar/16 01:49;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/878
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Path gets decoded when bridging HTTP endpoints,CAMEL-9658,12945760,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tadayosi,tadayosi,01/Mar/16 08:18,07/Mar/16 01:47,14/Jul/23 05:50,04/Mar/16 09:44,2.16.2,2.17.0,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-http,camel-http-common,camel-http4,camel-jetty,camel-netty-http,camel-netty4-http,,0,,,,,,"When bridging HTTP endpoints like this, the HTTP path gets decoded at the TO endpoint:
{code:java}
from(""netty-http:http://localhost:9000/camel?matchOnUriPrefix=true"")
        .to(""http4://host1:9000/fred?bridgeEndpoint=true"");
{code}
For instance, requesting to {{http://localhost:9000/camel/%3B}} will result in a call to {{http://host1:9000/fred/;}}, thus cause several issues downstream.",,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,,CAMEL-9660,,,CAMEL-9442,CAMEL-9640,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 07 01:47:07 UTC 2016,,,,,,,,,,,"0|i2typb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Mar/16 13:16;tadayosi;PR sent: https://github.com/apache/camel/pull/877;;;","07/Mar/16 01:47;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/877
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using SpringBoot HealthEndpoint bean throws AmbiguousMethodCallException,CAMEL-9656,12945509,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,charms,charms,29/Feb/16 16:26,22/Mar/16 09:53,14/Jul/23 05:50,22/Mar/16 09:53,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.1,2.18.0,,camel-spring-boot,,,,,,,0,,,,,,"I'm trying to re-use the Springboot Actuator HealthEndpoint and InfoEndpoint beans and exposing them via rest:
{code}
@Autowired
HealthEndpoint healthEndpoint;
...
//build the route
from(""rest:get:health"").routeId(""REST-healthcheck"").bean(healthEndpoint, ""invoke"");
{code}

However when that gets invoked, it throws a AmbiguousMethodCallException and its other candidate for ""invoke()"" is on the abstract class that HealthEndpoint is extending

It looks like the issue is here:
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java#L1020

In this case HealthEndpoint extends AbstractHealthEndpoint, which is abstract, but invoke() is declared on the Endpoint interface. So this logic: 
{code} !isFromInterface && Modifier.isAbstract(info.getMethod().getModifiers()) {code}
Will not evaluate to true, and the abstract method will remain a candidate.

Here are the sources for the Endpoint/HealthEndpoint/AbstractEndpoint classes:

https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Endpoint.java#L56

https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java#L32

https://github.com/spring-projects/spring-boot/blob/master/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java#L36

It seems this is intentional, due to the ""if the class is an interface then keep the method"" comment in BeanInfo.
I'm curious as to why that is.",,charms,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9690,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 22 08:04:36 UTC 2016,,,,,,,,,,,"0|i2tx67:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Mar/16 14:16;davsclaus;Can you build a sample project or somerthing and attach as a .zip or put on github etc. Then we can use that to look into this.;;;","04/Mar/16 14:48;charms;Will do Claus!;;;","22/Mar/16 08:04;davsclaus;I have reproduced the issue and working on a fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet consumer request fails if there is a space '%20' in the url,CAMEL-9651,12945121,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jmandawg,jmandawg,26/Feb/16 23:57,23/May/16 07:02,14/Jul/23 05:50,23/May/16 07:02,2.16.2,,,,,,,,,,,,,,2.18.0,,,,camel-restlet,,,,,,,1,,,,,,"Consuming a restful service using restlet component fails with URISyntaxException if there is a special character or space in the URL.  

To fix this org.apache.camel.component.restlet.RestletComponent should:

{code}
@Override
    public boolean useRawUri() {
        // should use encoded uri by default
        return true;
    }
{code}

Simple example of failure:

{code}
 rest(""/Utils"")
	    	.description(""Camel Utilities Rest Service"")
	    	.consumes(""application/json"").produces(""application/json"")
	    	.get(""test/testme"").route().log(""Got HEre"").
                to(""restlet:http://localhost:8299/Utils/test2/TEST%20Name?throwExceptionOnFailure=false&restletMethod=GET"")
                .getRestDefinition()
            .get(""test2/{name2}"").route().log(""GOt ${header.name2}"");
{code}

If you remove the space it works fine.

{code}
Caused by: java.net.URISyntaxException: Illegal character in path at index 38: http://localhost:8299/Utils/test2/TEST Name
	at java.net.URI$Parser.fail(URI.java:2848)
	at java.net.URI$Parser.checkChars(URI.java:3021)
	at java.net.URI$Parser.parseHierarchical(URI.java:3105)
	at java.net.URI$Parser.parse(URI.java:3053)
	at java.net.URI.<init>(URI.java:588)
	at org.apache.camel.component.restlet.RestletComponent.createEndpoint(RestletComponent.java:120)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:114)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:570)
{code}

It seems like there are lots of bugs with restlet component, What is the most mature service for consuming restful/http services?

Thanks.",,davsclaus,jmandawg,wblancqu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/Mar/16 13:33;jmandawg;patch.txt;https://issues.apache.org/jira/secure/attachment/12790925/patch.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 23 07:02:01 UTC 2016,,,,,,,,,,,"0|i2turr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Mar/16 14:27;jmandawg;So:

@Override
    public boolean useRawUri() {
        // should use encoded uri by default
        return true;
    }

Is definitely not the correct fix because it breaks path substitution...  Not sure how to fix this.;;;","02/Mar/16 13:33;jmandawg;I've attached a simple patch to use rawURL for the uriPattern and endpointURI ONLY.  This way restlet can match the uri correctly for consumer, and new URI() does not fail for producers.

Simple test to show consumer & producer both work with spaces in url.  Browse to http://localhost:9999/test%20me/now/:

{code}
from(""restlet:http://localhost:9999/test me/now"").process(new Processor() {
	@Override
	public void process(Exchange exchange) throws Exception {
                System.out.println(""Hi There"" + exchange.getIn().getHeader(Exchange.HTTP_QUERY));
			}
		}).choice()
         	.when(header(Exchange.HTTP_QUERY).isNull())
         		.to(""restlet:http://localhost:9999/test me/now?val=1"")
         	.otherwise()
             	.setHeader(""Content-Type"", constant(""application/json""))
         		.setBody(simple(""{\""DONE\"": \""${header.CamelHttpQuery}\""}""))
     		.endChoice();

{code};;;","18/May/16 00:43;jmandawg;Opened PR #986;;;","23/May/16 07:02;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF SOAP consumer fails when running in Karaf,CAMEL-9643,12944503,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,bocamel,bocamel,25/Feb/16 14:51,22/May/16 06:36,14/Jul/23 05:50,22/May/16 06:36,2.16.2,,,,,,,,,,,,,,2.16.3,,,,camel-cxf,karaf,,,,,,0,,,,,,"A simple Camel CXF SOAP web services consumer (server) works fine in standalone mode.  But when deploying it in Karaf, it would fail if Camel 2.16.x is used.  It would work fine if 2.15.x is used.  streamCache is set to true.  The following error was received.  A zip file is attached containing a maven project (along with Karaf config info) that can reproduce this issue.  This is critical because we cannot move to 2.16.x until this issue is resolved.

javax.xml.transform.TransformerException: Can't transform a Source of type javax.xml.transform.stax.StAXSource 
        at org.apache.xalan.transformer.TransformerIdentityImpl.transform(TransformerIdentityImpl.java:419) 
        at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:132) 
        at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:116) 
        at org.apache.camel.component.cxf.converter.CachedCxfPayload.<init>(CachedCxfPayload.java:75) 
        at org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToStreamCache(CxfPayloadConverter.java:118) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_60] 
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_60] 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_60] 
        at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_60] 
        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:293)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:120)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.core.osgi.OsgiTypeConverter.convertTo(OsgiTypeConverter.java:117)[171:org.apache.camel.camel-spring:2.16.2] 
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.impl.DefaultStreamCachingStrategy.cache(DefaultStreamCachingStrategy.java:189)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:765)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:744)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:138)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)[164:org.apache.camel.camel-core:2.16.2] 
        at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:95)[165:org.apache.camel.camel-cxf:2.16.2] 
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:75)[165:org.apache.camel.camel-cxf:2.16.2] 
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)[63:org.apache.cxf.cxf-core:3.1.4] 
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_60] 
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60] 
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[63:org.apache.cxf.cxf-core:3.1.4] 
        at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:251)[88:org.apache.cxf.cxf-rt-transports-http:3.1.4] 
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:234)[89:org.apache.cxf.cxf-rt-transports-http-jetty:3.1.4] 
        at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)[89:org.apache.cxf.cxf-rt-transports-http-jetty:3.1.4] 
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1129)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1065)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.Server.handle(Server.java:499)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)[140:org.eclipse.jetty.server:9.2.14.v20151106] 
        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)[132:org.eclipse.jetty.io:9.2.14.v20151106] 
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)[143:org.eclipse.jetty.util:9.2.14.v20151106] 
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)[143:org.eclipse.jetty.util:9.2.14.v20151106] 
        at java.lang.Thread.run(Thread.java:745)[:1.8.0_60] ",Windows 10 Pro.  Java 1.8.  Karaf 4.0.4.  CXF 3.1.4,bocamel,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Feb/16 14:54;bocamel;TestCxfWs-submit.zip;https://issues.apache.org/jira/secure/attachment/12789937/TestCxfWs-submit.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 22 03:52:07 UTC 2016,,,,,,,,,,,"0|i2tqyf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Feb/16 14:54;bocamel;This zip file contains the maven project that can reproduce the issue if deployed in Karaf 4.0.4.  The README file in the zip contains the feature install commands to install the cxf and camel in Karaf.;;;","25/Mar/16 19:40;bocamel;I know the Camel team is very busy working on many important features and issues.  But I do hope this Jira issue will be fixed soon because there is no workaround that I know of.  Without a fix, we are stuck in 2.15.x. :-)  

Thanks!;;;","28/Apr/16 11:03;davsclaus;Have you tried with Camel 2.17.x ?;;;","28/Apr/16 14:02;bocamel;Hi Claus,

Thanks for reaching out and following up on this issue.  With 2.17.0, I have not been able to install it successfully in Karaf 4.0.4.  When I install my application bundle, I received an error:

Exception:
Configuration problem: Failed to import bean definitions from URL location [classpath:META-INF/spring/camel-cxf.xml]
Offending resource: URL [bundle://188.0:0/META-INF/spring/camel-context.xml]; nested exception is org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate Spring NamespaceHandler for XML schema namespace [http://camel.apache.org/schema/cxf]
Offending resource: OSGi resource[classpath:META-INF/spring/camel-cxf.xml|bnd.id=188|bnd.sym=TestCxfWs]

In the release notes, there was a mentioning about camel-spring not installed by default.  But camel-spring is brought in by camel-cxf automatically.  

Here is what I installed in karaf 4.0.4:

feature:repo-add cxf 3.1.6
feature:install cxf cxf-rt-security
feature:repo-add camel 2.17.0
feature:install camel-core camel-cxf camel-groovy

bundle:install -s file:/.../TestCxfWs-1.0-SNAPSHOT.jar

Thank you for your help!;;;","22/May/16 03:52;bocamel;Hi Claus,

This issue seems to have been fixed by 2.16.3 (I will test it more thoroughly later).  But I still cannot test it under 2.17.0 or 2.17.1 because I have to use Spring for DSL, transactions and jdbc templates but I have trouble to even load my bundle in Karaf with camel-spring (or spring-dm).  camel-sql also cannot be loaded into Karaf (installing it would cause Karaf to hang).  If the issue is indeed fully fixed in 2.16.3, then I can start to move my application off 2.15.x.

I hope more tutorials are provided and/or updated for 2.17.x, especially in the area of deploying camel/cxf with spring in karaf.

Thank you for your help!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
restlet consumer request not propagating headers,CAMEL-9642,12943026,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jmandawg,jmandawg,24/Feb/16 18:06,20/May/16 07:33,14/Jul/23 05:50,20/May/16 07:33,2.16.2,,,,,,,,,,,,,,2.17.2,2.18.0,,,camel-restlet,,,,,,,0,,,,,,"Headers are not getting propagating from restlet consumers.  The code is setting them incorrectly inside DefaultRestletBinding.java -> populateRestletRequestFromExchange


This is the code that works (based on latest from github):

{code}
 for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            if (!headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {
                // put the org.restlet headers in attributes
            	if (key.startsWith(""org.restlet."")) {
                    if(key.equals(""org.restlet.http.headers"")){
                        //Check if existing headers already exist we don't want to wipe the headers that are already in there.
                    	Series<Header> headers = (Series)request.getAttributes().get(""org.restlet.http.headers"");
    	               	if(headers != null){ //If headers exists add them to the existing ones
    	               		Series<Header> newHeaders = (Series)value;
    	               		for(Header h: newHeaders){
                                headers.set(key, value.toString());                    	
    	               		}
    	               	}
    	               	else{
                            request.getAttributes().put(key, value);
    	               	}
                    }
                    else{
                        request.getAttributes().put(key, value);
                    }
                    	
                }
                // Use forms only for PUT, POST and x-www-form-urlencoded
            	else if (form != null) {
                    // put the user stuff in the form
                    if (value instanceof Collection) {
                        for (Object v : (Collection<?>) value) {
                            form.add(key, v.toString());
                        }
                    } else {
                        form.add(key, value.toString());
                    }
                }else {
                    // For non-form put all the headers in attributes header
                	Series<Header> headers = (Series)request.getAttributes().get(""org.restlet.http.headers"");
	               	if(headers == null){
	               		headers = new Series<Header>(Header.class);
	               		request.getAttributes().put(""org.restlet.http.headers"", headers);
	               	}
                    headers.set(key, value.toString());
                }

                LOG.debug(""Populate Restlet request from exchange header: {} value: {}"", key, value);
            }
        }
{code}


",,davsclaus,githubbot,jmandawg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 20 07:33:22 UTC 2016,,,,,,,,,,,"0|i2thu7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Feb/16 00:20;jmandawg;For some reason this is having the ill effect of setting multiple content-types and Accept-types. But the other headers are coming in now.  I'm guess restlet merges the org.restlet.http.headers with the known headers.

Looks like the standard headers should not be added directly, but how to pick and choose the headers you want to send over?

https://restlet.com/technical-resources/restlet-framework/guide/2.3/core/http-headers-mapping;;;","25/Feb/16 07:37;davsclaus;Logged a ticket to restlet to make an easy to use api.
https://github.com/restlet/restlet-framework-java/issues/1198
;;;","25/Feb/16 11:11;jmandawg;Yes their api is slightly confusing to say the least.   Thanks. ;;;","27/Feb/16 12:52;jmandawg;Hey Claus,

Can you tell me what the correct default behavior should be for restlet consumer?  Should all the camel headers get mapped to the outgoing http headers of the restlet request?

;;;","20/May/16 05:07;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/985
;;;","20/May/16 07:33;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Simple backwards parser bug if using file,CAMEL-9641,12942992,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Feb/16 15:56,24/Feb/16 16:31,14/Jul/23 05:50,24/Feb/16 16:31,2.16.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-core,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Unknown-File-Language-Syntax-tp5778208.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-02-24 15:56:04.0,,,,,,,,,,,"0|i2thmn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Query string gets decoded when bridging from netty*-http to netty*-http,CAMEL-9640,12942929,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tadayosi,tadayosi,24/Feb/16 11:33,01/Mar/16 08:19,14/Jul/23 05:50,25/Feb/16 09:39,2.16.2,2.17.0,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-netty-http,camel-netty4-http,,,,,,0,,,,,,The same problem as CAMEL-9442 but for {{camel-netty*-http}} instead of {{camel-http4}}.,,davsclaus,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,CAMEL-9658,,,CAMEL-9442,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 25 11:34:12 UTC 2016,,,,,,,,,,,"0|i2th8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Feb/16 11:41;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/862

    CAMEL-9640 - Query string gets decoded when bridging from netty*-http to netty*-http

    Please review and merge this PR. Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-9640

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/862.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #862
    
----
commit cd9df09ae4dbbce49b64aac51fe8c6d32bf62c16
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-02-24T11:37:21Z

    CAMEL-9640 - Query string gets decoded when bridging from netty*-http to netty*-http

----
;;;","25/Feb/16 09:39;davsclaus;Thanks for the PR;;;","25/Feb/16 11:34;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/862
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelBlueprintTestSupport - initialization error in case of empty cm:property-placeholder,CAMEL-9636,12941462,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,paolo.antinori,paolo.antinori,23/Feb/16 17:34,24/Feb/16 20:20,14/Jul/23 05:50,24/Feb/16 20:20,2.15.5,2.16.2,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-blueprint,camel-test,,,,,,0,,,,,,"Test execution hangs with the specific use case of passing a configuration similar to:

{code:xml}
  <cm:property-placeholder persistent-id=""my-placeholders"" update-strategy=""reload"">
  </cm:property-placeholder>
{code}

The will pass value for that {{pid}} only at Test level inside the method {{useOverridePropertiesWithConfigAdmin}}

The fix makes the attached test case succeed.

",,ggrzybek,githubbot,paolo.antinori,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9313,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 24 20:20:35 UTC 2016,,,,,,,Patch Available,,,,"0|i2t86n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Feb/16 17:40;githubbot;GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/860

    CAMEL-9636 - camel-test-blueprint - support for empty properties

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel camel-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/860.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #860
    
----
commit 0766a067850c03817fdb3a99e3059ac4f7b0f82d
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2016-02-23T16:50:45Z

    CAMEL-9636 - camel-test-blueprint - support for empty properties

----
;;;","23/Feb/16 17:40;paolo.antinori;PR for 2.25.x branch https://github.com/apache/camel/pull/860;;;","24/Feb/16 07:09;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/860
;;;","24/Feb/16 20:20;ggrzybek;Fix for 2.15.x: https://github.com/apache/camel/commit/28bf2484c88fcbd33774aad4c67745f7901f0a03
Fix for 2.16.x: https://github.com/apache/camel/commit/a1acec615e400a008d6d083d6a84ad68ebb7ab43
FIx for 2.17.x: https://github.com/apache/camel/commit/e15603a977b825a89fcad20b8da0a8ba59d982d3

The fix is to detect problems early and do not simply fail on timeout while waiting for CamelContext OSGi service. One of the failures of Blueprint may be inability to resolve property placeholders. We've provided {{ConfigAdminNoDefaultValuesBlueprintCreationTest}} to show this problem.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Xtokenize with streaming() does not close stream,CAMEL-9634,12941363,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tbredehoeft,tbredehoeft,23/Feb/16 10:25,24/Feb/16 09:07,14/Jul/23 05:50,24/Feb/16 09:07,2.16.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-core,,,,,,,0,,,,,,"If I split a XML-file with xtokenize and streaming() in combination with a move-option on the file-consumer, I get an exception that the file cannot be moved. I assume that the stream is not closed or the file is otherwise still locked.

Simple example route:

from(""file:data/xmltest?move=inProcessing/${file:name}"") 
                        .split().xtokenize(""//order"", new Namespaces("""", """")).streaming()  
                        .convertBodyTo(String.class)
                        .to(""file:data/output?fileName=dummy.txt"")
                    .end();

Error stacktrace:
2016-02-23 11:14:46 WARN  GenericFileOnCompletion:136 - Error during commit. Exchange[ID-ZZZZZZZ-52905-1456222481032-0-2][order1.xml]. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Error renaming file from D:\data\xmltest\order1.xml to data\xmltest\inProcessing\order1.xml]
org.apache.camel.component.file.GenericFileOperationFailedException: Error renaming file from D:\data\xmltest\order1.xml to data\xmltest\inProcessing\order1.xml
	at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:81)
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:113)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:88)
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:127)
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:83)
	at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:57)
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:104)
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:229)
	at org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65)
	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:653)
	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:608)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:239)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:250)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:491)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:442)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:214)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:178)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.io.IOException: Renaming file from 'D:\data\xmltest\order1.xml' to 'data\xmltest\inProcessing\order1.xml' failed: Cannot delete file 'D:\data\xmltest\order1.xml' after copy succeeded
	at org.apache.camel.util.FileUtil.renameFileUsingCopy(FileUtil.java:510)
	at org.apache.camel.util.FileUtil.renameFile(FileUtil.java:482)
	at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:78)
	... 27 more",,davsclaus,tbredehoeft,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 24 09:07:59 UTC 2016,,,,,,,,,,,"0|i2t7kn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Feb/16 08:30;davsclaus;You are using windows?;;;","24/Feb/16 08:33;tbredehoeft;Yes, I'm using Windows 7 (and Java 7.51).;;;","24/Feb/16 09:07;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The OsgiServiceRegistry class caches service references,CAMEL-9631,12940942,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mit_jones,mit_jones,22/Feb/16 02:21,13/Jul/16 20:19,14/Jul/23 05:50,07/Jul/16 07:30,2.15.4,,,,,,,,,,,,,,2.18.0,,,,camel-osgi,camel-scr,,,,,,0,,,,,,As discussed in http://camel.465427.n5.nabble.com/OsgiServiceRegistry-caching-service-references-why-td5777410.html the OsgiServiceRegistry class caches service references hence limits the ability to dynamically install and use a new version of the same service,,borcsokj,davsclaus,githubbot,mit_jones,,,,,,,,,,,,,,,,CAMEL-10129,,,,,,,,,,,,,,,"23/Feb/16 04:07;mit_jones;camel.patch;https://issues.apache.org/jira/secure/attachment/12789128/camel.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 13 20:19:47 UTC 2016,,,,,,,,,,,"0|i2t4zb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Feb/16 04:07;mit_jones;Camel patch attached is an integrated test for camel-scr highlighting the issue raised in the Description of the Jira. The test currently fails but should pass when the issue is fixed.

The patch does not provide a solution, however I think the caching should be removed from the org.apache.camel.core.osgi.OsgiServiceRegistry (camel-core-osgi) class. ;;;","06/Jul/16 14:28;githubbot;GitHub user borcsokj opened a pull request:

    https://github.com/apache/camel/pull/1068

    CAMEL-9631: do not cache OSGi service instances

    Do not cache OSGi services so it is possible to change **""bean:...""** references with an updated bundle (i.e. bind/unbind declarative services).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/borcsokj/camel feature/CAMEL-9631

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1068.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1068
    
----
commit 5b2ae6b6127845115f1b40e4fa810cb90d7bd2e3
Author: Börcsök József <borcsokj@sch.bme.hu>
Date:   2016-07-06T14:22:42Z

    CAMEL-9631: do not cache OSGi service instances

----
;;;","07/Jul/16 07:30;davsclaus;Thanks we got a PR to fix this;;;","07/Jul/16 08:33;githubbot;Github user borcsokj closed the pull request at:

    https://github.com/apache/camel/pull/1068
;;;","13/Jul/16 20:19;mit_jones;Thanks Börcsök and Claus for your work in solving this issue.

Tim;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
xsd schemalocation for osgi blueprint is using http instead of https,CAMEL-9614,12940125,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,aurelien.pupier,aurelien.pupier,18/Feb/16 11:01,15/Mar/16 09:40,14/Jul/23 05:50,18/Feb/16 16:19,2.16.1,,,,,,,,,,,,,,2.17.0,,,,,,,,,,,0,,,,,,"in https://camel.apache.org/schema/cxf/camel-cxf-2.16.1-blueprint.xsd

the schema location indicates http protocol: <xsd:import namespace=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd""/>

The protocol availble is https.

",,aurelien.pupier,githubbot,,,,,,,,,,,,,,,,,,,,,,ARIES-1506,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 18 16:30:47 UTC 2016,,,,,,,Patch Available,,,,"0|i2szxr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Feb/16 13:34;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/844

    CAMEL-9614: use https protocol for schema location of osgi blueprint xsd

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-9614-useHttpsForSchemaLocationOfOSGIBlueprintXSD

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/844.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #844
    
----
commit ee6b9a4084c84c2b97c1fc975c6b98043199d8ad
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-02-18T13:29:46Z

    CAMEL-9614: use https protocol for schema location of osgi blueprint xsd

----
;;;","18/Feb/16 13:50;githubbot;Github user apupier closed the pull request at:

    https://github.com/apache/camel/pull/844
;;;","18/Feb/16 13:55;githubbot;GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/845

    CAMEL-9614: use https protocol for schema location of osgi blueprint xsd

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-9614-useHttpsForSchemaLocationOfOSGIBlueprintXSD

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/845.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #845
    
----
commit 450735aed5da5d13cdea2afcc8a6059178f28d54
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-02-18T13:54:41Z

    CAMEL-9614: use https protocol for schema location of osgi blueprint xsd

----
;;;","18/Feb/16 16:30;githubbot;Github user apupier closed the pull request at:

    https://github.com/apache/camel/pull/845
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet GET request should not trying to stringify the exchange body,CAMEL-9611,12939838,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jmandawg,jmandawg,17/Feb/16 14:27,13/May/16 14:50,14/Jul/23 05:50,19/Feb/16 08:43,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-restlet,,,,,,,0,,,,,,"When sending a restlet GET request, the body should not be looked at at all.  

Currently In my exchange i have a java object in the body, and i send a restlet GET request, i expect the restlet response to replace whatever is in the body.  But i get a type conversion error because it is trying to stringify the java object before sending the get request.

I think the body should only be used in PUT and POST request.

Here is the fix in org.apache.camel.component.restlet.DefaultRestletBinding.java  line 151:

   public void populateRestletRequestFromExchange(Request request, Exchange exchange) {
        request.setReferrerRef(""camel-restlet"");
        String body = null;
        if(request.getMethod() == Method.POST || request.getMethod() == Method.PUT)
        {
        	body = exchange.getIn().getBody(String.class);
    	}
        Form form = new Form();
        // add the body as the key in the form with null value
        form.add(body, null);
",,davsclaus,jmandawg,,,,,,,,,,,,,,,,,,,,,,CAMEL-9966,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 19 08:43:09 UTC 2016,,,,,,,,,,,"0|i2sy5z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Feb/16 08:43;davsclaus;Thanks for reporting and with the suggested patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa consumer fails to poll after transaction timeout,CAMEL-9608,12939727,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,igarashitm,igarashitm,17/Feb/16 07:44,17/Feb/16 08:29,14/Jul/23 05:50,17/Feb/16 08:14,2.15.5,2.16.2,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-jpa,,,,,,,0,,,,,,"On JBoss EAP environment, camel-jpa consumer receives following right after transaction timeout
{noformat}
15:08:36,356 WARN  [org.apache.camel.component.jpa.JpaConsumer] (Camel ({urnswitchyard-quickstartcamel-jpa-binding0.1.0}camel-jpa-retrieve-binding) thread #0 - jpa://org.switchyard.quickstarts.camel.jpa.binding.domain.Greet) Consumer Consumer[jpa://org.switchyard.quickstarts.camel.jpa.binding.domain.Greet?consumeDelete=true&consumeLockEntity=false&consumer.transacted=true&delay=500&initialDelay=1000&persistenceUnit=JpaEvents&transactionManager=%23jtaTransactionManager] failed polling endpoint: Endpoint[jpa://org.switchyard.quickstarts.camel.jpa.binding.domain.Greet?consumeDelete=true&consumeLockEntity=false&consumer.transacted=true&delay=500&initialDelay=1000&persistenceUnit=JpaEvents&transactionManager=%23jtaTransactionManager]. Will try again at next poll. Caused by: [javax.persistence.PersistenceException - org.hibernate.HibernateException: Transaction was rolled back in a different thread!]: javax.persistence.PersistenceException: org.hibernate.HibernateException: Transaction was rolled back in a different thread!
	at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1387) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1310) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1316) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.ejb.AbstractEntityManagerImpl.remove(AbstractEntityManagerImpl.java:911) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [rt.jar:1.8.0_65]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) [rt.jar:1.8.0_65]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [rt.jar:1.8.0_65]
	at java.lang.reflect.Method.invoke(Method.java:497) [rt.jar:1.8.0_65]
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:366) [spring-orm-3.2.12.RELEASE.jar:3.2.12.RELEASE]
	at com.sun.proxy.$Proxy45.remove(Unknown Source)
	at org.apache.camel.component.jpa.JpaConsumer$5.deleteObject(JpaConsumer.java:456) [camel-jpa-2.15.2.jar:2.15.2]
..... (snip) .....
Caused by: org.hibernate.HibernateException: Transaction was rolled back in a different thread!
	at org.hibernate.engine.transaction.synchronization.internal.SynchronizationCallbackCoordinatorTrackingImpl.processAnyDelayedAfterCompletion(SynchronizationCallbackCoordinatorTrackingImpl.java:105) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.internal.SessionImpl.delayedAfterCompletion(SessionImpl.java:636) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.internal.SessionImpl.checkTransactionSynchStatus(SessionImpl.java:2070) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.internal.SessionImpl.fireDelete(SessionImpl.java:916) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.internal.SessionImpl.delete(SessionImpl.java:855) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.ejb.AbstractEntityManagerImpl.remove(AbstractEntityManagerImpl.java:905) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	... 20 more
{noformat}

After this, camel-jpa is no longer able to handle its polling due to staled connection
{noformat}
15:08:36,860 WARN  [org.apache.camel.component.jpa.JpaConsumer] (Camel ({urnswitchyard-quickstartcamel-jpa-binding0.1.0}camel-jpa-retrieve-binding) thread #0 - jpa://org.switchyard.quickstarts.camel.jpa.binding.domain.Greet) Consumer Consumer[jpa://org.switchyard.quickstarts.camel.jpa.binding.domain.Greet?consumeDelete=true&consumeLockEntity=false&consumer.transacted=true&delay=500&initialDelay=1000&persistenceUnit=JpaEvents&transactionManager=%23jtaTransactionManager] failed polling endpoint: Endpoint[jpa://org.switchyard.quickstarts.camel.jpa.binding.domain.Greet?consumeDelete=true&consumeLockEntity=false&consumer.transacted=true&delay=500&initialDelay=1000&persistenceUnit=JpaEvents&transactionManager=%23jtaTransactionManager]. Will try again at next poll. Caused by: [javax.persistence.PersistenceException - org.hibernate.HibernateException: Logical connection is closed]: javax.persistence.PersistenceException: org.hibernate.HibernateException: Logical connection is closed
	at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1387) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1310) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.ejb.QueryImpl.getResultList(QueryImpl.java:277) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.apache.camel.component.jpa.JpaConsumer$1.doInTransaction(JpaConsumer.java:104) [camel-jpa-2.15.2.jar:2.15.2]
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:131) [spring-tx-3.2.12.RELEASE.jar:3.2.12.RELEASE]
	at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:92) [camel-jpa-2.15.2.jar:2.15.2]
..... (snip) .....
Caused by: org.hibernate.HibernateException: Logical connection is closed
	at org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.getConnection(LogicalConnectionImpl.java:150) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.connection(StatementPreparerImpl.java:56) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:159) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:183) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:157) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1881) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1858) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1838) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.doQuery(Loader.java:906) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:348) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.doList(Loader.java:2550) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.doList(Loader.java:2536) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2366) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.Loader.list(Loader.java:2361) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:495) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:357) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:198) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1230) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.internal.QueryImpl.list(QueryImpl.java:101) [hibernate-core-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	at org.hibernate.ejb.QueryImpl.getResultList(QueryImpl.java:268) [hibernate-entitymanager-4.2.21.Final-redhat-1.jar:4.2.21.Final-redhat-1]
	... 12 more
{noformat}

According to the Java Persistence API 3.3.2 Transaction Rollback, the persistence context could be in inconsistent state after transaction rollback, which is suggesting to renew the EntityManager instance after transaction rollback. Actually I verified that if I renewed the EntityManager instance after rollback then camel-jpa could continue to work after that. I'll submit a pull request in a minute.",,davsclaus,githubbot,igarashitm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 17 08:29:49 UTC 2016,,,,,,,,,,,"0|i2sxhj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Feb/16 07:50;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/843

    CAMEL-9608 camel-jpa consumer fails to poll after transaction timeout

    Here is the test application
    https://github.com/igarashitm/issues/tree/master/ENTESB-4941

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9608

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/843.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #843
    
----
commit cd3a6864f2e0aba169fd7fa023f74d56696230e3
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-02-17T07:11:11Z

    CAMEL-9608 camel-jpa consumer fails to poll after transaction timeout

----
;;;","17/Feb/16 08:14;davsclaus;Thanks for reporting and the PR;;;","17/Feb/16 08:29;githubbot;Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/843
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
chmod does not work for the File producer whitout setting a charset,CAMEL-9607,12939528,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nicolas_mugnier,nicolas_mugnier,16/Feb/16 15:15,17/Feb/16 08:51,14/Jul/23 05:50,17/Feb/16 08:51,2.15.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-core,,,,,,,0,,,,,,"Hello

https://github.com/apache/camel/blob/camel-2.15.2/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java

Permissions are never updated without setting a charset.

The block code at line 280 seems to be at the wrong place.

Best,
Nicolas.",linux java 7,davsclaus,nicolas_mugnier,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 17 08:25:53 UTC 2016,,,,,,,,,,,"0|i2sw9j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Feb/16 17:24;davsclaus;I think you are mistaking that code block ends before, the chmod is not in the charset block.

Maybe you are on a OS that do not support file permissions. See the javadoc of 
java.nio.file.Files#setPosixFilePermissions;;;","16/Feb/16 21:51;nicolas_mugnier;Hi Claus,

No, I don't think so.
1) The point is, without specifying the charset, I'm exiting the method due to the ""return true"" of the ""if (filebased)"" block at line 233
2) I'm running the application under Linux (Ubuntu 15.10) and Java 7.

What do you think about it ?

Best,
Nicolas.
;;;","17/Feb/16 08:18;davsclaus;Ah thanks you are correct, will get this fixed now.;;;","17/Feb/16 08:25;nicolas_mugnier;Great thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SJMS Consumer-Producer in transaciton,CAMEL-9606,12939480,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,d1x,d1x,16/Feb/16 12:04,19/Oct/16 07:56,14/Jul/23 05:50,19/Oct/16 07:56,2.15.4,2.16.2,,,,,,,,,,,,,2.19.0,,,,camel-sjms,,,,,,,0,,,,,,"I'm not 100% sure this is a bug but it feels that way from conversation I had via mailing lists.

I'm trying to ensure transactional processing between SJMS consumer and producer (e.g. using same JMS session). 

In other words this simple case:
1. prepare higher amount of JMS messages in broker (e.g. ActiveMQ with 1000 messages) 
2. use Camel route from input queue to output queue using trasacted=true 
3. start context (starts consuming messages) and in any time kill java process 

When I kill process, I would expect that sum of messages in input and output queue will be 1000 - so the transaction works. But what happens is that I always end up with 1001+ messages. Maybe it is misconfiguration of routes or misunderstanding how SJMS can work.

I feel this is critical because JMS is generally used because it its transactional capabilities.

Here is the sample code I used for reproduction (using ActiveMQ):
{code:java}
public class SjmsTransaction {

    public static void main(String[] args) throws Exception {
        RouteBuilder rb = new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                onException(Exception.class)
                        .process(systemOut(""Exception!!""));

                from(""sjms:queue:test-in?transacted=true&consumerCount=5"")
                        .process(systemOut(""Processing""))
                        .to(""sjms:queue:test-out?transacted=true"")
                        .process(systemOut(""Processed""));
            }
        };

        CamelContext context = new DefaultCamelContext();
        addJmsComponent(context);
        context.addRoutes(rb);

        System.out.println(""=====> Starting context"");
        context.start();
        // Now the context will run and consume messages, when I kill application by force in any time
        // I expect this to be true: <#messagesInInputAtBeginning> == <#messagesInInputNow> + <#messagesInOutputNow>
        // What happens is that there is always < (e.g. I submitted 1000 messages, out has 500, in has 501)
    }

    private static void addJmsComponent(CamelContext context) {
        ConnectionFactory factory = new ActiveMQConnectionFactory(""tcp://localhost:61616"");
        ConnectionFactoryResource connResource = new ConnectionFactoryResource(5, factory);
        SjmsComponent comp = new SjmsComponent();
        comp.setConnectionResource(connResource);
        context.addComponent(""sjms"", comp);
    }

    private static Processor systemOut(final String message) {
        return new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
                System.out.println(exchange.getExchangeId() + "": "" + message);
            }
        };
    }
}
{code}

Note that I tried to use it with various combinations of acknowledgeMode and In/InOut exchange pattern - but without luck.
I'm not that much oriented in Camel source code but I found that JMS session is held within the exchange so probably when producer finds in an exchange existing JMS session and is configured to be transacted, then maybe it can participate this session? Or maybe there are other hooks (like Synchronization objects) in some registry that take care of this issue?

Here is the link to the previous mailing list conversation: http://camel.465427.n5.nabble.com/SJMS-transaction-td5777522.html",,d1x,githubbot,hqstevenson,igarashitm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 19 07:54:40 UTC 2016,,,,,,,,,,,"0|i2svyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Mar/16 07:41;d1x;Can anyone please come with any statement please?
Whether it is a bug and if any fix can be expected (sooner or later)?;;;","14/Oct/16 05:14;igarashitm;I created an automated unit test and verified it actually is a problem.
https://github.com/igarashitm/issues/blob/master/camel/misc/src/test/java/CamelSjmsTxTest.java

The camel sjms does make Synchronization effort, but it's not really safe. Sometimes only the producer bit of the SessionTransactionSynchronization.onComplete() is invoked before terminating a process, then eventually the consumer side is rolled back (i.e. put back to queue-in) and the message duplicates. Note that message '0017' is in both of 'test-in' and 'test-out'.
{code}
[       ActiveMQ Session Task-1] sionTransactionSynchronization DEBUG Processing completion of Exchange id:ID-localhost-localdomain-44085-1476420609350-0-17
[       ActiveMQ Session Task-1] sionTransactionSynchronization DEBUG Processing completion of Exchange id:ID-localhost-localdomain-44085-1476420609350-0-17
[       ActiveMQ Session Task-1] route1                         INFO  =====> Forwarding a message:[0017] from 'test-in' queue to 'test-out' queue...
[       ActiveMQ Session Task-1] route1                         INFO  =====> Done.
[       ActiveMQ Session Task-1] sionTransactionSynchronization DEBUG Processing completion of Exchange id:ID-localhost-localdomain-44085-1476420609350-0-18
[                          main] CamelSjmsTxTest                INFO  =====> Detroying camel process
....
[                          main] CamelSjmsTxTest                INFO  ======================================================
[                          main] CamelSjmsTxTest                INFO  Initial, count=60
[                          main] CamelSjmsTxTest                INFO  'test-in', count=43	:[0018, 0020, 0022, 0024, 0026, 0028, 0030, 0032, 0034, 0036, 0038, 0040, 0042, 0044, 0046, 0048, 0050, 0052, 0054, 0056, 0058, 0017, 0019, 0021, 0023, 0025, 0027, 0029, 0031, 0033, 0035, 0037, 0039, 0041, 0043, 0045, 0047, 0049, 0051, 0053, 0055, 0057, 0059]
[                          main] CamelSjmsTxTest                INFO  'test-out', count=18	:[0000, 0001, 0002, 0003, 0004, 0005, 0006, 0007, 0008, 0009, 0010, 0011, 0012, 0013, 0014, 0015, 0016, 0017]
[                          main] CamelSjmsTxTest                INFO  ======================================================
{code}

The solution would be to let SJMS consumers/producers share a single JMS session in a Exchange, so that we can just rely on broker implementation to guarantee transaction atomicity.;;;","14/Oct/16 05:32;igarashitm;camel-jms (spring JMS template actually) is handling well for this scenario though.;;;","18/Oct/16 14:13;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1214

    CAMEL-9606 Share JMS session among SJMS endpoints to ensure transacti…

    …on atomicity
    
    A testcase, which terminate a camel process during processing transacted sjms consumer/producer. Sometimes test-in + test-out > initial without the fix.
    https://github.com/igarashitm/issues/blob/master/camel/misc/src/test/java/CamelSjmsTxTest.java

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9606

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1214.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1214
    
----
commit 825a35fbf67bc1b298bf8f9d58a5e2603d65063d
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-10-18T13:05:54Z

    CAMEL-9606 Share JMS session among SJMS endpoints to ensure transaction atomicity

----
;;;","19/Oct/16 07:54;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1214
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxfrs - When responding then do not use content-length from input,CAMEL-9599,12939033,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Feb/16 16:32,13/Feb/16 17:01,14/Jul/23 05:50,13/Feb/16 16:54,2.16.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-cxfrs,,,,,,,0,,,,,,The simple binding of cxfrs uses the content-length header from the input as the response content-length. It should not do that.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-02-13 16:32:26.0,,,,,,,,,,,"0|i2st8n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-swagger-cdi is not producing valid swagger definition,CAMEL-9593,12938754,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,gagahhag,gagahhag,12/Feb/16 09:28,12/Feb/16 09:51,14/Jul/23 05:50,12/Feb/16 09:50,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,examples,,,,,,,0,,,,,,http://camel.465427.n5.nabble.com/Camel-Swagger-cdi-Example-td5777632.html,,davsclaus,gagahhag,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Feb/16 09:29;gagahhag;patch.diff;https://issues.apache.org/jira/secure/attachment/12787638/patch.diff",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 12 09:50:55 UTC 2016,,,,,,,Patch Available,,,,"0|i2srin:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Feb/16 09:29;gagahhag;Added patch to create correct swagger definition;;;","12/Feb/16 09:50;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation on SQS ConcurrentConsumers Missing that you need to set maxMessagerPerPoll,CAMEL-9592,12938595,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,mary.mistretta@gmail.com,mary.mistretta@gmail.com,11/Feb/16 19:22,22/Feb/16 17:39,14/Jul/23 05:50,22/Feb/16 17:39,2.15.1,,,,,,,,,,,,,,2.16.2,,,,camel-aws,,,,,,,0,documentation,,,,,"If you try to use concurrentConsumers without setting the maxMessagesPerPoll whenever a message errors out it brings down the whole context. 

I plan on updating the wiki myself, but I haven't contributed before.  I am going to start the process by emailing the dev list today. ",,davsclaus,mary.mistretta@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 22 17:39:16 UTC 2016,,,,,,,,,,,"0|i2sqjb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Feb/16 09:54;davsclaus;Test with latest release first please.;;;","12/Feb/16 18:15;mary.mistretta@gmail.com;Will do.  I tested with 2.15.1 which the either way the documentation does not indicate needs to have maxMessagesPerPoll set.  I confirmed with Christian Posta that he thought this was intended functionality. I will test with 2.16 before updating anything to confirm if it is needed or not there. ;;;","17/Feb/16 03:31;mary.mistretta@gmail.com;I verified on the latest camel version that the maxMessagesPerPoll flag does indeed need to be set when setting the concurrentConsumers for SQS to greater than 1.  I did manual test with routes and also adjust the unit test's route to not set maxMessagesPerPoll.  The unit test then failed with:

Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.053 sec <<< FAILURE! - in org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest
consumeMessagesFromQueue(org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest)  Time elapsed: 1.053 sec  <<< FAILURE!
java.lang.AssertionError: We were expecting to have about half of 10 numbers of concurrent consumers, but only found 1
	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.camel.component.aws.sqs.SqsConcurrentConsumerTest.consumeMessagesFromQueue(SqsConcurrentConsumerTest.java:49)

I have filled out my ICLA and am waiting to get edit rights from the dev email list. As soon as this is done I will make the documentation adjustment. ;;;","22/Feb/16 17:39;mary.mistretta@gmail.com;fixed documentation. I didn't a place I could assign the ticket to myself.  I am not sure I have access to do that, however I resolved it. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
swagger-api docs not working in only using xml without any java route,CAMEL-9582,12937837,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Feb/16 11:20,09/Feb/16 11:21,14/Jul/23 05:50,09/Feb/16 11:21,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-swagger,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Swagger-not-working-tp5777255.html",,arnaudeprez,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-02-09 11:20:31.0,,,,,,,,,,,"0|i2slv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassLoadingAwareObjectInputStream cannot handle deserializing proxies with mixed JDK & non-JDK interfaces,CAMEL-9576,12937487,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ldbooser,ldbooser,08/Feb/16 12:45,08/Feb/16 17:24,14/Jul/23 05:50,08/Feb/16 17:24,2.16.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-sql,,,,,,,0,,,,,,"The camel-sql component contains a class called ClassLoadingAwareObjectInputStream, which is a copy from a class from the apache activeMQ project.
There was a bug in this class that was fixed in the activeMQ project but was not updated in the camel-sql component.
I face the same issue as in: https://issues.apache.org/jira/browse/AMQ-3537
where I cannot deserialize an object that contains a mix of jdk and non-jdk classes.",,davsclaus,githubbot,ldbooser,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 08 17:24:43 UTC 2016,,,,,,,,,,,"0|i2sjxj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Feb/16 14:02;davsclaus;Thanks a patch or PR is welcome to fix this in Camel.;;;","08/Feb/16 14:33;githubbot;GitHub user LienDeboosere opened a pull request:

    https://github.com/apache/camel/pull/830

    CAMEL-9576: fix deserializing proxies with mixed JDK&non-JDK interfaces

    This is a pull request with a fix for the issue: https://issues.apache.org/jira/browse/CAMEL-9576


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/LienDeboosere/camel CAMEL-9576

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/830.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #830
    
----
commit 75cac5eb14cc86180f54959d11f0caa816ed43a9
Author: Lien Deboosere <leb@melexis.com>
Date:   2016-02-08T14:29:47Z

    CAMEL-9576: fix deserializing proxies with mixed JDK & non-JDK interfaces

----
;;;","08/Feb/16 14:34;ldbooser;i created a pull request with a fix:

https://github.com/apache/camel/pull/830;;;","08/Feb/16 17:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/830
;;;","08/Feb/16 17:24;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Idempotent Consumer EIP - Memory leak when add/remove routes,CAMEL-9569,12937072,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Feb/16 16:20,05/Feb/16 16:56,14/Jul/23 05:50,05/Feb/16 16:56,2.15.5,2.16.2,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-core,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Leak-of-Memory-using-JdbcMessageIdRepository-tp5777242.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-02-05 16:20:16.0,,,,,,,,,,,"0|i2shdj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SjmsConsumer does not suspend (on Camel context) stop,CAMEL-9567,12936968,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,d1x,d1x,05/Feb/16 07:21,16/Feb/16 08:14,14/Jul/23 05:50,16/Feb/16 08:14,2.16.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-sjms,,,,,,,0,camel-sjms,,,,,"When using SjmsConsumer that consumes JMS messages from broker (e.g. ActiveMQ) and *stop Camel Context, the consumer still reads new messages from broker* even if it should only finish processing of already fetched messages. It causes that Context is never stopped if there are still new and new messages in the broker (or before timeout for stop operation occurs).

When I investigated code, it seems that suspend operation is not implemented (or code does not check isSuspended flag). What I would expect is that consumer unregisters JMS listener on context stop (consumer suspend).

Here is the sample code I used for testing:
{code:java}
public class Test {

    public static void main(String[] args) throws Exception {
       // pre-fill JMS Broker with many many messages, e.g. 10.000

        RouteBuilder rb = new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""sjms:queue:test?consumerCount=5"")
                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                Thread.sleep(1000); // not to consume all messages instantly
                                System.out.println(""Processed message "" + exchange.getExchangeId());
                            }
                        });
            }
        };

        CamelContext context = new DefaultCamelContext();
        context.getShutdownStrategy().setTimeout(1000); // 1000s = big enough timeout so I can be sure it is consumer problem
        addJmsComponent(context);
        context.addRoutes(rb);

        System.out.println(""=====> Starting context"");
        context.start();
        Thread.sleep(5 * 1000); // Consume few messages at the beginning

        System.out.println(""=====> Stopping context"");
        context.stop();
        System.out.println(""=====> Context stopped""); // Will not get here as long as there are any messages left in the queue
    }

    private static void addJmsComponent(CamelContext context) {
        ConnectionFactory factory = new ActiveMQConnectionFactory(""tcp://localhost:61616""); // ActiveMQ is easiest for testing this
        ConnectionFactoryResource connResource = new ConnectionFactoryResource(5, factory);
        SjmsComponent comp = new SjmsComponent();
        comp.setConnectionResource(connResource);
        context.addComponent(""sjms"", comp);
    }
}
{code}

The original mailing list thread:
http://camel.465427.n5.nabble.com/CamelContext-stop-with-SJMS-consumer-does-not-stop-consuming-messages-from-broker-td5777207.html",,d1x,davsclaus,onurakdemir,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9577,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 09 08:21:46 UTC 2016,,,,,,,,,,,"0|i2sgqf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Feb/16 13:32;onurakdemir;I started to work on this issue. ;;;","05/Feb/16 13:39;davsclaus;The doSuspend could call the stop logic, but it would be better if we can find a way like camel-jms, to stop the jms listener only, and keep the other bits running.;;;","08/Feb/16 10:03;d1x;Do you have any rough estimation when this bug may be resolved?;;;","08/Feb/16 11:25;onurakdemir;Sorry but it is hard to estimate because I try to get familiar with the
source code. What I know that I will start to work on the issue on Thursday.




;;;","08/Feb/16 11:48;d1x;Ok, the information when you will start work on it is also useful - thank you :-);;;","08/Feb/16 15:48;davsclaus;We can a short-term fix for 2.16.x make doSuspend/doResume call the same logic as in doStart/doStop. 

I took a look at the source code and it wasn't easy to make the JmsListener suspend while keep other stuff running. That make take more work to figure our or maybe the component need some refactoring.

And also CAMEL-9577 improves a general issue that we only call the suspend methods if the component has custom suspend code. Otherwise we would stop instead. As it turns out there is only about 20 or so components that has custom suspend logic.;;;","08/Feb/16 16:15;d1x;Ok thank you very much for the info provided. I will have an eye on 9577 too.;;;","08/Feb/16 17:53;davsclaus;I made a fix for 2.16 and 2.15
https://github.com/apache/camel/commit/88dd249fe0aae965d7c9736e0911082f62efed16

From 2.17 onwards its fixed by that other CAMEL-9577 ticket.
;;;","08/Feb/16 19:35;d1x;Oh nice that was quick, thank you. I suppose it is now available only in SNAPSHOT version.
Do you have idea when you will release regular version?;;;","09/Feb/16 08:21;davsclaus;We just released 2.16.2, so would take a month or so for the next. But maybe 2.15.x is released sooner.

You can always build a local JAR with the patch and use that until there is a release.;;;",,,,,,,,,,,,,,,,,,,,,,
camel-asf-ws component does not reconnect to the web socket ,CAMEL-9566,12936629,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mohitmutha,mohitmutha,04/Feb/16 06:59,18/Mar/16 13:56,14/Jul/23 05:50,17/Mar/16 17:03,2.16.1,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-ahc-ws,,,,,,,1,,,,,,"Create a web socket consumer route 
Ensure that the web socket provider is available
Create connection to the web socket provider from the consumer
Send a message from the provider (send to all)
Message gets consumed in the consumer route
Bring down the producer
Bring up the producer 
Create connection to the web socket provider from the consumer
Send a message from the provider (send to all)
Message is not printed as reconnect was not done

",Any,davsclaus,mohitmutha,Rizon,,,,,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 18 13:56:33 UTC 2016,,,,,,,,,,,"0|i2sen3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Feb/16 08:04;davsclaus;Can you build a sample project that can reproduce this?;;;","20/Feb/16 08:08;davsclaus;Are you sure its camel-ahc-ws and not camel-websocket ?;;;","16/Mar/16 18:55;Rizon;I'm having the same issue.

Take a look at the WsListener class.  The onClose() and onError() methods only log the issue and never raise the exception to the camel route.  https://github.com/apache/camel/blob/master/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java
;;;","17/Mar/16 07:41;davsclaus;I pushed some code changes to master branch. Feel free to build and give that a test.;;;","17/Mar/16 13:45;Rizon;Thank you Claus.  In order to test I did have to clone the 2.16.x branch and migrate your changes to 2.16.3-SNAPSHOT since all my other dependencies required 2.16.  However, this did not resolve the issue.  There simply is no detection of the lost socket connection.  When I shutdown the websocket server (i.e another camel endpoint using the camel-websocket component) I don't think the onClose() method is ever invoked.

Perhaps we could add a condition in the WsProducer for sendMessage() to check the connection state and throw an Exception if the connection is closed.

Question:  Is there a way to enable debugging for a single bundle in Karaf? ;;;","17/Mar/16 13:48;davsclaus;Ah okay, what exception does the producer throw? Maybe we can detect a ConnectionException or somerhing and then use that to force a re-connection?

In karaf you can set log levels from the karaf shell

something like:
log:level set org.apache.camel.xxx INFO

There should be some --help on the log command;;;","17/Mar/16 13:52;Rizon;As of right now there is no exception thrown by the WsProducer when the connection is closed.  Right now I'm testing adding a condition in the process() method of WsProducer to check getWebsocket().isOpen and throw ConnectionException.  However, I'm unsure how to trigger the reconnect...

Thanks for the debug info.;;;","17/Mar/16 14:02;Rizon;Ah I figured how to trigger reconnect...

this.getEndpoint().reConnect();

Testing it now.;;;","17/Mar/16 14:14;Rizon;Actually my test was invalid.  For some reason when I copied the camel-ahc-ws component into the deploy folder it didn't install.  Although the log said it did.  When I do a feature:list it still shows 2.16 instead of 2.16.3-SNAPSHOT.  I tried uninstalling the 2.16 version but that didn't work.  What's the preferred way to install a particular dependency?;;;","17/Mar/16 16:28;Rizon;Claus - I was able to successfully test your changes and they worked perfectly without any of my modifications.  The changes you've committed to 2.17, could they be released under rev 2.16.3 of Camel? 

If not, do you have a suggested method of using a different component version?  Currently I'm deploying to Karaf 3 using Camel 2.16.  Thank you!;;;","17/Mar/16 17:03;davsclaus;Thanks for testing. I backported to 2.16.x;;;","18/Mar/16 12:52;Rizon;Claus - The change didn't got into last night's 2.16.3-SNAPSHOT build.  I see that the maven metadata xml files where updated but not the JAR.  Is there a process that I should know about for changes to the repo to go into the build?
https://repository.apache.org/content/groups/snapshots/org/apache/camel/camel-ahc/2.16.3-SNAPSHOT/

Thanks again;;;","18/Mar/16 13:56;davsclaus;Build from source manually as those mvn servers are not reliable building;;;",,,,,,,,,,,,,,,,,,,
RabbitMQ InOut Producer generates a null body response when a correlationId is used,CAMEL-9560,12935986,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,arnaudchotard,arnaudchotard,02/Feb/16 15:04,04/Feb/16 18:43,14/Jul/23 05:50,04/Feb/16 18:43,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-rabbitmq,,,,,,,0,,,,,,"The use case uses a correlationId with RabbitMQ InOut Producer :

{code}
from(""direct:route"")
   .setHeader(RabbitMQConstants.EXCHANGE_NAME, constant(""exchange""))
   .setHeader(RabbitMQConstants.CORRELATIONID, constant(""123""))
   .inOut(""rabbitmq://..."")
{code}

The response always contains a null out body message.

The problem is located when restoring the original correlation id in org.apache.camel.component.rabbitmq.reply.ReplyManagerSupport : 
{code}
public void processReply(ReplyHolder holder)
{code}

{code}
// restore correlation id in case the remote server messed with it
if (holder.getOriginalCorrelationId() != null) {
   if (exchange.getOut() != null) {
      exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID, 
         holder.getOriginalCorrelationId());
   } else {
      exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID, 
         holder.getOriginalCorrelationId());
   }
}
{code}

The test exchange.getOut() is always successful because of the lazy creation in DefaultExchange.getOut

{code}
public Message getOut() {
   // lazy create
   if (out == null) {
      out = (in != null && in instanceof MessageSupport)
      ? ((MessageSupport)in).newInstance() : new DefaultMessage();
      configureMessage(out);
   }
   return out;
}
{code}

The in body message contains the correct response from RabbitMQ. However, since the out message will be always created with a null body, the null body response will be returned in the pipeline",,arnaudchotard,davsclaus,seb_brousse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Feb/16 14:47;onurakdemir;camel_9560.patch;https://issues.apache.org/jira/secure/attachment/12786269/camel_9560.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 04 18:43:56 UTC 2016,,,,,,,,,,,"0|i2sapb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Feb/16 17:08;arnaudchotard;Maybe replacing exchange.getOut() by exchange.hasOut() should resolve the bug ;;;","03/Feb/16 07:25;davsclaus;Yes it should be hasOut().

You are welcome to provide a patch or PR
http://camel.apache.org/contributing;;;","04/Feb/16 18:43;davsclaus;Thanks Arnaud for the patch. Keep testing rabbitmq and work on patches for it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"DefaultErrorHandler logs despite ""handled true""",CAMEL-9558,12935898,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,asiepert,asiepert,02/Feb/16 09:00,05/Feb/16 15:57,14/Jul/23 05:50,05/Feb/16 15:57,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-core,,,,,,,0,,,,,,"The *assumption* is that handled exceptions will not be propagated any further.
In version {{2.15.5}} the test code (from the camel-jetty page) runs fine - but since {{2.16.0}} the handled exception is propagated to the {{DefaultErrorHandler}} which causes ERROR logs for every handled exception.

I could not find a hint in the release notes - so I think it's a bug.

{code}
public class MyTest extends CamelTestSupport {

    @Test
    public void test() throws Exception {
        // using httpclient 4.3.5
        CloseableHttpClient httpclient = HttpClients.createDefault();
        HttpGet httRequest = new HttpGet(""http://127.0.0.1:7890/myserver"");
        HttpResponse response = httpclient.execute(httRequest);
        assertThat(response.getStatusLine().getStatusCode(), is(500));
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""jetty://http://localhost:7890/myserver"").tracing()
                        // use onException to catch all exceptions and return a custom reply message
                        .onException(Exception.class).handled(true)
                        // create a custom failure response
                        .transform(constant(""Dude something went wrong""))
                        // we must remember to set error code 500 as handled(true)
                        // otherwise would let Camel thing its a OK response (200)
                        .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(500)).end()
                        // now just force an exception immediately
                        .throwException(new IllegalArgumentException(""I cannot do this""));
            }
        };
    }
}
{code}

*References from the user-list*
http://camel.465427.n5.nabble.com/onException-block-in-camel-2-16-1-td5777019.html#a5777064

http://camel.465427.n5.nabble.com/jetty-handled-true-not-working-as-before-td5776774.html",,asiepert,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8755,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 05 15:57:08 UTC 2016,,,,,,,,,,,"0|i2sa5r:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"05/Feb/16 15:57;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Facebook consumer throws IllegalArgumentException with reading parameters,CAMEL-9557,12935858,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jusw85,jusw85,02/Feb/16 06:07,03/Feb/16 07:32,14/Jul/23 05:50,03/Feb/16 07:32,2.16.2,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-facebook,,,,,,,0,,,,,,"I've configured a polling Facebook consumer with nearly default Spring configuration as follows:
{code}
<camel:from uri=""facebook://getFeed?
    reading.since=2016-01-01T00:00:00Z&amp;
    userId=myUserId&amp;
    consumer.delay=60000&amp;
    oAuthAppId=[s]&amp;
    oAuthAppSecret=[s]&amp;
    oAuthAccessToken=[s]
    ""/>
{code}

However, an IllegalArgument is thrown with any reading.* parameter regardless of endpoint:
{code}
java.lang.IllegalArgumentException: No matching operation for getFeed, with arguments [readingOptions, reading, userId]
{code}

On debugging, the method FacebookEndpoint.configureProperties sets two properties on the configuration object: (readingOptions, reading).
{code}
FacebookPropertiesHelper.configureReadingProperties(configuration, options);
{code}

readingOptions is a Map which is finally size 0 after all the relevant properties are extracted into the reading parameter. However, it isn't nullified.

In the subsequent method initState(), it tries to look for a method in FacebookMethodTypes with the signature:
{code}
getFeed(String userId, Reading reading)
{code}

Because readingOptions is non null, it looks for a readingOptions parameter as well which doesn't exist, throwing the Exception.

Is there a workaround I can use for the moment? Thanks!
","OpenJDK Runtime Environment (IcedTea 2.6.4) (Arch Linux build 7.u95_2.6.4-1-x86_64)
",davsclaus,jusw85,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 03 07:32:12 UTC 2016,,,,,,,,,,,"0|i2s9wv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Feb/16 06:28;jusw85;The commit for CAMEL-9472 adds the following line in FacebookPropertiesHelper.configureReadingProperties which causes the error I believe:

{code}
configuration.setReadingOptions(readingProperties);
{code}

[GitHub|https://github.com/apache/camel/commit/846b097c2b881eac68328800bdd6a9d3017921c7]

I've reverted to 2.16.1 until this is fixed.

Thanks for your time!
;;;","03/Feb/16 07:32;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Setting deadLetterHandleNewException to false breaks DeadLetterChannel default exception handling,CAMEL-9555,12935587,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lchdev,lchdev,01/Feb/16 10:38,08/Feb/16 07:36,14/Jul/23 05:50,06/Feb/16 08:47,,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-core,,,,,,,0,,,,,,"By default, the {{DeadLetterChannel}} handles every exception, including any exception thrown by the dead letter itself. This can be changed by setting the option {{deadLetterHandleNewException}} to _false_. Unfortunately, setting it to _false_ also disable the handling in case of a normal exception, which is not at all what the name suggests. 

To make the point clear, here is the little scenario I am trying to set up, and why this option is really important in that case.

h3. Scenario

I have a camel route consuming persistent messages from a JMS (activemq) endpoint. I have set {{CLIENT_ACKNOWLEDGE}} on the component to prevent consuming the messages until they have been successfully processed.

So I want to configure my error handler as a {{DeadLetterChannel}} with the following behavior:
# in case of an exception during processing, send the message to a DLQ
# if the DLQ itself fails (preventing the message to be safely stored), do not handle it and let the exception being propagated back to the JMS consumer, such that ActiveMQ won't remove it from its queue.

From my understanding, this is what the option {{deadLetterHandleNewException=false}} should provide. But when testing it, setting it to _false_ actually breaks the default handling of the dead letter channel as well, and no exception at all are handled, even when successfully sent to the DLQ...

I checked {{DeadLetterHandleNewExceptionTest}} from the camel test cases, but it does not cover the scenario I described (it only checks the behavior when the DLQ fails, not when it succeeds).

Basically, in the current release, I can either have:
* the DLC handle *all* exceptions (default)
* the DLC handle *no* exception at all (with {{deadLetterHandleNewException=false}})

However, the intended behavior with {{deadLetterHandleNewException=false}} should have the DLC handle any exception thrown during normal routing, while not handling any exception thrown during the DLQ processing itself.
",,davsclaus,lchdev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Feb/16 07:36;lchdev;DeadLetterChannelTest.java;https://issues.apache.org/jira/secure/attachment/12786765/DeadLetterChannelTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 08 07:36:48 UTC 2016,,,,,,,,,,,"0|i2s88n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Feb/16 10:44;lchdev;Attached test case which tests the {{DeadLetterChannel}} in the four following scenarios:
# {{deadLetterHandleNewException=true}} and the DLC succeeds
# {{deadLetterHandleNewException=true}} and the DLC fails
# {{deadLetterHandleNewException=false}} and the DLC succeeds
# {{deadLetterHandleNewException=false}} and the DLC fails

Output of scenario 3 is not as expected.;;;","06/Feb/16 07:44;davsclaus;Can you attach a new test file that does not have that (c) on the license file, we cannot use or accept such a source code at ASF. It must be free to use.;;;","06/Feb/16 08:47;davsclaus;Thanks for reporting.;;;","08/Feb/16 07:36;lchdev;Reupload of Test case;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Twitter consumer doesn't respect the delay parameter,CAMEL-9553,12935542,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jusw85,jusw85,01/Feb/16 08:09,01/Feb/16 08:40,14/Jul/23 05:50,01/Feb/16 08:40,2.16.2,,,,,,,,,,,,,,2.17.0,,,,camel-twitter,,,,,,,0,,,,,,"I've configured a polling Twitter endpoint with nearly default Spring configuration as follows:

{code}
from(""twitter://search?type=polling&keywords=searchterms&delay=60&consumerKey=[s]&consumerSecret=[s]&accessToken=[s]&accessTokenSecret=[s]"")
{code}

However, it doesn't seem to respect the delay parameter.

On debugging, the delay parameter is set properly:

{code}
    public TwitterConsumerPolling(TwitterEndpoint endpoint, Processor processor,
                                  Twitter4JConsumer twitter4jConsumer) {
        super(endpoint, processor);

        this.twitter4jConsumer = twitter4jConsumer;

        int delay = endpoint.getProperties().getDelay();
        setInitialDelay(1);
        setDelay(delay);  // delay is set properly to 60 here
        setTimeUnit(TimeUnit.SECONDS);
    }
{code}

but when the run() method of the ScheduledPollConsumer runs, the delay parameter is still the default of 500.

{code}
public void run() {
        // avoid this thread to throw exceptions because the thread pool wont re-schedule a new thread
        try {
            // log starting
            if (LoggingLevel.ERROR == runLoggingLevel) {
                LOG.error(""Scheduled task started on:   {}"", this.getEndpoint());
            } else if (LoggingLevel.WARN == runLoggingLevel) {
                LOG.warn(""Scheduled task started on:   {}"", this.getEndpoint());
            } else if (LoggingLevel.INFO == runLoggingLevel) {
                LOG.info(""Scheduled task started on:   {}"", this.getEndpoint());
            } else if (LoggingLevel.DEBUG == runLoggingLevel) {
                LOG.debug(""Scheduled task started on:   {}"", this.getEndpoint());
            } else {
                LOG.trace(""Scheduled task started on:   {}"", this.getEndpoint());
            }

            // execute scheduled task
            doRun();

            // log completed
            if (LoggingLevel.ERROR == runLoggingLevel) {
                LOG.error(""Scheduled task completed on: {}"", this.getEndpoint());
            } else if (LoggingLevel.WARN == runLoggingLevel) {
                LOG.warn(""Scheduled task completed on: {}"", this.getEndpoint());
            } else if (LoggingLevel.INFO == runLoggingLevel) {
                LOG.info(""Scheduled task completed on: {}"", this.getEndpoint());
            } else if (LoggingLevel.DEBUG == runLoggingLevel) {
                LOG.debug(""Scheduled task completed on: {}"", this.getEndpoint());
            } else {
                LOG.trace(""Scheduled task completed on: {}"", this.getEndpoint());
            }

        } catch (Error e) {
            // must catch Error, to ensure the task is re-scheduled
            LOG.error(""Error occurred during running scheduled task on: "" + this.getEndpoint() + "", due: "" + e.getMessage(), e);
        }
    }
{code}","OpenJDK Runtime Environment (IcedTea 2.6.4) (Arch Linux build 7.u95_2.6.4-1-x86_64)
",davsclaus,jusw85,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 01 08:34:54 UTC 2016,,,,,,,,,,,"0|i2s7yn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Feb/16 08:34;davsclaus;Use consumer.delay as the workaround to set the delay value.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dozer classloading may fail with spring based context,CAMEL-9545,12934751,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,28/Jan/16 10:16,29/Jan/16 07:14,14/Jul/23 05:50,28/Jan/16 10:27,,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-dozer,,,,,,,0,,,,,,"Dozer assumes that it can load user types from the classloader of the dozer implementation, which is of course quite wrong in a modular environment. In Camel we have a hack in DozerTypeConverterLoader, which prior to creating the bean mapper forces the classLoaderBeanName in GlobalSettings to DozerThreadContextClassLoader and then initialises the TCCL with the application ClassLoader associated with the CamelContext.

With a spring based context, this code path is not executed and therefore the application ClassLoader associated with the CamelContext ignored.

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1035
",,davsclaus,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,CAMEL-8748,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 28 10:27:35 UTC 2016,,,,,,,,,,,"0|i2s333:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jan/16 10:20;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/814

    [CAMEL-9545] Dozer classloading may fail with spring based context

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9545

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/814.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #814
    
----
commit 2a71f4257d508ffd05d2d5f447a65294296eae5c
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-01-28T10:18:08Z

    [CAMEL-9545] Dozer classloading may fail with spring based context

----
;;;","28/Jan/16 10:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/814
;;;","28/Jan/16 10:27;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Discovering new type converters in OSGi wipes out those manually added,CAMEL-9543,12934673,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,28/Jan/16 03:19,28/Jan/16 03:25,14/Jul/23 05:50,28/Jan/16 03:25,2.15.5,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,,,,,,,,0,,,,,,"When adding a type converter manually like:
{code}
getContext().getTypeConverterRegistry().addTypeConverter(A.class, B.class, new ABConverter()); 
{code}
It gets removed from the type converter registry when a new type converter is discovered in a newly installed bundle. (Like when you install camel-hl7 feature in Karaf say).",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 28 03:25:29 UTC 2016,,,,,,,,,,,"0|i2s2lr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jan/16 03:25;janstey;[janstey@bender camel-core-osgi]$ git push origin 
Counting objects: 30, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (20/20), done.
Writing objects: 100% (30/30), 2.33 KiB | 0 bytes/s, done.
Total 30 (delta 10), reused 0 (delta 0)
To https://git-wip-us.apache.org/repos/asf/camel.git
   cb67fe9..508c1df  camel-2.15.x -> camel-2.15.x
   b4f2374..206a464  camel-2.16.x -> camel-2.16.x
   e4223b9..d3bfca9  master -> master
[janstey@bender camel-core-osgi]$ 
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default value given in RestOperationParamDefinition not output in swagger api,CAMEL-9532,12933905,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mattsicker,mattsicker,25/Jan/16 19:01,26/Jan/16 08:49,14/Jul/23 05:50,26/Jan/16 08:49,2.16.1,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-swagger,,,,,,,0,,,,,,"When I specify a default value in a rest param definition, the default value is not output in the swagger API. For example:

{code}
rest().put(""{accountNumber}"")
  .param()
    .name(""type"")
    .type(RestParamType.query)
    .description(""The type of account to update."")
    .defaultValue(""MDM"")
  .endParam()
  .to(""direct:foo"");
{code}

Will output the following Swagger API fragment:

{code}
{
""name"": ""type"",
""in"": ""query"",
""description"": ""The type of account to update."",
""required"": true,
""type"": ""string""
}
{code}",,davsclaus,mattsicker,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 26 08:49:35 UTC 2016,,,,,,,,,,,"0|i2rxvb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Jan/16 08:49;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel loadbalancing example is broken,CAMEL-9528,12933736,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,25/Jan/16 06:47,25/Jan/16 07:20,14/Jul/23 05:50,25/Jan/16 07:12,2.15.5,2.16.1,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-mina,camel-mina2,examples,,,,,0,,,,,,"The original camel-mina version1 component's mina-core dependency is not being resolved correctly due to it being defaulted to mina2-version in camel-parent.
The example should just be changed to use camel-mina2 instead. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 25 07:12:55 UTC 2016,,,,,,,,,,,"0|i2rwtz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jan/16 07:12;dhirajsb;Resolved on master, camel-2.16.x, and camel-2.15.x branches;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty4 - Should not log stacktrace when client has received reply,CAMEL-9527,12933665,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Jan/16 11:14,15/Feb/21 14:14,14/Jul/23 05:50,24/Jan/16 11:50,2.16.2,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-netty4,,,,,,,0,,,,,,"If you do request/reply over netty4 you may get a stacktace in the logs even if a message was received and the channel was closed when the server stops etc.

{code}
[l-1) thread #33 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: route1 shutdown complete, was consuming from: Endpoint[direct://start]
[                          main] DefaultShutdownStrategy        INFO  Graceful shutdown of 2 routes completed in 0 seconds
]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [direct://start                                                                ] [     29673]
[route1            ] [to1               ] [netty4:tcp://127.0.0.1:8888?sync=true&decoder=#hl7decoder&encoder=#hl7encoder ] [     29668]
[route1            ] [process1          ] [Processor@0x484094a5                                                          ] [     28571]
[route1            ] [to2               ] [log:foo                                                                       ] [         3]
[route1            ] [to3               ] [mock:result                                                                   ] [         0]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-davsclaus-air-56167-1453631664458-0-2
	ExchangePattern     InOut
	Headers             {breadcrumbId=ID-davsclaus-air-56167-1453631664458-0-1, CamelRedelivered=false, CamelRedeliveryCounter=0}
	BodyType            String
QRD|20080805120000
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.CamelExchangeException: No response received from remote server: 127.0.0.1:8888. Exchange[ID-davsclaus-air-56167-1453631664458-0-2][Message: MSH|^~\&|MYSENDER||||200701011539||ADR^A19^ADR_A19|456|P|2.4
MSA|AA|123
QRD|20080805120000
]
	at org.apache.camel.component.netty4.handlers.ClientChannelHandler.channelInactive(ClientChannelHandler.java:126)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:218)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:204)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:332)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:218)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:204)
	at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:828)
	at io.netty.channel.AbstractChannel$AbstractUnsafe$7.run(AbstractChannel.java:625)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:358)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:357)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:112)
	at java.lang.Thread.run(Thread.java:745)
[                          main] DefaultCamelContext            INFO  Apache Camel 2.17-SNAPSHOT (CamelContext: camel-1) uptime 30.572 seconds
{code}

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,CAMEL-16178,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-01-24 11:14:52.0,,,,,,,,,,,"0|i2rwe7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blueprint depends-on can no longer contain multiple bean ids,CAMEL-9526,12932832,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,20/Jan/16 20:22,20/Jan/16 20:26,14/Jul/23 05:50,20/Jan/16 20:26,2.15.3,2.16.0,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,,,,,,,,0,,,,,,"Used to be able to do something like:

{code}
    <bean id=""id1"" class=""java.lang.Object""/>
    <bean id=""id2"" class=""java.lang.Object""/>

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""testCamelContext"" depends-on=""id1 id2""/>
{code}

Now as of 2.16 and 2.15.3 we get the following:
{code}
2016-01-20 16:44:07,541 | ERROR | rint Extender: 1 | BlueprintContainerImpl           | 12 - org.apache.aries.blueprint.core - 1.4.3 | Unable to start blueprint container for bundle camelContext.xml
org.osgi.service.blueprint.container.ComponentDefinitionException: Unresolved ref/idref to component: id1 id2
	at org.apache.aries.blueprint.container.BlueprintRepository.validate(BlueprintRepository.java:262)[12:org.apache.aries.blueprint.core:1.4.3]
	at org.apache.aries.blueprint.container.RecipeBuilder.createRepository(RecipeBuilder.java:96)[12:org.apache.aries.blueprint.core:1.4.3]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getRepository(BlueprintContainerImpl.java:481)[12:org.apache.aries.blueprint.core:1.4.3]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:328)[12:org.apache.aries.blueprint.core:1.4.3]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)[12:org.apache.aries.blueprint.core:1.4.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_60]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60]
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)[12:org.apache.aries.blueprint.core:1.4.3]
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)[12:org.apache.aries.blueprint.core:1.4.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_60]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)[:1.8.0_60]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_60]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_60]
{code}",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 20 20:26:36 UTC 2016,,,,,,,,,,,"0|i2rr9z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jan/16 20:26;janstey;To https://git-wip-us.apache.org/repos/asf/camel.git
   91fbaa4..1805c6b  camel-2.15.x -> camel-2.15.x
   eaefb7c..ea6262b  camel-2.16.x -> camel-2.16.x
   6705ca9..b6355ae  master -> master
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
POM from camel-archetype-blueprint generated project caused CamelBlueprintTestSupport failure,CAMEL-9519,12931546,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ggrzybek,hqstevenson,hqstevenson,15/Jan/16 19:07,19/Jan/16 16:30,14/Jul/23 05:50,19/Jan/16 08:13,2.15.0,2.15.1,2.15.2,2.15.3,2.15.4,2.15.5,2.16.0,2.16.1,2.17.0,,,,,,2.16.2,2.17.0,,,camel-archetypes,,,,,,,0,easyfix,,,,,"The POM in a new project created using the camel-archetype-blueprint archetype has a configuration for the maven-bundle-plugin that causes CamelBlueprintTestSupport-based test to fail under some conditions.

When Blueprint property placeholders are used and the blueprint.xml file is in src/main/resources/OSGI-INF/blueprint, the test will randomly fail.  Also, the camel context is created a large number of times, when it should only be created twice (the initial creation and then again when the blueprint is reloaded because of the properties change).",,davsclaus,githubbot,hqstevenson,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 19 16:30:47 UTC 2016,,,,,,,,,,,"0|i2rjcn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jan/16 19:08;hqstevenson;I'm working on a PR for this now.  I'll update the POM as well as include a unit test in the generated project that uses Blueprint property placeholders so that the fix can be verified.;;;","18/Jan/16 17:58;githubbot;GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/781

    CAMEL-9519:  Fixed generated POM and added more generated tests

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-9519

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/781.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #781
    
----
commit 445ecf49c1f6489fd86eac1db0d82140d6f87a71
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-01-18T17:56:25Z

    Updated generated POM and added generated tests

----
;;;","19/Jan/16 08:13;davsclaus;Thanks for the PR;;;","19/Jan/16 16:30;githubbot;Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/781
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cometd is not working with camel 2.15.2,CAMEL-9509,12929751,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dharshana,dharshana,13/Jan/16 09:12,15/Jan/16 11:27,14/Jul/23 05:50,14/Jan/16 17:00,2.15.2,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-cometd,,,,,,,0,,,,,,"I see that the Jetty server is getting stopped as soon as it was started. See the log below:

08:59:23.229 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger 
08:59:23.233 [default] [main] DEBUG o.a.c.p.interceptor.DefaultChannel - Initialize channel for target: 'SetHeader[Exception, simple{${exception.message}}]' 
08:59:23.257 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)"" 
08:59:23.260 [default] [main] DEBUG o.a.c.p.interceptor.DefaultChannel - Initialize channel for target: 'RecipientList[simple{activemq:DLQ.${exchangeProperty.Queue},bean:metoEnvironmentHealthIndicator}]' 
08:59:23.261 [default] [main] DEBUG org.apache.camel.model.LogDefinition - The LogName is null. Falling back to create logger by using the route id cometdRoute. 
08:59:23.261 [default] [main] DEBUG o.a.c.p.interceptor.DefaultChannel - Initialize channel for target: 'Log[Sending message to Cometd]' 
08:59:23.265 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@1e308cc to resolve component with name: cometd 
08:59:23.265 [default] [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Returning cached instance of singleton bean 'cometd' 
08:59:23.265 [default] [main] DEBUG o.a.c.impl.DefaultComponentResolver - Found component: cometd in registry: mydomain.service.tada_messaging.DefaultActiveMqConfiguration$1@ff6bd5 
08:59:23.265 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""cometd"" 
08:59:23.266 [default] [main] DEBUG o.apache.camel.impl.DefaultComponent - Creating endpoint uri=[cometd://0.0.0.0:9999/cometdBroadcastChannel], path=[0.0.0.0:9999/cometdBroadcastChannel] 
08:59:23.266 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - cometd://0.0.0.0:9999/cometdBroadcastChannel converted to endpoint: Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel] by component: mydomain.service.tada_messaging.DefaultActiveMqConfiguration$1@ff6bd5 
08:59:23.268 [default] [main] DEBUG o.a.c.p.interceptor.DefaultChannel - Initialize channel for target: 'To[cometd://0.0.0.0:9999/cometdBroadcastChannel]' 
08:59:23.271 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=MetricsRoutePolicy(0x1fa486) 
08:59:23.277 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=MetricsRegistryService 
08:59:23.277 [default] [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Returning cached instance of singleton bean 'metricRegistry' 
08:59:23.294 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance. 
08:59:23.294 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html 
08:59:23.295 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - Warming up route id: cometdRoute having autoStartup=true 
08:59:23.295 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting services on route: cometdRoute 
08:59:23.302 [default] [main] DEBUG o.a.c.component.jms.JmsQueueEndpoint - Using destinationName: MyBroadcastQueue on listenerContainer: org.apache.camel.component.jms.DefaultJmsMessageListenerContainer@1ce9dc5 
08:59:23.306 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=threadpools,name=""JmsConsumer(0xdd070a)"" 
08:59:23.306 [default] [main] DEBUG o.a.c.i.DefaultExecutorServiceManager - Created new CachedThreadPool for source: Consumer[activemq://MyBroadcastQueue] with name: JmsConsumer[MyBroadcastQueue]. -> java.util.concurrent.ThreadPoolExecutor@f92404[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] 
08:59:23.307 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Pipeline[[Channel[Log(cometdRoute)[Sending message to Cometd]], Channel[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])]]] 
08:59:23.307 [default] [main] DEBUG o.a.c.processor.DefaultErrorHandler - Redelivery enabled: false on error handler: DefaultErrorHandler[EvalExpression[Simple: activemq:DLQ.${exchangeProperty.Queue},bean:metoEnvironmentHealthIndicator]] 
08:59:23.307 [default] [main] DEBUG o.a.camel.processor.RecipientList - RecipientList RecipientList[Simple: activemq:DLQ.${exchangeProperty.Queue},bean:metoEnvironmentHealthIndicator] using ProducerCache with default cache size 
08:59:23.307 [default] [main] DEBUG o.a.c.processor.DefaultErrorHandler - Redelivery enabled: false on error handler: DefaultErrorHandler[Instrumentation:log[Log(cometdRoute)[Sending message to Cometd]]] 
08:59:23.311 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=producers,name=CometdProducer(0x1908a5c) 
08:59:23.321 [default] [main] DEBUG org.eclipse.jetty.util.log - Logging to Logger[org.eclipse.jetty.util.log] via org.eclipse.jetty.util.log.Slf4jLog 
08:59:23.328 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + org.eclipse.jetty.server.handler.ContextHandlerCollection@55bf45 as handler 
08:59:23.329 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + SelectChannelConnector@0.0.0.0:9999 as connector 
08:59:23.345 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e - org.eclipse.jetty.server.handler.ContextHandlerCollection@55bf45 as handler 
08:59:23.345 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + o.e.j.s.ServletContextHandler{/,null} as handler 
08:59:23.356 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - filterNameMap={} 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - pathFilters=null 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletFilterMap=null 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletPathMap={/cometd/*=org.cometd.server.CometdServlet-c5fe9b} 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletNameMap={org.cometd.server.CometdServlet-c5fe9b=org.cometd.server.CometdServlet-c5fe9b} 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - filterNameMap={} 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - pathFilters=null 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletFilterMap=null 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletPathMap={/cometd/*=org.cometd.server.CometdServlet-c5fe9b, /=org.eclipse.jetty.servlet.DefaultServlet-17ca83e} 
08:59:23.357 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletNameMap={org.cometd.server.CometdServlet-c5fe9b=org.cometd.server.CometdServlet-c5fe9b, org.eclipse.jetty.servlet.DefaultServlet-17ca83e=org.eclipse.jetty.servlet.DefaultServlet-17ca83e} 
08:59:23.365 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.Server@141651e 
08:59:23.367 [default] [main] INFO  org.eclipse.jetty.server.Server - jetty-8.1.18.v20150929 
08:59:23.381 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + qtp16541084{8<=0<=0/254,-1} as threadpool 
08:59:23.381 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting o.e.j.s.ServletContextHandler{/,null} 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.servlet.ServletHandler@1aed797 + org.cometd.server.CometdServlet-c5fe9b as servlet 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.servlet.ServletHandler@1aed797 + org.eclipse.jetty.servlet.DefaultServlet-17ca83e as servlet 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.servlet.ServletHandler@1aed797 + [/cometd/*]=>org.cometd.server.CometdServlet-c5fe9b as servletMapping 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.servlet.ServletHandler@1aed797 + [/]=>org.eclipse.jetty.servlet.DefaultServlet-17ca83e as servletMapping 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.session.SessionHandler@1cc1503 + org.eclipse.jetty.servlet.ServletHandler@1aed797 as handler 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.session.SessionHandler@1cc1503 + org.eclipse.jetty.server.session.HashSessionManager@1778636 as sessionManager 
08:59:23.394 [default] [main] DEBUG o.e.jetty.util.component.Container - Container o.e.j.s.ServletContextHandler{/,null} + org.eclipse.jetty.server.session.SessionHandler@1cc1503 as handler 
08:59:23.394 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.394 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.session.HashSessionManager@1778636 
08:59:23.395 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e + org.eclipse.jetty.server.session.HashSessionIdManager@1397822 as sessionIdManager 
08:59:23.395 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.session.HashSessionIdManager@1397822 
08:59:23.395 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.session.HashSessionIdManager@1397822 
08:59:23.396 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.session.HashSessionManager@1778636 
08:59:23.396 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.396 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - filterNameMap={} 
08:59:23.396 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - pathFilters=null 
08:59:23.396 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletFilterMap=null 
08:59:23.396 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletPathMap={/cometd/*=org.cometd.server.CometdServlet-c5fe9b, /=org.eclipse.jetty.servlet.DefaultServlet-17ca83e} 
08:59:23.396 [default] [main] DEBUG o.e.jetty.servlet.ServletHandler - servletNameMap={org.cometd.server.CometdServlet-c5fe9b=org.cometd.server.CometdServlet-c5fe9b, org.eclipse.jetty.servlet.DefaultServlet-17ca83e=org.eclipse.jetty.servlet.DefaultServlet-17ca83e} 
08:59:23.396 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - starting org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.396 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.396 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - starting org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.396 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.396 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - starting o.e.j.s.ServletContextHandler{/,null} 
08:59:23.396 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.cometd.server.CometdServlet-c5fe9b 
08:59:23.415 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.cometd.server.BayeuxServerImpl@868937 
08:59:23.415 [default] [main] WARN  o.c.server.BayeuxServerImpl@8816951 - setDebugEnabled not implemented 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - JSONCommented=true 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - interval=0 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - logLevel=1 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - maxInterval=30000 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - multiFrameInterval=1500 
08:59:23.415 [default] [main] INFO  o.c.server.BayeuxServerImpl@8816951 - timeout=240000 
08:59:23.417 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/handshake 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/connect 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/subscribe 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/unsubscribe 
08:59:23.418 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Added channel /meta/disconnect 
08:59:23.420 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - Allowed Transports: [callback-polling, long-polling] 
08:59:23.421 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.cometd.server.BayeuxServerImpl@868937 
08:59:23.421 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.cometd.server.CometdServlet-c5fe9b 
08:59:23.421 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.servlet.DefaultServlet-17ca83e 
08:59:23.423 [default] [main] DEBUG org.eclipse.jetty.servlet.Holder - Holding class org.eclipse.jetty.servlet.DefaultServlet 
08:59:23.423 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.servlet.DefaultServlet-17ca83e 
08:59:23.423 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED o.e.j.s.ServletContextHandler{/,null} 
08:59:23.423 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - starting org.eclipse.jetty.server.Server@141651e 
08:59:23.423 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting qtp16541084{8<=0<=0/254,-1} 
08:59:23.424 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED qtp16541084{8<=7<=8/254,0} 
08:59:23.424 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting SelectChannelConnector@0.0.0.0:9999 
08:59:23.428 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting null/null 
08:59:23.429 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED PooledBuffers [0/1024@6144,0/1024@16384,0/1024@-]/PooledBuffers [0/1024@6144,0/1024@32768,0/1024@-] 
08:59:23.429 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - starting org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager@1e36e5e 
08:59:23.436 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager@1e36e5e 
08:59:23.436 [default] [qtp16541084-30 Selector0] DEBUG org.eclipse.jetty.io.nio - Starting Thread[qtp16541084-30 Selector0,5,main] on org.eclipse.jetty.io.nio.SelectorManager$1@13b4f4c 
08:59:23.437 [default] [main] INFO  o.e.jetty.server.AbstractConnector - Started SelectChannelConnector@0.0.0.0:9999 
08:59:23.437 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED SelectChannelConnector@0.0.0.0:9999 
08:59:23.437 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STARTED org.eclipse.jetty.server.Server@141651e 
08:59:23.453 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - >  {""id"":""1"",""channel"":""/meta/handshake""} /cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx 
08:59:23.453 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - >> {""id"":""1"",""channel"":""/meta/handshake""} 
08:59:23.454 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - << {""id"":""1"",""minimumVersion"":""1.0"",""supportedConnectionTypes"":[""callback-polling"",""long-polling""],""successful"":true,""channel"":""/meta/handshake"",""clientId"":""/cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx"",""version"":""1.0""} 
08:59:23.454 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - <  {""id"":""1"",""minimumVersion"":""1.0"",""supportedConnectionTypes"":[""callback-polling"",""long-polling""],""successful"":true,""channel"":""/meta/handshake"",""clientId"":""/cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx"",""version"":""1.0""} 
08:59:23.455 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - >  {""id"":""2"",""advice"":{""interval"":-1},""channel"":""/meta/connect"",""clientId"":""/cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx""} /cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx 
08:59:23.455 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - >> {""id"":""2"",""advice"":{""interval"":-1},""channel"":""/meta/connect"",""clientId"":""/cometdBroadcastChannel_1ps6caf8lxivw14tib5lvs74mx""} 
08:59:23.455 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - << {""id"":""2"",""successful"":true,""channel"":""/meta/connect""} 
08:59:23.455 [default] [main] DEBUG o.c.server.BayeuxServerImpl@8816951 - <  {""id"":""2"",""successful"":true,""channel"":""/meta/connect""} 
08:59:23.456 [default] [main] DEBUG o.e.jetty.util.component.Container - Container org.eclipse.jetty.server.Server@141651e - SelectChannelConnector@0.0.0.0:9999 as connector 
08:59:23.456 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping SelectChannelConnector@0.0.0.0:9999 
08:59:23.456 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager@1e36e5e 
08:59:23.457 [default] [qtp16541084-30 Selector0] DEBUG org.eclipse.jetty.io.nio - Stopped Thread[qtp16541084-30 Selector0,5,main] on org.eclipse.jetty.io.nio.SelectorManager$1@13b4f4c 
08:59:23.467 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.nio.SelectChannelConnector$ConnectorSelectorManager@1e36e5e 
08:59:23.467 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping PooledBuffers [0/1024@6144,0/1024@16384,0/1024@-]/PooledBuffers [0/1024@6144,0/1024@32768,0/1024@-] 
08:59:23.467 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED null/null 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED SelectChannelConnector@0.0.0.0:9999 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.Server@141651e 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping o.e.j.s.ServletContextHandler{/,null} 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.session.HashSessionManager@1778636 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.session.HashSessionManager@1778636 
08:59:23.468 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.468 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - stopping org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.servlet.DefaultServlet-17ca83e 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.servlet.DefaultServlet-17ca83e 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.cometd.server.CometdServlet-c5fe9b 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.cometd.server.BayeuxServerImpl@868937 
08:59:23.469 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.cometd.server.BayeuxServerImpl@868937 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.cometd.server.CometdServlet-c5fe9b 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.servlet.ServletHandler@1aed797 
08:59:23.470 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - stopping org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.session.SessionHandler@1cc1503 
08:59:23.470 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - stopping o.e.j.s.ServletContextHandler{/,null} 
08:59:23.470 [default] [main] INFO  o.e.j.server.handler.ContextHandler - stopped o.e.j.s.ServletContextHandler{/,null} 
08:59:23.470 [default] [main] DEBUG o.e.jetty.util.component.Container - Container o.e.j.s.ServletContextHandler{/,null} - org.eclipse.jetty.server.session.SessionHandler@1cc1503 as handler 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED o.e.j.s.ServletContextHandler{/,null} 
08:59:23.470 [default] [main] DEBUG o.e.j.server.handler.AbstractHandler - stopping org.eclipse.jetty.server.Server@141651e 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping org.eclipse.jetty.server.session.HashSessionIdManager@1397822 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.session.HashSessionIdManager@1397822 
08:59:23.470 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - stopping qtp16541084{8<=8<=8/254,0} 
08:59:23.527 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED qtp16541084{8<=0<=0/254,4} 
08:59:23.527 [default] [main] DEBUG o.e.j.u.component.AbstractLifeCycle - STOPPED org.eclipse.jetty.server.Server@141651e 
08:59:23.527 [default] [main] DEBUG o.a.c.processor.DefaultErrorHandler - Redelivery enabled: false on error handler: DefaultErrorHandler[Instrumentation:to[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])]] 
08:59:23.527 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Pipeline[[Channel[Log(cometdRoute)[Sending message to Cometd]], Channel[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])]]] 
08:59:23.527 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Log(cometdRoute)[Sending message to Cometd] 
08:59:23.534 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log2"" 
08:59:23.535 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Channel[Log(cometdRoute)[Sending message to Cometd]] 
08:59:23.535 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel]) 
08:59:23.541 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""to1"" 
08:59:23.541 [default] [main] DEBUG org.apache.camel.impl.RouteService - Starting child service on route: cometdRoute -> Channel[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])] 
08:59:23.548 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""cometdRoute"" 
08:59:23.548 [default] [main] DEBUG o.a.c.support.TimerListenerManager - Added TimerListener: org.apache.camel.management.mbean.ManagedSuspendableRoute@18afde8 
08:59:23.549 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - Route: cometdRoute >>> EventDrivenConsumerRoute[Endpoint[activemq://MyBroadcastQueue] -> Pipeline[[Channel[Log(cometdRoute)[Sending message to Cometd]], Channel[sendTo(Endpoint[cometd://0.0.0.0:9999/cometdBroadcastChannel])]]]] 
08:59:23.549 [default] [main] DEBUG o.a.camel.spring.SpringCamelContext - Starting consumer (order: 1000) on route: cometdRoute 
08:59:23.552 [default] [main] DEBUG o.a.c.m.DefaultManagementAgent - Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=JmsConsumer(0xdd070a) 
08:59:23.552 [default] [main] DEBUG o.a.camel.component.jms.JmsConsumer - Starting consumer: Consumer[activemq://MyBroadcastQueue] 
08:59:23.555 [default] [main] DEBUG o.a.a.thread.TaskRunnerFactory - Initialized TaskRunnerFactory[ActiveMQ VMTransport: vm://localhost#2] using ExecutorService: java.util.concurrent.ThreadPoolExecutor@4a7e7f[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] 
08:59:23.555 [default] [ActiveMQ BrokerService[localhost] Task-2] DEBUG o.a.a.thread.TaskRunnerFactory - Initialized TaskRunnerFactory[ActiveMQ VMTransport: vm://localhost#3] using ExecutorService: java.util.concurrent.ThreadPoolExecutor@b6fa5d[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] 
08:59:23.557 [default] [main] DEBUG o.a.c.c.j.DefaultJmsMessageListenerContainer - Established shared JMS Connection 
08:59:23.558 [default] [main] DEBUG o.a.c.c.j.DefaultJmsMessageListenerContainer - Resumed paused task: org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker@9cef26 
08:59:23.558 [default] [main] DEBUG o.a.c.c.j.DefaultJmsMessageListenerContainer - Resumed paused task: org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker@118d229 
08:59:23.558 [default] [main] DEBUG o.a.c.c.j.DefaultJmsMessageListenerContainer - Resumed paused task: org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker@8da115 
08:59:23.562 [default] [ActiveMQ VMTransport: vm://localhost#3-1] DEBUG o.a.a.broker.TransportConnection - Setting up new connection id: ID:EXXHSLSY4J-59436-1452675561504-3:2, address: vm://localhost#2, info: ConnectionInfo {commandId = 1, responseRequired = true, connectionId = ID:EXXHSLSY4J-59436-1452675561504-3:2, clientId = ID:EXXHSLSY4J-59436-1452675561504-2:1, clientIp = null, userName = null, password = *****, brokerPath = null, brokerMasterConnector = false, manageable = true, clientMaster = true, faultTolerant = false, failoverReconnect = false} 
08:59:23.674 [default] [ActiveMQ VMTransport: vm://localhost#3-1] DEBUG o.a.a.broker.region.AbstractRegion - localhost adding destination: topic://ActiveMQ.Advisory.Connection 
08:59:23.688 [default] [ActiveMQ VMTransport: vm://localhost#3-1] DEBUG o.a.a.broker.region.AbstractRegion - localhost adding consumer: ID:EXXHSLSY4J-59436-1452675561504-3:2:-1:1 for destination: ActiveMQ.Advisory.TempQueue,ActiveMQ.Advisory.TempTopic 
08:59:23.698 [default] [main] DEBUG o.a.camel.component.jms.JmsConsumer - Started listener container org.apache.camel.component.jms.DefaultJmsMessageListenerContainer@1ce9dc5 on destination MyBroadcastQueue 
08:59:23.698 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - Route: cometdRoute started and consuming from: Endpoint[activemq://MyBroadcastQueue] 
08:59:23.698 [default] [main] DEBUG o.a.c.m.DefaultManagementLifecycleStrategy - Load performance statistics disabled 
08:59:23.698 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - Total 1 routes, of which 1 is started. 
08:59:23.699 [default] [main] INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.15.2 (CamelContext: camel-1) started in 0.645 seconds ",,davsclaus,dharshana,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 15 11:27:52 UTC 2016,,,,,,,,,,,"0|i2r89z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jan/16 09:12;dharshana;Here is the maven dependency list for my spring boot app:

[DEBUG] + Filtering omitted nodes from dependency tree
[INFO] mydomain.service:tada-messaging-pkg-os:jar:develop-SNAPSHOT
[INFO] +- org.springframework.boot:spring-boot-starter-actuator:jar:1.3.1.RELEASE:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:1.3.1.RELEASE:compile
[INFO] |  |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.13:compile
[INFO] |  |  |  \- org.slf4j:log4j-over-slf4j:jar:1.7.13:compile
[INFO] |  |  \- org.yaml:snakeyaml:jar:1.16:runtime
[INFO] |  \- org.springframework.boot:spring-boot-actuator:jar:1.3.1.RELEASE:compile
[INFO] +- org.springframework.boot:spring-boot-starter-web:jar:1.3.1.RELEASE:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:8.0.30:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:8.0.30:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-logging-juli:jar:8.0.30:compile
[INFO] |  |  \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:8.0.30:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-validation:jar:1.3.1.RELEASE:compile
[INFO] |  |  \- org.hibernate:hibernate-validator:jar:5.2.2.Final:compile
[INFO] |  |     +- javax.validation:validation-api:jar:1.1.0.Final:compile
[INFO] |  |     +- org.jboss.logging:jboss-logging:jar:3.3.0.Final:compile (version managed from 3.2.1.Final)
[INFO] |  |     \- com.fasterxml:classmate:jar:1.1.0:compile
[INFO] |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.6.4:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.6.4:compile (version managed from 2.6.0)
[INFO] |  |  \- com.fasterxml.jackson.core:jackson-core:jar:2.6.4:compile
[INFO] |  +- org.springframework:spring-web:jar:4.2.4.RELEASE:compile
[INFO] |  \- org.springframework:spring-webmvc:jar:4.2.4.RELEASE:compile
[INFO] |     \- org.springframework:spring-expression:jar:4.2.4.RELEASE:compile
[INFO] +- org.springframework:spring-jms:jar:4.2.4.RELEASE:compile
[INFO] |  +- org.springframework:spring-aop:jar:4.2.4.RELEASE:compile
[INFO] |  |  \- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  +- org.springframework:spring-beans:jar:4.2.4.RELEASE:compile
[INFO] |  +- org.springframework:spring-context:jar:4.2.4.RELEASE:compile
[INFO] |  +- org.springframework:spring-core:jar:4.2.4.RELEASE:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.2:compile
[INFO] |  +- org.springframework:spring-messaging:jar:4.2.4.RELEASE:compile
[INFO] |  \- org.springframework:spring-tx:jar:4.2.4.RELEASE:compile
[INFO] +- mydomain.wave.common:mydomain-commons-logging:jar:1.0.4:compile
[INFO] |  +- org.slf4j:slf4j-api:jar:1.7.13:compile
[INFO] |  \- org.slf4j:jul-to-slf4j:jar:1.7.13:compile
[INFO] +- ch.qos.logback:logback-classic:jar:1.1.3:compile
[INFO] +- ch.qos.logback:logback-core:jar:1.1.3:compile
[INFO] +- org.apache.camel:camel-jaxb:jar:2.15.2:compile
[INFO] |  +- com.sun.xml.bind:jaxb-core:jar:2.2.11:compile
[INFO] |  \- com.sun.xml.bind:jaxb-impl:jar:2.2.11:compile
[INFO] +- org.apache.camel:camel-core:jar:2.15.2:compile
[INFO] +- org.apache.camel:camel-http:jar:2.15.2:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-servlet_3.0_spec:jar:1.0:compile
[INFO] |  +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] |  \- commons-codec:commons-codec:jar:1.10:compile
[INFO] +- org.apache.camel:camel-cometd:jar:2.15.2:compile
[INFO] +- org.cometd.java:cometd-java-server:jar:2.3.1:compile
[INFO] |  \- org.cometd.java:bayeux-api:jar:2.3.1:compile
[INFO] +- org.cometd.java:cometd-java-common:jar:2.3.1:compile
[INFO] +- org.eclipse.jetty:jetty-server:jar:8.1.18.v20150929:compile
[INFO] |  \- org.eclipse.jetty.orbit:javax.servlet:jar:3.0.0.v201112011016:compile
[INFO] +- org.eclipse.jetty:jetty-util:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-servlet:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-http:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-io:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-security:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-jmx:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-servlets:jar:8.1.18.v20150929:compile
[INFO] |  \- org.eclipse.jetty:jetty-client:jar:8.1.18.v20150929:compile
[INFO] +- org.eclipse.jetty:jetty-continuation:jar:8.1.18.v20150929:compile
[INFO] +- org.apache.camel:camel-jms:jar:2.15.2:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.15.2:compile
[INFO] +- org.apache.camel:camel-spring-javaconfig:jar:2.15.2:compile
[INFO] |  \- org.apache.servicemix.bundles:org.apache.servicemix.bundles.cglib:jar:2.1_3_7:compile
[INFO] +- org.apache.camel:camel-metrics:jar:2.15.2:compile
[INFO] |  +- io.dropwizard.metrics:metrics-core:jar:3.1.2:compile (version managed from 3.1.1)
[INFO] |  \- io.dropwizard.metrics:metrics-json:jar:3.1.1:compile
[INFO] +- org.apache.camel:camel-spring-boot:jar:2.15.2:compile
[INFO] +- org.apache.activemq:activemq-camel:jar:5.7.0:compile
[INFO] |  +- org.apache.activemq:activemq-core:jar:5.7.0:compile
[INFO] |  |  +- org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.1.1:compile
[INFO] |  |  +- org.apache.activemq:kahadb:jar:5.7.0:compile
[INFO] |  |  +- org.apache.activemq.protobuf:activemq-protobuf:jar:1.1:compile
[INFO] |  |  +- org.fusesource.mqtt-client:mqtt-client:jar:1.3:compile
[INFO] |  |  |  +- org.fusesource.hawtdispatch:hawtdispatch-transport:jar:1.11:compile
[INFO] |  |  |  |  \- org.fusesource.hawtdispatch:hawtdispatch:jar:1.11:compile
[INFO] |  |  |  \- org.fusesource.hawtbuf:hawtbuf:jar:1.9:compile
[INFO] |  |  +- org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:jar:1.0.1:compile
[INFO] |  |  +- commons-net:commons-net:jar:3.1:compile
[INFO] |  |  \- org.jasypt:jasypt:jar:1.9.0:compile
[INFO] |  \- org.apache.activemq:activemq-pool:jar:5.12.1:compile (version managed from 5.7.0)
[INFO] |     +- org.apache.activemq:activemq-jms-pool:jar:5.12.1:compile
[INFO] |     +- org.apache.activemq:activemq-client:jar:5.12.1:compile
[INFO] |     +- org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0.1:compile
[INFO] |     \- org.apache.commons:commons-pool2:jar:2.4.2:compile
[INFO] +- commons-io:commons-io:jar:1.4:compile
[INFO] +- info.cukes:cucumber-junit:jar:1.2.4:test
[INFO] |  +- info.cukes:cucumber-core:jar:1.2.4:test
[INFO] |  |  +- info.cukes:cucumber-html:jar:0.2.3:test
[INFO] |  |  +- info.cukes:cucumber-jvm-deps:jar:1.0.5:test
[INFO] |  |  \- info.cukes:gherkin:jar:2.12.2:test
[INFO] |  \- junit:junit:jar:4.12:test (version managed from 4.11)
[INFO] +- info.cukes:cucumber-java:jar:1.2.4:test
[INFO] +- info.cukes:cucumber-spring:jar:1.2.4:test
[INFO] +- commons-lang:commons-lang:jar:2.4:compile
[INFO] +- org.springframework.boot:spring-boot-starter-test:jar:1.3.1.RELEASE:test
[INFO] |  +- org.mockito:mockito-core:jar:1.10.19:test
[INFO] |  |  \- org.objenesis:objenesis:jar:2.1:test
[INFO] |  +- org.hamcrest:hamcrest-core:jar:1.3:test
[INFO] |  +- org.hamcrest:hamcrest-library:jar:1.3:test
[INFO] |  \- org.springframework:spring-test:jar:4.2.4.RELEASE:test
[INFO] +- org.apache.camel:camel-test-spring:jar:2.15.2:test
[INFO] |  \- org.apache.camel:camel-test:jar:2.15.2:test
[INFO] +- org.jmockit:jmockit:jar:1.20:test
[INFO] \- org.cometd.java:cometd-java-client:jar:2.3.1:test;;;","13/Jan/16 09:19;dharshana;I debugged it up to the isSingleton method of CometdProducer. in version 2.9.0/2.10.0 isSingleton is delegated to the parent, which always returns true.  In the new releases the default method delegates the call to the endpoint which is returning false in this case, making the producer shutdown during refresh the refresh.

hread [main] (Suspended (breakpoint at line 169 in CometdComponent))	
	owns: LinkedHashMap<K,V>  (id=113)	
	owns: RouteService  (id=94)	
	owns: SpringCamelContext  (id=95)	
	owns: Object  (id=96)	
	owns: DefaultContextCache  (id=97)	
	DefaultActiveMqConfiguration$1(CometdComponent).disconnect(CometdProducerConsumer) line: 169	
	DefaultActiveMqConfiguration$1$1(CometdEndpoint).disconnect(CometdProducerConsumer) line: 107	
	CometdProducer.stop() line: 60	
	ServiceHelper.stopService(Object) line: 141	
	ServiceHelper.stopAndShutdownService(Object) line: 204	
	ProducerCache.releaseProducer(Endpoint, Producer) line: 139	
	SendProcessor.doStart() line: 223	
	SendProcessor(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	InstrumentationProcessor(DelegateAsyncProcessor).doStart() line: 79	
	InstrumentationProcessor(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	DefaultErrorHandler(RedeliveryErrorHandler).doStart() line: 1272	
	DefaultErrorHandler(ChildServiceSupport).start(boolean) line: 44	
	DefaultErrorHandler(ChildServiceSupport).start() line: 31	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	DefaultChannel.doStart() line: 155	
	DefaultChannel(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startService(Object) line: 61	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	Pipeline(MulticastProcessor).doStart() line: 1122	
	Pipeline(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	ServiceHelper.startService(Object) line: 59	
	ServiceHelper.startServices(Collection<?>) line: 103	
	ServiceHelper.startServices(Object...) line: 89	
	CamelInternalProcessor(DelegateAsyncProcessor).doStart() line: 79	
	CamelInternalProcessor(ServiceSupport).start() line: 61	
	ServiceHelper.startService(Service) line: 74	
	RouteService.startChildService(Route, List<Service>) line: 340	
	RouteService.warmUp() line: 182	
	SpringCamelContext(DefaultCamelContext).doWarmUpRoutes(Map<Integer,DefaultRouteStartupOrder>, boolean) line: 3090	
	SpringCamelContext(DefaultCamelContext).safelyStartRouteServices(boolean, boolean, boolean, boolean, Collection<RouteService>) line: 3020	
	SpringCamelContext(DefaultCamelContext).doStartOrResumeRoutes(Map<String,RouteService>, boolean, boolean, boolean, boolean) line: 2797	
	SpringCamelContext(DefaultCamelContext).doStartCamel() line: 2653	
	DefaultCamelContext.access$000(DefaultCamelContext) line: 167	
	DefaultCamelContext$2.call() line: 2467	
	DefaultCamelContext$2.call() line: 2463	
	SpringCamelContext(DefaultCamelContext).doWithDefinedClassLoader(Callable<T>) line: 2486	
	SpringCamelContext(DefaultCamelContext).doStart() line: 2463	
	SpringCamelContext(ServiceSupport).start() line: 61	
	SpringCamelContext(DefaultCamelContext).start() line: 2432	
	RoutesCollector.onApplicationEvent(ContextRefreshedEvent) line: 67	
	RoutesCollector.onApplicationEvent(ApplicationEvent) line: 29	
	SimpleApplicationEventMulticaster.invokeListener(ApplicationListener, ApplicationEvent) line: 163	
	SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent, ResolvableType) line: 136	
	AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(Object, ResolvableType) line: 381	
	AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 335	
	AnnotationConfigApplicationContext(AbstractApplicationContext).finishRefresh() line: 855	
	AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 541	


I have written a workaround by overriding the isSingleton method of the CometdProducer to return true as the older versions which makes the system work.;;;","14/Jan/16 17:00;davsclaus;Thanks for reporting and digging into the code and finding where to fix it.;;;","15/Jan/16 09:23;dharshana;One more thing I forgot to mention, even after changing the singleton cometd would stop broadcasting after the first message because disconnectLocalSession=true by default. I had to use a url similar to ometd://0.0.0.0:9999/myBroadcastChannel?disconnectLocalSession=false get the code working correctly in camel.


My tests looked like the following:

    @Test
    public void testSendToClientRoute() throws InterruptedException {

        Map<String, Object> options = new HashMap<String, Object>();
        String url = ""http://localhost:9099/cometd"";
        BayeuxClient client = new BayeuxClient(url, LongPollingTransport.create(options));
        client.handshake();
        boolean connected = client.waitFor(10000, BayeuxClient.State.CONNECTED);
        final List<Object> data = new ArrayList<Object>();
        if (connected) {
            // Subscription to channels
            ClientSessionChannel channel = client.getChannel(""/alertchannel"");
            channel.subscribe(new ClientSessionChannel.MessageListener() {
                @Override
                public void onMessage(ClientSessionChannel channel, Message message) {
                    data.add(message.getData());
                }
            });

        } else {
            org.junit.Assert.fail(""Failed to connect to commet instance! at "" + url);
        }

        sendTextMessageToQueue(""SendToClientRoute"", ""test message 1"");
        Thread.sleep(100);

        sendTextMessageToQueue(""SendToClientRoute"", ""test message 2"");
        Thread.sleep(100);

        // Disconnecting
        client.disconnect();
        Assert.assertThat(data.size(), Is.is(2));
        Assert.assertThat((String) data.get(0), Is.is(""test message 1""));
        Assert.assertThat((String) data.get(1), Is.is(""test message 2""));
    }


My route setup is : This route will not send more than one message if ""disconnectLocalSession=false"" is omitted as the service will be torn down after sending each message.

        from(""activemq://queue:SendToClientRoute"").routeId(""sendToClientRoute"")
                .tracing()
                .log(LoggingLevel.DEBUG, ""xxx.SendToClientRoute"",
                        ""Sent message on alertchannel"")
                .to(""cometd://0.0.0.0:9099/alertchannel?disconnectLocalSession=false"")
                .end();
;;;","15/Jan/16 11:27;davsclaus;Okay thanks changing that to false by default now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
STOMP component does not handle stream objects,CAMEL-9506,12929587,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ceosion,ceosion,12/Jan/16 20:35,08/Mar/16 09:38,14/Jul/23 05:50,08/Mar/16 09:38,2.16.1,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-stomp,,,,,,,0,,,,,,"The STOMP component only performs a very simple toString() on the body of the incoming exchange when it creates a STOMP message. This does not work when the body does not support a toString() which gives some reasonable human readable representation of the object. This is exactly the case if you try to do the following:

{code}
from(""direct:a"").marshal().json(JsonLibrary.Gson).to(""stomp:topic:foobar"")
{code}

The result of the JSON serialization is a Stream, and the toString() on a Stream results in an object hash (e.g. ""[B@30479402""). A more appropriate thing to do here is similar to what the File component does. (Basically, read the stream for the data.)",,ceosion,njiang,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 13 18:06:37 UTC 2016,,,,,,,,,,,"0|i2r79j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jan/16 01:32;njiang;I just checked the code of camel stomp endpoint, it should not use the toString() directly on the message body.
The fix is on the way :) ;;;","13/Jan/16 16:06;ceosion;Great! I looked at the change you made and replicated it in my dev environment. Confirmed that this fixes the problem! :)

I assume this will get rolled into a 2.16.2 release of Apache Camel? Any idea when that would be released?;;;","13/Jan/16 18:06;pascalschumacher;Yes, the fix is in the camel-2.16.x branch: [https://github.com/apache/camel/commit/302c91d1a49ce8985950f7da53a034bd97951b88]

2.16.2 will be released week (+ a few days if there are any problems): [http://mail-archives.apache.org/mod_mbox/camel-dev/201601.mbox/%3CCADL1oApn9mWNpYjT9zBT43VbRrpTKUs7nzwp5VkzzyvCyR2%2BxA%40mail.gmail.com%3E];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMQConsumer don't use Camel ExceptionHandler BEFORE requeing message,CAMEL-9505,12929466,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,arnaudchotard,arnaudchotard,12/Jan/16 11:39,13/Jan/16 14:26,14/Jul/23 05:50,13/Jan/16 13:15,2.16.1,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-rabbitmq,,,,,,,0,,,,,,"The use case is :

onException(NotHandledException.class)
   .handled(false)
   .log(""Exception not handled"");

onException(HandledException.class)
   .handled(true)
   .log(""Exception handled"");

from(""rabbitmq://...&autoAck=false"")
   .setHeader(RabbitMQConstants.REQUEUE, constant(true))
   .to(...);

If the route generate a NotHandledException, the message is requeue in RabbitMQ, it works fine.

If the route generate a HandledException, the message is requeue in RabbitMQ before the execution of Camel ExceptionHandler wich should handle the exception and should not propagate it. 

The message handled by Camel ExceptionHandler should not be requeue in RabbitMQ since the exception is handled.

The related code is in :

org.apache.camel.component.rabbitmq.RabbitConsumer.handleDelivery

Maybe this line :

getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());

should be before :

if (deliveryTag != 0 && !consumer.endpoint.isAutoAck()) {
   log.trace(""Rejecting receipt [delivery_tag={}] with requeue={}"", deliveryTag, isRequeueHeaderSet);
   if (isRequeueHeaderSet) {
      channel.basicReject(deliveryTag, true);
   } else {
      channel.basicReject(deliveryTag, false);
   }
}



",,acosentino,arnaudchotard,seb_brousse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 13 14:26:18 UTC 2016,,,,,,,,,,,"0|i2r6in:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jan/16 13:15;arnaudchotard;I think theses lines : 

if (exchange.getException() != null) {
    getExceptionHandler().handleException(""Error processing exchange"", exchange, exchange.getException());
}

could be move just after :

Message msg;
if (exchange.hasOut()) {
    msg = exchange.getOut();
} else {
    msg = exchange.getIn();
}

and before test :

if (!exchange.isFailed())

the getExceptionHandler().handleException could be in a try catch in order to send ack to RabbitMQ even if the onException block generate an exception;;;","13/Jan/16 13:19;acosentino;With the latest commit it works correctly.

I've pushed two integration tests to test the behaviour.;;;","13/Jan/16 13:53;arnaudchotard;Thank you. Perhaps the exception handler should be place before the test !exchange.isFailed() ?
Indeed, with the actual code, with an handled exception and autoAck=false, the RabbitMQ will still have a basiReject.
Should RabbitMQ have a basicAck is this case since the exception is handled ?;;;","13/Jan/16 14:05;acosentino;It makes sense. You're right.

I'll push this change.

Anyway, if you want, we love contributions:
http://camel.apache.org/contributing.html;;;","13/Jan/16 14:26;acosentino;Updated.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
OnCompletion - restores the rollback only last in the wrong key,CAMEL-9503,12929440,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Jan/16 10:06,12/Jan/16 10:08,14/Jul/23 05:50,12/Jan/16 10:08,2.16.1,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-core,,,,,,,0,,,,,,,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-01-12 10:06:09.0,,,,,,,,,,,"0|i2r6cv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
karaf - Re-installing bundle using camel-cxf throws javax.management.InstanceAlreadyExistsException,CAMEL-9502,12929422,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,tadayosi,ralfsteppacher,ralfsteppacher,12/Jan/16 09:10,03/Mar/17 12:00,14/Jul/23 05:50,01/Mar/17 17:01,2.16.1,,,,,,,,,,,,,,2.17.6,2.18.3,2.19.0,,camel-cxf,karaf,,,,,,1,,,,,,"Re-installing a bundle (in my case via a feature) that uses camel-cxf throws 3 instances of {{javax.management.InstanceAlreadyExistsException}}:

{noformat}
2016-01-12 09:57:15,974 | WARN  | pache.cxf.osgi]) | MBeanContainer                   | 222 - org.eclipse.jetty.util - 9.2.10.v20150310 |   | bean: org.eclipse.jetty.server.session.HashSessionIdManager@398c8e55
javax.management.InstanceAlreadyExistsException: org.eclipse.jetty.server.session:type=hashsessionidmanager,id=0
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)[:1.8.0_40]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)[:1.8.0_40]
	at org.eclipse.jetty.jmx.MBeanContainer.beanAdded(MBeanContainer.java:209)[214:org.eclipse.jetty.jmx:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(ContainerLifeCycle.java:264)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(ContainerLifeCycle.java:228)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.updateBean(ContainerLifeCycle.java:777)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.server.Server.setSessionIdManager(Server.java:578)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.session.AbstractSessionManager.doStart(AbstractSessionManager.java:247)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.session.HashSessionManager.doStart(HashSessionManager.java:153)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ScopedHandler.doStart(ScopedHandler.java:120)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.session.SessionHandler.doStart(SessionHandler.java:116)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ScopedHandler.doStart(ScopedHandler.java:120)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:784)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:294)[220:org.eclipse.jetty.servlet:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:741)[219:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doStart(HttpServiceContext.java:245)[235:org.ops4j.pax.web.pax-web-jetty:4.2.3]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)[222:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.ops4j.pax.web.service.jetty.internal.JettyServerImpl$1.start(JettyServerImpl.java:258)[235:org.ops4j.pax.web.pax-web-jetty:4.2.3]
	at org.ops4j.pax.web.service.internal.HttpServiceStarted.registerServlet(HttpServiceStarted.java:216)[237:org.ops4j.pax.web.pax-web-runtime:4.2.3]
	at org.ops4j.pax.web.service.internal.HttpServiceStarted.registerServlet(HttpServiceStarted.java:190)[237:org.ops4j.pax.web.pax-web-runtime:4.2.3]
	at org.ops4j.pax.web.service.internal.HttpServiceStarted.registerServlet(HttpServiceStarted.java:175)[237:org.ops4j.pax.web.pax-web-runtime:4.2.3]
	at org.ops4j.pax.web.service.internal.HttpServiceProxy.registerServlet(HttpServiceProxy.java:64)[237:org.ops4j.pax.web.pax-web-runtime:4.2.3]
	at org.apache.cxf.transport.http.osgi.ServletExporter.updated(ServletExporter.java:92)[178:org.apache.cxf.cxf-rt-transports-http:3.1.4]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updated(ManagedServiceTracker.java:189)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.updateService(ManagedServiceTracker.java:152)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.helper.ManagedServiceTracker.provideConfiguration(ManagedServiceTracker.java:85)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.provide(ConfigurationManager.java:1444)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.ConfigurationManager$ManagedServiceUpdate.run(ConfigurationManager.java:1400)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread.run0(UpdateThread.java:143)[7:org.apache.felix.configadmin:1.8.8]
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:110)[7:org.apache.felix.configadmin:1.8.8]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_40]
{noformat}
{noformat}
2016-01-12 09:57:19,508 | WARN  | pool-52-thread-1 | MBeanContainer                   | 222 - org.eclipse.jetty.util - 9.2.10.v20150310 |   | bean: qtp972461288{STOPPED,8<=0<=200,i=0,q=0}
javax.management.InstanceAlreadyExistsException: org.eclipse.jetty.util.thread:type=queuedthreadpool,id=1
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)[:1.8.0_40]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)[:1.8.0_40]
	at org.eclipse.jetty.jmx.MBeanContainer.beanAdded(MBeanContainer.java:209)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.addEventListener(ContainerLifeCycle.java:367)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_40]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_40]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_40]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_40]
	at org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine.addServerMBean(JettyHTTPServerEngine.java:555)
	at org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine.addServant(JettyHTTPServerEngine.java:395)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.activate(JettyHTTPDestination.java:175)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:53)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:95)
	at org.apache.cxf.binding.soap.SoapBindingFactory.addListener(SoapBindingFactory.java:895)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:123)
	at org.apache.camel.component.cxf.CxfConsumer.doStart(CxfConsumer.java:279)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3232)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3526)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3462)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3392)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3160)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3016)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2812)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2808)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2831)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2808)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2777)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:212)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:150)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.registerService(Felix.java:3549)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_40]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_40]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_40]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_40]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[13:org.apache.aries.blueprint.core:1.4.5]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_40]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:247)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:688)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:383)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[22:org.apache.aries.util:1.1.1]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1189)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:836)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1079)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:975)[9:org.apache.karaf.features.core:4.0.3]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_40]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_40]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_40]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_40]
{noformat}
{noformat}
2016-01-12 09:57:19,522 | WARN  | pool-52-thread-1 | MBeanContainer                   | 222 - org.eclipse.jetty.util - 9.2.10.v20150310 |   | bean: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine$1@7cb0817d
javax.management.InstanceAlreadyExistsException: org.apache.cxf.transport.http_jetty:type=jettyhttpserverengine$1,id=0
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:437)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerWithRepository(DefaultMBeanServerInterceptor.java:1898)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:966)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:900)[:1.8.0_40]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)[:1.8.0_40]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)[:1.8.0_40]
	at org.eclipse.jetty.jmx.MBeanContainer.beanAdded(MBeanContainer.java:209)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.addEventListener(ContainerLifeCycle.java:367)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_40]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_40]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_40]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_40]
	at org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine.addServerMBean(JettyHTTPServerEngine.java:555)
	at org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine.addServant(JettyHTTPServerEngine.java:395)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.activate(JettyHTTPDestination.java:175)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:53)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:95)
	at org.apache.cxf.binding.soap.SoapBindingFactory.addListener(SoapBindingFactory.java:895)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:123)
	at org.apache.camel.component.cxf.CxfConsumer.doStart(CxfConsumer.java:279)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3232)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3526)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3462)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3392)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3160)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3016)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2812)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2808)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2831)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2808)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2777)[159:org.apache.camel.camel-core:2.16.1]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:212)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:150)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.registerService(Felix.java:3549)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_40]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_40]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_40]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_40]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[13:org.apache.aries.blueprint.core:1.4.5]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_40]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:247)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:688)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:383)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)[13:org.apache.aries.blueprint.core:1.4.5]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[22:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[22:org.apache.aries.util:1.1.1]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1189)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:836)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1079)[9:org.apache.karaf.features.core:4.0.3]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:975)[9:org.apache.karaf.features.core:4.0.3]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_40]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_40]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_40]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_40]
{noformat}",Karaf 4.0.3,davsclaus,njiang,ralfsteppacher,tadayosi,,,,,,,,,,,,,,,,,,,,CAMEL-10914,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 03 12:00:46 UTC 2017,,,,,,,,,,,"0|i2r68v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jan/16 01:22;njiang;Was the camel-cxf bundle reinstalled?;;;","13/Jan/16 07:27;ralfsteppacher;[~njiang], yes, the camel-cxf bundle was reinstalled. In fact, the problem is reproducible by reinstalling just the camel-cxf feature. 

{code}
karaf@root()> feature:repo-add camel 2.16.1
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.16.1/xml/features
karaf@root()> feature:install camel-cxf
karaf@root()> feature:uninstall camel-cxf
karaf@root()> feature:install camel-cxf
karaf@root()>
{code};;;","09/Feb/16 08:29;davsclaus;It smells like a bug in camel-cxf or cxf itself that it doesn't unregister the JMX MBean when stopping the bundle.;;;","24/Feb/17 13:43;davsclaus;Try with latest releases to see if you can reproduce it there;;;","01/Mar/17 11:52;davsclaus;Okay there is a fix in that linked ticket;;;","01/Mar/17 17:01;davsclaus;Fixed by that other ticket;;;","02/Mar/17 00:38;tadayosi;I'll check if CAMEL-10914 indeed fixes this issue.;;;","03/Mar/17 12:00;tadayosi;I cannot reproduce the issue even with 2.18.2. Actually, there are a few other fixes (CXF-4878 and [PAXWEB-1001|https://ops4j1.jira.com/browse/PAXWEB-1001]) that might have fixed this issue already. But yeah it's highly likely CAMEL-10914 becomes the coup de grace for the issue. Let's leave it as ""resolved"".;;;",,,,,,,,,,,,,,,,,,,,,,,,
statement.maxRows not working as expected camel jdbc ,CAMEL-9491,12928581,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gautric,fxthomas,fxthomas,08/Jan/16 08:20,08/Jan/16 17:01,14/Jul/23 05:50,08/Jan/16 17:00,2.16.1,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-jdbc,,,,,,,0,,,,,,"I have tested in
multiple versio*n i.e. 2.15.1,2.16.0,2.16.1 *also but still the same issue.

Camel JDBC component  statement.maxRows is not respected when query is fired repeatedly using a timer. It works fine only on the first run of the route after that the query gets all the records.
",,davsclaus,fxthomas,gautric,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 08 17:01:08 UTC 2016,,,,,,,,,,,"0|i2r12f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Jan/16 15:25;gautric;I confirm the bug
I have got a correction;;;","08/Jan/16 15:58;githubbot;GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/758

    CAMEL-9491 : statement.maxRows not working as expected camel jdbc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9491

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/758.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #758
    
----
commit 03db98b29769141d11ae60c6fed6fb176a443af2
Author: gautric <gautric@redhat.com>
Date:   2016-01-08T15:36:44Z

    CAMEL-9491 : statement.maxRows not working as expected camel jdbc

commit 649c2605500843d278f9e168d12b8fc29ea6ba29
Author: gautric <gautric@redhat.com>
Date:   2016-01-08T15:49:43Z

    CAMEL-9491 : statement.maxRows not working as expected camel jdbc
    
    add maxrows test

commit 7abfb48ed01bb8b0eee1f02b408dcb96894ffcd4
Author: gautric <gautric@redhat.com>
Date:   2016-01-08T15:54:01Z

    CAMEL-9491 : statement.maxRows not working as expected camel jdbc 

----
;;;","08/Jan/16 17:00;davsclaus;Thanks Greg for the PR and Felix for reporting.;;;","08/Jan/16 17:01;githubbot;Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/758
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rest-dsl with api-doc should allow multiple rest's with cdi,CAMEL-9489,12928301,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gmixa,gmixa,07/Jan/16 11:37,07/Jan/16 11:39,14/Jul/23 05:50,07/Jan/16 11:39,2.16.1,,,,,,,,,,,,,,2.16.2,,,,camel-core,rest,,,,,,0,,,,,,"In Jira Ticket a Issue for Camel and Swagger is described.
That ticket mentions that CDI is not affected.
Using Swagger and CDI I could reproduce the same issues like described in that ticket. 
Unfortunatley it seems to be a bit trickier as sometimes the test set up works and sometimes it fails. I could not create a example which always fails.

My example project can be found at:

https://github.com/gmixa/camelswaggerissue

The test cases always fail while the main Program,
found at 
https://github.com/gmixa/camelswaggerissue/blob/master/src/main/java/com/fundsaccess/camelcdiswaggerissue/Startup.java
 just occasionally fails.

Chances that the main program fails can be increased if this example runs in debug mode with line break points in Startup
at 38
at 53
at 63
at 66

and the example is stepped through.

The Output which I got is :

Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpoint[http://0.0.0.0:9091/api-doc?httpMethodRestrict=GET]"") breakpoint hit in org.apache.camel.impl.DefaultCamelContext at line 3486 by thread main.
Thread main stopped at DefaultCamelContext.java:3486.
User program running
Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpoint[http://0.0.0.0:9091/api-doc?httpMethodRestrict=GET]"") breakpoint hit in org.apache.camel.impl.DefaultCamelContext at line 3172 by thread main.
Thread main stopped at DefaultCamelContext.java:3172.
User program running
Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpoint[http://0.0.0.0:9091/api-doc?httpMethodRestrict=GET]"") breakpoint hit in org.apache.camel.impl.DefaultCamelContext$2 at line 2818 by thread main.
Thread main stopped at DefaultCamelContext.java:2818.
User program running
Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpoint[http://0.0.0.0:9091/api-doc?httpMethodRestrict=GET]"") breakpoint hit in org.apache.camel.impl.DefaultCamelContext at line 2833 by thread main.
Thread main stopped at DefaultCamelContext.java:2833.
User program running
Exception org.apache.camel.FailedToStartRouteException(""Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpoint[http://0.0.0.0:9091/api-doc?httpMethodRestrict=GET]"") breakpoint hit in org.apache.camel.support.ServiceSupport at line 86 by thread main.
Thread main stopped at ServiceSupport.java:86.

Any hints how i could fix that issue with cdi ?

Greetings

Gerald
",,davsclaus,gmixa,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9247,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 07 11:39:12 UTC 2016,,,,,,,,,,,"0|i2qzc7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Jan/16 11:39;davsclaus;Fixed in next release;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deploying bundle with Camel routes packaged in KAR fails randomly,CAMEL-9483,12927961,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ralfsteppacher,ralfsteppacher,06/Jan/16 09:24,13/May/16 05:51,14/Jul/23 05:50,31/Jan/16 10:11,2.16.1,,,,,,,,,,,,,,2.16.3,2.17.0,,,karaf,,,,,,,0,,,,,,"I am struggling with random deployment failures of bundles containing Camel routes, packaged in a KAR file. Deployment fails mostly because data formats cannot be found on the classpath or Camel component beans are not found in the registry.

The attached sample KAR file contains one bundle with the following blueprint deployment descriptor:

{code:xml}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" 			xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 			xmlns:camel=""http://camel.apache.org/schema/blueprint"" 			xsi:schemaLocation=""				http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
				http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.1.xsd"">
 
	<bean id=""processor"" class=""ch.rsteppac.karissue.RestProcessor"" />

	<camelContext id=""rest-api"" allowUseOriginalMessage=""false"" xmlns=""http://camel.apache.org/schema/blueprint"">
		<restConfiguration component=""netty4-http"" scheme=""http"" host=""0.0.0.0"" port=""2016"" bindingMode=""json"">
			<dataFormatProperty key=""prettyPrint"" value=""true"" />
		</restConfiguration>

		<rest path=""/say/hello"" id=""poc-route"" produces=""application/json"">
			<get uri=""/{yourName}"">
				<route>
					<camel:process ref=""processor"" />
				</route>
			</get>
		</rest>
	</camelContext>
</blueprint>
{code}

The feature file of the KAR:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<features xmlns=""http://karaf.apache.org/xmlns/features/v1.3.0"" name=""KAR deployment issue PoC"">
    <repository>mvn:org.apache.camel.karaf/apache-camel/2.16.1/xml/features</repository>
    <feature name=""poc-rest-service"" description=""Sample REST bundle to demonstrate the deployment issue in Karaf 4"" version=""0.0.1.SNAPSHOT"">
        <details>Sample REST bundle to demonstrate the deployment issue in Karaf 4</details>
        <feature version=""2.16.1"" prerequisite=""false"" dependency=""false"">camel-jackson</feature>
        <feature version=""2.16.1"" prerequisite=""false"" dependency=""false"">camel-blueprint</feature>
        <feature version=""2.16.1"" prerequisite=""false"" dependency=""false"">camel-netty4-http</feature>
        <bundle>mvn:ch.rsteppac.kar-issue/poc-rest-service/0.0.1-SNAPSHOT</bundle>
    </feature>
</features>
{code}

On my development machine (OSX) deploying the sample KAR file succeeds about 8 out of 10 times. It appears that the more features the KAR file contains the lower the probability of success. Our actual project KAR fails deployment about 9 out of 10 times.
Not all Camel components are equally likely to cause the deployment failure. The most likely to trigger a failure are data formats, e.g., jackson-json or jaxb.
Once the KAR file has deployed successfully, restarting Karaf will consistently deploy the bundles successfully. Until one deletes Karaf's data folder, then all bets are off again.

Adding the feature.xml generated for the KAR with {{feature:repo-add}} and then deploying the features with {{feature:install}} virtually never fails.

Stack traces for most frequent deployment failure of the sample KAR are attached to the ticket.

h4. EDIT

The issue is actually unrelated to fact that the features are deployed via a KAR file. While I can successfully install each feature individually on the command line, if I restart Karaf and the features are deployed from the {{$KARAF_HOME/data}} directory, the behavior is the same as described above.

I encountered another class of errors: A bean declared in the blueprint context was not resolvable in the Camel context in the same file. 

Defining a start-level for my bundles (90) seems to be a workaround for the different issues described above.","Karaf 4.0.3, blueprint deployment, JDK 1.8_40 on OSX El Capitan and JDK 1.8_65 on Centos 6.5",davsclaus,ralfsteppacher,,,,,,,,,,,,,,,,,,,,,,CAMEL-9963,,,,,,,,,,,"06/Jan/16 09:31;ralfsteppacher;data_format_lookup_failed.log;https://issues.apache.org/jira/secure/attachment/12780719/data_format_lookup_failed.log","06/Jan/16 09:25;ralfsteppacher;kar-build-0.0.1-SNAPSHOT.kar;https://issues.apache.org/jira/secure/attachment/12780716/kar-build-0.0.1-SNAPSHOT.kar","06/Jan/16 09:25;ralfsteppacher;registry_lookup_failed.log;https://issues.apache.org/jira/secure/attachment/12780715/registry_lookup_failed.log",,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jan 31 10:11:43 UTC 2016,,,,,,,,,,,"0|i2qx8v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Jan/16 16:22;ralfsteppacher;[~davsclaus], should this be a Karaf ticket instead of a Camel ticket?;;;","31/Jan/16 09:56;davsclaus;No we can improve camel-blueprint to detect those component names in the rest configuration. That should help with the netty4-http not found etc.;;;","31/Jan/16 10:11;davsclaus;We now detect which components and data formats the rest-dsl is configured to use and wait for those bundles.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IdempotentConsumer - If exception from repo it should be able to handle by onException,CAMEL-9480,12927210,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Jan/16 08:48,05/Jan/16 09:25,14/Jul/23 05:50,05/Jan/16 09:25,2.15.5,2.16.1,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-core,,,,,,,1,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Exception-from-idempotentConsumer-not-propagating-to-onException-tp5775779.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-01-05 08:48:26.0,,,,,,,,,,,"0|i2qsm7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy fails to marshal objects in Spring Boot,CAMEL-9468,12925246,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bjorn.frantzen,bjorn.frantzen,02/Jan/16 22:03,04/Jan/16 10:37,14/Jul/23 05:50,04/Jan/16 10:22,2.16.1,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-bindy,,,,,,,0,,,,,,"When using Spring Boot or when manually registering an ObjectToList-converter with Camel, Bindy fails to marshal objects.

PR submitted with fix.",,bjorn.frantzen,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Mon Jan 04 10:37:55 UTC 2016,,,,,,,Patch Available,,,,"0|i2qghz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Jan/16 22:11;githubbot;GitHub user bjfr opened a pull request:

    https://github.com/apache/camel/pull/750

    CAMEL-9468 Bindy fails to marshal objects in Spring Boot

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bjfr/camel bindy-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/750.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #750
    
----
commit d867c06a6ec271ec1f7be1aa718b0c322c4c6d0b
Author: Björn Frantzén <bjorn.frantzen@r2m.se>
Date:   2016-01-02T22:06:30Z

    CAMEL-9468 Bindy fails to marshal objects in Spring Boot

----
;;;","04/Jan/16 09:57;githubbot;GitHub user bjfr opened a pull request:

    https://github.com/apache/camel/pull/751

    CAMEL-9468 Bindy fails to marshal objects in Spring Boot

    When using Spring Boot or when manually registering an ObjectToList-converter with Camel, Bindy fails to marshal objects.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bjfr/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/751.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #751
    
----
commit c63efab784f839ca45c02b654f8790330def0823
Author: Björn Frantzén <bjorn.frantzen@r2m.se>
Date:   2016-01-02T22:06:30Z

    CAMEL-9468 Bindy fails to marshal objects in Spring Boot

----
;;;","04/Jan/16 09:57;githubbot;Github user bjfr closed the pull request at:

    https://github.com/apache/camel/pull/750
;;;","04/Jan/16 10:22;davsclaus;Thanks for the PR. Do you mind closing it;;;","04/Jan/16 10:37;githubbot;Github user bjfr closed the pull request at:

    https://github.com/apache/camel/pull/751
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP 1.1 Host header be dealt wrongly in proxy & load balancer,CAMEL-9462,12924909,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,hu2008yinxiang,hu2008yinxiang,30/Dec/15 15:27,08/Apr/16 13:40,14/Jul/23 05:48,08/Apr/16 07:44,2.10.3,2.11.0,2.9.5,,,,,,,,,,,,2.17.1,2.18.0,,,camel-http,camel-http4,,,,,,0,,,,,,"I have wrote code below make camel as a load balancer, but camel-http4(and the camel-http, etc) deal the http header Host wrongly, it replace the Host header with the host name of the backend of balancer, that make the backend generate the wrong link.
 
{code:title=Main.java|borderStyle=solid}

import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.model.RouteDefinition;

public class Main {
    public static void main(String[] args) throws Exception {
        DefaultCamelContext context = new DefaultCamelContext();

        RouteDefinition route = new RouteDefinition();
        route.from(""jetty:http://0.0.0.0:8080/?matchOnUriPrefix=true"")
                .loadBalance().roundRobin()
                .to(""http4://127.0.0.1:8081/?bridgeEndpoint=true&throwExceptionOnFailure=false"")
                .to(""http4://127.0.0.1:8082/?bridgeEndpoint=true&throwExceptionOnFailure=false"");
        //
        context.addRouteDefinition(route);
        context.start();
    }
}

{code}

I have view the code and found a fix of [https://issues.apache.org/jira/browse/CAMEL-5757](See the commit), it's commits simply removed the host header [https://fisheye6.atlassian.com/browse/camel-git/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpProducer.java?hb=true#to106]. and I really do not think it should be dealt like that.

Some backend will use the Host header to generate link, and when the Host header removed and then it be set to the backend's host, the backend got the wrong Host, and generate the wrong link.

I expect the link should be http://localhost:8080/web but it generate http://127.0.0.1:8081/web or http://127.0.0.1:8082/web when I view the page with the url http://localhost:8080
",,acosentino,davsclaus,erwelch,githubbot,hu2008yinxiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 08 13:40:37 UTC 2016,,,,,,,,,,,"0|i2qetb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Jan/16 18:34;davsclaus;The host header is not returned in newer versions. 

However we could maybe introduce an option to allow to preserve it.;;;","19/Jan/16 18:49;davsclaus;I started on an unit test
tests/camel-itest/src/test/java/org/apache/camel/itest/jetty/JettyBridgeHostHeaderIssueTest.java;;;","06/Apr/16 12:14;erwelch;Is anyone working on this? I could take a look today.

My thought would be similar to yours Claus, add a property to the HttpEndpoint ""preserveHostHeader"" (similar to apache's mod_proxy ProxyPreserveHost directive)

Then in the HttpProducer
{code}
if (getEndpoint().isBridgeEndpoint()) {
            exchange.setProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.TRUE);
            String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);
            if (queryString != null) {
                skipRequestHeaders = URISupport.parseQuery(queryString, false, true);
            }
            //Remove host header unless instructed not to do so
            if(!getEndpoint().isPreserveHostHeader()){
                exchange.getIn().getHeaders().remove(""host"");
            }
        }
{code}

The default would be ""false"" such that default functionality would be as things are today.  Then if you wanted to send the Host header to the destination, you would set preserveHostHeader=true;;;","06/Apr/16 13:00;davsclaus;Edward nobody is currently working on it. 

So its good if you can step up and work on it. Your plan sounds good, and we love contributions. 
You can do a .patch file or github PR. The latter is easier for us, and also makes it easier to track contributions and who did what. 
http://camel.apache.org/contributing;;;","06/Apr/16 20:57;erwelch;I have a fix for this issue, however before submitting the PR I have a question.

I tried to apply the fix to both the HTTP (http client 3) and HTTP4 (http client 4) components, however, it turned out to not really be feasible to make this fix on the HTTP component as it is very difficult to override the Host header which is auto set.  In 4 they made this much easier.

Given that http client 3 is pretty much end of life, I decided to not spend any more time on trying to see if it was even possible to do this.

Here's my question, I added my new parameter to the HttpCommonEndpoint which I believe to be used by both the HTTP and HTTP4 components.  Is this ok?  Should I add something in the description indicating it will only work for HTTP4?  Or should I move the parameter to the HTTP4 HttpEndpoint subclass?;;;","07/Apr/16 05:25;davsclaus;The jetty producer also reuses the common http. So ideally you should add support for this new option in that producer as well.

And yeah we can add in common and add a note it does not apply for the old http component.;;;","07/Apr/16 11:50;githubbot;GitHub user erwelch opened a pull request:

    https://github.com/apache/camel/pull/935

    CAMEL-9462 HTTP 1.1 Host header be dealt wrongly in proxy & load balancer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/erwelch/camel CAMEL-9462

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/935.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #935
    
----
commit dfc6ee1098745518ca5db5aefef9f5b0f19b934d
Author: Edward Welch <ed@edjusted.com>
Date:   2016-04-07T11:48:16Z

    Adding a new endpoint property to the HttpCommonEndpoint which allows preserving the Host header in reverse proxy applications, this class is ued by the Http, Http4, and Jetty producers.
    Updated the HttpProducer (Jetty/HTTP4) to set the Host header when this flag is enabled.  The older HTTP component does not readily let us override the Host header, this component will not support this parameter
    Updated the Integration Test to validate the behavior for both when the new parameter is set, and unset.

----
;;;","07/Apr/16 11:56;erwelch;Hi Claus, please take a look at my pull request.

A couple of notes for posterity:

The original suspected culprit was not actually the issue:

{code}
//Remove host header unless instructed not to do so
            if(!getEndpoint().isPreserveHostHeader()){
                exchange.getIn().getHeaders().remove(""host"");
            }
{code}

I discovered this code was made redundant by CAMEL-6185 so I removed this block of code from the HTTP4 and Jetty producers

The Host header was still being removed by the changes introduced in CAMEL-6185, so I added a block of code after the headers are filtered where the new parameter is checked, if set true, and Host header on the exchange is not null, then the Host header is added to the outgoing http request.

I updated JettyBridgeHostHeaderIssueTest.java to validate the Host header as it isreceived by the downstream service for both when the new preserveHostHeader is true/false and for both the Jetty and HTTP4 producers;;;","07/Apr/16 13:17;davsclaus;Andrea, after that other HTTP ticket can you take a look at merging this PR.;;;","07/Apr/16 13:17;davsclaus;Thanks Edward for the PR. Lovely when it includes unit tests.;;;","07/Apr/16 13:21;acosentino;Yes :-) I will take care of the PR :-);;;","08/Apr/16 07:44;acosentino;Done.;;;","08/Apr/16 13:40;githubbot;Github user erwelch closed the pull request at:

    https://github.com/apache/camel/pull/935
;;;",,,,,,,,,,,,,,,,,,,
Cannot install camel-kubernetes in karaf,CAMEL-9459,12924839,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,davsclaus,davsclaus,30/Dec/15 09:36,30/Dec/15 12:49,14/Jul/23 05:50,30/Dec/15 12:49,2.17.0,,,,,,,,,,,,,,2.17.0,,,,camel-kubernetes,,,,,,,0,,,,,,"The kube client is using okhttp-client and its dependencies has changed a bit

{code}
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ camel-kubernetes ---
[INFO] org.apache.camel:camel-kubernetes:bundle:2.17-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.17-SNAPSHOT:compile
[INFO] +- io.fabric8:kubernetes-client:jar:1.3.66:compile
[INFO] |  +- io.fabric8:kubernetes-model:jar:1.0.40:compile
[INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.6.3:compile
[INFO] |  |  \- javax.validation:validation-api:jar:1.1.0.Final:compile
[INFO] |  +- com.squareup.okhttp:okhttp:jar:2.7.0:compile
[INFO] |  |  \- com.squareup.okio:okio:jar:1.6.0:compile
[INFO] |  +- com.squareup.okhttp:logging-interceptor:jar:2.7.0:compile
[INFO] |  +- com.squareup.okhttp:okhttp-ws:jar:2.7.0:compile
[INFO] |  +- org.slf4j:jul-to-slf4j:jar:1.7.12:compile
[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.6.3:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-core:jar:2.6.3:compile
[INFO] |  |  \- org.yaml:snakeyaml:jar:1.15:compile
[INFO] |  \- com.fasterxml.jackson.core:jackson-databind:jar:2.6.3:compile
[INFO] |     \- com.fasterxml.jackson.core:jackson-annotations:jar:2.6.0:compile
[INFO] +- io.fabric8:openshift-client:jar:1.3.66:compile
[INFO] |  +- io.fabric8:kubernetes-client:test-jar:tests:1.3.66:compile
[INFO] |  \- junit:junit:jar:4.11:compile
[INFO] |     \- org.hamcrest:hamcrest-core:jar:1.3:compile
[INFO] +- org.apache.camel:camel-test:jar:2.17-SNAPSHOT:test
[INFO] +- commons-codec:commons-codec:jar:1.10:test
[INFO] +- org.slf4j:slf4j-api:jar:1.7.13:compile
[INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.13:test
[INFO] +- log4j:log4j:jar:1.2.17:test
[INFO] +- org.apache.camel:apt:jar:2.17-SNAPSHOT:provided
[INFO] |  \- org.apache.camel:spi-annotations:jar:2.17-SNAPSHOT:provided
[INFO] +- com.sun.xml.bind:jaxb-core:jar:2.2.11:compile
[INFO] \- com.sun.xml.bind:jaxb-impl:jar:2.2.11:compile
{code}

So the karaf features.xml file need to be updated accordingly.
",,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 30 12:47:14 UTC 2015,,,,,,,,,,,"0|i2qedz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Dec/15 12:47;acosentino;Fixed. Now it works with the latest codebase on Karaf 4.0.3:

{code}
karaf@root()> feature:repo-add file:///home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/2.17-SNAPSHOT/apache-camel-2.17-SNAPSHOT-features.xml
Adding feature url file:///home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/2.17-SNAPSHOT/apache-camel-2.17-SNAPSHOT-features.xml
karaf@root()> feature:install -v camel-kubernetes 
Adding features: camel-kubernetes/[2.17.0.SNAPSHOT,2.17.0.SNAPSHOT]
Changes to perform:
  Region: root
    Bundles to install:
      mvn:com.fasterxml.jackson.core/jackson-annotations/2.6.4
      mvn:com.fasterxml.jackson.core/jackson-core/2.6.4
      mvn:com.fasterxml.jackson.core/jackson-databind/2.6.4
      mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.6.4
      mvn:io.fabric8/kubernetes-client/1.3.66/jar/bundle
      mvn:io.fabric8/kubernetes-model/1.0.40
      mvn:io.fabric8/openshift-client/1.3.66/jar/bundle
      mvn:javax.validation/validation-api/1.1.0.Final
      mvn:org.apache.camel/camel-catalog/2.17-SNAPSHOT
      mvn:org.apache.camel/camel-commands-core/2.17-SNAPSHOT
      mvn:org.apache.camel/camel-core/2.17-SNAPSHOT
      mvn:org.apache.camel/camel-kubernetes/2.17-SNAPSHOT
      mvn:org.apache.camel.karaf/camel-karaf-commands/2.17-SNAPSHOT
      mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.6_1
      mvn:org.codehaus.woodstox/stax2-api/3.1.4
      mvn:org.codehaus.woodstox/woodstox-core-asl/4.4.1
Installing bundles:
  mvn:com.fasterxml.jackson.core/jackson-annotations/2.6.4
  mvn:com.fasterxml.jackson.core/jackson-core/2.6.4
  mvn:com.fasterxml.jackson.core/jackson-databind/2.6.4
  mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.6.4
  mvn:io.fabric8/kubernetes-client/1.3.66/jar/bundle
  mvn:io.fabric8/kubernetes-model/1.0.40
  mvn:io.fabric8/openshift-client/1.3.66/jar/bundle
  mvn:javax.validation/validation-api/1.1.0.Final
  mvn:org.apache.camel/camel-catalog/2.17-SNAPSHOT
  mvn:org.apache.camel/camel-commands-core/2.17-SNAPSHOT
  mvn:org.apache.camel/camel-core/2.17-SNAPSHOT
  mvn:org.apache.camel/camel-kubernetes/2.17-SNAPSHOT
  mvn:org.apache.camel.karaf/camel-karaf-commands/2.17-SNAPSHOT
  mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.6_1
  mvn:org.codehaus.woodstox/stax2-api/3.1.4
  mvn:org.codehaus.woodstox/woodstox-core-asl/4.4.1
Starting bundles:
  com.fasterxml.jackson.core.jackson-core/2.6.4
  com.fasterxml.jackson.dataformat.jackson-dataformat-yaml/2.6.4
  org.apache.camel.camel-catalog/2.17.0.SNAPSHOT
  stax2-api/3.1.4
  woodstox-core-asl/4.4.1
  org.apache.camel.camel-core/2.17.0.SNAPSHOT
  com.fasterxml.jackson.core.jackson-annotations/2.6.4
  com.fasterxml.jackson.core.jackson-databind/2.6.4
  javax.validation.api/1.1.0.Final
  io.fabric8.kubernetes-model/1.0.40
  io.fabric8.openshift-client/1.3.66
  io.fabric8.kubernetes-client/1.3.66
  org.apache.camel.camel-kubernetes/2.17.0.SNAPSHOT
  org.apache.camel.camel-commands-core/2.17.0.SNAPSHOT
  org.apache.servicemix.bundles.jaxb-impl/2.2.6.1
  org.apache.camel.karaf.camel-karaf-commands/2.17.0.SNAPSHOT
Done.
{code}

Karaf 3.0.5:

{code}
karaf@root()> feature:repo-add file:///home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/2.17-SNAPSHOT/apache-camel-2.17-SNAPSHOT-features.xml
Adding feature url file:///home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/2.17-SNAPSHOT/apache-camel-2.17-SNAPSHOT-features.xml
karaf@root()> feature:in
feature:info       feature:install    
karaf@root()> feature:install -v camel-kubernetes 
Installing feature camel-kubernetes 2.17-SNAPSHOT
Installing feature camel-core 2.17-SNAPSHOT
Installing feature xml-specs-api 2.5.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.activation-api-1.1/2.5.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.0/2.5.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.2/2.5.0
Installing bundle mvn:org.codehaus.woodstox/stax2-api/3.1.4
Installing bundle mvn:org.codehaus.woodstox/woodstox-core-asl/4.4.1
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.6_1
Installing bundle mvn:org.apache.camel/camel-core/2.17-SNAPSHOT
Installing bundle mvn:org.apache.camel/camel-catalog/2.17-SNAPSHOT
Installing bundle mvn:javax.validation/validation-api/1.1.0.Final
Installing bundle mvn:javax.servlet/javax.servlet-api/3.1.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jsr311-api-1.1.1/2.5.0
Installing bundle mvn:com.fasterxml.jackson.core/jackson-core/2.6.4
Installing bundle mvn:com.fasterxml.jackson.core/jackson-annotations/2.6.4
Installing bundle mvn:com.fasterxml.jackson.core/jackson-databind/2.6.4
Installing bundle mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.6.4
Installing bundle mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.6.4
Installing bundle mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.6.4
Installing bundle mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.6.4
Installing bundle mvn:org.yaml/snakeyaml/1.16
Installing bundle mvn:io.fabric8/kubernetes-model/1.0.40
Installing bundle mvn:io.fabric8/kubernetes-client/1.3.66/jar/bundle
Installing bundle mvn:io.fabric8/openshift-client/1.3.66/jar/bundle
Installing bundle mvn:org.apache.camel/camel-kubernetes/2.17-SNAPSHOT
karaf@root()> 
{code}

Karaf 2.4.3:

{code}
karaf@root> features:addurl file:///home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/2.17-SNAPSHOT/apache-camel-2.17-SNAPSHOT-features.xml
karaf@root> features:install -v camel-kubernetes 
Installing feature camel-kubernetes 2.17-SNAPSHOT
Installing feature camel-core 2.17-SNAPSHOT
Installing feature xml-specs-api 2.5.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.activation-api-1.1/2.5.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.0/2.5.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.2/2.5.0
Installing bundle mvn:org.codehaus.woodstox/stax2-api/3.1.4
Installing bundle mvn:org.codehaus.woodstox/woodstox-core-asl/4.4.1
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.6_1
Installing bundle mvn:org.apache.camel/camel-core/2.17-SNAPSHOT
Installing bundle mvn:org.apache.camel/camel-catalog/2.17-SNAPSHOT
Installing bundle mvn:javax.validation/validation-api/1.1.0.Final
Installing bundle mvn:javax.servlet/javax.servlet-api/3.1.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jsr311-api-1.1.1/2.5.0
Installing bundle mvn:com.fasterxml.jackson.core/jackson-core/2.6.4
Installing bundle mvn:com.fasterxml.jackson.core/jackson-annotations/2.6.4
Installing bundle mvn:com.fasterxml.jackson.core/jackson-databind/2.6.4
Installing bundle mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.6.4
Installing bundle mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.6.4
Installing bundle mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.6.4
Installing bundle mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.6.4
Installing bundle mvn:org.yaml/snakeyaml/1.16
Installing bundle mvn:io.fabric8/kubernetes-model/1.0.40
Installing bundle mvn:io.fabric8/kubernetes-client/1.3.66/jar/bundle
Installing bundle mvn:io.fabric8/openshift-client/1.3.66/jar/bundle
Installing bundle mvn:org.apache.camel/camel-kubernetes/2.17-SNAPSHOT
Installing feature jaas-condition-shell_0_0_0 2.4.3
Found installed bundle: org.apache.karaf.jaas.command [23]
Installing feature admin-condition-management_0_0_0 2.4.3
Found installed bundle: org.apache.karaf.admin.management [44]
Installing feature deployer-condition-aries_blueprint_0_0_0 2.4.3
Found installed bundle: org.apache.karaf.deployer.blueprint [48]
Installing feature deployer-condition-kar_0_0_0 2.4.3
Found installed bundle: org.apache.karaf.deployer.kar [46]
Installing feature camel-core-condition-shell_0_0_0 2.17-SNAPSHOT
Installing bundle mvn:org.apache.camel/camel-commands-core/2.17-SNAPSHOT
Installing bundle mvn:org.apache.camel.karaf/camel-karaf-commands/2.17-SNAPSHOT
Installing feature features-condition-shell_0_0_0 2.4.3
Found installed bundle: org.apache.karaf.features.command [24]
Installing feature features-condition-management_0_0_0 2.4.3
Found installed bundle: org.apache.karaf.features.management [45]
Installing feature diagnostic-condition-shell_0_0_0 2.4.3
Found installed bundle: org.apache.karaf.diagnostic.command [50]
Installing feature diagnostic-condition-management_0_0_0 2.4.3
Found installed bundle: org.apache.karaf.diagnostic.management [51]
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.NullPointerException in the DefaultCamelContext.removeEndpoints(),CAMEL-9448,12924197,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,andy.fedotov,andy.fedotov,24/Dec/15 13:17,25/Dec/15 11:47,14/Jul/23 05:50,25/Dec/15 09:22,2.14.1,,,,,,,,,,,,,,2.15.0,,,,camel-core,,,,,,,0,,,,,,"DefaultCamelContext uses LRUSoftCache for endpoints cache. LRUSoftCache store values as SoftReference which can be reclaimed by GC. DefaultCamelContext.removeEndpoints() does not take into account this fact. This sometimes leads to java.lang.NullPointerException.

We are still tied to 2.14.x Camel, because of our target environment is IBM enterprise product running under IBM WAS / IBM JDK 1.6. But seems like this affects all latest Camel releases. Here is an example of error stack trace I observe from time to time...

{noformat}
0 java.lang.NullPointerException: null 
1 at org.apache.camel.impl.DefaultCamelContext.removeEndpoints(DefaultCamelContext.java:465) ~[camel-core-2.14.1.jar:2.14.1] 
2 at com.amrusoft.easimport.biscc.BisccDocumentImporterBean.execute(BisccDocumentImporterBean.java:196) ~[adapter-biscc-1.4.0.jar:na] 
3 at sun.reflect.GeneratedMethodAccessor600.invoke(Unknown Source) ~[na:na] 
4 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) ~[na:1.6.0] 
5 at java.lang.reflect.Method.invoke(Method.java:611) ~[na:1.6.0] 
6 at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:408) ~[camel-core-2.14.1.jar:2.14.1] 
7 at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:279) ~[camel-core-2.14.1.jar:2.14.1] 
8 at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:252) ~[camel-core-2.14.1.jar:2.14.1] 
9 at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:167) ~[camel-core-2.14.1.jar:2.14.1] 
10 at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105) [camel-core-2.14.1.jar:2.14.1] 
11 at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:67) ~[camel-core-2.14.1.jar:2.14.1] 
12 at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:103) ~[camel-core-2.14.1.jar:2.14.1] 
13 at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71) ~[camel-core-2.14.1.jar:2.14.1] 
14 at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.14.1.jar:2.14.1] 
15 at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120) ~[camel-core-2.14.1.jar:2.14.1] 
16 at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.14.1.jar:2.14.1] 
17 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:416) [camel-core-2.14.1.jar:2.14.1] 
18 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14.1.jar:2.14.1] 
19 at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) [camel-core-2.14.1.jar:2.14.1] 
20 at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) [camel-core-2.14.1.jar:2.14.1] 
21 at org.apache.camel.processor.idempotent.IdempotentConsumer.process(IdempotentConsumer.java:125) [camel-core-2.14.1.jar:2.14.1] 
22 at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.14.1.jar:2.14.1] 
23 at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:416) [camel-core-2.14.1.jar:2.14.1] 
24 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14.1.jar:2.14.1] 
25 at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) [camel-core-2.14.1.jar:2.14.1] 
26 at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) [camel-core-2.14.1.jar:2.14.1] 
27 at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105) [camel-core-2.14.1.jar:2.14.1] 
28 at org.apache.camel.processor.Pipeline.process(Pipeline.java:60) [camel-core-2.14.1.jar:2.14.1] 
29 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:166) [camel-core-2.14.1.jar:2.14.1] 
30 at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:433) [camel-core-2.14.1.jar:2.14.1] 
31 at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:99) [camel-ftp-2.14.1.jar:2.14.1] 
32 at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211) [camel-core-2.14.1.jar:2.14.1] 
33 at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175) [camel-core-2.14.1.jar:2.14.1] 
34 at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187) [camel-core-2.14.1.jar:2.14.1] 
35 at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114) [camel-core-2.14.1.jar:2.14.1] 
36 at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:53) [spring-context-3.2.11.RELEASE.jar:3.2.11.RELEASE] 
37 at org.springframework.scheduling.concurrent.ReschedulingRunnable.run(ReschedulingRunnable.java:81) [spring-context-3.2.11.RELEASE.jar:3.2.11.RELEASE] 
38 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:450) [na:1.6.0] 
39 at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:314) [na:1.6.0] 
40 at java.util.concurrent.FutureTask.run(FutureTask.java:149) [na:1.6.0] 
41 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:109) [na:1.6.0] 
42 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:217) [na:1.6.0] 
43 at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:908) [na:1.6.0] 
44 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:931) [na:1.6.0] 
45 at java.lang.Thread.run(Thread.java:773) [na:1.6.0]
{noformat}",,andy.fedotov,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 25 11:47:35 UTC 2015,,,,,,,,,,,"0|i2qafb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Dec/15 09:22;davsclaus;Camel 2.15 onwards do not use a soft cache for endpoints.

Camel 2.14.x is EOL.;;;","25/Dec/15 11:47;andy.fedotov;Thanks, Claus!
Ooops, I missed that 2.15 and onwards are migrated to DefaultEndpointRegistry which uses LRUCache and has no such problem.

I think I could make a workaround in the our custom Components/Endpoints to avoid necessity of such explicit removing from endpoint cache when running on the Camel 2.14.x.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect exceptions handling from Splitter,CAMEL-9444,12923973,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,vlad.oblamskyi,vlad.oblamskyi,23/Dec/15 10:50,05/Feb/19 08:12,14/Jul/23 05:50,12/Feb/16 16:55,2.16.1,,,,,,,,,,,,,,2.17.0,,,,camel-core,,,,,,,0,,,,,,"Steps to reproduce:
1. Create global onException handler
{code}
<onException>
    <exception>java.lang.Exception</exception>
    <handled>
        <constant>false</constant>
    </handled>
    <log message=""SOME MESSAGE""/>
</onException>
{code}

2. Create 2 routes with Splitter (set shareUnitOfWork to TRUE, important)
{code}
<route>
    <from uri=""timer://foo?repeatCount=1""/>

    <!-- Add some value list to body here -->

    <split shareUnitOfWork=""true"" stopOnException=""true"">
        <simple>${body}</simple>
        <to uri=""direct:handleSplit""/>
    </split>
</route>

<route>
    <from uri=""direct:handleSplit""/>
    <throwException ref=""myException""/>
</route>
{code}

Expected: string ""SOME MESSAGE"" is logged
Actual:  <log message=""SOME MESSAGE""/> is not executed at all ","OS: Ubuntu 15.10
JDK: Oracle JDK 1.8.0_66
Camel version: 2.16.1",davsclaus,vlad.oblamskyi,,,,,,,,,,,,,,,,,,,,,,CAMEL-9573,,,CAMEL-9573,,,,,,,,"23/Dec/15 10:53;vlad.oblamskyi;camel-test.zip;https://issues.apache.org/jira/secure/attachment/12779231/camel-test.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 12 15:14:12 UTC 2016,,,,,,,,,,,"0|i2q93z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Dec/15 10:53;vlad.oblamskyi;Attaching project example;;;","07/Feb/16 16:11;davsclaus;This problem is only when handled is false and you use shareUnitOfWork.;;;","12/Feb/16 15:14;davsclaus;A fix for this is a bit more invasive in the source code, so going to apply this for 2.17 onwards.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Query string gets decoded when bridging from netty-http to http4,CAMEL-9442,12923748,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,22/Dec/15 13:37,02/Mar/16 06:24,14/Jul/23 05:50,22/Dec/15 14:04,2.17.0,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-http-common,camel-http4,,,,,,0,,,,,,"When using a route like this one (to forward an HTTP request to a downstream server) using the {{netty-http}} component, the query is decoded when sent to the downstream server:

{noformat}
  from(""netty-http:http://localhost:9000/service?matchOnUriPrefix=true"")
          .to (""http4://downstream:9000/service?bridgeEndpoint=true"");
{noformat}

A request to {{http://localhost:9000/service?q=%3B}} will result in a call to {{http://downstream:9000/service?q=;}} (notice the decoded {{;}} character). Replacing the {{netty-http:http:}} endpoint with a {{jetty:http:}} endpoint fixes the problem.

The difference is in the use of the {{Exchange.HTTP_QUERY}} and {{Exchange.HTTP_RAW_QUERY}} headers. The {{jetty:http:}} endpoint is only setting the former header (containing the raw header value), while the {{netty-http:http:}} endpoint is using both headers.

When using {{bridgeEndpoint}}, the {{http4}} component should prefer the raw query header over the decoded header if both headers are available.",,gertvanthienen,githubbot,tadayosi,,,,,,,,,,,,,,,,,,,,,CAMEL-9640,CAMEL-9658,CAMEL-9660,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 25 11:33:39 UTC 2016,,,,,,,,,,,"0|i2q7pz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Dec/15 14:04;gertvanthienen;Fixed in 
- https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=9827197a7874e2f331da25b3bfe9a028daae88b1 for {{master}}
- https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=10d50677e6dbe6f8fbbb98cc1a8b473a97eaa43d for {{camel-2.16.x}}
- https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=1a20c1ce542e487943c90617d1af9fab0818106e for {{camel-2.15.x}};;;","24/Feb/16 07:02;githubbot;GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/861

    CAMEL-9442 - Add tests for camel-http, porting from camel-http4

    [CAMEL-9442](https://issues.apache.org/jira/browse/CAMEL-9442) should also fix `camel-http`, so I added the tests for `camel-http` to make sure it really has fixed the issue at `camel-http` as well.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-9442

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/861.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #861
    
----
commit c7fd695e7089130c197f65b7ec1f57eb08530436
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-02-24T06:56:16Z

    CAMEL-9442 - Add tests for camel-http, porting from camel-http4

----
;;;","24/Feb/16 07:06;tadayosi;Developed a PR https://github.com/apache/camel/pull/861 to demonstrate it really fixes the same issue at {{camel-http}} as well.;;;","25/Feb/16 11:33;githubbot;Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/861
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot use camel-geocoder in Karaf,CAMEL-9439,12923489,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,mattsicker,mattsicker,21/Dec/15 17:47,23/Dec/15 15:17,14/Jul/23 05:50,23/Dec/15 12:40,2.16.1,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,,,,,,,,0,,,,,,"From a fresh install of Karaf, I add the Camel feature repository and run feature:install camel-geocoder. Using a basic geocoder endpoint, I get the following exception:

{code}
java.lang.NoClassDefFoundError: com/google/gson/GsonBuilder
	at com.google.code.geocoder.Geocoder.geocode(Geocoder.java:56)
	at org.apache.camel.component.geocoder.GeoCoderProducer.process(GeoCoderProducer.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	... 23 more
{code}

This appears to be caused by the feature ""wrap:mvn:com.google.code.geocoder-java/geocoder-java/0.16"" which uses optional for all its import packages which is incorrect as it appears to require gson (amongst other things).

A quick fix was to also install camel-gson, but this should be handled transitively.","Karaf 3.0.x, Java 1.8",acosentino,mattsicker,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 23 15:17:56 UTC 2015,,,,,,,,,,,"0|i2q64n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Dec/15 13:03;acosentino;I've tested with this little example: https://github.com/oscerd/camel-geocoder-example;;;","23/Dec/15 15:17;mattsicker;Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to use camel-example-cxf,CAMEL-9438,12923450,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gautric,gautric,gautric,21/Dec/15 15:06,21/Dec/15 15:26,14/Jul/23 05:50,21/Dec/15 15:09,2.17.0,,,,,,,,,,,,,,,,,,examples,,,,,,,0,,,,,,"Got this exception when run 

mvn exec:java -PCamelTransport

[mbp:~/Source/git/camel/examples/camel-example-cxf]$> mvn exec:java -PCamelTransport 
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CXF 2.17-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.1.1:java (default-cli) > validate @ camel-example-cxf >>>
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-example-cxf ---
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cxf ---
[INFO] 
[INFO] <<< exec-maven-plugin:1.1.1:java (default-cli) < validate @ camel-example-cxf <<<
[INFO] 
[INFO] --- exec-maven-plugin:1.1.1:java (default-cli) @ camel-example-cxf ---
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Refreshing org.apache.cxf.bus.spring.BusApplicationContext@567da882: startup date [Mon Dec 21 16:00:41 CET 2015]; root of context hierarchy
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Loaded configuration file /org/apache/camel/example/camel/transport/CamelDestination.xml.
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/camel/cxf-extension-camel.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml]
[t.CamelTransportExample.main()] SpringBusFactory               WARN  Initial attempt to create application context was unsuccessful.
org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more
[t.CamelTransportExample.main()] SpringBusFactory               WARN  Failed to create application context.
org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more
java.lang.RuntimeException: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:151)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:124)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	at org.apache.camel.example.camel.transport.Server.prepare(Server.java:38)
	at org.apache.camel.example.camel.transport.CamelTransportExample.main(CamelTransportExample.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 39 in XML document from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:115)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.internalLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:154)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.access$000(ControlledValidationXmlBeanDefinitionReader.java:66)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:141)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader$1.run(ControlledValidationXmlBeanDefinitionReader.java:139)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:139)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:123)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:334)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:608)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:509)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:106)
	at org.apache.cxf.bus.spring.BusApplicationContext$1.run(BusApplicationContext.java:104)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:104)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:157)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:148)
	... 10 more
Caused by: org.xml.sax.SAXParseException; lineNumber: 39; columnNumber: 46; cvc-complex-type.3.2.2: Attribute 'ref' is not allowed to appear in element 'loadBalance'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
	... 31 more
",,gautric,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 21 15:24:11 UTC 2015,,,,,,,,,,,"0|i2q5vz:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"21/Dec/15 15:08;githubbot;GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/741

    CAMEL-9438 - Unable to use camel-example-cxf

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9438

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/741.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #741
    
----
commit 63166acdf907d31c96fc9ee8fdf68ba6b7bf62fa
Author: gautric <gautric@redhat.com>
Date:   2015-12-21T15:07:35Z

    CAMEL-9438 - Unable to use camel-example-cxf

----
;;;","21/Dec/15 15:09;gautric;got this correct output after changes 


[mbp:~/Source/git/camel/examples/camel-example-cxf]$> mvn exec:java -PCamelTransport 
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CXF 2.17-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.1.1:java (default-cli) > validate @ camel-example-cxf >>>
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-example-cxf ---
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cxf ---
[INFO] 
[INFO] <<< exec-maven-plugin:1.1.1:java (default-cli) < validate @ camel-example-cxf <<<
[INFO] 
[INFO] --- exec-maven-plugin:1.1.1:java (default-cli) @ camel-example-cxf ---
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Refreshing org.apache.cxf.bus.spring.BusApplicationContext@2927491d: startup date [Mon Dec 21 16:08:21 CET 2015]; root of context hierarchy
[t.CamelTransportExample.main()] BusApplicationContext          INFO  Loaded configuration file /org/apache/camel/example/camel/transport/CamelDestination.xml.
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [META-INF/cxf/camel/cxf-extension-camel.xml]
[t.CamelTransportExample.main()] idationXmlBeanDefinitionReader INFO  Loading XML bean definitions from class path resource [org/apache/camel/example/camel/transport/CamelDestination.xml]
[t.CamelTransportExample.main()] egate$BeanPostProcessorChecker INFO  Bean 'cxf' of type [class org.apache.cxf.bus.spring.SpringBus] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[t.CamelTransportExample.main()] CamelContextFactoryBean        INFO  Bridging Camel and Spring property placeholder configurer with id: bridgePropertyPlaceholder
[t.CamelTransportExample.main()] DefaultTypeConverter           INFO  Loaded 205 type converters
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Apache Camel 2.17-SNAPSHOT (CamelContext: dest_context) is starting
[t.CamelTransportExample.main()] ManagedManagementStrategy      INFO  JMX is enabled
[t.CamelTransportExample.main()] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[t.CamelTransportExample.main()] SpringCamelContext             INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[t.CamelTransportExample.main()] SpringCamelContext             INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[t.CamelTransportExample.main()] log                            INFO  Logging initialized @5211ms
[t.CamelTransportExample.main()] JettyHttpComponent             WARN  You use localhost interface! It means that no external connections will be available. Don't you want to use 0.0.0.0 instead (all network interfaces)? Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] JettyHttpComponent             INFO  Using default Jetty continuation timeout for: Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] Server                         INFO  jetty-9.2.11.v20150529
[t.CamelTransportExample.main()] AbstractHandler                WARN  No Server set for org.apache.camel.component.jetty.JettyHttpComponent$1@7e0b628b
[t.CamelTransportExample.main()] ContextHandler                 INFO  Started o.e.j.s.ServletContextHandler@1c948edc{/,null,AVAILABLE}
[t.CamelTransportExample.main()] ServerConnector                INFO  Started ServerConnector@6f45eca3{HTTP/1.1}{localhost:9001}
[t.CamelTransportExample.main()] Server                         INFO  Started @5317ms
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Route: route1 started and consuming from: Endpoint[jetty:http://localhost:9001/GreeterContext/GreeterPort]
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Total 1 routes, of which 1 is started.
[t.CamelTransportExample.main()] SpringCamelContext             INFO  Apache Camel 2.17-SNAPSHOT (CamelContext: dest_context) started in 0.404 seconds
Starting Server
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
[t.CamelTransportExample.main()] ServerImpl                     INFO  Setting the server's publish address to be camel://direct:EndpointA
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
[t.CamelTransportExample.main()] ServerImpl                     INFO  Setting the server's publish address to be camel://direct:EndpointB
Acquiring router port ...
[t.CamelTransportExample.main()] ReflectionServiceFactoryBean   INFO  Creating Service {http://apache.org/hello_world_soap_http}CamelService from class org.apache.hello_world_soap_http.Greeter
Invoking sayHi...
[               qtp219563892-16] GreeterImpl                    INFO  Executing operation sayHi
Executing operation sayHi

Server responded with: Bonjour from EndpointA

Invoking greetMe... with Mike
[               qtp219563892-17] GreeterImpl                    INFO  Executing operation greetMe
Executing operation greetMe
Message received: Mike

Server responded with: Hello Mike from EndpointB

Invoking greetMe... with James
[               qtp219563892-18] GreeterImpl                    INFO  Executing operation greetMe
Executing operation greetMe
Message received: James

Server responded with: Hello James from EndpointA

Invoking greetMeOneWay...
[           default-workqueue-1] GreeterImpl                    INFO  Executing operation greetMeOneWay
Executing operation greetMeOneWay

Hello there gautric
No response from server as method is OneWay

Invoking pingMe, expecting exception...
[               qtp219563892-20] GreeterImpl                    INFO  Executing operation pingMe, throwing PingMeFault exception, message = hello
Executing operation pingMe, throwing PingMeFault exception

[               qtp219563892-20] PhaseInterceptorChain          INFO  Application {http://apache.org/hello_world_soap_http}CamelService#{http://apache.org/hello_world_soap_http}pingMe has thrown exception, unwinding now: org.apache.hello_world_soap_http.PingMeFault: PingMeFault raised by server EndpointA
Expected exception: PingMeFault has occurred: PingMeFault raised by server EndpointA
FaultDetail major:2
FaultDetail minor:1
[;;;","21/Dec/15 15:24;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/741
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy CSV separator not treated as regex but fixed character in all cases,CAMEL-9432,12922838,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,lb,JonFields,JonFields,17/Dec/15 20:18,25/Feb/16 09:45,14/Jul/23 05:50,25/Feb/16 07:12,2.16.1,,,,,,,,,,,,,,2.15.6,2.16.3,2.17.0,,camel-bindy,,,,,,,0,,,,,,"In the camel-bindy documentation (http://camel.apache.org/bindy.html) it says that the {{@CsvRecord separator}} parameter is interpreted as a regex. While that does seem to be the case when the record is being parsed, it seems to be treated as a literal string when autospanLine is true.

For example, if we have 
{code}
@CsvRecord(separator=""\\s+"", autospanLine=true)
{code}

 and we have defined three string {{@DataField}} fields, and we have a line of input like this:
{code}
     field1 field2 field3a field3b
{code}
then the third field value will be
{code}
    ""field3a\s+field3b""
{code}

Looking at the code in {{BindyCsvDataFormat.java}} it seems that this is because in some cases the separator string is treated as a literal string, not a regex. For example, this also seems to be true in some cases in the {{unquoteTokens}} method.
",,githubbot,JonFields,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 25 09:45:54 UTC 2016,,,,,,,,,,,"0|i2q247:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Feb/16 13:32;githubbot;GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/864

    CAMEL-9432 - Bindy CSV separator not treated as regex but fixed character in all cases

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-9432

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/864.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #864
    
----
commit e3608281e7b6767fb4ac5a008ec8189ddb9cbac9
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-24T13:31:46Z

    CAMEL-9432 - Bindy CSV separator not treated as regex but fixed character in all cases

----
;;;","25/Feb/16 09:45;githubbot;Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/864
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - TypeConverter autoconfiguration leads to invalid shutdown sequence,CAMEL-9431,12922719,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lchdev,lchdev,17/Dec/15 14:12,19/May/17 09:20,14/Jul/23 05:50,10/Feb/16 14:04,2.16.1,,,,,,,,,,,,,,2.16.3,2.17.0,,,camel-spring-boot,,,,,,,0,,,,,,"When using autoconfiguration provided by the {{camel-spring-boot}} artifact,  a {{TypeConverter}} bean is automatically registered into the Spring context: 

{code:title=TypeConversionConfiguration.java}
@Bean
TypeConverter typeConverter(CamelContext camelContext) {
    return camelContext.getTypeConverter();
}
{code}

The returned bean is an instance of {{DefaultTypeConverter}}, which in turn implements {{ServiceSupport}} and its method {{public void shutdown()}}. This method is infered as a _destroy-method_ by Spring, and called during the shutdown of the ApplicationContext. 

As a consequence, the TypeConverter will be destroyed before the CamelContext, effectively preventing any type conversion support for the inflight messages that have still to be processed during the graceful shutdown period of Camel. 

AFAIK the simple fix would be to disable the destroy-method inference using {{@Bean(destroyMethod="""")}}. This will let Camel have a chance to perform a clean shutdown in the right sequence. 

As a workaround, it is possible to entirely disable the registration of the type converter in Spring using the property
{{camel.springboot.type-conversion = false}}",,davsclaus,lchdev,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-11008,CAMEL-11261,,,,,,,"09/Feb/16 10:01;lchdev;CamelSpringBootShutdownTest.java;https://issues.apache.org/jira/secure/attachment/12787036/CamelSpringBootShutdownTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 10 14:04:09 UTC 2016,,,,,,,,,,,"0|i2q1dr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Dec/15 14:13;lchdev;Attached a JUnit Test Case to demonstrate the bug;;;","31/Jan/16 10:17;davsclaus;Can you try with Camel 2.16.2;;;","01/Feb/16 08:15;lchdev;Same issue with {{2.16.2}};;;","09/Feb/16 09:17;davsclaus;Can you attach a modified version of the unit test that do not have that (c) notice, eg we cannot accept and use this at ASF.;;;","09/Feb/16 10:01;lchdev;Reupload test case without copyright notice;;;","10/Feb/16 14:04;davsclaus;Thanks for reporting and with the suggested solution and the unit test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
spring-boot with rest-dsl with api-doc registers multiple instances with multiple RouteBuilders,CAMEL-9426,12922199,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jmandawg,jmandawg,16/Dec/15 00:15,16/Dec/15 14:26,14/Jul/23 05:50,16/Dec/15 08:29,2.16.1,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-spring-boot,camel-swagger,,,,,,0,,,,,,"Spring-boot + swagger throws exception when there is another RouteBuilder component present:

org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.FailedToStartRouteException: Failed to start route route4 because of Multiple consumers for the same endpoint is not allowed: Endpoint[http://0.0.0.0:10000/api-doc?httpMethodRestrict=GET]


I used the same example as CAMEL-9247 but added an empty RouteBuilder component (AnotherRouter.java)

This makes it so we cannot have more than one RouteBuilder in our app.

Example here:
https://github.com/jmandawg/camel-spring-boot-swagger-problem",,davsclaus,jmandawg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 16 14:26:18 UTC 2015,,,,,,,,,,,"0|i2py67:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Dec/15 08:19;davsclaus;Thanks for reporting and with the sample code. 

Btw you may want to rename that camel version placeholder to be camel instead of another animal name ;);;;","16/Dec/15 11:45;jmandawg;Ha ha I wasn't even thinking when I typed that placeholder.   We are actually trying to get rid of the million dollar animal.   :);;;","16/Dec/15 14:26;davsclaus;Yeah if its that expensive then there are other animals that are cheaper.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CronScheduledRoutePolicy regression introduced with 2.16, setting both start and stop route times fails with duplicate trigger",CAMEL-9424,12922147,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,donovanmuller1984,donovanmuller1984,15/Dec/15 21:41,16/Dec/15 11:51,14/Jul/23 05:50,16/Dec/15 07:15,2.16.0,2.16.1,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-quartz2,,,,,,,0,,,,,,"This [commit|https://github.com/apache/camel/commit/a704d0331b99a334bc450590ecc556dbdcf04247] created a regression whereby if you set both a start and a stop route time on a [CronScheduledRoutePolicy|https://github.com/apache/camel/blob/camel-2.16.1/components/camel-quartz2/src/main/java/org/apache/camel/routepolicy/quartz2/CronScheduledRoutePolicy.java], like:

{code:java}
CronScheduledRoutePolicy policy = new CronScheduledRoutePolicy();
policy.setRouteStartTime(""*/3 * * * * ?"");
policy.setRouteStopTime(""*/5 * * * * ?"");
{code}

then adding the Quartz triggers will fail because of duplicate trigger names.
Basically, the start *and* stop triggers will have the same name because of [this|https://github.com/apache/camel/commit/a704d0331b99a334bc450590ecc556dbdcf04247#diff-5c0db07e20b95adb46acd206b073057aR101] line.

{noformat}
org.apache.camel.FailedToCreateRouteException: Failed to create route test: Route(test)[[From[direct:start]] -> [To[mock:success]]] because of org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'trigger-START-test' and group: 'triggerGroup-test', because one already exists with this identification.

	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:201)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:949)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3261)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2984)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:176)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2814)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2810)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2833)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2810)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2779)
	at org.apache.camel.routepolicy.quartz2.CronScheduledRoutePolicyTest.testScheduledStartAndStopRoutePolicy(CronScheduledRoutePolicyTest.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: org.apache.camel.RuntimeCamelException: org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'trigger-START-test' and group: 'triggerGroup-test', because one already exists with this identification.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1642)
	at org.apache.camel.routepolicy.quartz2.CronScheduledRoutePolicy.onInit(CronScheduledRoutePolicy.java:41)
	at org.apache.camel.impl.DefaultRouteContext.commit(DefaultRouteContext.java:220)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1076)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:196)
	... 43 more
Caused by: org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'trigger-START-test' and group: 'triggerGroup-test', because one already exists with this identification.
...
{noformat}
",,davsclaus,donovanmuller,donovanmuller1984,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 16 11:51:27 UTC 2015,,,,,,,,,,,"0|i2pxun:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"15/Dec/15 23:09;githubbot;GitHub user donovanmuller opened a pull request:

    https://github.com/apache/camel/pull/732

    CAMEL-9424 Correctly build TriggerKey using the trigger prefix releva…

    …nt to the Action. This fixes the fuplicate trigger name issue when setting both start and stop route times on a CronScheduledRoutePolicy.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/donovanmuller/camel CAMEL-9424

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/732.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #732
    
----
commit 5d5bcfada07ded8e46c27aa07d194e7e7eb555bb
Author: Donovan Muller <donovan.muller@gmail.com>
Date:   2015-12-15T22:56:44Z

    CAMEL-9424 Correctly build TriggerKey using the trigger prefix relevant to the Action. This fixes the fuplicate trigger name issue when setting both start and stop route times on a CronScheduledRoutePolicy.

----
;;;","15/Dec/15 23:12;donovanmuller1984;Provided fix on [this PR|https://github.com/apache/camel/pull/732];;;","16/Dec/15 07:15;davsclaus;Thanks for reporting and the PR;;;","16/Dec/15 11:47;githubbot;Github user donovanmuller closed the pull request at:

    https://github.com/apache/camel/pull/732
;;;","16/Dec/15 11:51;donovanmuller;No problem. Glad to help.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
dependency on restlet in camel-rx module does have default scope,CAMEL-9423,12922092,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,bsmk,bsmk,15/Dec/15 18:50,16/Dec/15 07:59,14/Jul/23 05:50,16/Dec/15 07:56,2.16.1,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-rx,,,,,,,0,,,,,,"just replace 
{code}
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-restlet</artifactId>
    </dependency>
{code}
with
{code}
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-restlet</artifactId>
      <scope>test</scope>
    </dependency>
{code}",,bsmk,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 16 07:59:46 UTC 2015,,,,,,,,,,,"0|i2pxin:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Dec/15 06:24;davsclaus;Thanks a PR to fix this is welcome
http://camel.apache.org/contributing;;;","16/Dec/15 07:33;githubbot;GitHub user bassmake opened a pull request:

    https://github.com/apache/camel/pull/733

    CAMEL-9423: changed scope to test for camel-restlet dependency

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bassmake/camel CAMEL-9423

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/733.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #733
    
----
commit 88ee199b56d6b4c79d658c63ff6152d6ffacbc70
Author: bsmk <miroslavmatejovsky@gmail.com>
Date:   2015-12-16T07:29:25Z

    CAMEL-9423: changed scope to test for camel-restlet dependency

----
;;;","16/Dec/15 07:59;githubbot;Github user bassmake closed the pull request at:

    https://github.com/apache/camel/pull/733
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAP 1.2 Fault processing should use value of Reasontext to build exception message,CAMEL-9417,12921129,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pascalschumacher,pascalschumacher,11/Dec/15 18:15,14/Dec/15 07:57,14/Jul/23 05:50,14/Dec/15 07:12,2.16.1,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-soap,,,,,,,0,,,,,,"org.apache.camel.dataformat.soap.Soap12DataFormatAdapter#createExceptionFromFault uses org.w3._2003._05.soap_envelope.Reasontext#toString to generate the exception message, but Reasontext does not have a toString implementation, so it prints values like org.w3._2003._05.soap_envelope.Reasontext@2b6afea1 and the Reasontext value is lost. Reasontext#getValue which returns a human-readable string should be used instead.",,davsclaus,githubbot,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 14 07:57:39 UTC 2015,,,,,,,,,,,"0|i2ps3r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Dec/15 18:18;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/726

    CAMEL-9417: SOAP 1.2 Fault processing should use value of Reasontext …

    …to build exception message

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel CAMEL-9417

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/726.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #726
    
----
commit 7d8b40b1855e0be035b22988f0cf3177279aff1a
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-12-11T18:18:13Z

    CAMEL-9417: SOAP 1.2 Fault processing should use value of Reasontext to build exception message

----
;;;","14/Dec/15 07:12;davsclaus;Thanks for the PR;;;","14/Dec/15 07:57;githubbot;Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/726
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove old stuff,CAMEL-9411,12920794,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,gautric,gautric,gautric,10/Dec/15 15:51,14/Dec/15 16:55,14/Jul/23 05:50,12/Dec/15 13:28,2.17.0,,,,,,,,,,,,,,2.17.0,,,,,,,,,,,0,,,,,,"we could remove old stuff 

like README.txt replaced by README.md
and camel-example-servlet-rest-tomcat no longer use ",,gautric,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 14 16:55:30 UTC 2015,,,,,,,,,,,"0|i2pq1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Dec/15 15:55;githubbot;GitHub user gautric opened a pull request:

    https://github.com/apache/camel/pull/723

    CAMEL-9411 Remove old stuff

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gautric/camel CAMEL-9411

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/723.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #723
    
----
commit 998e69e9e943612efe2bd07276099e32bfc1329d
Author: gautric <gautric@redhat.com>
Date:   2015-12-10T15:55:03Z

    CAMEL-9411 Remove old stuff

----
;;;","14/Dec/15 16:55;githubbot;Github user gautric closed the pull request at:

    https://github.com/apache/camel/pull/723
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Request Reply via RabbitMQ not handling reply correctly,CAMEL-9406,12920676,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,anthonylau,anthonylau,10/Dec/15 06:03,25/Dec/15 09:55,14/Jul/23 05:50,25/Dec/15 09:55,2.16.1,,,,,,,,,,,,,,2.17.0,,,,camel-rabbitmq,,,,,,,2,,,,,,"The reply will be a empty message.

When 
*org.apache.camel.component.rabbitmq.reply.ReplyManagerSupport#processReply*
calls
*org.apache.camel.component.rabbitmq.RabbitMQEndpoint#setRabbitExchange*

The method setRabbitExchange will get `In` message and setBody for reply message while the expected message is `Out`.",,anthonylau,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 25 09:55:36 UTC 2015,,,,,,,,,,,"0|i2ppbb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Dec/15 09:55;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Amazon SQS message deletion behaviour change on exception,CAMEL-9405,12920586,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sounie,sounie,09/Dec/15 22:59,18/Dec/15 17:14,14/Jul/23 05:50,18/Dec/15 17:14,2.15.3,2.15.4,2.15.5,2.16.0,2.16.1,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-aws,,,,,,,0,,,,,,"After upgrading applications from Camel 2.15.2 to Camel 2.15.3 we noticed a change in behaviour around the handling of a message from an SQS queue when a processing stage throws an exception.

Previously the message would not be deleted, and would become available to the SQS again.

After the upgrade, messages are deleted even if an exception occurs during the processing stage.

I will attach a unit test which demonstrates the behaviour by:
 - including a mock process which throws an exception
 - asserting that there is no call to delete a message.

I believe that the commit which changed the behaviour is:
https://github.com/apache/camel/commit/bd10c49bdcdbe6181e35461c449ea61db9a13bf1

This issue may be specific to the inclusion of a seda stage.",,davsclaus,sounie,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9055,,,,,,"09/Dec/15 23:02;sounie;SqsConsumerSedaTest.java;https://issues.apache.org/jira/secure/attachment/12776662/SqsConsumerSedaTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 18 17:06:57 UTC 2015,,,,,,,,,,,"0|i2porb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Dec/15 23:02;sounie;Unit test demonstrating that deletion occurs.;;;","09/Dec/15 23:22;sounie;The code change for CAMEL-9055 introduced this change in functionality.;;;","18/Dec/15 17:06;davsclaus;Yeah lets rollback that other ticket.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when connectionKey is not valid,CAMEL-9398,12919625,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pkletsko,pkletsko,07/Dec/15 09:42,09/Dec/15 06:55,14/Jul/23 05:50,09/Dec/15 06:55,,,,,,,,,,,,,,,2.17.0,,,,camel-atmosphere-websocket,,,,,,,0,,,,,,"Found a defect in a new feature CAMEL-9393. 

sendMessage in WebsocketProducer should handle the case when websocket is null because of connectionKey is not valid. This fix will be applicable for both send message to singe or to multiple connections. ",,davsclaus,githubbot,pkletsko,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 09 06:55:37 UTC 2015,,,,,,,,,,,"0|i2pitr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Dec/15 09:49;githubbot;GitHub user pkletsko opened a pull request:

    https://github.com/apache/camel/pull/716

    [CAMEL-9398] NullPointerException when connectionKey is not valid

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pkletsko/camel CAMEL-9398

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/716.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #716
    
----
commit f43c5359c64992c7f2dc011e38bb799f7a2a7f69
Author: Pavlo Kletsko <pkletsko@gmail.com>
Date:   2015-12-07T09:49:08Z

    [CAMEL-9398] NullPointerException when connectionKey is not valid

----
;;;","07/Dec/15 09:54;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/716
;;;","09/Dec/15 06:55;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Set parameter enableEventsResending should be before Atmosphere wrap request,CAMEL-9391,12919006,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pkletsko,pkletsko,04/Dec/15 15:31,05/Dec/15 13:34,14/Jul/23 05:50,05/Dec/15 13:34,,,,,,,,,,,,,,,2.17.0,,,,camel-atmosphere-websocket,,,,,,,0,patch,,,,,"This is a defect regarding CAMEL-9364 feature.

WebsocketConsumer has service method where Atmosphere handle incoming request. In case value for enableEventsResending will be set after request is handled OnOpen event will not be sent at all. 

Consequently, set this value should be before such as :
        this.enableEventsResending = enableEventsResending;
        framework.doCometSupport(AtmosphereRequest.wrap(request), AtmosphereResponse.wrap(response));

In addition to this because of CamelWebSocketServlet use init method for set enableEventsResending value,  tests which were written for this feature are wrong. To solve this a new TestSupport class should be created where init parameter will be set correctly and tests depending on this parameter will be moved to separate class which extend the new TestSupport class. 
",,davsclaus,githubbot,pkletsko,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Dec 05 13:34:18 UTC 2015,,,,,,,,,,,"0|i2pf0n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Dec/15 11:58;githubbot;GitHub user pkletsko opened a pull request:

    https://github.com/apache/camel/pull/710

    [CAMEL-9391] Set parameter enableEventsResending should be before Atm…

    …osphere wrap request

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pkletsko/camel CAMEL-9391

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/710.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #710
    
----
commit 2d77c3a338183492557effde353bb5d90015c42c
Author: Pavlo Kletsko <pkletsko@gmail.com>
Date:   2015-12-05T11:57:37Z

    [CAMEL-9391] Set parameter enableEventsResending should be before Atmosphere wrap request

----
;;;","05/Dec/15 13:33;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/710
;;;","05/Dec/15 13:34;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-git: Support credentials in clone operation,CAMEL-9386,12917942,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,03/Dec/15 09:21,03/Dec/15 16:25,14/Jul/23 05:50,03/Dec/15 16:25,2.16.0,2.16.1,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-git,,,,,,,0,,,,,,"As noted here: https://github.com/oscerd/camel-git/issues/1

Currently we don't support credentials for the clone operation.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-12-03 09:21:35.0,,,,,,,,,,,"0|i2p8gf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Host HTTP header should contain a port number if it differs form 80,CAMEL-9384,12917326,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,trohovsky,trohovsky,trohovsky,01/Dec/15 17:57,05/Dec/15 09:02,14/Jul/23 05:50,05/Dec/15 08:51,,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-netty-http,camel-netty4-http,,,,,,0,,,,,,"{quote}
       Host = ""Host"" "":"" host [ "":"" port ] ; Section 3.2.2

A ""host"" without any trailing port information implies the default port for the service requested (e.g., ""80"" for an HTTP URL).
{quote}
http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23

The problem is in netty-http and netty4-http, jetty works as expected.",,githubbot,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Dec 05 09:02:59 UTC 2015,,,,,,,,,,,"0|i2p4nr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Dec/15 18:58;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/707

    CAMEL-9384 Host HTTP header should contain a port number

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-9384

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/707.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #707
    
----
commit bbe202c7db048d07ac980f706a83c2f94cf9dca0
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-12-01T18:38:10Z

    CAMEL-9384 Host HTTP header should contain a port number

----
;;;","05/Dec/15 09:02;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/707
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade camel-amqp to the latest qpid-jms-client,CAMEL-9381,12917255,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,01/Dec/15 14:20,26/Oct/18 06:32,14/Jul/23 05:50,01/Dec/15 15:31,2.16.1,,,,,,,,,,,,,,2.17.0,,,,,,,,,,,0,,,,,,We should upgrade camel-amqp to use the latest qpid-jms-client. That would mean that we should also drop support for AMQP < 1.0.,,hekonsek,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-12902,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 06 19:22:06 UTC 2015,,,,,,,,,,,"0|i2p47z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Dec/15 15:31;hekonsek;Fixed in 4997c2e929d11a1e45fbaaaff3c9cbf6cfbeea08.;;;","06/Dec/15 19:22;pascalschumacher;I guess this also fixes [CAMEL-5891]?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-tarfile - TarSplitter includes one extra empty entry at the end,CAMEL-9375,12916783,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Nov/15 09:01,22/Mar/16 16:13,14/Jul/23 05:50,20/Dec/15 07:00,2.16.1,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-tarfile,,,,,,,0,,,,,,"This unit test demonstrates the bug
org.apache.camel.dataformat.tarfile.TarSplitterRouteIssueTest

There is only 3 files in the tar file that it uses, but the splitter has 4 entries where the last is empty.

",,davsclaus,githubbot,sverker,,,,,,,,,,,,,,,,,,,,,CAMEL-9735,CAMEL-9745,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 20 07:00:32 UTC 2015,,,,,,,,,,,"0|i2p1b3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Dec/15 12:03;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/739

    CAMEL-9375: TarSplitter includes one extra empty entry at the end.

    CAMEL-9375: TarSplitter includes one extra empty entry at the end.
    Modified iterator. It simply tries to generate next element and returns true if then there exists a next element.
    
    Message body is now StreamCached and size is bounded(StreamCaching is done from BoundedInputStream), because it seems that consuming tarInputStream in wrong order causes problems.
    Other solution would be use ByteArrayInputStream as body, but with large files that might cause OutOfMemory exception.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-9375

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/739.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #739
    
----
commit cb5c211dc26c911c0e54c2893a9b1ecc7c595618
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2015-12-19T11:48:27Z

    CAMEL-9375: TarSplitter includes one extra empty entry at the end.

----
;;;","20/Dec/15 07:00;davsclaus;Thanks for the PR;;;","20/Dec/15 07:00;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/739
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mail - The dummyTrustManager do not work,CAMEL-9374,12916719,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Nov/15 08:43,28/Nov/15 08:47,14/Jul/23 05:50,28/Nov/15 08:47,,,,,,,,,,,,,,,2.17.0,,,,camel-mail,,,,,,,0,,,,,,The needed impl of dummy was not in the camel-mail JAR.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-11-28 08:43:11.0,,,,,,,,,,,"0|i2p0wv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Netty4 producer hangs when connection is prematurely closed,CAMEL-9368,12916510,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,26/Nov/15 19:33,18/Dec/15 06:27,14/Jul/23 05:50,17/Dec/15 19:32,,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-netty4,,,,,,,0,,,,,,"Netty4 producer is reusing connections and implementing a request-response style protocol. If the server closes socket connection after reading request packet and prior to sending back response packet, Netty4 producer hangs. If, on the other hand, the server closes socket after sending back response and does not bother to read next request, then producer does not hang.",,davsclaus,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 17 19:32:31 UTC 2015,,,,,,,,,,,"0|i2ozmn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Dec/15 12:06;davsclaus;This is causing sorts of issues on CI tests that started failing for netty4 and also for netty4-http when you use disconnect=true and keepAlive=false.

 ;;;","01/Dec/15 13:29;janstey;Darn :-) I have to look into another Netty issue anyways later this week so will try and revisit this one too.;;;","01/Dec/15 13:39;davsclaus;Yeah it may be that on the producer side if you have explicit disconnect=true or keepAlive=false, then the propagation of channelInactive is maybe not needed. If you still do that, then netty causes this to propgate as channelException or what its called, and then the producer thinks there was an exception and causes the exchange to fail. But it should not fail, as the producer received the response from the remote server, but the channel was just closed as expected also.;;;","17/Dec/15 19:32;janstey;Fixed with:
http://git-wip-us.apache.org/repos/asf/camel/commit/904a49b6;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CXFRS ""skipFaultLogging"" attribute doesn't work in Spring",CAMEL-9366,12916419,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,26/Nov/15 11:24,26/Nov/15 13:26,14/Jul/23 05:50,26/Nov/15 13:26,2.16.1,,,,,,,,,,,,,,2.15.5,2.16.2,2.17.0,,camel-cxf,,,,,,,0,,,,,,"When defining a camel-cxf cxf:rsClient bean with skipFaultLogging enabled, like this

{code}
<camelcxf:rsClient id=""rsClient"" address=""http://localhost:9081/CxfRsService/rest""
    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""
    skipFaultLogging=""true"" />
{code}

... the exception will still be logged. If you add the flag to the endpoint URI instead, {{skipFaultLogging}} works as expected.",,gertvanthienen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 26 13:26:35 UTC 2015,,,,,,,,,,,"0|i2oz2f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Nov/15 11:48;gertvanthienen;When going through the Spring factory bean, the code was adding the {{beanId}} to the endpoint properties in one place and the {{FaultListener}} in another place.  In the normal {{CxfEndpoint}}, we were merging these properties into a single properties map, but that bit of code was missing from the {{SpringJAXRSClientFactoryBean}}

Fixed for {{master}} in https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=cfa51caf21c7022a62f1bff0142eada38fa3dbdc
;;;","26/Nov/15 13:26;gertvanthienen;Fixed in...
* https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=083b89bfadfb7c9436347d43199fc92516abaaa5 for {{camel-2.16.x}}
* https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=5347e630a08cb71ee8ef329072641b7d8fc4895d for {{camel-2.15.x}};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel CDI component should not require the PAX CDI Camel capability,CAMEL-9362,12916137,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,antonin.stefanutti,antonin.stefanutti,antonin.stefanutti,25/Nov/15 13:08,25/Nov/15 13:54,14/Jul/23 05:50,25/Nov/15 13:38,2.16.1,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-cdi,,,,,,,0,,,,,,The Camel CDI extension requires the PAX CDI Camel CDI extension capability (itself) which leads to having an empty CDI container started by PAX CDI when the {{camel-cdi}} bundle is installed in Karaf.,,antonin.stefanutti,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 25 13:54:38 UTC 2015,,,,,,,,,,,"0|i2oxbr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Nov/15 13:29;githubbot;GitHub user astefanutti opened a pull request:

    https://github.com/apache/camel/pull/696

    CAMEL-9362: Camel CDI component should not require the PAX CDI Camel …

    …capability

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/astefanutti/camel CAMEL-9362

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/696.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #696
    
----
commit ef0625216f51e44675779a29c716ed1fde0e4eb1
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2015-11-25T13:26:38Z

    CAMEL-9362: Camel CDI component should not require the PAX CDI Camel capability

----
;;;","25/Nov/15 13:38;davsclaus;Thanks for the PR;;;","25/Nov/15 13:54;githubbot;Github user astefanutti closed the pull request at:

    https://github.com/apache/camel/pull/696
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Endpoints for the same websocket with different parameters cannot send message to websocket client,CAMEL-9348,12915116,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tonswieb,tonswieb,21/Nov/15 20:40,22/Nov/15 17:42,14/Jul/23 05:50,22/Nov/15 10:37,2.15.4,2.16.0,2.17.0,,,,,,,,,,,,2.16.2,2.17.0,,,camel-websocket,,,,,,,0,,,,,,"Having multiple routes with the same websocket consumer/producer causes only the first route to initialize correctly when the endpoint parameters are different per used consumer/producer endpoint URI.

In the following example only the first route to register the websocket endpoint will work. The second route will not work.
{code}
                from(""websocket://localhost:"" + port + ""/bar"")
                    .transform().simple(""The bar has ${body}"")
                    .to(""websocket://localhost:"" + port + ""/bar"");

                from(""timer://foo?fixedRate=true&period=12000"")
	        	.setBody(constant(""Broadcasting to Bar""))
	                .to(""websocket://localhost:"" + port + ""/bar?sendToAll=true"");
{code}

When the endpoint parameters are the same and a header value is used for broadcasting then both routes will work as expected:
{code}
                from(""websocket://localhost:"" + port + ""/bar"")
                    .transform().simple(""The bar has ${body}"")
                    .to(""websocket://localhost:"" + port + ""/bar"");

                from(""timer://foo?fixedRate=true&period=12000"")
	        	.setBody(constant(""Broadcasting to Bar""))
.setHeader(WebsocketConstants.SEND_TO_ALL,constant(true))
	                .to(""websocket://localhost:"" + port + ""/bar"");
{code}

The NodeSynchronization / WebSocketStore which contains all registered clients is maintained per endpoint and only the NodeSynchronization of the 1st registered endpoint is linked to the WeboscketServlet. The NodeSynchronization of all subsequent endpoints are not linked to the WebsocketServlet and are unaware of the connected websocket clients.
The endpoints URI /bar and /bar?sendToAll=true are treated as different endpoints, but belong to the same websocket.

I created a fix and will make a PR for it.",,davsclaus,githubbot,tonswieb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 22 17:42:40 UTC 2015,,,,,,,,,,,"0|i2or13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Nov/15 20:47;githubbot;GitHub user tonswieb opened a pull request:

    https://github.com/apache/camel/pull/688

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the…

    https://issues.apache.org/jira/browse/CAMEL-9348

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tonswieb/camel CAMEL-9348

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/688.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #688
    
----
commit 8a65a5d1db3332ceb6ad5fb658c3d54a202b2db1
Author: Ton Swieb <ton.swieb@finalist.nl>
Date:   2015-11-21T20:44:30Z

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the Connector

----
;;;","21/Nov/15 21:30;githubbot;GitHub user tonswieb opened a pull request:

    https://github.com/apache/camel/pull/689

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the…

    https://issues.apache.org/jira/browse/CAMEL-9348

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tonswieb/camel camel-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/689.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #689
    
----
commit 288c6d63999adf231d9aba6569aa67cafccf8081
Author: Ton Swieb <ton.swieb@finalist.nl>
Date:   2015-11-21T20:44:30Z

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the Connector
    
    Conflicts:
    	components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java
    	components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketEndpoint.java

----
;;;","21/Nov/15 22:02;githubbot;GitHub user tonswieb opened a pull request:

    https://github.com/apache/camel/pull/690

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the…

    https://issues.apache.org/jira/browse/CAMEL-9348

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tonswieb/camel camel-2.16.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/690.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #690
    
----
commit ee69801ec6062f0ff23e72419b329cbaffd1eca0
Author: Ton Swieb <ton.swieb@finalist.nl>
Date:   2015-11-21T20:44:30Z

    Moved WebSocketStore and NodeSynchronization from the Endpoint to the Connector

----
;;;","22/Nov/15 10:37;davsclaus;Thanks for reporting and the PR;;;","22/Nov/15 17:41;githubbot;Github user tonswieb closed the pull request at:

    https://github.com/apache/camel/pull/690
;;;","22/Nov/15 17:42;githubbot;Github user tonswieb closed the pull request at:

    https://github.com/apache/camel/pull/689
;;;","22/Nov/15 17:42;githubbot;Github user tonswieb closed the pull request at:

    https://github.com/apache/camel/pull/688
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Fix auto lookup of transaction policy,CAMEL-9347,12915099,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Nov/15 14:52,21/Nov/15 15:23,14/Jul/23 05:50,21/Nov/15 15:23,2.16.1,,,,,,,,,,,,,,2.17.0,,,,camel-blueprint,,,,,,,0,,,,,,"When using <transacted> in blueprint then you need to setup a <bean> with the transaction propagation policy. Even if you just want to use the default.

In spring this works out of the box.

It fails in blueprint due classloading, we need to open camel-core manifest to allow blueprint to find those optional packages.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 21 15:22:31 UTC 2015,,,,,,,,,,,"0|i2oqxb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Nov/15 15:22;davsclaus;As this is a change in OSGi manifest on camel-core lets leave this as a change for new minor release only.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CORS OPTIONS fails for services with path params when using servlet component,CAMEL-9343,12914849,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lynge,lynge,20/Nov/15 13:47,23/Mar/16 08:34,14/Jul/23 05:50,23/Mar/16 08:34,2.16.0,,,,,,,,,,,,,,2.17.0,,,,camel-swagger,,,,,,,1,CORS,,,,,"With CORS enabled the preflight request for services using path params fails. I reproduced the issue by building the camel-example-swagger-java example in the source bundle and deploying to a local tomcat server.

Eg.:
$ curl -I -X OPTIONS http://localhost:8080/camel-example-swagger-java/rest/user/123
HTTP/1.1 404 Not Found
Server: Apache-Coyote/1.1
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH
Access-Control-Max-Age: 3600
Access-Control-Allow-Headers: Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers

However, "".../{id}"" works:

$ curl -I -X OPTIONS http://localhost:8080/camel-example-swagger-java/rest/user/%7Bid%7D
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH
Access-Control-Max-Age: 3600
Access-Control-Allow-Headers: Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers
Allow: OPTIONS,GET
Content-Length: 0

The issue was not present in 2.14.",,davsclaus,lynge,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 23 08:34:28 UTC 2016,,,,,,,,,,,"0|i2opdr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Mar/16 08:31;davsclaus;Can you try with 2.17.0 as we improved CORS there.;;;","23/Mar/16 08:33;davsclaus;Works now just run mvn jetty:run in that example

davsclaus:~/$ curl -I -X OPTIONS http://localhost:8080/camel-example-swagger-xml/rest/user/123
HTTP/1.1 200 OK
Date: Wed, 23 Mar 2016 08:33:11 GMT
Accept: */*
Access-Control-Allow-Headers: Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers
Access-Control-Allow-Methods: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH
Access-Control-Allow-Origin: *
Access-Control-Max-Age: 3600
breadcrumbId: ID-davsclaus-air-51473-1458721963823-0-3
id: 123
User-Agent: curl/7.43.0
Content-Length: 0
Server: Jetty(9.2.15.v20160210);;;","23/Mar/16 08:34;davsclaus;It may also be fixed in 2.16.3 but I have not tried.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consumer do not reconnect on TCP server restart,CAMEL-9341,12914758,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,zeeshan949,zeeshan949,20/Nov/15 07:16,25/Dec/15 10:19,14/Jul/23 05:50,25/Dec/15 10:19,2.16.0,,,,,,,,,,,,,,2.16.1,,,,camel-netty4,,,,,,,0,,,,,,Netty consumer reconnect fails after TCP server resart.,camel-netty4 ,davsclaus,zeeshan949,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 20 13:40:46 UTC 2015,,,,,,,,,,,"0|i2ootj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Nov/15 07:23;davsclaus;I think its fixed in 2.16.1 - give it a test when its released;;;","20/Nov/15 13:40;zeeshan949;ok I will test this again.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileIdempotentRepository fails to create fileStore when no path is specified,CAMEL-9340,12914692,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,kgeis,kgeis,20/Nov/15 00:40,28/Nov/15 08:51,14/Jul/23 05:50,28/Nov/15 08:05,2.16.0,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-core,,,,,,,0,,,,,,"I create a FileIdempotentRepository like this:

{code}
.idempotentConsumer(fileIdempotentRepository(new File('ids'))) {
    it.in.body.id
}
{code}

I get an error, and I traced it to:
{noformat}
Caused by: java.lang.NullPointerException: null
	at org.apache.camel.processor.idempotent.mpotentRepository.loadStore(FileIdempotentRepository.java:293) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.processor.idempotent.FileIdempotentRepository.doStart(FileIdempotentRepository.java:328) ~[camel-core-2.16.0.jar:2.16.0]
{noformat}

The FileIdempotentRepository is trying to create the parent directory of the file that was specified for the file store. If a path to the file is not specified, then getParentFile() returns null. Calling .mkdirs() on that bombs.

This route works the second time it runs because then the file exists. It also works if I specify my file name as ""./ids"" instead of ""ids"".",,davsclaus,githubbot,kgeis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 28 08:51:43 UTC 2015,,,,,,,,,,,"0|i2ooev:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Nov/15 06:32;davsclaus;Contribution of a patch / PR is welcome
http://camel.apache.org/contributing;;;","26/Nov/15 16:59;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/698

    CAMEL-9340: Using user.dir as default dir for fileStore file when fil…

    CAMEL-9340: Using user.dir as default dir for fileStore file when fileStore when file has no parent dir.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-9340

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/698.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #698
    
----

----
;;;","26/Nov/15 17:59;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/698
;;;","26/Nov/15 18:31;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/699

    CAMEL-9340

    CAMEL-9340: Using file from user.dir as default parent file for fileStore file when fileStore file has no parent file.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-9340

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/699.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #699
    
----

----
;;;","27/Nov/15 17:33;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/699
;;;","27/Nov/15 19:28;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/700

    CAMEL-9340: 

    Using working dir as default parent file for fileStore file when fileStore file has no parent file given.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-9340

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/700.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #700
    
----
commit 911f2fc3c5dfa7457c675923f80841db36085fe6
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2015-11-26T18:27:38Z

    CAMEL-9340: Using working dir as default parent file for fileStore file when fileStore file has no parent file given.

----
;;;","28/Nov/15 08:51;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/700
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-cdi - Should add routes to CamelContext before its started,CAMEL-9336,12914168,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,antonin.stefanutti,davsclaus,davsclaus,18/Nov/15 16:57,26/Jan/16 08:48,14/Jul/23 05:50,26/Jan/16 08:48,,,,,,,,,,,,,,,2.17.0,,,,camel-cdi,,,,,,,0,,,,,,"The order of when RouteBuilder is added to CdiCamelContext is after it has been started.

You can see this from running 

    mvn camel:run

in the examples/camel-example-cdi

Then it says 0 of 0 routes started.
{code}
2015-11-18 17:57:20,045 [weld-worker-3  ] WARN  Validator                      - WELD-001473: javax.enterprise.inject.spi.Bean implementation org.apache.camel.cdi.internal.CamelContextBean@73690a3e declared a normal scope but does not implement javax.enterprise.inject.spi.PassivationCapable. It won't be possible to inject this bean into a bean with a passivating scope (@SessionScoped, @ConversationScoped). This can be fixed by assigning the Bean implementation a unique id by implementing the PassivationCapable interface.
2015-11-18 17:57:20,394 [cdi.Main.main()] INFO  CdiCamelContext                - Apache Camel 2.17-SNAPSHOT (CamelContext: camel-1) is starting
2015-11-18 17:57:20,395 [cdi.Main.main()] INFO  ManagedManagementStrategy      - JMX is enabled
2015-11-18 17:57:20,573 [cdi.Main.main()] INFO  DefaultTypeConverter           - Loaded 182 type converters
2015-11-18 17:57:20,613 [cdi.Main.main()] INFO  DefaultRuntimeEndpointRegistry - Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
2015-11-18 17:57:20,624 [cdi.Main.main()] INFO  CdiCamelContext                - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2015-11-18 17:57:20,624 [cdi.Main.main()] INFO  CdiCamelContext                - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2015-11-18 17:57:20,624 [cdi.Main.main()] INFO  CdiCamelContext                - Total 0 routes, of which 0 is started.
2015-11-18 17:57:20,626 [cdi.Main.main()] INFO  CdiCamelContext                - Apache Camel 2.17-SNAPSHOT (CamelContext: camel-1) started in 0.231 seconds
2015-11-18 17:57:20,805 [cdi.Main.main()] INFO  CdiCamelContext                - Route: route1 started and consuming from: Endpoint[timer://foo?period=5000]
2015-11-18 17:57:20,872 [cdi.Main.main()] INFO  Bootstrap                      - WELD-ENV-002003: Weld SE container STATIC_INSTANCE initialized
2015-11-18 17:57:21,841 [0 - timer://foo] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: String, Body: Saying Hello World 1 times]
2015-11-18 17:57:26,808 [0 - timer://foo] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: String, Body: Saying Hello World 2 times]
{code}

It should say .. 1 of 1 routes started.
",,antonin.stefanutti,davsclaus,,,,,,,,,,,,,,,,,CAMEL-9201,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 18 17:19:35 UTC 2015,,,,,,,,,,,"0|i2ol73:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Nov/15 17:19;davsclaus;This also setup the routes and whatnot differently than others as they would be part of the starting Camel process. Where as with cdi they are started after which has some drawbacks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Thread leak in Http4Endpoint, doStop() does not close() the httpClient",CAMEL-9331,12913406,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,aaronjwhiteside,aaronjwhiteside,16/Nov/15 19:16,18/Nov/15 08:28,14/Jul/23 05:50,18/Nov/15 08:28,2.16.0,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-http4,,,,,,,0,,,,,,"Thread leak in Http4Endpoint, doStop() does not close() the httpClient

Also when using a shared client connection manager the builder must be told of this so it does not close() a shared connection manager when the http client is closed.",,aaronjwhiteside,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Nov/15 19:17;aaronjwhiteside;CAMEL_9331.patch;https://issues.apache.org/jira/secure/attachment/12772554/CAMEL_9331.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Wed Nov 18 08:28:52 UTC 2015,,,,,,,Patch Available,,,,"0|i2ogif:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Nov/15 08:28;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blueprint example and archetype does not work when executed with camel:run,CAMEL-9321,12912845,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antonin.stefanutti,antonin.stefanutti,13/Nov/15 14:52,13/Nov/15 15:13,14/Jul/23 05:50,13/Nov/15 14:58,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,tooling,,,,,,,0,,,,,,"When running {{mvn camel:run}} in the {{camel-example-sql-blueprint}} module or in a generate project with the {{camel-archetype-blueprint}} Maven archetype, the following error occurs:
{code}
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:455)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:265)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:226)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:107)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:124)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
	... 6 more
[ERROR] *************************************
{code}

This is due to a missing dependency on {{org.apache.aries.blueprint.core}}.",,antonin.stefanutti,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 13 15:13:06 UTC 2015,,,,,,,,,,,"0|i2od2f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Nov/15 14:57;githubbot;GitHub user astefanutti opened a pull request:

    https://github.com/apache/camel/pull/680

    CAMEL-9321: Blueprint example and archetype does not work when execut…

    …ed with camel:run

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/astefanutti/camel CAMEL-9321

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/680.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #680
    
----
commit 29072aeca63f1b774096c22cf5973249a1622b12
Author: Antonin Stefanutti <antonin@stefanutti.fr>
Date:   2015-11-13T14:53:35Z

    CAMEL-9321: Blueprint example and archetype does not work when executed with camel:run

----
;;;","13/Nov/15 14:58;davsclaus;Thanks for the PR;;;","13/Nov/15 15:13;githubbot;Github user astefanutti closed the pull request at:

    https://github.com/apache/camel/pull/680
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SshClient resource leak when used from ProducerTemplate,CAMEL-9319,12912792,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,codan84,codan84,13/Nov/15 10:50,16/Nov/15 17:02,14/Jul/23 05:50,16/Nov/15 16:30,2.15.4,2.16.0,,,,,,,,,,,,,2.15.5,2.16.2,2.17.0,,camel-ssh,,,,,,,0,,,,,,"When using ProducerTemplate for execution of an ssh command (i.e. {{producerTemplate.requestBody(""ssh://..."", String.class)}}), 11 threads are being created, that are never killed. Any subsequent calls create new threads, eventually this exhausts memory and thread resources on the machine.
These threads are not being killed even when explicitly stopping the ProducerTemplate.
Here is a more detailed discussion, together with profiler results and code to reproduce the issue:

http://stackoverflow.com/questions/33671567/spring-boot-camel-producertemplate-thousands-of-threads

http://camel.465427.n5.nabble.com/Spring-Boot-Camel-producerTemplate-ssh-spawning-thousands-of-threads-td5773741.html","Any OS, any hardware, tested with Spring-Boot.",acosentino,codan84,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/Nov/15 16:36;acosentino;testCamel9319.png;https://issues.apache.org/jira/secure/attachment/12772516/testCamel9319.png",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 16 16:38:08 UTC 2015,,,,,,,,,,,"0|i2ocqn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Nov/15 07:04;davsclaus;[~ancosen] do you want to give this a try?

The client should be moved to the consumer / producer so its not stored on the endpoint
https://github.com/apache/camel/blob/master/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshEndpoint.java#L47

And the endpoint should be singleton=true
https://github.com/apache/camel/blob/master/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshEndpoint.java#L78

The sendExecCommand can likely be moved to a SshHelper method as a public static and take in the client as parameter, then the producer/consumer can reuse it
https://github.com/apache/camel/blob/master/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshEndpoint.java#L81

That means we can keep the endpoint nice and simple as it should.

And double check in the sendExecCommand that all the resources are closed properly, eg as those memory/thread leaks reported in the SO link.;;;","15/Nov/15 08:18;acosentino;Hi Claus,
Yes, I'll work on this :-);;;","16/Nov/15 16:38;acosentino;Now it should be ok. I've attached a five minutes Junit Producer Test with 500 messages. It looks good.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.twitter.TwitterEndpointEvent cannot be cast to org.apache.camel.component.direct.DirectEndpoint,CAMEL-9318,12912760,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,vchalupa,vchalupa,13/Nov/15 09:03,13/Nov/15 14:49,14/Jul/23 05:50,13/Nov/15 14:49,2.16.0,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-twitter,,,,,,,0,,,,,,"There is issue with streaming endpoint and {{type=event}}.

{code}
from(""twitter://streaming/user?type=event"")
{code}

It is working for {{type=polling}}.

*Reproducer:*

Just run test for camel-twitter:

{code}
mvn test -P twitter-test
{code}

Stack trace:

{code}
java.lang.ClassCastException: org.apache.camel.component.twitter.TwitterEndpointEvent cannot be cast to org.apache.camel.component.direct.DirectEndpoint
	at org.apache.camel.component.direct.DirectConsumer.<init>(DirectConsumer.java:37)
	at org.apache.camel.component.twitter.consumer.TwitterConsumerEvent.<init>(TwitterConsumerEvent.java:32)
	at org.apache.camel.component.twitter.TwitterEndpointEvent.createConsumer(TwitterEndpointEvent.java:40)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:68)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:98)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3439)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3369)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3146)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3002)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:175)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2798)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2794)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2817)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2794)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2763)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:544)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:334)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:238)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
{code}",,davsclaus,vchalupa,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 13 14:49:30 UTC 2015,,,,,,,,,,,"0|i2ocjj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Nov/15 14:49;davsclaus;Thanks it should extend the default component instead.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LevelDBAggregationRepository is logging warnings when exchange is already complete on first aggregation,CAMEL-9316,12912534,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,convoi,convoi,12/Nov/15 17:10,21/Nov/15 09:34,14/Jul/23 05:50,21/Nov/15 09:34,2.15.3,,,,,,,,,,,,,,2.15.5,2.16.2,2.17.0,,camel-leveldb,,,,,,,0,,,,,,"When using an aggregator with a LevelDBAggregationRepository and you are sending events, that are already complete by themselves (i.e. the fulfill the completionPredicate and they were never really aggregated), there is a lot of warning logging like

{code}
Nov 12, 2015 6:00:57 PM org.apache.camel.component.leveldb.LevelDBAggregationRepository confirm
WARNUNG: Unable to confirm exchangeId [ID-LPNB2331-59378-1447347654170-0-939 from repository collectionNotifications: Not Found]
{code}

My guess is that calling confirm on the repository in such cases is unnecessary, but I'm not sure, if it is easy to detect wether confirm should be called or not.",,convoi,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 16 09:35:29 UTC 2015,,,,,,,,,,,"0|i2ob6f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Nov/15 07:06;davsclaus;Ah so the aggregation completion is just size=1 etc so there wasn't any previous aggregated message?;;;","16/Nov/15 09:35;convoi;I'm using completionTimeout(getTimeout()).completionPredicate(isFinished())

So when a message enters the aggregation step, it may a) be complete already because of the completionPredicate or b) it will complete another message

Think of a simple string concatenating aggregator and a completionPredicate that says string.length > 3.
when you send a string ""abcd"" it is already complete by itself.
if you send ""ab"" and never something that matches, it will timeout somewhen..
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelBlueprintTestSupport - can't initialize ConfigAdmin configurations,CAMEL-9313,12912417,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,asiepert,asiepert,12/Nov/15 08:13,19/Dec/19 17:30,14/Jul/23 05:50,12/Dec/15 19:40,2.15.4,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-blueprint,,,,,,,0,,,,,,"The bugfix CAMEL-8948 seems to make older timing problems related to property-placeholders visible.

To reproduce the problem i changed the test 
org.apache.camel.test.blueprint.ConfigAdminNoReloadLoadConfigurationFileTest 
from the component camel-test-blueprint a bit, respectively the context 
""org/apache/camel/test/blueprint/configadmin-no-reload-loadfile.xml"": 

I added the trace Attribute to the camelContext:
{code:xml}
<camelContext xmlns=""http://camel.apache.org/schema/blueprint"" trace=""{{tracing}}""> 
{code}

and added also the property to the etc/stuff.cfg 
{code}
tracing=true 
{code}

Until 2.15.2 this worked fine. From 2.15.3 on the property cannot be 
replaced any more.
But, if setting a breakpoint in {{CamelBlueprintTestSupport#createBundleContext}} at loadConfigAdminConfigurationFile() (Line 123 in 2.15.4) - the error occurs even in older versions like 2.14 - so the timing problem seems to be there for a while but did not occur because the loading of the configAdminFile seems to be faster than the event handling during service registration triggered by the code some lines above.

The issue can also be reproduced when replacing a property's String type 
with int in the MyCoolBean class and setting its value by using the 
placeholder like before but with an int value of course. The test run shows 
that the placeholder ""${..\}"" will not be replaced and leads to a 
NumberfFormatException. 

The production code that is under test works fine in karaf. ",,asiepert,clauds2x,ggrzybek,,,,,,,,,,,,,,,,,CAMEL-9377,,,,CAMEL-8122,CAMEL-9636,CAMEL-10476,,,,,,,,,"01/Dec/15 07:52;asiepert;camel-9313.patch;https://issues.apache.org/jira/secure/attachment/12774982/camel-9313.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Dec 12 19:40:01 UTC 2015,,,,,,,,,,,"0|i2oagn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Nov/15 13:51;ggrzybek;Thanks for the analysis [~asiepert].

You're right - this has changed after 2.15.2. And it's true that if you put a breakpoint (to hold ""main"" thread) in {{createBundleContext()}}, it fails in 2.15.2 too.

The reason is [this line|https://github.com/apache/camel/blob/camel-2.15.3/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintTestSupport.java#L143].

The changes I've made are result of very unpredictable results of camel-test-blueprint tests in CI.

To describe the problem, be aware that there are 3 groups of threads involved:
# {{main}} thread, where test is run - this is started by JUnit, maven-surefire-plugin, etc.
# threads related to aries blueprint
# threads related to felix configadmin (sometimes even started with {{new Thread(...).start()}}.

My ultimate goal was to achieve (at least) 100% reliability of the test - to eliminate all race conditions. And the only way to do it is to do some kind of synchronization - using {{java.util.concurrent}} primitives and listeners to BP / configadmin events.

So, when you add {{trace=""{{tracing} }""}} to {{<camelContext>}}, then in 2.15.2 there's great chance (unless you put a breakpoint to hold {{main}} thread), that BP container will get initialized *after* [this|https://github.com/apache/camel/blob/camel-2.15.3/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintTestSupport.java#L145-L150]:
{code:java}
if (file != null) {
  if (!new File(file[0]).exists()) {
    throw new IllegalArgumentException(""The provided file \"""" + file[0] + ""\"" from loadConfigAdminConfigurationFile doesn't exist"");
  }
  CamelBlueprintHelper.setPersistentFileForConfigAdmin(answer, file[1], file[0], props, symbolicName, bpEvents, expectReload);
}
{code}
This leads to invocation of {{org.osgi.service.cm.Configuration#update(java.util.Dictionary<java.lang.String, ?>)}} and when (and there's high probability of this in 2.15.2) BP container isn't yet started, it'll have those properties already available [when {{<cm:property-placeholder>}} is initialized|https://github.com/apache/aries/blob/35c92e2c941f82db9c8815467e9173a5d710ab08/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedProperties.java#L140-L144]:
{code:java}
public void init() throws Exception {
    ...
    synchronized (lock) {
        managedObjectManager.register(this, props);
        Configuration config = CmUtils.getConfiguration(configAdmin, persistentId);
        if (config != null) {
            properties = config.getProperties();
        }
        updated(properties);
    }
}
{code}

Plus remember - there are two kinds of property placeholders: from Camel and from Aries-Blueprint. Camel version delegates (in OSGi) to Aries version.

In order to have working {{trace=""{{tracing} }""}} in 2.15.3+, you have to override simple method: {{org.apache.camel.test.junit4.CamelTestSupport#useOverridePropertiesWithPropertiesComponent}}.

Add:
{code:java}
    @Override
    protected Properties useOverridePropertiesWithPropertiesComponent() {
        Properties props = new Properties();
        props.setProperty(""tracing"", ""true"");
        return props;
    }
{code}
to {{org.apache.camel.test.blueprint.ConfigAdminNoReloadLoadConfigurationFileTest}} and {{trace=""{{tracing} }""}} to {{org/apache/camel/test/blueprint/configadmin-no-reload-loadfile.xml}} and everything will work, because PropertyComponent will have needed property when CamelContext is created.

In other words - my change in 2.15.3 related to predictability of camel-test-blueprint tests can be summarized like this:
* we don't test (because of explicit synchronization) the scenarios, when configadmin configurations are updated before blueprint container starts
* we test scenarios, where configadmin configuration updates should (when there's {{<cm:property-placeholder ... update-strategy=""reload"">}}) lead to reinitialization of blueprint container - and to make it predictable, we have to synchrozize BP and configadmin events

It worked in 2.15.2 as a kind of side effect - just like the configadmin configuration already existed when blueprint container was created for the first time. but it's not different then specifying it explicitly with:
{code:xml}
  <cm:property-placeholder persistent-id=""stuff"" update-strategy=""none"">
    <cm:default-properties>
      <cm:property name=""x"" value=""y""/>
    </cm:default-properties>
  </cm:property-placeholder>
{code}

And yet another words: {{CamelBlueprintTestSupport}} calls {{org.osgi.service.cm.Configuration#update(java.util.Dictionary<java.lang.String,?>)}} *only* to change configadmin configs, not to init them.

I hope this resolves your issue.;;;","01/Dec/15 08:01;ggrzybek;Reopening - I have possible fix that allows to initialize configadmin *before* Blueprint container is initialized.;;;","01/Dec/15 08:06;asiepert;Hi [~ggrzybek] and sorry for the late response of mine. I was just writing the comment as yours came in...

I mentioned a second problem I attached a patch ({{camel-9313.patch}}) based on git branch {{camel-2.15.5}} which addresses the second problem and makes it visible. The problem is that the string of the propertyplaceholder is taken as the value which works fine for strings but not for int for example. Please have a look.

Stacktrace:
{code}
2015-12-01 08:57:37,415 [int Extender: 1] ERROR BlueprintContainerImpl         - Unable to start blueprint container for bundle ConfigAdminLoadConfigurationFileTest/1.0.0
org.osgi.service.blueprint.container.ComponentDefinitionException: Error setting property: PropertyDescriptor <name: counter, getter: class org.apache.camel.test.blueprint.MyCoolBean.getCounter(), setter: [class org.apache.camel.test.blueprint.MyCoolBean.setCounter(int)]
	at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:939)
	at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:905)
	at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:886)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:820)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:247)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:682)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:377)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NumberFormatException: For input string: ""${counter}""
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:481)
	at java.lang.Integer.valueOf(Integer.java:582)
	at org.apache.aries.blueprint.container.AggregateConverter.convertFromString(AggregateConverter.java:281)
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:174)
	at org.apache.aries.blueprint.container.BlueprintRepository.convert(BlueprintRepository.java:402)
	at org.apache.aries.blueprint.utils.ReflectionUtils$PropertyDescriptor.convert(ReflectionUtils.java:396)
	at org.apache.aries.blueprint.utils.ReflectionUtils$MethodPropertyDescriptor.internalSet(ReflectionUtils.java:630)
	at org.apache.aries.blueprint.utils.ReflectionUtils$PropertyDescriptor.set(ReflectionUtils.java:380)
	at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:937)
	... 23 more
{code}

With kind regards
Andreas;;;","12/Dec/15 19:38;ggrzybek;Resolved in:
* master branch (2.17): https://github.com/apache/camel/commit/13760a4a5f1672d54997aa8ede30aefed951505a
* camel-2.16.x branch: https://github.com/apache/camel/commit/2410bfa5b840fd6dd7de86b32fd3e0dee35061c9
* camel-2.15.x branch: https://github.com/apache/camel/commit/bd900b3ce2892ac53830179cce5a1576e1ba2915;;;","12/Dec/15 19:40;ggrzybek;[~asiepert] please see thorough explanation of what was fixed here: http://ggrzybek.blogspot.com/2015/12/camel-blueprint-test-support.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrency issue with the dynamic router,CAMEL-9311,12912216,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,joeluo,joeluo,11/Nov/15 16:45,25/Feb/16 10:58,14/Jul/23 05:50,13/Nov/15 16:29,2.15.1,,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-core,,,,,,,0,,,,,,"We have a service with two HTTP contexts:
http://0.0.0.0:9000/endpoin1/dynamic""
http://0.0.0.0:9000/endpoin2/dynamic""

Both endpoints can be called using a HTTP GET method and a dynamic router routes the message differently.

Each HTTP endpoint  has its own instance of the dynamic router bean. The dynamic router bean does not use any shared state.

When the HTTP endpoints are called sequentially the calls are handled as expected. When the HTTP endpoints are called concurrently then sometimes the the dynamic router of the 9000/endpoin1/dynamic endpoint is re-routing calls originating from 9000/endpoin2/dynamic and vice versa.

Please take a look at attached unit test case for more detail.

",,davsclaus,gertvanthienen,joeluo,mbasovni,tonswieb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Nov/15 16:47;joeluo;dynamicRouterConcurrentTest.zip;https://issues.apache.org/jira/secure/attachment/12771787/dynamicRouterConcurrentTest.zip","25/Feb/16 10:58;mbasovni;dynamicRouterConcurrentTest.zip.patch;https://issues.apache.org/jira/secure/attachment/12789916/dynamicRouterConcurrentTest.zip.patch",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 25 10:58:40 UTC 2016,,,,,,,,,,,"0|i2o97z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Nov/15 16:47;joeluo;However, when using RecipientList, the problem does not occur. Please take a look at attached junit test ""testConcurrentInvocationsWithRecipientList"" for more detail.;;;","13/Nov/15 14:55;davsclaus;Well spotted and good fix [~gertvanthienen]. Make sure to get the fix into 2.16.x and 2.15.x branches.;;;","13/Nov/15 16:29;gertvanthienen;Fixed in https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=8a770bfeec6e2134eec12be6ef49a3458e99f7cc for {{master}}
and in https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=59b54c67909f215fd41bb0ee3ba66a8968195563 for {{camel-2.16.x}};;;","25/Feb/16 10:58;mbasovni;Verified with linked patch for reproducer.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Null InputStream error when using camel-test-blueprint version 2.15.3,CAMEL-9295,12910951,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,davidhan,davidhan,06/Nov/15 05:05,06/Nov/15 15:50,14/Jul/23 05:50,06/Nov/15 15:50,2.15.3,,,,,,,,,,,,,,2.15.2,,,,camel-blueprint,camel-test,,,,,,0,,,,,,"Used maven archetype:generate to generate a template project for camel-blueprint. 

mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.15.3 -DgroupId=de.test - DartifactId=Testing

When running the unit test in the newly created project there's a java.lang.RuntimeException: InputStream cannot be null error.

Error is not present in and previous versions of camel as far as I can tell.",,davidhan,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 06 08:47:33 UTC 2015,,,,,,,,,,,"0|i2o1jz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Nov/15 08:47;davsclaus;Try with 2.15.4;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
netty4 consumer in clientMode only reconnects once,CAMEL-9290,12910465,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,04/Nov/15 20:21,04/Nov/15 20:36,14/Jul/23 05:50,04/Nov/15 20:36,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,,,,,,,,0,,,,,,"Currently, when the server goes down the first time, it will reconnect fine. But if the server goes down again later, it will not attempt a reconnect.",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 04 20:36:20 UTC 2015,,,,,,,,,,,"0|i2nykf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Nov/15 20:36;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/79396207;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
netty4-http - Use port 80 if no port number configured,CAMEL-9287,12910186,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,davsclaus,davsclaus,03/Nov/15 23:44,04/Nov/15 16:50,14/Jul/23 05:50,04/Nov/15 16:50,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-netty-http,camel-netty4-http,,,,,,0,,,,,,We get a port number out of range error if we use a url that is without a port. If so we should use the default port of 80.,,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 04 16:50:32 UTC 2015,,,,,,,,,,,"0|i2nwuv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Nov/15 16:50;acosentino;I've made a mistake. I've traced this issue with CAMEL-9247 in the commit message, while this is CAMEL-9287. Anyway the issue is resolved.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
warning in logs when using propertyplaceholder with prop,CAMEL-9284,12909800,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mtran,mtran,02/Nov/15 22:03,23/Nov/15 06:45,14/Jul/23 05:50,23/Nov/15 06:45,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-spring,,,,,,,0,,,,,,"After upgrading to Camel 2.16.0, I’m starting to get warning messages appear in my logs whenever a route is using a propertyplaceholder with the prop prefix,

eg <aggregate prop:completionInterval=""pricing.rrp.aggregation.timeout"" strategyRef=""useLatestAggregationStrategy"">

The warning is

{noformat}
2015-11-02 16:28:53,261 [main] WARN  org.apache.camel.model.ProcessorDefinitionHelper - Could not restore definition properties
java.lang.IllegalArgumentException: Could not find a suitable setter for property: completionInterval as there isn't a setter method with same type: java.lang.String nor type conversion possible: For input string: ""{{pricing.rrp.aggregation.timeout}}""
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:567) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:577) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:456) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.ProcessorDefinitionHelper$1.run(ProcessorDefinitionHelper.java:629) ~[camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.ProcessorDefinitionHelper$RestoreAction.run(ProcessorDefinitionHelper.java:578) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:498) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:219) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1069) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:196) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:944) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3245) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2968) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:172) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2799) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2795) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2818) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2795) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2764) [camel-core-2.16.0.jar:2.16.0]
	at org.apache.camel.test.spring.CamelSpringTestContextLoader$7.execute(CamelSpringTestContextLoader.java:515) [camel-test-spring-2.16.0.jar:2.16.0]
	at org.apache.camel.test.spring.CamelSpringTestHelper.doToSpringCamelContexts(CamelSpringTestHelper.java:92) [camel-test-spring-2.16.0.jar:2.16.0]
	<snip>

{noformat}

The unit tests I have written still all pass but this warning appears whenever camel is starting up. Should I be worried or can I ignore it? Thanks","mac, jdk7",davsclaus,mtran,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 23 06:45:54 UTC 2015,,,,,,,,,,,"0|i2nugv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Nov/15 14:55;davsclaus;I cannot reproduce this on master branch. Can you try with 2.16.1 release when its out.;;;","22/Nov/15 14:56;davsclaus;If you still can, can you attach a zip with your unit test that does this. ;;;","23/Nov/15 00:59;mtran;I can confirm the bug is fixed on 2.16.1;;;","23/Nov/15 06:45;davsclaus;Ah great thanks for reporting and testing it on the new release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
IndexOutOfBoundsException if SoapAction parameter is empty,CAMEL-9282,12909564,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,augus.topor,augus.topor,02/Nov/15 06:24,22/Nov/15 15:02,14/Jul/23 05:50,22/Nov/15 15:02,2.16.0,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-cxf,,,,,,,0,,,,,,"After upgrade from 1.4.1, I encountered below error when receiving web service message where SoapAction is blank. Below is the trace log and error log.

13:12:39,526 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=accept-encoding value=[gzip,deflate]
13:12:46,769 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=connection value=[keep-alive]
13:12:57,869 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=content-type value=[text/xml;charset=UTF-8]
13:12:59,803 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=Host value=[localhost:8088]
13:13:00,786 TRACE [org.apache.camel.component.cxf.DefaultCxfBinding] (default-workqueue-2) Populate header from CXF header=SoapAction value=[]

13:17:21,407 WARN  [org.apache.cxf.phase.PhaseInterceptorChain] (default-workqueue-2) Interceptor for {http://member.ws.com}WsMemberService#{http://member.ws.com}receivedMemberMessage has thrown exception, 
unwinding now: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
		at java.util.ArrayList.rangeCheck(ArrayList.java:635) [rt.jar:1.7.0_71]
	at java.util.ArrayList.get(ArrayList.java:411) [rt.jar:1.7.0_71]
	at org.apache.camel.component.cxf.DefaultCxfBinding.propagateHeadersFromCxfToCamel(DefaultCxfBinding.java:552) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfRequest(DefaultCxfBinding.java:247) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.camel.component.cxf.CxfConsumer$1.prepareCamelExchange(CxfConsumer.java:187) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:132) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:78) [camel-cxf-2.16.0.jar:2.16.0]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59) [cxf-core-3.1.2.jar:3.1.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [rt.jar:1.7.0_71]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262) [rt.jar:1.7.0_71]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:278) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.interceptor.OneWayProcessorInterceptor$1.run(OneWayProcessorInterceptor.java:137) [cxf-core-3.1.2.jar:3.1.2]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:428) [cxf-core-3.1.2.jar:3.1.2]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [rt.jar:1.7.0_71]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [rt.jar:1.7.0_71]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:353) [cxf-core-3.1.2.jar:3.1.2]
	at java.lang.Thread.run(Thread.java:745) [rt.jar:1.7.0_71]","JDK 1.7, Jboss 7.1.1.Final",augus.topor,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-11-02 06:24:45.0,,,,,,,,,,,"0|i2nsyf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Http4 component removes trailing slashes from http requests (producer),CAMEL-9281,12909492,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,erwelch,erwelch,01/Nov/15 15:21,09/Jan/16 14:38,14/Jul/23 05:50,09/Jan/16 14:38,2.15.4,2.16.1,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-http,camel-http4,,,,,,0,,,,,,"I have created a scenario which seems to exploit a bug in the HttpHelper createURL method.

My use case:

Using http4 component in an http proxy with bridgeEndpoint true

Send a request such as http://somesite/contextpath

Request is forwarded by my proxy to a tomcat server.  Tomcat will reply with a 302 and a new Location of http://somesite/contextpath/ as this is a built in behavior of tomcat to redirect the caller to the contextpath INCLUDING the trailing slash

I have http client configured with httpClient.redirectsEnabled=false
Therefore the 302 is sent back through my proxy to the caller.

The caller then makes the call to http://somesite/contextpath/

This is where the problem occurs,  within the createUrl method:

{code}
        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);
        // NOW the HTTP_PATH is just related path, we don't need to trim it
        if (path != null) {
            if (path.startsWith(""/"")) {
                path = path.substring(1);
            }
            if (path.length() > 0) {
                // make sure that there is exactly one ""/"" between HTTP_URI and
                // HTTP_PATH
                if (!uri.endsWith(""/"")) {
                    uri = uri + ""/"";
                }
                uri = uri.concat(path);
            }
        }
{code}

When the second request is made with the trailing slash, the string ""path"" is / (just a single forward slash)

This hits the first conditional and results in true, which the following substring then removes this slash.

Now path.length() is not > 0 so the second conditional evaluates false.

And we end up with a uri returned that no longer has the trailing slash.

This is sent to Tomcat, Tomcat then promptly returns another 302 and a redirect loop is created.

I think the intent of this block of code is to combine the uri and path and make sure there isn't a duplicate forward slash?

So the simplest fix I can suggest would be something like

{code}
        String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);
        // NOW the HTTP_PATH is just related path, we don't need to trim it
        if (path != null && ! path.equals(""/"")) {
            if (path.startsWith(""/"")) {
                path = path.substring(1);
            }
            if (path.length() > 0) {
                // make sure that there is exactly one ""/"" between HTTP_URI and
                // HTTP_PATH
                if (!uri.endsWith(""/"")) {
                    uri = uri + ""/"";
                }
                uri = uri.concat(path);
            }
        }
{code}

Where we would just check for this case explicitly with:

if (path != null && ! path.equals(""/"")) {

Thoughts?

I could probably put together a PR and add some test cases",,davsclaus,erwelch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 09 14:30:41 UTC 2016,,,,,,,,,,,"0|i2nsif:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Nov/15 17:22;erwelch;My initial suggestion will not work, this is what I'm thinking now:

{code}
        if (path != null) {
            // if both the path and the uri have slashes, remove a slash from the uri
            // we don't remove it from ""path"" to handle the case where the path is equal to ""/""
            if (path.startsWith(""/"") && uri.endsWith(""/"")) {
                uri = uri.substring(0, uri.length());
            }
            if (path.length() > 0) {
                // make sure that there is exactly one ""/"" between HTTP_URI and
                // HTTP_PATH
                if (!uri.endsWith(""/"") && !path.startsWith(""/"")) {
                    uri = uri + ""/"";
                }
                uri = uri.concat(path);
            }
        }
{code}

I haven't tested all the cases yet, just wanted to get some opinions if this solution looks workable?

Also, if I were going to make a PR, is it ok if I make my PR branch from 2.15.x?  I get a lot more build errors from master and would be easier to work with 2.15.x branch;;;","04/Nov/15 14:22;erwelch;Was doing some more digging, realized this block of code was changed to address [CAMEL-9104] in version 2.16.0, but was not backported to 2.15.x because of some refactoring.

Looking at the code in 2.16.0, I have come up with this solution:

{code}
        if (path != null && path.length() > 0) {

            //Find a ? indicating there are query params
            int idx = uri.indexOf(""?"");

            //Break apart the uri into base and queryParams
            String base;
            String queryParams;
            if (idx == -1) {
                //No query params
                base = uri;
                queryParams = """";
            } else {
                base = uri.substring(0, idx);
                queryParams = uri.substring(idx);
            }

            // if the base ends with a / and the path starts with a /, remove a slash from the path
            if (base.endsWith(""/"") && path.startsWith(""/"")) {
                path = path.substring(1);
            }
            // if the neither the base ends with a / or the path starts with a /, add one to the base
            if (!base.endsWith(""/"") && !path.startsWith(""/"") ) {
                base = base + ""/"";
            }

            // add everything together;
            uri = base.concat(path).concat(queryParams);

        }
{code}

Unfortunately, the patch for this is a little complicated, because the HttpHelper tests were not refactored into camel-http-common when HttpHelper was moved.  Also, I noticed this code is copied and pasted in the NettyHttpHelper class which exists in both the netty and netty4 components.

Not sure the best place to put unit tests for this?;;;","25/Dec/15 09:42;davsclaus;There has been some new changes in the code. 

I assume the fix can be as simple as 

{code}
            if (path.startsWith(""/"")) {
                path = path.substring(1);
            }
{code}

-->
{code}
            if (path.length() > 1 && path.startsWith(""/"")) {
                path = path.substring(1);
            }
{code}

to only clip the trailing / if its not just a slash.

Can you take a look again with latest source code and give it a test on your system?;;;","04/Jan/16 13:56;erwelch;Hi Claus, sorry, was away from computers for a couple weeks.  Will try to take a look at this today or tomorrow!;;;","04/Jan/16 15:27;erwelch;I ran your proposed solution and still found an issue with this block, it adds a duplicate trailing slash:

{code}
 if (idx == -1) {
      // make sure that there is exactly one ""/"" between HTTP_URI and HTTP_PATH
      uri = uri.endsWith(""/"") ? uri : uri + ""/"";
      uri = uri.concat(path);
  } else {
{code}

What happens now is we end up with two trailing slashes, uri does not end with a slash, so one is added, but path contains ""/"" which is also concatenated giving use two trailing slashes

I think this could be remedied by adding one more check like so:

{code}
// if there are no query params
if (idx == -1) {
    // make sure that there is exactly one ""/"" between HTTP_URI and HTTP_PATH
    uri = uri.endsWith(""/"") || path.startsWith(""/"") ? uri : uri + ""/"";
    uri = uri.concat(path);
} else {
{code}



BTW, These are the test cases I had added regarding this issue:

{code}
@Test
public void createURLShouldNotRemoveTrailingSlash() throws Exception {
    String url = HttpHelper.createURL(
            createExchangeWithOptionalCamelHttpUriHeader(null, ""/""),
            createHttpEndpoint(true, ""http://www.google.com""));
    assertEquals(""http://www.google.com/"", url);
}
@Test
public void createURLShouldAddPathAndQueryParamsAndSlash() throws Exception {
    String url = HttpHelper.createURL(
            createExchangeWithOptionalCamelHttpUriHeader(null, ""search""),
            createHttpEndpoint(true, ""http://www.google.com/context?test=true""));
    assertEquals(""http://www.google.com/context/search?test=true"", url);
}
@Test
public void createURLShouldAddPathAndQueryParamsAndRemoveDuplicateSlash() throws Exception {
    String url = HttpHelper.createURL(
            createExchangeWithOptionalCamelHttpUriHeader(null, ""/search""),
            createHttpEndpoint(true, ""http://www.google.com/context/?test=true""));
    assertEquals(""http://www.google.com/context/search?test=true"", url);
}
{code}
;;;","09/Jan/16 14:30;davsclaus;Thanks Edward, working on your patch now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
IndexRequests do not support parent-child relationships,CAMEL-9279,12909252,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gzurowski,jaylapham,jaylapham,30/Oct/15 17:13,31/Oct/15 09:29,14/Jul/23 05:50,31/Oct/15 09:29,2.15.2,2.16.0,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-elasticsearch,,,,,,,0,,,,,,see: https://github.com/apache/camel/pull/665,,githubbot,gzurowski,jaylapham,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 31 09:29:29 UTC 2015,,,,,,,Patch Available,,,,"0|i2nr13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Oct/15 20:10;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/665
;;;","30/Oct/15 20:30;gzurowski;@[~jaylapham]: I have merged your PR.  Can you please update the documentation at https://cwiki.apache.org/confluence/display/CAMEL/ElasticSearch?;;;","31/Oct/15 00:19;jaylapham;Love to, but I do not actually have edit rights on the wiki. I'm not ASF, only suggesting a fix for something that was making my day awful. 

If copy and paste is sufficient, all the wiki needs is another row in the Endpoint Options table: 
name: parent
description: optionally used with INDEX operations for Elasticsearch <a href=""https://www.elastic.co/guide/en/elasticsearch/guide/current/parent-child.html"">Parent-Child relationships</a> to specify the ID of the parent record;;;","31/Oct/15 09:29;gzurowski;Thanks [~jaylapham] for your contribution, I updated the documentation.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTP shutdown whole context on startup if throwExceptionOnConnectFailed true,CAMEL-9277,12909180,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,augus.topor,augus.topor,30/Oct/15 10:58,23/Nov/15 07:20,14/Jul/23 05:50,23/Nov/15 07:20,2.16.0,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-ftp,,,,,,,0,,,,,,"I recently upgrade from camel 2.14.1 to 2.16.1 and discover following issue: Unable to catch the Exception on startup if throwExceptionOnConnectFailed=true and autoCreate=true or autoCreate not declared.

If at the time of startup, the FTP site was down or unreachable, the Exception cannot be handled by any means I currently know which are onException route and doTry-doCatch method.

Following are my FTP parameters:
&maximumReconnectAttempts=0&stepwise=false&disconnect=true&throwExceptionOnConnectFailed=true&consumer.bridgeErrorHandler=true""

The only workaround without compromising error log functionality is by adding parameter ""autoCreate=false"".

Based on Camel-FTP documentation: ""
For Camel 2.16, autoCreate option is supported. When consumer starts, before polling is scheduled, there's additional FTP operation performed to create the directory configured for endpoint. The default value for autoCreate is true.
""

In my opinion, the exception should be able to be caught, instead shutdown the whole Camel context. And description for throwExceptionOnConnectFailed need to be updated so unaware developer does not suffer the same as I did.
","jdk64_1.7.0_71, simple Java program for testing",augus.topor,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 22 15:09:49 UTC 2015,,,,,,,,,,,"0|i2nql3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Nov/15 15:09;davsclaus;Yeah I am changing this to log a WARN if failed but startup the consumer as before. That option you refer to is during regular routing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Netty4 component allows multiple consumers to bind to the same {host}:{port},CAMEL-9276,12909173,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dsundaresh,dsundaresh,30/Oct/15 10:28,06/Nov/15 14:40,14/Jul/23 05:50,06/Nov/15 14:40,,,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-netty4,,,,,,,0,,,,,,"I have a netty4 tcp consumer on the from route i am able to start multiple instances of this route and there is no ""address already in use/ bind exception "" being raised by camel, changing the ""reuseAddress"" to ""false"" doesnt seem to make a difference.

Sample config
<from uri=""netty4:tcp://0.0.0.0:3010?sync=false&amp;textline=true&amp;reuseAddress=false""/>
<to uri=""log://org.dx.com?level=DEBUG""/>",Verified and confirm same behavior on OSX and Windows,davsclaus,dsundaresh,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/Nov/15 06:55;dsundaresh;camel.patch-9276;https://issues.apache.org/jira/secure/attachment/12770755/camel.patch-9276",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 06 14:40:34 UTC 2015,,,,,,,Patch Available,,,,"0|i2nqjj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Nov/15 05:40;dsundaresh;The problem seems to be because of the channelFuture.awaitUninterruptibly() for the bind in startServerBootstrap() of SingleTCPNettyServerBootstrapFactory. I was mistaken in thinking that it is allowing you to bind to the same address, while what is actually happening is because of the awaitUniterruptibly the bind exception is being discarded. The netty documentation states ""ChannelFuture awaitUninterruptibly()

Waits for this future to be completed without interruption. This method catches an InterruptedException and discards it silently"". 

Perhaps this needs to be changed to syncUninterruptibly() ??;;;","05/Nov/15 06:55;dsundaresh;Fix for issue 9276. Changed awaitUninterruptibly() to syncUninterruptibly() as the former discards the exceptions.;;;","06/Nov/15 13:59;davsclaus;Thanks for diving into this and finding the problem and providing a patch - that is lovely work.;;;","06/Nov/15 14:40;davsclaus;There were a few other bind places that needed the same. And netty has a sync() shorthand they use in their examples.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
openweathermap.org requires an APPID id since 09/10/2015,CAMEL-9272,12908903,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,29/Oct/15 14:22,14/Nov/16 08:53,14/Jul/23 05:50,30/Oct/15 06:43,,,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-weather,,,,,,,0,,,,,,"Code must be updated as openweathermap.org requires an APPID id since 09/10/2015 & by consequence, the component can't be used anymore as we will get a HTTP 401 error.

{code}
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.net.URL to the required type: java.lang.String with value http://api.openweathermap.org/data/2.5/weather?q=Paris,France due java.io.IOException: Server returned HTTP response code: 401 for URL: http://api.openweathermap.org/data/2.5/weather?q=Paris,France
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:610)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:177)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:156)
	at org.apache.camel.component.weather.WeatherProducer.process(WeatherProducer.java:48)
{code}",,cmoulliard,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 30 06:43:37 UTC 2015,,,,,,,,,,,"0|i2novj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Oct/15 16:53;cmoulliard;Can somebody backport the modification to 2.15.x & 2.16.x branches please ?;;;","30/Oct/15 06:43;davsclaus;Just backported.

;;;","30/Oct/15 06:43;davsclaus;Also marked that new option as required;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rest-dsl - CORS support doesn't work with Restlet 2.3,CAMEL-9270,12908832,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,koscejev,koscejev,29/Oct/15 08:42,30/Nov/15 15:45,14/Jul/23 05:50,22/Nov/15 14:50,2.16.0,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-restlet,,,,,,,0,,,,,,"camel-restlet has upgraded to Restlet 2.3 (nice!), but this broke rest-dsl CORS support, because Restlet 2.3 no longer supports setting CORS headers via attributes. There are now API methods for these headers and attributes are ignored with a warning.

Example of the new API method:
http://restlet.com/technical-resources/restlet-framework/javadocs/2.3/jse/api/org/restlet/Response.html#setAccessControlAllowOrigin%28java.lang.String%29",,davsclaus,githubbot,koscejev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 30 15:45:22 UTC 2015,,,,,,,,,,,"0|i2nofr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Oct/15 08:53;koscejev;Warnings in log: 
{code}
2015-10-29 09:44:16,762 WARN [Restlet-1916677384] o.r.C.LogFilter [Slf4jLogger.java:283] Addition of the standard header ""Access-Control-Allow-Headers"" is not allowed. Please use the equivalent property in the Restlet API.
2015-10-29 09:44:16,762 WARN [Restlet-1916677384] o.r.C.LogFilter [Slf4jLogger.java:283] Addition of the standard header ""Access-Control-Allow-Methods"" is not allowed. Please use the equivalent property in the Restlet API.
2015-10-29 09:44:16,762 WARN [Restlet-1916677384] o.r.C.LogFilter [Slf4jLogger.java:283] Addition of the standard header ""Access-Control-Allow-Origin"" is not allowed. Please use the equivalent property in the Restlet API.
{code}

Workaround using custom RestletBinding:
{code}
import com.google.common.base.Splitter;
import org.restlet.data.Header;
import org.restlet.data.Method;
import org.restlet.util.Series;
import static com.google.common.collect.Sets.newHashSet;
import static org.restlet.engine.header.HeaderConstants.ATTRIBUTE_HEADERS;
...
public class CustomRestletBinding extends DefaultRestletBinding {
	private static final Splitter headerValueSplitter = Splitter.on(',').trimResults().omitEmptyStrings();

	@Override
	public void populateRestletResponseFromExchange(Exchange exchange, Response response) throws Exception {
		super.populateRestletResponseFromExchange(exchange, response);
		convertHeadersSupportedByRestletAPI(response);
	}

	/**
	 * Some headers are now supported by Restlet API and Restlet ignores them, if not set via API.
	 * This method sets them to Restlet Response via API and then removes these headers.
	 */
	private void convertHeadersSupportedByRestletAPI(Response response) {
		Iterator<Header> iterator = response.getHeaders().iterator();
		while (iterator.hasNext()) {
			Header header = iterator.next();
			if (""Access-Control-Allow-Origin"".equals(header.getName())) {
				response.setAccessControlAllowOrigin(header.getValue());
			} else if (""Access-Control-Allow-Methods"".equals(header.getName())) {
				response.setAccessControlAllowMethods(asMethods(header.getValue()));
			} else if (""Access-Control-Allow-Headers"".equals(header.getName())) {
				response.setAccessControlAllowHeaders(asHeaders(header.getValue()));
			} else {
				continue; // do not remove all other headers
			}
			iterator.remove();
		}
	}

	@NotNull
	private Set<Method> asMethods(@NotNull String value) {
		return StreamSupport.stream(headerValueSplitter.split(value).spliterator(), false)
				.map(Method::valueOf)
				.collect(toSet());
	}

	@NotNull
	private HashSet<String> asHeaders(@NotNull String value) {
		return newHashSet(headerValueSplitter.split(value));
	}
}
{code};;;","29/Oct/15 09:23;koscejev;Proper solution should probably involve org.restlet.service.CorsService or org.restlet.engine.application.CorsFilter. Some non-camel example: http://stackoverflow.com/questions/28988671/how-to-use-cors-in-restlet-2-3-1

;;;","30/Nov/15 13:27;koscejev;[~davsclaus], current fix is flawed (details below). I have a solution that I can provide a PR - should I create a new issue or reopen this one?

I found this out while trying to implement CAMEL-9371, which should've been a tiny fix. Restlet rejects headers that are not trimmed, and there's a small bug where Access-Control-Expose-Headers is actually treated as a Set of Method. The result is that Restlet's internal StringWriter fails with IllegalArgumentException at HeaderWriter.java:286 (because header is not trimmed and space is not allowed), and this results in HTTP status code being 500 instead of 200 with no details regarding what happened (pretty bad restlet behavior, btw).;;;","30/Nov/15 13:36;davsclaus;A new PR is fine;;;","30/Nov/15 14:49;githubbot;GitHub user koscejev opened a pull request:

    https://github.com/apache/camel/pull/702

    CAMEL-9270 trim headers before setting them via Restlet API

    As discussed in CAMEL-9270, providing a PR with CORS header trimming and minor related fixes.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/koscejev/camel CAMEL-9270

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/702.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #702
    
----
commit e6a8e156556c1bc698508f102aad867fe3879ed6
Author: Anton Koscejev <anton.koscejev@zoomint.com>
Date:   2015-11-30T14:27:09Z

    CAMEL-9270 trim headers before setting them via Restlet API

----
;;;","30/Nov/15 15:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/702
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
NotifyBuilder.fromRoute() does not work for some endpoint types,CAMEL-9269,12908831,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,29/Oct/15 08:42,29/Oct/15 08:59,14/Jul/23 05:50,29/Oct/15 08:59,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-core,,,,,,,0,,,,,,"{{NotifyBuilder.fromRoute()}} does not work if the endpoint uri in the {{from()}} clause for a route does not match the actual endpoint uri the exchange was sent to. Because we also have the route id itself available in the exchange, we can use that as a fallback when the match on from endpoint uri doesn't work.",,gertvanthienen,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 29 08:59:32 UTC 2015,,,,,,,,,,,"0|i2nofj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Oct/15 08:59;gertvanthienen;Fixed for master in https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=62b2042b2fa9388aab16d5cee1385000a81a6a6b
Fixed for camel-2.16.x branch in https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=2d83364ac60d3cd5c1d30ae0b6c95dc0a73bdd5e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
enableTrace of the Main class doesn't work,CAMEL-9259,12908129,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cmoulliard,cmoulliard,27/Oct/15 06:13,25/Nov/15 23:01,14/Jul/23 05:50,27/Oct/15 11:41,2.15.3,,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-core,,,,,,,0,,,,,,"The enableTrace() method of the Camel Main class doesn't work.
When we setup the code as such

{code}
    public static void main(String... args) throws Exception {
        Main main = new Main();
        main.enableHangupSupport();
        main.addRouteBuilder(new MyRouteBuilder());
        main.enableTrace();
        main.run(args);
{code}

and launch the Main class, than the messages reported by the route in the log are not traced at all.

If we debug, we can see that there is not CamelContext object when this method of the MainSupport class is called

{code}
    public void enableTrace() {
        this.trace = true;
        for (CamelContext context : camelContexts) { // EMPTY
            context.setTracing(true);
        }
    }
{code}

The workaround is to enable the tracing within the route definition

{code}
    public void configure() {

        getContext().setTracing(true);
{code}",,cmoulliard,davsclaus,mgeis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 25 23:01:28 UTC 2015,,,,,,,,,,,"0|i2nk5j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Oct/15 07:21;cmoulliard;Fix required. Add the trace option if the boolean is true when the postProcess method is called

{code}
protected void postProcessContext() throws Exception {
        Map<String, CamelContext> map = getCamelContextMap();
        Set<Map.Entry<String, CamelContext>> entries = map.entrySet();
        int size = entries.size();
        for (Map.Entry<String, CamelContext> entry : entries) {
            String name = entry.getKey();
            CamelContext camelContext = entry.getValue();
{code};;;","27/Oct/15 07:45;davsclaus;Yeah good catch, that fix seems correct to do it in the post process.;;;","25/Nov/15 23:01;mgeis;Running 2.16.1, and the bug seem to still exist. The workaround provided (of turning tracing on during route definition) works.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
route stop/start doesn't work for camel-websocket producer,CAMEL-9257,12907909,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,igarashitm,igarashitm,26/Oct/15 13:28,28/Oct/15 10:51,14/Jul/23 05:50,28/Oct/15 10:31,2.17.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-websocket,,,,,,,0,,,,,,"If you just add stopRoute()&startRoute() at the beginning of WebsocketProducerRouteExampleTest#testWSHttpCall(), it fails with 404 not found.
{code}
java.util.concurrent.ExecutionException"">java.util.concurrent.ExecutionException: java.lang.IllegalStateException: Invalid Status Code 404
        at com.ning.http.client.providers.netty.future.NettyResponseFuture.done(NettyResponseFuture.java:220)
        at com.ning.http.client.providers.netty.handler.WebSocketProtocol.handle(WebSocketProtocol.java:102)
        at com.ning.http.client.providers.netty.handler.Processor.messageReceived(Processor.java:88)
..........
{code}",,davsclaus,githubbot,igarashitm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Oct/15 13:29;igarashitm;WebsocketProducerRouteRestartTest.java;https://issues.apache.org/jira/secure/attachment/12768717/WebsocketProducerRouteRestartTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 28 10:51:50 UTC 2015,,,,,,,,,,,"0|i2nisn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Oct/15 13:29;igarashitm;Attaching a testcase;;;","27/Oct/15 08:47;davsclaus;Try with suspend/resume to see if that works better.;;;","28/Oct/15 10:22;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/663

    CAMEL-9257 route stop/start doesn't work for camel-websocket producer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9257

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/663.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #663
    
----
commit fa085465194c05529996d38b89167a6303de53d7
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-10-28T10:15:10Z

    CAMEL-9257 route stop/start doesn't work for camel-websocket producer

----
;;;","28/Oct/15 10:27;igarashitm;So the root cause is that the WebsocketComponentServlet is not removed from the Map even when the ConnectorRef is removed due to reference count=0. The pull request I submitted contains a fix and some testcases for it.;;;","28/Oct/15 10:31;davsclaus;Thanks for the PR;;;","28/Oct/15 10:51;githubbot;Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/663
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
documentType not used for XPath predicates in XML DSL,CAMEL-9255,12907852,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,siano,siano,26/Oct/15 09:11,27/Oct/15 07:51,14/Jul/23 05:50,27/Oct/15 07:50,2.14.3,2.15.3,2.16.0,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-core,,,,,,,0,,,,,,the documentType paramter is not used for XPath predicates in XML DSL. It works for XPath expression and in Java DSL,,davsclaus,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Oct/15 09:15;siano;0001-CAMEL-9255-documentType-not-used-for-XPath-predicate.patch;https://issues.apache.org/jira/secure/attachment/12768677/0001-CAMEL-9255-documentType-not-used-for-XPath-predicate.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 27 07:51:07 UTC 2015,,,,,,,Patch Available,,,,"0|i2nifz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Oct/15 09:22;siano;The issue as such is a bit hard to verify: First of all the fix istself is in camel-core, but it cannot be tested there (because it only applies to camel-spring and camel-blueprint). Furthermore even without honoring the documentType, DOM is selected as default, which means that the expressions can be evaluated just fine.

The actual use case is with saxon as parser where the documentType can be set to SAXSource, in this case large messages can be used with XPath predicates which would go OOM with a DOMSource (because Saxon will parse the SAXSource into a TinyTree which consumes less memory than a DOM).;;;","27/Oct/15 07:51;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception is thrown when receiving a message where JMSDestination is null,CAMEL-9248,12907416,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jinie,jinie,23/Oct/15 14:19,21/Mar/18 18:00,14/Jul/23 05:50,24/Oct/15 08:00,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-jms,,,,,,,0,,,,,,"The change linked below causes camel-jms throws an exception when a message is received where JMSDestination is null (when used with WebSphere MQ). 
This works as expected in 2.15.3.

The message looks like this (anonymized)
  JMSMessage class: jms_text
  JMSType:          null
  JMSDeliveryMode:  2
  JMSExpiration:    0
  JMSPriority:      5
  JMSMessageID:     ID:c3e2d840e3d4d8d44040404040404040cfbd668a5f4f4261
  JMSTimestamp:     1445609217800
  JMSCorrelationID: null
  JMSDestination:   null
  JMSReplyTo:       queue://TEST/INPUT.QUEUE?targetClient=1
  JMSRedelivered:   false
    JMSXAppID: ilities\RFHUtil\rfhutilc.exe
    JMSXDeliveryCount: 1
    JMSXUserID: MQXPLO      
    JMS_IBM_Character_Set: IBM277
    JMS_IBM_Encoding: 785
    JMS_IBM_Format: MQSTR   
    JMS_IBM_MsgType: 8
    JMS_IBM_PutApplType: 11
    JMS_IBM_PutDate: 20151023
    JMS_IBM_PutTime: 14065780

The following is a link to the troublesome patch included in 2.16.0:
https://fisheye6.atlassian.com/browse/camel-git/components/camel-jms/src/main/java/org/apache/camel/component/jms/EndpointMessageListener.java?r2=812fa060bfeac5b320624b5d6d4833ac441d42c9&r1=e00e0d6599b01733c270f3053e23118d35ea0881
 
",,davsclaus,jinie,,,,,,,,,,,,,,,,CAMEL-12390,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 24 08:00:16 UTC 2015,,,,,,,,,,,"0|i2nfrj:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"24/Oct/15 08:00;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rest-dsl with api-doc should allow multiple rest's,CAMEL-9247,12907290,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Oct/15 05:25,07/Jan/16 11:38,14/Jul/23 05:50,24/Oct/15 10:40,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-core,rest,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/33291657/how-to-have-multiple-camel-rest-dsl-definitions-with-swagger

The api-doc endpoint should _merge_ multiple rest's together.",,davsclaus,jnupponen,,,,,,,,,,,,,,,,,,,,,,CAMEL-9489,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 27 09:51:57 UTC 2015,,,,,,,,,,,"0|i2nezj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Oct/15 06:11;davsclaus;This is a camel-spring-boot / spring-boot issue, which seems to start the routes multiple times.

This works fine out of the box in CDI / standalone etc.;;;","23/Oct/15 08:42;jnupponen;Here is the example project for reproducing the problem: https://github.com/jnupponen/camel-spring-boot-swagger-problem;;;","23/Oct/15 20:26;jnupponen;Please say if I can be of any further assistance.;;;","24/Oct/15 10:12;davsclaus;Thanks for the example I am able to reproduce the issue and working on a fix.;;;","24/Oct/15 10:41;davsclaus;As a work around just define 1 rest, instead of 2 or more;;;","27/Oct/15 09:51;jnupponen;Thanks for the fix! I updated your answer in SO to show the workaround.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf proxy with MTOM does not get attachment back when RPC/literal style WSDL used,CAMEL-9246,12907179,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,ffang,joeluo,joeluo,22/Oct/15 18:45,16/Nov/15 07:45,14/Jul/23 05:50,16/Nov/15 07:45,2.15.1,,,,,,,,,,,,,,2.15.5,2.16.2,2.17.0,,camel-cxf,,,,,,,0,,,,,,"I have a camel-cxf proxy test case with MTOM enabled. The WSDL used in the project is RPC/Literal style. However, I was unable to get attachment back via response. Please take a look at the test case for more detail.

After some debugging, it looks like that camel-cxf producer did get attachment back. However, there were two attachment related parts. One part had no attachment (empty) but had correct ""Content-ID"". The other part did contain entire attachment but had a rather different ""Content-ID"". For instance:

{code}
19:30:47,110 | INFO  | qtp565617691-367 | IMtomExample                     | 118 - org.apache.cxf.cxf-core - 3.0.4.redhat-620133 | Outbound Message
---------------------------
ID: 63
Response-Code: 200
Encoding: UTF-8
Content-Type: multipart/related; type=""application/xop+xml""; boundary=""uuid:f108bc3f-549a-4baa-ab00-757ff837aacf""; start=""<root.message@cxf.apache.org>""; start-info=""text/xml""
Headers: {accept-encoding=[gzip,deflate], breadcrumbId=[ID-jluomac-52985-1445511717614-11-8], Host=[localhost:7777], Server=[Jetty(8.1.15.v20140411)], User-Agent=[Apache-HttpClient/4.1.1 (java 1.5)]}
Payload: --uuid:f108bc3f-549a-4baa-ab00-757ff837aacf
Content-Type: application/xop+xml; charset=UTF-8; type=""text/xml""
Content-Transfer-Encoding: binary
Content-ID: <root.message@cxf.apache.org>

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns1:doMtomResponse xmlns:ns1=""http://cxf.example.com/""><parameters xmlns:ns2=""http://cxf.example.com/""><output>soapui-splash.png</output><dataLength>27186</dataLength><data><xop:Include xmlns:xop=""http://www.w3.org/2004/08/xop/include"" href=""cid:15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org""/></data></parameters></ns1:doMtomResponse></soap:Body></soap:Envelope>
--uuid:f108bc3f-549a-4baa-ab00-757ff837aacf
Content-Type: image/png
Content-Transfer-Encoding: binary
Content-ID: <e4b4a36a-b07a-481d-8bf8-82df5b57f40b-1@cxf.apache.org>
Content-Disposition: attachment;name=""soapui-splash.png""

<-- soapui-splash.png binary attachment starts here -->
...
...
<-- soapui-splash.png binary attachment ends here -->

--uuid:f108bc3f-549a-4baa-ab00-757ff837aacf
Content-Type: image/png
Content-Transfer-Encoding: binary
Content-ID: <15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org>
Content-Disposition: attachment;name=""soapui-splash.png""

<-- no binary attachment here. empty -->

--uuid:f108bc3f-549a-4baa-ab00-757ff837aacf--
--------------------------------------
{code}

And the response message returned was:
{code}
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body>
      <ns1:doMtomResponse xmlns:ns1=""http://cxf.example.com/"">
         <parameters xmlns:ns2=""http://cxf.example.com/"">
            <output>soapui-splash.png</output>
            <dataLength>27186</dataLength>
            <data>
               <xop:Include href=""cid:15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org"" xmlns:xop=""http://www.w3.org/2004/08/xop/include""/>
            </data>
         </parameters>
      </ns1:doMtomResponse>
   </soap:Body>
</soap:Envelope>
{code}

Because the response pointed to the ""Content-ID"" of 
{code}
<xop:Include href=""cid:15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org"" xmlns:xop=""http://www.w3.org/2004/08/xop/include""/>
{code}

and the parts identified by the ""Content-ID: <15839364-d75d-4cbe-a163-40838bca762a-31@cxf.apache.org>"" was actually empty. Therefore, client can not get the attachment back.",CXF 3.0.4,ffang,joeluo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Oct/15 19:17;joeluo;camel-cxf-ws-mtom.zip;https://issues.apache.org/jira/secure/attachment/12768114/camel-cxf-ws-mtom.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 16 07:45:09 UTC 2015,,,,,,,,,,,"0|i2neav:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Oct/15 19:17;joeluo;Run the test case by ""mvn test"".;;;","22/Oct/15 19:26;joeluo;I also tested using a Doc/literal wrapped style WSDL and it worked fine. Again there were two attachment related parts with different ""Content-ID"". However both parts had the same file attached (duplicated attachments). Therefore, client side was able to get the attachment back.;;;","16/Nov/15 07:45;ffang;commit fix
http://git-wip-us.apache.org/repos/asf/camel/commit/b471d78f for camel-2.15.x
http://git-wip-us.apache.org/repos/asf/camel/commit/378344ba for camel-2.16.x
http://git-wip-us.apache.org/repos/asf/camel/commit/ba848035 for master;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-paho - Endpoint should allow a flexible naming.,CAMEL-9245,12907163,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,teixi,teixi,22/Oct/15 17:59,25/Oct/15 20:49,14/Jul/23 05:50,25/Oct/15 20:47,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-paho,,,,,,,0,,,,,,"If endpoint doesn't match exactly paho: it fails to publish to the correct topic.

Once should be able in Spring to @Autowired two different PahoComponent pointing to different Application Context defined PahoComponent bean id'S.

Currently if bean id is not named exactly paho it fails to publish to the correct topic and for example instead of input/1 publishes to t://input/1 when id is mypaho instead of paho

",,davsclaus,hekonsek,teixi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,Important,,,,,,,,,9223372036854775807,,,Sun Oct 25 20:49:00 UTC 2015,,,,,,,,,,,"0|i2ne7b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Oct/15 05:49;davsclaus;Can you explain this in more details what you mean?;;;","23/Oct/15 08:38;teixi;Define two broker connections with PahoComponent bean id's in your Spring's Application Context
{code:xml}
	<bean id=""paho"" class=""org.apache.camel.component.paho.PahoComponent"">
		<property name=""brokerUrl"" value=""tcp://broker.local:1883"" />				
  		<property name=""connectOptions"">
			<bean class=""org.eclipse.paho.client.mqttv3.MqttConnectOptions"">
  				<property name=""userName"" value=""user@broker"" />
  				<property name=""password"" value=""password"" />
			</bean>
		</property>  		
	</bean>
	
	<bean id=""paho2"" class=""org.apache.camel.component.paho.PahoComponent"">
		<property name=""brokerUrl"" value=""tcp://broker2.local:1883"" />				
  		<property name=""connectOptions"">
			<bean class=""org.eclipse.paho.client.mqttv3.MqttConnectOptions"">
  				<property name=""userName"" value=""user@broker2"" />
  				<property name=""password"" value=""password2"" />
			</bean>
		</property>  		
	</bean>	
{code}

Autowire the PahoComponent in your Java class. 
And implement two different methods for publishing to different topics for each one.

{code:java}
	@Autowired
	private ApplicationContext appContext;
	
	@Autowired
	private PahoComponent paho;
	
	@Autowired
	private PahoComponent paho2;

	public void publish() {
		try {
			CamelContext camelContext = new SpringCamelContext(appContext);
			camelContext.setAllowUseOriginalMessage(false);
			camelContext.addComponent(""paho"", paho);
			camelContext.start();
			ProducerTemplate producer = camelContext.createProducerTemplate();
			String payload = ""just a message"";
			String clientId = ""pub-paho-"" + System.nanoTime();
			producer.sendBodyAndHeaders(""paho:input/1?qos=1&clientId="" + clientId, payload.toString(), null);
			camelContext.stop();
		} catch (Exception e) {
			LOG.error(""publish exception: {}"", e.getMessage());
		}
	}
	
	public void publish2() {
		try {
			CamelContext camelContext = new SpringCamelContext(appContext);
			camelContext.setAllowUseOriginalMessage(false);
			camelContext.addComponent(""paho2"", paho2);
			camelContext.start();
			ProducerTemplate producer = camelContext.createProducerTemplate();
			String payload = ""just a message 2"";
			String clientId = ""pub-paho2-"" + System.nanoTime();
			producer.sendBodyAndHeaders(""paho2:input/2?qos=1&clientId="" + clientId, payload.toString(), null);
			camelContext.stop();
		} catch (Exception e) {
			LOG.error(""publish2 exception: {}"", e.getMessage());
		}		
	}
{code}

First method message: *just a message*
Is published +correctly+ into topic: *input/1*

Second method message: *just a message 2* 
Is published _wrongly_ into topic: */input/2*;;;","23/Oct/15 10:59;hekonsek;Actually publishing to {{input/2}} is what I would expect to happen. You are sending a message to the {{input/2}}, so this is published to {{input/2}} :) . BTW a component naming is handled by the Camel Core and is outside of the scope of the component.

Are you sure it behaves wrong?;;;","23/Oct/15 13:17;teixi;When the *PahoComponent* is named *paho2* it is wrong because it is posting to the topic {noformat}/input/2{noformat} (note the first slash) instead of {noformat}input/2{noformat} 
And if you name the *PahoComponent* to *mypaho* it will post to the wrong topic {noformat}t://input/2{noformat}
This does not happens with other components like *camel-jms* or *camel-mqtt* only with *camel-paho* so it seems not related to the Camel Core and maybe to the Endpoint format definition or to the handling of it.;;;","23/Oct/15 13:22;davsclaus;The bug is here
https://github.com/apache/camel/blob/master/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoEndpoint.java#L79
eg the hardcoded 7 index which is wrong.

The topic is really the remainder parameter in the component which it should use to set as topic.
;;;","23/Oct/15 13:23;davsclaus;Here
https://github.com/apache/camel/blob/master/components/camel-paho/src/main/java/org/apache/camel/component/paho/PahoComponent.java#L36

you grab the remainder and use that as the topic

endpoint.setTopic(remainder);

and then you dont need that other logic.;;;","25/Oct/15 20:41;hekonsek;Oh shit! Did I really commit that? What was on my mind to assume fixed component name? :|

Anyway - I have fixed that in 2.17.0 (1) and 2.16.1 (2).

Thanks for reporting (and sorry for a stupid mistake)! 

(1) 14e9236aca9e1cd93f180158767d7e102257f1b6
(2) e791fc27756fddce2eaa759c86250c8c5e7f9a0f;;;","25/Oct/15 20:49;hekonsek;As a workaround hack for the older versions you can also use the component name with the length == 4.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Invocation of Bean fails when Bean extends and abstract which implements the actual method,CAMEL-9243,12907143,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,apara,apara,22/Oct/15 17:15,24/Oct/15 14:01,14/Jul/23 05:50,24/Oct/15 14:01,2.15.3,,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-core,,,,,,,0,,,,,,"The issue described here does NOT exist in 2.15.2 and only manifests in 2.15.3.

With the following definition of a Bean:

{code}
    public interface MyBaseInterface {
        @Handler
        String hello(@Body String hi);
    }

    public abstract static class MyAbstractBean implements MyBaseInterface {
        public String hello(@Body String hi) {
            return ""Hello "" + hi;
        }
        public String doCompute(String input) {
            fail(""Should not invoke me"");
            return null;
        }
    }

    public static class MyConcreteBean extends MyAbstractBean {
    }

{code}

The following test case will fail to invoke the proper method:

{code}
public class BeanHandlerMethodTest extends ContextTestSupport {

    public void testInterfaceBeanMethod() throws Exception {
        BeanInfo info = new BeanInfo(context, MyConcreteBean.class);

        Exchange exchange = new DefaultExchange(context);
        MyConcreteBean pojo = new MyConcreteBean();
        MethodInvocation mi = info.createInvocation(pojo, exchange);
        assertNotNull(mi);
        assertEquals(""hello"", mi.getMethod().getName());
    }
{code}

The issue is how BeanInfo.introspect determines which methods are available to be invoked.

At line 344, if the class is public, the interface methods are added to the list:

{code}
        if (Modifier.isPublic(clazz.getModifiers())) {
            // add additional interface methods
            List<Method> extraMethods = getInterfaceMethods(clazz);
            for (Method target : extraMethods) {
                for (Method source : methods) {
                    if (ObjectHelper.isOverridingMethod(source, target, false)) {
                        overrides.add(target);
                    }
                }
            }
            // remove all the overrides methods
            extraMethods.removeAll(overrides);
            methods.addAll(extraMethods);
        }
{code}

However, all the methods from the interface are ""abstract"".  Later, when the real implementation is encountered as the code crawls up the tree, the abstract method is not replaced:

Line 390:

{code}
        MethodInfo existingMethodInfo = overridesExistingMethod(methodInfo);
        if (existingMethodInfo != null) {
            LOG.trace(""This method is already overridden in a subclass, so the method from the sub class is preferred: {}"", existingMethodInfo);
            return existingMethodInfo;
        }
{code}

Finally, during the invocation, the following was added as part of 2.15.3 release:

Line 561:

{code}
        removeAllAbstractMethods(localOperationsWithBody);
        removeAllAbstractMethods(localOperationsWithNoBody);
        removeAllAbstractMethods(localOperationsWithCustomAnnotation);
        removeAllAbstractMethods(localOperationsWithHandlerAnnotation);
{code}

As a result, the abstract method is removed and not invoked.

I think the fix should be to see if the existingMethodInfo references an ""abstract' method and if it does and methodInfo does not, replace the existingMethodInfo with methodInfo in the collection.

This would preserve the preferences implied with the rest of the code while properly replacing the abstract method with their proper implementations.
",,apara,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/Oct/15 17:23;apara;BeanHandlerMethodTest.java;https://issues.apache.org/jira/secure/attachment/12768078/BeanHandlerMethodTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 24 14:01:02 UTC 2015,,,,,,,,,,,"0|i2ne2v:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"22/Oct/15 17:21;apara;Here is a modified BeanHandlerMethodTest.java which fails with with 2.15.3.;;;","24/Oct/15 14:01;davsclaus;Thanks for reporting and with the unit test;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE while GenericFile.changeFileName,CAMEL-9238,12906148,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Anchialas,Anchialas,20/Oct/15 06:23,03/Nov/15 10:57,14/Jul/23 05:50,27/Oct/15 11:36,2.15.2,2.15.3,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-core,,,,,,,0,,,,,,"If a relative file path is specified for the {{move}} or {{moveFailed}} Attribute of the file2 component, a NullPointerException is thrown while processing the onCompletion commit resp. rollback strategy.

And because the processed file cannot be moved away, the processing is restarted again and so on...

Wrong code line (GenericFile.java:203 in camel-core V2.15.3):
{code:java}
ObjectHelper.after(newFileName, newEndpointPath + File.separatorChar);
{code}
when {{newFileName}} and {{newEndpointPath}} are both relative paths.


Stacktrace:
{code:java}
java.lang.NullPointerException
	at java.io.File.<init>(File.java:277) ~[?:1.8.0_60]
	at org.apache.camel.component.file.GenericFile.changeFileName(GenericFile.java:207) ~[camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.strategy.GenericFileExpressionRenamer.renameFile(GenericFileExpressionRenamer.java:41) ~[camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:87) ~[camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:124) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:80) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:54) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:104) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:229) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:637) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:605) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:239) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:106) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:439) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.15.3.jar:2.15.3]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.15.3.jar:2.15.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_60]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [?:1.8.0_60]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_60]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [?:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_60]
{code}","Java: 1.8.0_60; Java HotSpot(TM) 64-Bit Server VM 25.60-b23
System: Mac OS X version 10.10.5 running on x86_64; UTF-8; de_DE",Anchialas,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 03 10:57:15 UTC 2015,,,,,,,,,,,"0|i2n7zj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Oct/15 13:54;davsclaus;Can you tell us your file endpoint configuration;;;","21/Oct/15 05:39;Anchialas;Yes, sure:
{code}
from(""file:{{src.uri}}"")
{code}
with properties
{noformat}
file.polling.delay=5000
import.dir=./import/data
src.uri={{import.dir}}?delay={{file.polling.delay}}\
   &move=${file:parent}.bak/${date:now:yyyyMMdd}/${file:onlyname}\
   &moveFailed=${file:parent}.err/${date:now:yyyyMMdd}/${file:onlyname}
{noformat};;;","27/Oct/15 10:06;davsclaus;If your intention is to store the files in the parent directory then use .., eg 

{code}
move=../input.bak/${date:now:yyyyMMdd}/${file:onlyname}
{code};;;","27/Oct/15 11:36;davsclaus;Thanks for reporting.;;;","03/Nov/15 10:57;Anchialas;Our intention is to store the backup or failed files in subdirectories ""parallel"" to the source folder, e.g.
* /path/to/import/data/file1.txt
* /path/to/import/data.bak/20151103/file1.txt
* /path/to/import/data.err/20151103/file1.txt
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Tokenize with regex grouping has a small bug,CAMEL-9236,12905977,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,duro,duro,19/Oct/15 16:36,20/Oct/15 17:00,14/Jul/23 05:50,19/Oct/15 18:43,,,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-core,,,,,,,0,,,,,,"Looks like a copy/paste error is preventing the grouping functionality from being executed by the helper object. 
group should be passed to the delegate's tokenize method. 

camel-core/src/main/java/org/apache/camel/builder/ExpressionClause.java 

    /** 
     * Evaluates a token expression on the message body 
     * 
     * @param token the token 
     * @param regex whether the token is a regular expression or not 
     * @param group to group by the given number 
     * @return the builder to continue processing the DSL 
     */ 
    public T tokenize(String token, boolean regex, int group) { 
        return delegate.tokenize(token, regex); 
    } ",,davsclaus,duro,githubbot,,,,,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 20 17:00:52 UTC 2015,,,,,,,,,,,"0|i2n71j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Oct/15 16:39;githubbot;GitHub user duro1 opened a pull request:

    https://github.com/apache/camel/pull/651

    CAMEL-9236 Bug fix to pass group to the helper delegate

    Issue resolved by passing the group parameter to the helper object.
    
    Note: The splitter will use the token passed in as the delimiter between items in the group.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/duro1/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/651.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #651
    
----
commit b4df911cf3d9e5ceecb7e3485127999dfae69ff1
Author: unknown <durowreck@yahoo.com>
Date:   2015-10-16T16:08:01Z

    Bug fix to pass group to the helper delegate

----
;;;","19/Oct/15 18:43;davsclaus;Thanks for the PR;;;","20/Oct/15 17:00;githubbot;Github user duro1 closed the pull request at:

    https://github.com/apache/camel/pull/651
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No type converter available when destination is super type,CAMEL-9235,12905908,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tdiesler,tdiesler,19/Oct/15 10:48,19/Oct/15 18:48,14/Jul/23 05:50,19/Oct/15 18:48,,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-dozer,,,,,,,0,,,,,,,,davsclaus,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 19 18:48:50 UTC 2015,,,,,,,,,,,"0|i2n6m7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Oct/15 10:50;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/649

    [CAMEL-9235] No type converter available when destination is super typ

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9235

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/649.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #649
    
----
commit 5be6591244c7e050117a1f1847550457b26b10e7
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-10-19T10:48:59Z

    [CAMEL-9235] No type converter available when destination is super typ

----
;;;","19/Oct/15 10:52;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/650

    [CAMEL-9235] No type converter available when destination is super typ

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9235m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/650.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #650
    
----
commit 223609d27555a0a2ee9a06f51101e44b40c1b2ed
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-10-19T10:48:59Z

    [CAMEL-9235] No type converter available when destination is super typ

----
;;;","19/Oct/15 11:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/650
;;;","19/Oct/15 13:37;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/649
;;;","19/Oct/15 18:48;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ZipFileDataFormat doesn't take exchange's charset into account,CAMEL-9233,12905747,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,gabowsky,gabowsky,17/Oct/15 19:22,17/Dec/21 07:18,14/Jul/23 05:50,17/Oct/15 19:23,2.16.0,,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,,,,,,,,0,camel-zipfile,charset,newbie,patch,zip,"ZIP streams are always encoded with the default UTF-8 charset, even if in the Exchange header a different charset is set. (Exchange.CHARSET_NAME)

(Please note that this is my first bugreport and -fix for the camel project, I hope i do it right)",,davsclaus,gabowsky,githubbot,,,,,,,,,,,,,,,CAMEL-17350,,,,,,,,,,,,,,,,,"17/Oct/15 19:22;gabowsky;apache-camel.zipfile.patch;https://issues.apache.org/jira/secure/attachment/12767224/apache-camel.zipfile.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Sun Oct 18 09:32:06 UTC 2015,,,,,,,Patch Available,,,,"0|i2n5mf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Oct/15 19:23;gabowsky;I have attached a patch with the fix, simply I have added the Exchange as parameter for the TypeConverter.;;;","17/Oct/15 19:42;githubbot;GitHub user rendesg opened a pull request:

    https://github.com/apache/camel/pull/648

    CAMEL-9233 fix

    Exchange is added as parameter for the TypeConverter

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rendesg/camel CAMEL-9233

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/648.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #648
    
----
commit 787bf76e9b61bc679f523c35dfe1de6d0ec42060
Author: rendesg <gabor.rendes.chilisoft@gmail.com>
Date:   2015-10-17T19:38:40Z

    CAMEL-9233 fix
    Exchange is added as parameter for the TypeConverter

----
;;;","17/Oct/15 19:44;gabowsky;I have created a pull request as well, use whichever you want!;;;","18/Oct/15 06:54;davsclaus;Thanks for the PR it has been merged.

The PR are the easiest to work with.;;;","18/Oct/15 09:32;githubbot;Github user rendesg closed the pull request at:

    https://github.com/apache/camel/pull/648
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-spring-ws - Does not work,CAMEL-9231,12905704,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Oct/15 06:21,24/Oct/15 07:18,14/Jul/23 05:50,24/Oct/15 07:18,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,examples,,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/33153384/cant-get-the-spring-ws-apache-camel-example-to-work

Contributions is welcome to help fixing this example",,brckner,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Oct/15 01:29;brckner;camel-9231.patch;https://issues.apache.org/jira/secure/attachment/12768470/camel-9231.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 24 07:18:02 UTC 2015,,,,,,,,,,,"0|i2n5cv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Oct/15 01:29;brckner;camel spring-ws example patch;;;","24/Oct/15 01:31;brckner;This was the problem:
https://jira.spring.io/browse/SPR-8182;;;","24/Oct/15 07:18;davsclaus;Thanks Timo for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFRS NPE when response code not in Response.Status,CAMEL-9230,12905651,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rtenhove,rtenhove,16/Oct/15 21:52,17/Oct/15 08:02,14/Jul/23 05:50,17/Oct/15 07:55,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.1,2.17.0,,camel-cxfrs,,,,,,,0,patch,,,,,"When used as a producer, the CXFRS component's {{org.apache.camel.component.cxf.jaxrs.CxfRsProducer#populateCxfRsProducerException}} method converts the received HTTP response status code to text:

{{String statusText = Response.Status.fromStatusCode(responseCode).toString();}}

If the JAX-RS-supplied {{fromStatusCode}} method does not recognize the status code provided, it returns {{null}}, causing the CxfRsProducer to throw an NPE. 

Note that {{Response.Status}} does not encompass all response codes. I ran afoul of this when a REST service returned a 422 for a validation error.

I will attach a unit test that illustrates this problem, as a patch to the current unit tests for the class.",,davsclaus,rtenhove,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Oct/15 00:25;rtenhove;CAMEL-9230-reproduction.patch;https://issues.apache.org/jira/secure/attachment/12767168/CAMEL-9230-reproduction.patch","16/Oct/15 22:00;rtenhove;CAMEL-9230.patch;https://issues.apache.org/jira/secure/attachment/12767153/CAMEL-9230.patch",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 17 07:55:18 UTC 2015,,,,,,,,,,,"0|i2n513:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Oct/15 21:56;rtenhove;Diff against 2.15.3 that creates a test that illustrates the issue.;;;","16/Oct/15 22:00;rtenhove;Attached is a patch that resolves the issue. When it finds that JAX-RS does not know the given response status code, it substitutes the code's family (e.g., Client error) instead.;;;","17/Oct/15 00:29;rtenhove;Test fails with:
{code}
java.lang.AssertionError: Exception should be a CxfOperationException
Expected: an instance of org.apache.camel.component.cxf.CxfOperationException
     but: <java.lang.NullPointerException> is a java.lang.NullPointerException
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.junit.Assert.assertThat(Assert.java:865)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducerTest.testProducer422Response(CxfRsProducerTest.java:493)
        ,,,
{code};;;","17/Oct/15 07:55;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
No type converter available to convert from Bean to List,CAMEL-9227,12905145,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,15/Oct/15 10:08,18/Oct/15 10:25,14/Jul/23 05:50,17/Oct/15 06:50,2.16.1,,,,,,,,,,,,,,2.16.1,,,,camel-dozer,,,,,,,0,,,,,,"{code}
Tests in error: 
  CSVIntegrationTest.testMarshalViaDozer:101 » CamelExecution Exception occurred...

Tests run: 3, Failures: 0, Errors: 1, Skipped: 0

Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.wildfly.camel.test.common.types.Customer to the required type: java.util.List with value org.wildfly.camel.test.common.types.Customer@42776551
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:185)
	at org.apache.camel.util.ExchangeHelper.convertToMandatoryType(ExchangeHelper.java:187)
	at org.apache.camel.dataformat.csv.CsvMarshaller.getRecordValues(CsvMarshaller.java:95)
	at org.apache.camel.dataformat.csv.CsvMarshaller.marshal(CsvMarshaller.java:82)
	at org.apache.camel.dataformat.csv.CsvDataFormat.marshal(CsvDataFormat.java:82)
{code}

",,davsclaus,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,CAMEL-9178,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Oct 18 10:25:18 UTC 2015,,,,,,,,,,,"0|i2n1wv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Oct/15 10:13;tdiesler;To reproduce run 

{code}
/Users/tdiesler/git/wildfly-camel/itests/standalone/basic
[tdiesler@macbook basic]$ mvn clean install -Dtest=CSVIntegrationTest
{code}

on branch [2.16.x|https://github.com/wildfly-extras/wildfly-camel/tree/2.16.x];;;","15/Oct/15 13:35;davsclaus;Are you able to build that as unit test in camel-dozer so we have the test in ASF ?;;;","16/Oct/15 12:07;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/646

    [CAMEL-9227] No type converter available to convert from Bean to List

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9227

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/646.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #646
    
----
commit 3d2dbb95811ae08238857d7623eecd4d11d39950
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-10-16T10:02:24Z

    [CAMEL-9227] No type converter available to convert from Bean to List

----
;;;","16/Oct/15 12:18;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/647

    [CAMEL-9227] No type converter available to convert from Bean to List

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9227m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/647.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #647
    
----
commit 6c51c2f6c3bd296b4c63dec25db09fac7bea199d
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-10-16T10:02:24Z

    [CAMEL-9227] No type converter available to convert from Bean to List

----
;;;","17/Oct/15 06:49;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/647
;;;","17/Oct/15 06:50;davsclaus;Thanks for the PR;;;","18/Oct/15 10:25;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/646
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException when reverting fields using property placeholders,CAMEL-9223,12904905,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,14/Oct/15 15:33,14/Oct/15 15:58,14/Jul/23 05:50,14/Oct/15 15:58,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,,,,,,,,0,,,,,,"When using a route like
{code}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
   <propertyPlaceholder id=""properties"" location=""classpath:my.properties""
       xmlns=""http://camel.apache.org/schema/spring"" />
   <route>
 	<from uri=""direct:start"" />			
  	 <multicast prop:stopOnException=""stop"">
		<to uri=""mock:a"" />			
		<to uri=""mock:b"" />
	</multicast>
   </route>
</camelContext>
{code}

The following exception is thrown:
{code}
java.lang.IllegalArgumentException: Could not find a suitable setter for property: stopOnException as there isn't a setter method with same type: java.lang.String nor type conversion possible: {{stop}}
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:561)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:571)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:454)
	at org.apache.camel.model.ProcessorDefinitionHelper$1.run(ProcessorDefinitionHelper.java:623)
	at org.apache.camel.model.ProcessorDefinitionHelper$RestoreAction.run(ProcessorDefinitionHelper.java:572)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:491)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:218)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1025)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:185)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:841)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2895)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2618)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2467)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2463)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2463)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2432)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:255)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:121)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:332)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:950)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
{code}
",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 14 15:58:46 UTC 2015,,,,,,,,,,,"0|i2n0fj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Oct/15 15:58;janstey;[janstey@bender camel-core]$ git push origin 
Counting objects: 22, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (16/16), done.
Writing objects: 100% (22/22), 2.00 KiB | 0 bytes/s, done.
Total 22 (delta 9), reused 0 (delta 0)
To https://git-wip-us.apache.org/repos/asf/camel.git
   d444e86..b09b1a6  camel-2.16.x -> camel-2.16.x
   52a9b2b..d84594d  master -> master
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
swagger - Model schema not including nested objects,CAMEL-9220,12904681,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wheadonj,wheadonj,13/Oct/15 21:52,15/Oct/15 06:00,14/Jul/23 05:50,15/Oct/15 06:00,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-swagger,,,,,,,0,,,,,,"This issue relates to the new camel-swagger-java component and not the camel-swagger component. JIRA is not yet updated for the new camel-swagger-java component.

When there are nested objects in the Api model for swagger, they are not being represented correctly in the model schema. See below for an example:

{code:title=SomeRequest.java|borderStyle=solid}
@ApiModel
public class SomeRequest {
    @ApiModelProperty
    private List<SomeObject> someObjects;
    ...
}
{code}

{code:title=SomeObject.java|borderStyle=solid}
@ApiModel
public class SomeObject {
    @ApiModelProperty
    private String somePropertyOne;
    @ApiModelProperty
    private String somePropertyTwo;
    ...
}
{code}

Should have a model in swagger of:
{code:none}
{ 
  ""someObjects"": [ 
    { 
      ""somePropertyOne"": """", 
      ""somePropertyTwo"": """" 
    } 
  ] 
}
{code}

But instead has:
{code:none}
{ 
  ""someObjects"": [ 
    ""SomeObject"" 
  ] 
}
{code}

This model is invalid and makes the swagger documentation useless as no one knows what the request model is supposed to be.

Note: this worked correctly on camel 2.15.3 with the scala based camel-swagger component.",,wheadonj,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-10-13 21:52:17.0,,,,,,,,,,,"0|i2mz1r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-AMQP page gives recipe that doesn't work,CAMEL-9216,12904294,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,shuston,shuston,12/Oct/15 21:05,13/Oct/15 05:41,14/Jul/23 05:50,13/Oct/15 05:41,2.15.3,,,,,,,,,,,,,,2.16.1,,,,documentation,,,,,,,0,documentation,,,,,"Developing a route that uses AMQP, I followed the description on the page at http://camel.apache.org/amqp.html. I had a problem where the route would not start. The way past that, suggested on stack overflow, was to change the bean id from ""amqpConnection"" to ""amqp"" matching the prefix in the uri of the route component.",,davsclaus,shuston,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 13 05:41:21 UTC 2015,,,,,,,,,,,"0|i2mwo7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Oct/15 05:41;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing .handled(true) in Camel 2.16.0 when using wiretap and newExchangeBody,CAMEL-9215,12904113,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,monti,monti,12/Oct/15 08:25,12/Oct/15 16:48,14/Jul/23 05:50,12/Oct/15 16:48,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-core,,,,,,,0,,,,,,"This worked in 2.15.x: 

RoutesDefinition routeDef = someRouteDef(); 
routeDef.onException(someException) 
   .wireTap(someUri) 
   .newExchange(someProcessor) 
   .end() 
   .handled(true) 
   .bean(someBean); 

But in 2.16.0 it seems like .handled(..) isn't available anymore.  Any 
suggestions on how to mark this as handled now? 
",,davsclaus,monti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,http://camel.465427.n5.nabble.com/Missing-handle-boolean-in-Camel-2-16-0-td5772556.html#none,,,,,,,,,,,9223372036854775807,,,Mon Oct 12 16:48:18 UTC 2015,,,,,,,,,,,"0|i2mvjz:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"12/Oct/15 10:49;monti;It was suggested on the mailing list that I could rearrange my steps.  Not ideal, and I need to test this some more, but it seems to work for now.

{code}
    onException(someException) 
      .handled(true) 
      .wireTap(someUri) 
      .newExchange(someProcessor) 
      .end() 
      .bean(someBean); 
{code};;;","12/Oct/15 16:48;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty4-http does not resolve nettyHttpBinding option,CAMEL-9208,12903856,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,09/Oct/15 18:13,09/Oct/15 18:30,14/Jul/23 05:50,09/Oct/15 18:30,2.15.3,2.16.0,,,,,,,,,,,,,2.15.4,2.16.1,2.17.0,,,,,,,,,0,,,,,,"camel-netty4-http does not resolve or strip out the ""nettyHttpBinding"" endpoint option. For example, take the following route producer:
<to uri=""netty4-http:http://www.google.com:80?nettyHttpBinding=#myHttpBinding"" /> 
It will issue the following HTTP GET request URI:
GET http://www.google.com:80?nettyHttpBinding=%23myHttpBinding HTTP/1.1
Assigning any of the other endpoint options, results in those options being removed from the GET request URI.",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 09 18:30:02 UTC 2015,,,,,,,,,,,"0|i2mty7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Oct/15 18:30;janstey;[janstey@bender camel-netty4-http]$ git push origin 
Counting objects: 32, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (20/20), done.
Writing objects: 100% (32/32), 2.50 KiB | 0 bytes/s, done.
Total 32 (delta 10), reused 0 (delta 0)
To https://git-wip-us.apache.org/repos/asf/camel.git
   44a07f9..ae9f291  camel-2.15.x -> camel-2.15.x
   c1e0f30..0f09a86  camel-2.16.x -> camel-2.16.x
   805ec4c..4b3bbf8  master -> master
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST endpoint with CORS sends invalid header value for Access-Control-Allow-Origin,CAMEL-9205,12903652,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mscheffler,mscheffler,09/Oct/15 08:00,10/Oct/15 08:05,14/Jul/23 05:50,10/Oct/15 08:05,2.15.0,,,,,,,,,,,,,,2.15.4,2.16.1,2.17.0,,rest,,,,,,,0,,,,,,"I tried enabling CORS for our camel REST endpoint and it does not really work.
The Access-Control-Allow-Origin header is sent, as it should be. Unfortunately the value of the header is ""*, *"" which is not accepted as correct by newer browser versions.
Firefox 41.0.1 and Chrome 45.0 both reject this header value and do not allow cross domain access. It seems newer browsers only
accept a single domain name or ""*"" and not a list of domains. 

See http://www.w3.org/TR/cors/#access-control-allow-origin-response-header

So please change the default behavior to send only ""*"".

I tried setting the header value manually:

<restConfiguration component=""servlet"" bindingMode=""json"" contextPath=""MyService/rest"" port=""8080"" enableCORS=""true"">           
      <corsHeaders key=""Access-Control-Allow-Origin"" value=""localhost""/>           
</restConfiguration>

But this results in a header value of ""*, localhost"" which is also not accepted.

A workaround is to set <corsHeaders key=""Access-Control-Allow-Origin"" value=""""/>  which results in a value of ""*"" for some reason.
",,davsclaus,mscheffler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 10 08:05:19 UTC 2015,,,,,,,,,,,"0|i2msw7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Oct/15 07:41;davsclaus;Try with a newer release as the default is set to a * only. So not sure why its *, * in your example.;;;","10/Oct/15 08:01;davsclaus;Are you use camel-swagger by any chance? It had some code that was using addHeader which could maybe cause the * to be added 2 times.;;;","10/Oct/15 08:05;davsclaus;using setHeader all the places now;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Flatpack: Body reader never closed ,CAMEL-9202,12903398,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mvlakh,mvlakh,08/Oct/15 15:38,26/Nov/15 12:21,14/Jul/23 05:50,22/Nov/15 13:45,2.14.3,,,,,,,,,,,,,,2.15.5,2.16.2,2.17.0,,camel-flatpack,,,,,,,0,,,,,,"Hello Camel team,

First of all I want to thank you for all great work you do to provide such a powerful tool as Camel. I really enjoy using it in my work. 

Currently I am working on an application that requires delimited and fixed width parsing tools and I decided to use Camel Flatpack because we already use some other Camel stuff. We use Camel 2.14.3 which is not the latest one but forks fine. During my work with Flatpack consumer I found several issues and some room for improvements and I decided to share my thoughts/findings with you. Our team have plans to migrate to the latest version of Camel in near future and we all will be happy if the new version includes fixes/improvements that I am goint to suggest.

The main issue that I found is that flatpack endpoint does not close body reader if an exception is thrown during parser creation step. As a result the related resource remains opened forever. For example in my cases when PZMAP files was missing my data file (csv file) was locked and my file consumer ended in endless loop in which it was trying to move a file to .error folder but was not able to do this because the file was opened for read.

Another problem that I noticed is that I cannot use allowShortLines and ignoreExtraColumns attributes if my parser uses inline headers from files. Flatpack simply ignores them in this case.

Finally I think that there is some  room for improvements:
* It would be nice to have a possibility to provide PZMAP as a bean via JNDI context instead of having to generate a file. This feature will be very useful and content parsing should work faster because the XML will be read from memory instead of reading it from a file each time you parse some content;
* It would be nice to have a possibility to provide content format as an URI attribute instead of using these ugly URI prefixes that we should use right now. With such possibility in plase URI will look the same all the time and developers won't need to reformat URI differently for different content types.

I attached a patch file with code fragments and comments to them that illustrate my findings/thoughts. Unformtunatelly I don't have enough time to provide real fixes and unit tests so please excuse me for this. 

Please let me know if something is unclear or require more details.

Looking forward for your feedback,
Mykhailo",,davsclaus,mvlakh,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9349,,,,,,,,"08/Oct/15 15:38;mvlakh;patchfile.diff;https://issues.apache.org/jira/secure/attachment/12765619/patchfile.diff","26/Nov/15 11:20;mvlakh;patchfile2.diff;https://issues.apache.org/jira/secure/attachment/12774509/patchfile2.diff",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 26 12:21:48 UTC 2015,,,,,,,,,,,"0|i2mrbr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Oct/15 15:40;mvlakh;Please note that the provided code changes are just for illustration of the found issues and you should not expect to compile and run this code.;;;","22/Nov/15 13:33;davsclaus;Please only provide a patch for closing the reader. Please do not add in other functionality in the same patch. ;;;","22/Nov/15 13:45;davsclaus;The reader is now closed. Thanks for that part of the patch.

I logged another ticket to allow reading the resource from the registry, then you can just refer to that using the existing option, and no need to introduce a new option for that.;;;","23/Nov/15 10:00;mvlakh;Thank you for the fix. Good to hear that the possibility to read PZMAP from registry will be added. 

The only question which is left unanswered is - Will you fix the issue with isAllowShortLines and isIgnoreExtraColumns attributes that are taken into account only if user provides PZMAP resource? My patch includes a fix for this problem as well so could you please take a look at let me know what do you think? Thank you.;;;","23/Nov/15 10:05;davsclaus;Can you provide a new patch based on latest code for master to fix that other issue you mention?;;;","26/Nov/15 11:20;mvlakh;Added a new patch with a fix for the issue in the delimited content parser creation code which does not allow to use isAllowShortLines and isIgnoreExtraColumns if PZMAP is not used.;;;","26/Nov/15 11:21;mvlakh;Sorry for a delay. Attached a new diff file with the necessary changes.;;;","26/Nov/15 12:21;davsclaus;Thanks for the 2nd patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Context component conflates endpoints with the same local id from different CamelContexts,CAMEL-9200,12903234,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,birkland,birkland,08/Oct/15 04:27,28/Apr/16 15:20,14/Jul/23 05:50,28/Apr/16 15:20,2.15.3,,,,,,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-core,,,,,,,0,,,,,,"The context component experiences clashes between endpoints with the same local name, but from different contexts.  If two contexts both contain a local endpoint ""direct:out"", any route involving both endpoints will fail to start due to a FailedToStartRouteException; ""Multiple consumers for the same endpoint is not allowed: Endpoint[direct://out].""

As an example, the following set of routes will fail due to this issue:
from(""direct:in"").to(""blackBox:in"");
from(""blackBox:out"").to(""direct:out"");
from(""direct:out"").to(""mock:results"");

See  thread:
http://camel.465427.n5.nabble.com/Context-Component-issue-td5770975.html",,antonin.stefanutti,birkland,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/Oct/15 05:00;birkland;CAMEL-9200.patch;https://issues.apache.org/jira/secure/attachment/12765521/CAMEL-9200.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 28 15:20:53 UTC 2016,,,,,,,Patch Available,,,,"0|i2mqbb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Oct/15 05:00;birkland;Patch against master 34bcd6cf8b234633a0fd92154174d413efbdbb6f

See also:
https://github.com/birkland/camel/commit/68e1ccf5b196839252b33f703aed0cd149faf9d1;;;","28/Apr/16 11:20;davsclaus;The camel-context component is depreacted;;;","28/Apr/16 15:20;davsclaus;Thanks for the patch. Sorry for the delay of merging.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Consumer threads crash when sending partially serializable objects,CAMEL-9199,12903134,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,unleashed85,unleashed85,07/Oct/15 21:14,08/Oct/15 12:36,14/Jul/23 05:50,08/Oct/15 05:42,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-rabbitmq,,,,,,,0,,,,,,"The RabbitMQ consumer thread crashes when sending an object that implements Serializable but contains non Serializable objects. 

I will have PR very soon to fix this and add tests.",,davsclaus,githubbot,unleashed85,,,,,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 08 12:36:07 UTC 2015,,,,,,,Patch Available,,,,"0|i2mpp3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Oct/15 21:22;githubbot;GitHub user brreitme opened a pull request:

    https://github.com/apache/camel/pull/632

    CAMEL-9199 RabbitMQ Consumer threads crash when sending partially ser…

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/brreitme/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/632.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #632
    
----
commit 2235e69ab7138f37ee491f894a50ce49dbbfedf6
Author: Brad Reitmeyer <github@bradreitmeyer.com>
Date:   2015-10-07T21:15:45Z

    CAMEL-9199 RabbitMQ Consumer threads crash when sending partially serializable objects

----
;;;","08/Oct/15 05:42;davsclaus;Thanks for the PR. Do you mind closing it at github;;;","08/Oct/15 12:36;githubbot;Github user brreitme closed the pull request at:

    https://github.com/apache/camel/pull/632
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak with .marshal().json() if stream caching enabled,CAMEL-9197,12902951,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,quinta,quinta,07/Oct/15 10:35,01/Feb/16 20:38,14/Jul/23 05:50,01/Feb/16 20:38,2.14.2,2.14.3,2.15.0,2.15.1,2.15.2,2.15.3,,,,,,,,,2.17.0,,,,,,,,,,,0,,,,,,"        from(""file:src/data?noop=true"")
        .split().tokenizeXML(""Item"").streaming().stopOnException()
            .unmarshal(jaxb)
            .marshal().json(JsonLibrary.Jackson) 
// This line causes a memory leak if stream caching enabled
            .log(""File ${in.header.CamelFileName} token ${in.header.CamelSplitIndex}"")
        .end();","Centos 7, JDK 1.8",davsclaus,quinta,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/Oct/15 10:37;quinta;CamelStreamTest.zip;https://issues.apache.org/jira/secure/attachment/12765368/CamelStreamTest.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 01 20:38:01 UTC 2016,,,,,,,,,,,"0|i2mokf:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"01/Feb/16 20:38;davsclaus;We have improved the data format marshal to better support stream caching. It may be improved in the latest 2.16.2 release. I tested with master.

On a JVM with 64mb limit I can find run this example and not eat up any memory. In older versions the GC would also reclaim the memory but it could use 200-300mb during processing one of those files.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in UndertowProducer,CAMEL-9195,12902712,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jamesnetherton,jamesnetherton,06/Oct/15 14:41,08/Oct/15 03:35,14/Jul/23 05:50,08/Oct/15 03:35,2.16.0,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-undertow,,,,,,,0,,,,,,"The UndertowProducer class leaks memory over time due to the repeated creation of ByteBufferSlicePool for each HTTP client request. My understanding of this class is that instances of it should be limited and cached if possible.

Here's an example RouteBuilder to replicate the issue. In a short time it will result in an OutOfMemoryError.  

{code}
public class UndertowRouteBuilder extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from(""undertow:http://localhost:8080/test"").to(""log:undertow?showAll=true"");

    	from(""timer:foo?period=5000"").transform(constant(""hello world"")).to(""undertow:http://localhost:8080/test"");
    }
}

{code}

{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-worklaptop-50317-1444141557043-2-30][Message: hello world]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1658)
	at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:345)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:156)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:165)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:73)
	at java.util.TimerThread.mainLoop(Timer.java:555)
	at java.util.TimerThread.run(Timer.java:505)
Caused by: java.lang.OutOfMemoryError: Direct buffer memory
	at java.nio.Bits.reserveMemory(Bits.java:658)
	at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)
	at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)
	at org.xnio.BufferAllocator$2.allocate(BufferAllocator.java:57)
	at org.xnio.BufferAllocator$2.allocate(BufferAllocator.java:55)
	at org.xnio.ByteBufferSlicePool.allocate(ByteBufferSlicePool.java:143)
	at io.undertow.client.http.HttpRequestConduit.processWrite(HttpRequestConduit.java:98)
	at io.undertow.client.http.HttpRequestConduit.write(HttpRequestConduit.java:460)
	at io.undertow.conduits.AbstractFixedLengthStreamSinkConduit.write(AbstractFixedLengthStreamSinkConduit.java:106)
	at org.xnio.conduits.ConduitStreamSinkChannel.write(ConduitStreamSinkChannel.java:150)
	at io.undertow.channels.DetachableStreamSinkChannel.write(DetachableStreamSinkChannel.java:240)
	at org.apache.camel.component.undertow.UndertowProducer$UndertowProducerCallback.completed(UndertowProducer.java:166)
	at org.apache.camel.component.undertow.UndertowProducer$UndertowProducerCallback.completed(UndertowProducer.java:121)
	at io.undertow.client.http.HttpClientExchange.invokeReadReadyCallback(HttpClientExchange.java:190)
	at io.undertow.client.http.HttpClientConnection.initiateRequest(HttpClientConnection.java:293)
	at io.undertow.client.http.HttpClientConnection.sendRequest(HttpClientConnection.java:228)
	at org.apache.camel.component.undertow.UndertowProducer.process(UndertowProducer.java:102)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:141)
	... 10 more
{code}",,davsclaus,jamesnetherton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 07 07:44:20 UTC 2015,,,,,,,,,,,"0|i2mn3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Oct/15 05:45;davsclaus;Thanks for reporting. Sound like some buffer is not released or something.;;;","07/Oct/15 07:44;davsclaus;Fixed the leak and need to merge to 2.16.x branch when its there.

There is also new options to configure the channel for keep alive and tcp no delay and so on.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-spring-jms ServerRoutes contains invalid URI parameter methodName,CAMEL-9191,12902516,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,mit_jones,mit_jones,05/Oct/15 21:28,08/Oct/15 03:31,14/Jul/23 05:50,07/Oct/15 05:44,2.15.2,,,,,,,,,,,,,,2.15.4,2.16.1,2.17.0,,examples,,,,,,,0,easyfix,,,,,"The camel-example-spring-jms org.apache.camel.example.server.ServerRoutes contains an invalid URI parameter methodName (see exception below).

Fix - change 'methodName' to 'method' as below

//from(""jms:queue:numbers"").to(""bean:multiplier?methodName=multiply"");
  from(""jms:queue:numbers"").to(""bean:multiplier?method=multiply"");


Tests run: 2, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 2.031 sec <<< FAILURE! - in org.apache.camel.example.SpringJmsClientRemotingServerTest
org.apache.camel.example.SpringJmsClientRemotingServerTest  Time elapsed: 2.03 sec  <<< ERROR!
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[bean:multiplier?methodName=multiply] <<< in route: Route(route1)[[From[jms:queue:numbers]] -> [To[bean:multipli... because of Failed to resolve endpoint: bean://multiplier?methodName=multiply due to: Failed to resolve endpoint: bean://multiplier?methodName=multiply due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{methodName=multiply}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:183)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:128)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:558)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:79)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:200)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:107)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:113)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:62)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:56)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:505)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:217)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1025)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:185)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:841)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2895)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2618)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2467)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2463)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2463)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2432)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:255)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:121)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:332)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.example.SpringJmsClientRemotingServerTest.setupFreePort(SpringJmsClientRemotingServerTest.java:46)

org.apache.camel.example.SpringJmsClientRemotingServerTest  Time elapsed: 2.031 sec  <<< ERROR!
java.lang.NullPointerException: null
	at org.apache.camel.example.SpringJmsClientRemotingServerTest.stopSpring(SpringJmsClientRemotingServerTest.java:52)
","Linux  3.8.4-102.fc17.x86_64 #1 SMP Sun Mar 24 13:09:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux

java version ""1.8.0_60""
Java(TM) SE Runtime Environment (build 1.8.0_60-b27)
Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)
",davsclaus,mit_jones,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/Oct/15 23:48;mit_jones;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12765290/patchfile.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 08 03:31:41 UTC 2015,,,,,,,Patch Available,,,,"0|i2mlw7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Oct/15 05:13;davsclaus;Thanks do you want to work on a patch or PR to fix this?
http://camel.apache.org/contributing;;;","06/Oct/15 23:50;mit_jones;Attached patch
        //from(""jms:queue:numbers"").to(""bean:multiplier?methodName=multiply"");

now becomes

//from(""jms:queue:numbers"").to(""bean:multiplier?method=multiply"");;;;","07/Oct/15 05:39;davsclaus;Need to merge to 2.16.x branch when its there;;;","08/Oct/15 03:31;njiang;Merged the patch into camel-2.16.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect string replacement order in Camel SNMP,CAMEL-9188,12902246,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,zlogic,zlogic,03/Oct/15 10:28,04/Oct/15 09:28,14/Jul/23 05:50,04/Oct/15 09:28,2.14.0,2.15.3,,,,,,,,,,,,,2.14.4,2.15.4,2.16.0,,camel-snmp,,,,,,,0,,,,,,"In Camel SNMP, the org.apache.camel.component.snmp.SnmpConverters
class has a static “getXmlSafeString” method which escapes unsafe
characters by replacing them. However, the order of applying
replacements is not correct:

    private static String getXmlSafeString(String string) {

        return string.replaceAll(""<"", ""&lt;"").replaceAll("">"",
""&gt;"").replaceAll(""&"", ""&amp;"").replaceAll(""\"""",
""&quot;"").replaceAll(""'"", ""&apos;"");

    }

It replaces “<” with “&lt;” at first, then the “&” is replaced with
“&amp;”. This means that a “<” character in the input string will be
changed to “&lt;”, and then into “&amp;lt;”, which is not the intended
behavior.

This could be fixed by applying the “replaceAll(""&"", ""&amp;"")”
transformation first.",,zlogic,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-10-03 10:28:00.0,,,,,,,,,,,"0|i2mk87:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"combination of JPA-Component, loop and wiretap throws entitymanger cloesd exception",CAMEL-9177,12896706,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pschaerf,pschaerf,28/Sep/15 06:40,29/Sep/15 06:16,14/Jul/23 05:50,29/Sep/15 06:16,2.15.2,2.15.3,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-core,camel-jpa,,,,,,0,,,,,,"Hi,
I have found a problem regarding a wiretap and the camel-jpa component. I have a route with an async split through a wiretap. In each route, I use a jpa producer to persist an entity. The problem is, that the entitymanager was closed before the async routes can reach the end. The cause is, that the same entitymanager is used in the async routes. The main route reaches the end and closes the entitymanager.

E.g. like the following route:
{code}
<route id=""mainRoute>
    <from uri=""direct:restendpoint""/>
    ...
    <to uri=""jpa:MyEntity""/>
    ...
    <loop copy=""true"">
        ...
        <wireTap uri=""direct:asyncroute""/>
    </loop>
</route>

<route id=""asyncRoute"">
    <from uri=""direct:asyncroute""/>
    ...
    <to uri=""jpa:MyEntity""/>
    ...
</route>
{code}

I think a possible fix can be to check that the entitymanager is null or closed. If null or closed, create a new entitymanager.

{code}
public final class JpaHelper {
    ...
    public static EntityManager getTargetEntityManager(Exchange exchange, ...
        ...
        if (em == null || !em.isOpen()) {
            // create a new entity manager
            em = entityManagerFactory.createEntityManager();
        ...
        }
    }
    ...
}
{code}

Another solution can be in the wiretap. There where the exchange is copied, the ""CamelEntityManager"" property could be removed.

Currently, my quickfix is: At the beginning of the async route I remove the entitymanager from the exchange.
",Camel 2.15.2 with Spring-Boot 1.2.3.RELEASE (with camel xml dsl),davsclaus,pschaerf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8388,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 29 06:16:49 UTC 2015,,,,,,,,,,,"0|i2lm7r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Sep/15 06:16;davsclaus;Thanks for reporting and the suggestion.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-xmpp processes no messages when running in Karaf,CAMEL-9171,12896413,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cschneider,afinke,afinke,25/Sep/15 15:35,08/Oct/15 13:06,14/Jul/23 05:50,08/Oct/15 13:06,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.1,2.17.0,,karaf,osgi,,,,,,0,,,,,,"Camel XMPP communication is not working in version 2.15.3 when running in Karaf. The feature installation works fine but no messages are processed.

I guess this is potentially based on changing the Smack version from 3 to 4. 

Based on the existing Camel Karaf tests I created a simple test which passes with Camel Version 2.14.3 and fails with Camel Version 2.15.3. The test can be found here https://github.com/achim86/karaf-xmpp (remember to start the XMPPServer before running the test as described in the readme).",Mac OS X,afinke,cschneider,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 08 13:05:41 UTC 2015,,,,,,,,,,,"0|i2lkev:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Sep/15 15:47;davsclaus;Can you try outside Karaf, from just a plain unit test or standalone Java.;;;","25/Sep/15 16:09;afinke;Outside Karaf it works with version 2.15.3 tested it already.;;;","25/Sep/15 16:11;davsclaus;Ah thanks yeah then it smells of OSGi bundle issue. Do you not see anyting in the logs or whatever? Are all the osgi bundles in started state?

And what Karaf version do you use?;;;","25/Sep/15 16:11;afinke;I tryed it out with Karaf 2 and 4 both are not working. I cant see any error in the logs. Routes and Bundles are starting well.;;;","08/Oct/15 13:05;cschneider;The problem seems to be that inside karaf the PacketExtensions are of type DefaultPacketExtension instead of JivePropertiesExtension. No idea why but I prepared a fix that an handle both.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Some functionality broken in Camel-8857,CAMEL-9166,12896369,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yuruki,yuruki,25/Sep/15 10:23,27/Sep/15 14:38,14/Jul/23 05:50,25/Sep/15 14:52,2.15.3,2.16.0,,,,,,,,,,,,,2.16.0,,,,camel-scr,,,,,,,0,,,,,,"Changes in Camel-8857 cause properties prefixing to not work for Camel context ID. See notes in https://github.com/apache/camel/commit/aa59cec696c46d4f9398ae91410998bd40fabbaa.

Also, backward compatibility to 2.12.0 is removed. See note in https://github.com/apache/camel/commit/c1b33e990ae5da7ca1e0268e79acc728393fd3ae.

Camel-8857 also had ABI changes that break existing bundles (requires rebuilding them all).",,davsclaus,githubbot,yuruki,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 27 14:38:57 UTC 2015,,,,,,,,,,,"0|i2lk53:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"25/Sep/15 10:31;githubbot;GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/620

    CAMEL-9166: Some functionality broken in Camel-8857

    https://issues.apache.org/jira/browse/CAMEL-9166

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr-test

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/620.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #620
    
----
commit fcb02553ebbdb9cc5803ed7642c1f8c8d0528f8c
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-09-25T10:27:05Z

    Camel-9166

----
;;;","25/Sep/15 14:51;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/620
;;;","25/Sep/15 14:52;davsclaus;The osgi range must be like the others.

And there is more love to this to make it better at starting/stopping as the shceduler that just tries every 5th seconds is not a good way.;;;","25/Sep/15 15:31;yuruki;Thanks man for taking a look at this. The reason I'm interested in backward compatibility and avoiding ABI changes is the fact that we are using camel-scr in production with Fuse 6.x. The ability to use the same bundles (using camel-scr) across Fuse and Camel versions (Fuse 6.1 -> 6.2 -> 6.2.1 -> 6.?) makes things simpler. I don't know how far the Camel versions will be pushed in Fuse 6.x but I would hate to see breaking changes in Fuse 6.2.1 (Camel 2.15.3?).

In other words, in my opinion camel-scr ABI should not change within Camel 2.15 (as now happened with 2.15.3). In 2.16 it's fine, there are changes that could make the component better.

The current starting logic is a compromise between simple/silly and complex/correct. It doesn't actually try to start the Camel context every 5th second but 5 seconds after the last CamelComponent has been registered which typically only happens once. The correct way requires us to extract a complete list of required components from the routes in the context and wait for the list to be satisfied before starting. It's not clear to me how I can get that list.;;;","25/Sep/15 15:59;davsclaus;For commercial products like JBoss Fuse you have to talk to the vendor. This is the ASF community where we have no vendor goal/affiliation.

All the components in the same release are what we support. If you want to use camel-scr with Camel 2.15.x then use a 2.15.x release of camel-scr, and so on.;;;","25/Sep/15 17:45;yuruki;Okay, ignore the first paragraph.

OSGi wiring by convention considers minor releases until the next point release as compatible. Should we not strive to maintain binary compatibility within point releases if possible?;;;","26/Sep/15 10:20;githubbot;GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/623

    CAMEL-9166 for 2.15.x

    Here's the same CAMEL-9166 prefixing and backward compatibility fix for 2.15.x branch.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr-compat

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/623.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #623
    
----
commit bf6d1b7c495a46788529e797873fbe25a950082d
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-09-26T10:14:21Z

    CAMEL-9166 for 2.15.x

----
;;;","27/Sep/15 14:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/623
;;;",,,,,,,,,,,,,,,,,,,,,,,,
errorHandlerRef causes NoSuchBeanException on uninstall,CAMEL-9164,12896335,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,igarashitm,igarashitm,25/Sep/15 06:24,25/Sep/15 14:28,14/Jul/23 05:50,25/Sep/15 14:28,2.16.0,,,,,,,,,,,,,,2.16.0,,,,camel-blueprint,camel-core,jmx,,,,,0,,,,,,"Specifying an errorHandlerRef on a route causes following WARN on uninstall
{code}
2015-09-25 06:16:45,058 | WARN  | l Console Thread | faultManagementLifecycleStrategy | 58 - org.apache.camel.camel-core - 2.16.0.SNAPSHOT | Could not unregister error handler: org.apache.camel.management.mbean.ManagedErrorHandler@27181de1 as ErrorHandler MBean.
org.apache.camel.NoSuchBeanException: No bean could be found in the registry for: myErrorHandler of type: org.apache.camel.builder.ErrorHandlerBuilder
	at org.apache.camel.util.CamelContextHelper.mandatoryLookup(CamelContextHelper.java:159)
	at org.apache.camel.impl.DefaultRouteContext.mandatoryLookup(DefaultRouteContext.java:151)
	at org.apache.camel.builder.ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(ErrorHandlerBuilderRef.java:137)
	at org.apache.camel.management.DefaultManagementNamingStrategy.getObjectNameForErrorHandler(DefaultManagementNamingStrategy.java:168)
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:108)
	at org.apache.camel.management.ManagedManagementStrategy.unmanageObject(ManagedManagementStrategy.java:147)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.unmanageObject(DefaultManagementLifecycleStrategy.java:844)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onErrorHandlerRemove(DefaultManagementLifecycleStrategy.java:641)
	at org.apache.camel.impl.RouteService.stopChildService(RouteService.java:351)
	at org.apache.camel.impl.RouteService.doStop(RouteService.java:237)
	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:77)
	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:101)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:141)
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:204)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:3017)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:3042)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:3030)
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:2865)
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
	at org.apache.camel.blueprint.BlueprintCamelContext.destroy(BlueprintCamelContext.java:122)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_79]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_79]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_79]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_79]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
	at org.apache.aries.blueprint.container.BeanRecipe.destroy(BeanRecipe.java:863)
	at org.apache.aries.blueprint.container.BlueprintRepository.destroy(BlueprintRepository.java:320)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroyComponents(BlueprintContainerImpl.java:723)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.tidyupComponents(BlueprintContainerImpl.java:917)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.destroy(BlueprintContainerImpl.java:867)
	at org.apache.aries.blueprint.container.BlueprintExtender$3.run(BlueprintExtender.java:319)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_79]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_79]
	at org.apache.aries.blueprint.container.BlueprintExtender.destroyContainer(BlueprintExtender.java:340)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:236)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1127)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4429)
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2528)
	at org.apache.felix.framework.Felix.uninstallBundle(Felix.java:2640)
	at org.apache.felix.framework.BundleImpl.uninstall(BundleImpl.java:1043)
	at org.apache.karaf.shell.osgi.UninstallBundle.doExecute(UninstallBundle.java:34)
	at org.apache.karaf.shell.osgi.BundlesCommand.doExecute(BundlesCommand.java:37)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_79]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_79]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_79]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_79]
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)[11:org.apache.aries.proxy.impl:1.0.4]
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)[11:org.apache.aries.proxy.impl:1.0.4]
	at org.apache.karaf.shell.console.commands.$BlueprintCommand2105444579.execute(Unknown Source)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:195)[17:org.apache.karaf.shell.console:2.4.2]
	at java.lang.Thread.run(Thread.java:745)[:1.7.0_79]
{code}",,igarashitm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Sep/15 06:26;igarashitm;camel-error-handler-not-found-on-uninstall.tgz;https://issues.apache.org/jira/secure/attachment/12762331/camel-error-handler-not-found-on-uninstall.tgz",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 25 06:26:50 UTC 2015,,,,,,,,,,,"0|i2ljxj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Sep/15 06:26;igarashitm;Here is a reproducer - [^camel-error-handler-not-found-on-uninstall.tgz];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel spring-boot not finding routes when using spring-cloud,CAMEL-9161,12896117,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,nstuart,nstuart,24/Sep/15 13:51,13/Nov/15 10:09,14/Jul/23 05:50,11/Nov/15 07:17,2.15.3,2.16.0,,,,,,,,,,,,,2.15.5,2.16.1,2.17.0,,camel-spring-boot,,,,,,,1,,,,,,"On startup Camel is not registering any routes annotated with @Component. Route is found and registered in Spring just fine. Switch to version 2.15.2 and it works fine. 

No errors are thrown, and everything says it's started, but no routes are active or reported as being found during startup. 

Application is being run through `mvn spring-boot:run` if that makes a difference.",,davsclaus,etienne.dethoor@gmail.com,githubbot,hekonsek,nstuart,tranchida,,,,,,,,,,,,,,CAMEL-9294,,,,,,,,,,,,,,,"10/Nov/15 13:07;nstuart;camel-boot-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12771543/camel-boot-test.tar.gz",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 13 10:09:57 UTC 2015,,,,,,,,,,,"0|i2lilj:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"24/Sep/15 14:11;davsclaus;Can you try 2.16-SNAPSHOT;;;","24/Sep/15 18:02;hekonsek;So it works for 2.15.2 and doesn't for 2.15.3?;;;","24/Sep/15 22:14;nstuart;Correct, it works fine on 2.15.2 with no changes.

I will try 2.16 when I get a chance to see if that works as well.;;;","25/Sep/15 09:29;hekonsek;OK. Thanks! Please let us know what is result. Cheers!;;;","02/Nov/15 16:39;nstuart;Ok, so it looks like I found the root cause, as it is also happening in 2.15.3. The culprit is in the changes in RoutesCollectors:

if (applicationContext.getParent() == null) {
...
}

https://github.com/apache/camel/commit/21107ffe44ff88828a4f8bcc777ec7797e885c5f#diff-dc33e1af06d90575702e3c156abde0c4

In my app, the application parent is indeed, not null. I'm not sure what the reasoning behind this parent check is (besides aforementioned double refresh). Will investigate further to see if I can come up with a solution for us, but just thought I would share my findings so far.

My parrent context, btw, is a AnnotationConfigApplicationContext which doesn't seem to out of the ordinary.
;;;","02/Nov/15 17:05;nstuart;Would a viable solution be to check the status of the CamelContext instead? Not sure what the caveats of this approach would be (race conditions, etc), but something like:

if(camelContext.getStatus() != ServiceStatus.Starting && camelContext.getStatus() != ServiceStatus.Started)

seems like it might work.;;;","10/Nov/15 13:06;nstuart;Found out the difference and why it's not working correctly in our apps. If you include/use spring-cloud the ApplicationContext you create is no longer the root conext, and this causes issues with the patch mentioned above.

I'll attach a sample app that will show the issue. It also includes the use of FeignClients because we had to work around the double refresh issues with how the act so I wanted to make sure that use case was still supported as well. The app also includes a RoutesCollector that works with this setup.

Will produce a separate patch for this as well.;;;","10/Nov/15 14:37;githubbot;GitHub user nstuart opened a pull request:

    https://github.com/apache/camel/pull/674

    CAMEL-9161 Change for dealing with parent contexts

    Changes to look at current status instead of just checking for parent context. Using spring cloud automatically adds a parent context which completely disables camel-spring-boot stuff from 2.15.3 onwards.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nstuart/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/674.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #674
    
----
commit 4257aaba6dece76f0649bb5c263bbb6b6558e5cd
Author: Nick Stuart <nick@portlandwebworks.com>
Date:   2015-11-10T14:19:07Z

    CAMEL-9161 Change for dealing with parent contexts

----
;;;","11/Nov/15 07:16;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/674
;;;","11/Nov/15 07:17;davsclaus;Thanks for the PR;;;","13/Nov/15 10:09;etienne.dethoor@gmail.com;Hello [~davsclaus],

Can you say when this fix will be available in the 2.16.1-SNAPSHOT version ?

Thanks.;;;",,,,,,,,,,,,,,,,,,,,,
"wireTap(""log: ..."") leads to script engine error",CAMEL-9159,12896082,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,24/Sep/15 11:29,24/Sep/15 11:55,14/Jul/23 05:50,24/Sep/15 11:55,2.16.0,,,,,,,,,,,,,,2.16.0,,,,camel-core,,,,,,,0,,,,,,"For 

{code}
        // do something in camel that is transactional
        CamelContext camelctx = new DefaultCamelContext();
        camelctx.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"")
                .wireTap(""log:org.wildfly.camel.test.jpa?level=WARN"")
                .to(""sql:update Account set balance = :#${body} where id = 3?dataSource=java:jboss/datasources/ExampleDS"");
            }
        });
{code}

we get

{code}
Caused by: java.lang.IllegalArgumentException: No script engine could be created for: log
	at org.apache.camel.builder.script.ScriptBuilder.createScriptEngine(ScriptBuilder.java:334)
	at org.apache.camel.builder.script.ScriptBuilder.<init>(ScriptBuilder.java:111)
	at org.apache.camel.builder.script.ScriptBuilder.<init>(ScriptBuilder.java:90)
	at org.apache.camel.builder.script.ScriptLanguage.createExpression(ScriptLanguage.java:40)
	at org.apache.camel.model.ToDynamicDefinition.createExpression(ToDynamicDefinition.java:95)
	at org.apache.camel.model.ToDynamicDefinition.createProcessor(ToDynamicDefinition.java:70)
	at org.apache.camel.model.WireTapDefinition.createProcessor(WireTapDefinition.java:80)
	at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:534)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:495)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:219)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1069)
{code}

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/882",,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 24 11:51:02 UTC 2015,,,,,,,,,,,"0|i2lidr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Sep/15 11:51;davsclaus;Its because you have camel-script on the classpath that should not attempt to assume log is a scripting language.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong statistics for subroutes,CAMEL-9151,12895368,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,vlebreil,vlebreil,22/Sep/15 08:43,22/Sep/15 09:23,14/Jul/23 05:50,22/Sep/15 09:23,2.15.2,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-metrics,,,,,,,0,,,,,,"Some statistics seem to be wrong for subroutes.

MetricsStatistics.onExchangeDone method is called several times for a same exchange: first by the subroute and then by its parent route.

The problem is that context.stop() is called several times so counters is greater than 1 for the subroute instead of one.

A solution could be to reset the context into the exchange as soon as the stop method has been called:

{code:title=MetricsRoutePolicy.java|borderStyle=solid}
private static final class MetricsStatistics {
        private final Timer responses;

        private MetricsStatistics(Timer responses) {
            this.responses = responses;
        }

        public void onExchangeBegin(Exchange exchange) {
            Timer.Context context = responses.time();
            exchange.setProperty(""MetricsRoutePolicy"", context);
        }

        public void onExchangeDone(Exchange exchange) {
            Timer.Context context = exchange.getProperty(""MetricsRoutePolicy"", Timer.Context.class);
            if (context != null) {
                context.stop();
                // BUGFIX: reset to null so that context.stop() cannot be called
                // more than once.
                exchange.setProperty(""MetricsRoutePolicy"", null);

            }
        }
    }
{code}
",,davsclaus,vlebreil,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 22 09:23:26 UTC 2015,,,,,,,,,,,"0|i2ldyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Sep/15 09:23;davsclaus;Thanks for reporting. the timers should be per route.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Seda suspend/resume should not trigger start/stop logic,CAMEL-9150,12895351,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Sep/15 06:52,22/Sep/15 08:28,14/Jul/23 05:50,22/Sep/15 08:28,2.15.3,,,,,,,,,,,,,,2.16.0,,,,camel-core,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Suspend-Resume-Routes-Unreliable-tp5771723.html

The doResume method is calling doStart which may setup tasks. ",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 22 08:28:07 UTC 2015,,,,,,,,,,,"0|i2ldv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Sep/15 08:28;davsclaus;Required a little api change and thus the change is for next release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression with camel-jackson 2.15.3,CAMEL-9144,12873237,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,arnaudeprez,arnaudeprez,17/Sep/15 09:21,03/Oct/15 07:47,14/Jul/23 05:50,03/Oct/15 07:47,2.15.3,2.16.0,,,,,,,,,,,,,2.15.4,2.16.1,2.17.0,,camel-jackson,osgi,,,,,,1,,,,,,"Hi folks,

Apparently we found a regression with camel and camel-jackson in version 2.15.3.
The following code : 

restConfiguration()
                .component(""servlet"")
                .bindingMode(RestBindingMode.json)
                .contextPath(""/adm-replication"")
                .port(""8181"");

        rest(""/replication"")
                .post(""/{cus}/{contractDate}"")
                .produces(""application/json"")
                .consumes(""application/json"")
                .to(""mock:TestRoute"");

produces the following exception by looking for the default json dataformat : 

org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> RestBinding <<< in route: Route(route1)[[From[rest:post:/replication:/{cus}/{contractD... because of JSon DataFormat json-jackson not found.
    at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1028)
    at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:185)
    at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:841)
    at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2911)
    at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2634)
    at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
    at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2483)
    at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2479)
    at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2502)
    at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2479)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
    at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2448)
    at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
    at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:209)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
    at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
    at org.junit.rules.RunRules.evaluate(RunRules.java:20)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: java.lang.IllegalArgumentException: JSon DataFormat json-jackson not found.
    at org.apache.camel.model.rest.RestBindingDefinition.createProcessor(RestBindingDefinition.java:114)
    at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:505)
    at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:217)
    at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1025)
    ... 43 more

This exception doesn't occur in 2.15.2",,arnaudeprez,davsclaus,julien.garcia,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9048,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 03 07:47:52 UTC 2015,,,,,,,,,,,"0|i2kalb:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"22/Sep/15 09:10;davsclaus;Can you track further why its not working? There must be some caused exception why jackson data format cannot be loaded/started.;;;","25/Sep/15 16:12;davsclaus;Can you find out which version of jackson are used in the working and non-working version? Maybe its a jackson issue. And we can go back to a working version?;;;","25/Sep/15 16:20;davsclaus;Its not a change in jackson

https://github.com/apache/camel/blob/camel-2.15.2/parent/pom.xml
https://github.com/apache/camel/blob/camel-2.15.3/parent/pom.xml

Are using the same version.;;;","25/Sep/15 16:22;davsclaus;We cannot reproduce this issue. You have to tell us more about this;;;","25/Sep/15 17:18;arnaudeprez;Hi Claus, I reported this issue from Julien. I hope he will help you soon.
[~julien.garcia] Can you help on this issue ?;;;","30/Sep/15 08:28;julien.garcia;Hi Claus,

you can find here the sample project: https://github.com/juliengarcia/Camel-Example.

Actually the project is in 2.15.3 version and it's not the context is not loading when you run the test.

If you change into 2.15.2, the context will load

;;;","03/Oct/15 07:21;davsclaus;The example works if installed in karaf, but the problem is related to unit testing with camel-test-blueprint. This has changed to be using felix connect as the osgi simulator. I suspect that has a bug/problem.;;;","03/Oct/15 07:24;davsclaus;Looks like CAMEL-9048 is a candidate for this bug;;;","03/Oct/15 07:37;davsclaus;Okay I have a fix now, so the unit test passes;;;","03/Oct/15 07:47;davsclaus;Thanks for reporting. This is a bug when using camel-test-blueprint. The real osgi container works fine.;;;",,,,,,,,,,,,,,,,,,,,,,
Producers that implement the ServicePoolAware interface cause memory leak due to JMX references,CAMEL-9143,12873010,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ukcrpb6,ukcrpb6,16/Sep/15 15:23,17/Sep/15 09:41,14/Jul/23 05:50,17/Sep/15 09:41,2.14.1,2.14.2,2.15.0,2.15.1,,,,,,,,,,,2.14.4,2.15.4,2.16.0,,camel-core,,,,,,,0,,,,,,"h4. Description

Producer instances that implement the ServicePoolAware interface will leak memory if their route is stopped, with new producers being leaked every time the route is started/stopped.

Known implementations that are affected are RemoteFileProducer (ftp, sftp) and Mina2Producer.

This is due to the behaviour that the SendProcessor which when the route is stopped it shuts down it's `producerCache` instance.

{code}
    protected void doStop() throws Exception {
        ServiceHelper.stopServices(producerCache, producer);
    }
{code}

this in turn calls `stopAndShutdownService(pool)` which will call stop on the SharedProducerServicePool instance which is a NOOP however it also calls shutdown which effects a stop of the global pool (this stops all the registered services and then clears the pool.

{code}
    protected void doStop() throws Exception {
        // when stopping we intend to shutdown
        ServiceHelper.stopAndShutdownService(pool);
        try {
            ServiceHelper.stopAndShutdownServices(producers.values());
        } finally {
            // ensure producers are removed, and also from JMX
            for (Producer producer : producers.values()) {
                getCamelContext().removeService(producer);
            }
        }
        producers.clear();
    }
{code}

However no call to `context.removeService(Producer) is called for the entries from the pool only those singleton instances that were in the `producers` map hence the JMX `ManagedProducer` that is created when `doGetProducer` invokes {code}                getCamelContext().addService(answer, false);
{code} is never removed. 

Since the global pool is empty when the next request to get a producer is called a new producer is created, jmx wrapper and all, whilst the old instance remains orphaned retaining any objects that pertain to that instance.

One workaround is for the producer to call {code}getEndpoint().getCamelContext().removeService(this){code} in it's stop method, however this is fairly obscure and it would probably be better to invoke removal of the producer when it is removed from the shared pool.

Another issue of note is that when a route is shutdown that contains a SendProcessor due to the shutdown invocation on the SharedProcessorServicePool the global pool is cleared of `everything` and remains in `Stopped` state until another route starts it (although it is still accessed and used whilst in the `Stopped` state).

h4. Impact

For general use where there is no dynamic creation or passivation of routes this issue should be minimal, however in our use case where the routes are not static, there is a certain amount of recreation of routes as customer endpoints change and there is a need to passivate idle routes this causes a considerable memory leak (via SFTP in particular).

h4. Test Case
{code}
package org.apache.camel.component;

import com.google.common.util.concurrent.AtomicLongMap;

import org.apache.camel.CamelContext;
import org.apache.camel.Consumer;
import org.apache.camel.Endpoint;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.Producer;
import org.apache.camel.Route;
import org.apache.camel.Service;
import org.apache.camel.ServicePoolAware;
import org.apache.camel.ServiceStatus;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultComponent;
import org.apache.camel.impl.DefaultEndpoint;
import org.apache.camel.impl.DefaultProducer;
import org.apache.camel.support.LifecycleStrategySupport;
import org.apache.camel.support.ServiceSupport;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Test memory behaviour of producers using {@link ServicePoolAware} when using JMX.
 */
public class ServicePoolAwareLeakyTest extends CamelTestSupport {

  private static final String LEAKY_SIEVE_STABLE = ""leaky://sieve-stable?plugged=true"";
  private static final String LEAKY_SIEVE_TRANSIENT = ""leaky://sieve-transient?plugged=true"";


  private static boolean isPatchApplied() {
    return Boolean.parseBoolean(System.getProperty(""patchApplied"", ""false""));
  }

  /**
   * Component that provides leaks producers.
   */
  private static class LeakySieveComponent extends DefaultComponent {
    @Override
    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
      boolean plugged = ""true"".equalsIgnoreCase((String) parameters.remove(""plugged""));
      return new LeakySieveEndpoint(uri, isPatchApplied() && plugged);
    }
  }

  /**
   * Endpoint that provides leaky producers.
   */
  private static class LeakySieveEndpoint extends DefaultEndpoint {

    private final String uri;
    private final boolean plugged;

    public LeakySieveEndpoint(String uri, boolean plugged) {
      this.uri = checkNotNull(uri, ""uri must not be null"");
      this.plugged = plugged;
    }

    @Override
    public Producer createProducer() throws Exception {
      return new LeakySieveProducer(this, plugged);
    }

    @Override
    public Consumer createConsumer(Processor processor) throws Exception {
      throw new UnsupportedOperationException();
    }

    @Override
    public boolean isSingleton() {
      return true;
    }

    @Override
    protected String createEndpointUri() {
      return uri;
    }
  }

  /**
   * Leaky producer - implements {@link ServicePoolAware}.
   */
  private static class LeakySieveProducer extends DefaultProducer implements ServicePoolAware {

    private final boolean plugged;

    public LeakySieveProducer(Endpoint endpoint, boolean plugged) {
      super(endpoint);
      this.plugged = plugged;
    }

    @Override
    public void process(Exchange exchange) throws Exception {
      // do nothing
    }

    @Override
    protected void doStop() throws Exception {
      super.doStop();

      //noinspection ConstantConditions
      if (plugged) {
        // need to remove self from services since we are ServicePoolAware this will not be handled for us otherwise we
        // leak memory
        getEndpoint().getCamelContext().removeService(this);
      }
    }
  }

  @Override
  protected boolean useJmx() {
    // only occurs when using JMX as the GC root for the producer is through a ManagedProducer created by the
    // context.addService() invocation
    return true;
  }

  /**
   * Returns true if verification of state should be performed during the test as opposed to at the end.
   */
  public boolean isFailFast() {
    return false;
  }

  /**
   * Returns true if during fast failure we should verify that the service pool remains in the started state.
   */
  public boolean isVerifyProducerServicePoolRemainsStarted() {
    return false;
  }

  @Override
  public boolean isUseAdviceWith() {
    return true;
  }

  @Test
  public void testForMemoryLeak() throws Exception {
    registerLeakyComponent();

    final AtomicLongMap<String> references = AtomicLongMap.create();

    // track LeakySieveProducer lifecycle
    context.addLifecycleStrategy(new LifecycleStrategySupport() {
      @Override
      public void onServiceAdd(CamelContext context, Service service, Route route) {
        if (service instanceof LeakySieveProducer) {
          references.incrementAndGet(((LeakySieveProducer) service).getEndpoint().getEndpointKey());
        }
      }

      @Override
      public void onServiceRemove(CamelContext context, Service service, Route route) {
        if (service instanceof LeakySieveProducer) {
          references.decrementAndGet(((LeakySieveProducer) service).getEndpoint().getEndpointKey());
        }
      }
    });

    context.addRoutes(new RouteBuilder() {
      @Override
      public void configure() throws Exception {
        from(""direct:sieve-transient"")
            .id(""sieve-transient"")
            .to(LEAKY_SIEVE_TRANSIENT);

        from(""direct:sieve-stable"")
            .id(""sieve-stable"")
            .to(LEAKY_SIEVE_STABLE);
      }
    });

    context.start();

    for (int i = 0; i < 1000; i++) {
      ServiceSupport service = (ServiceSupport) context.getProducerServicePool();
      assertEquals(ServiceStatus.Started, service.getStatus());
      if (isFailFast()) {
        assertEquals(2, context.getProducerServicePool().size());
        assertEquals(1, references.get(LEAKY_SIEVE_TRANSIENT));
        assertEquals(1, references.get(LEAKY_SIEVE_STABLE));
      }

      context.stopRoute(""sieve-transient"");

      if (isFailFast()) {
        assertEquals(""Expected no service references to remain"", 0, references.get(LEAKY_SIEVE_TRANSIENT));
      }

      if (isFailFast()) {
        // looks like we cleared more than just our route, we've stopped and cleared the global ProducerServicePool
        // since SendProcessor.stop() invokes ServiceHelper.stopServices(producerCache, producer); which in turn invokes
        // ServiceHelper.stopAndShutdownService(pool);.
        //
        // Whilst stop on the SharedProducerServicePool is a NOOP shutdown is not and effects a stop of the pool.

        if (isVerifyProducerServicePoolRemainsStarted()) {
         assertEquals(ServiceStatus.Started, service.getStatus());
        }
        assertEquals(""Expected one stable producer to remain pooled"", 1, context.getProducerServicePool().size());
        assertEquals(""Expected one stable producer to remain as service"", 1, references.get(LEAKY_SIEVE_STABLE));
      }

      // Send a body to verify behaviour of send producer after another route has been stopped
      sendBody(""direct:sieve-stable"", """");

      if (isFailFast()) {
        // shared pool is used despite being 'Stopped'
        if (isVerifyProducerServicePoolRemainsStarted()) {
          assertEquals(ServiceStatus.Started, service.getStatus());
        }

        assertEquals(""Expected only stable producer in pool"", 1, context.getProducerServicePool().size());
        assertEquals(""Expected no references to transient producer"", 0, references.get(LEAKY_SIEVE_TRANSIENT));
        assertEquals(""Expected reference to stable producer"", 1, references.get(LEAKY_SIEVE_STABLE));
      }

      context.startRoute(""sieve-transient"");

      // ok, back to normal
      assertEquals(ServiceStatus.Started, service.getStatus());
      if (isFailFast()) {
        assertEquals(""Expected both producers in pool"", 2, context.getProducerServicePool().size());
        assertEquals(""Expected one transient producer as service"", 1, references.get(LEAKY_SIEVE_TRANSIENT));
        assertEquals(""Expected one stable producer as service"", 1, references.get(LEAKY_SIEVE_STABLE));
      }
    }

    if (!isFailFast()) {
      assertEquals(""Expected both producers in pool"", 2, context.getProducerServicePool().size());

      // if not fixed these will equal the number of iterations in the loop + 1
      assertEquals(""Expected one transient producer as service"", 1, references.get(LEAKY_SIEVE_TRANSIENT));
      assertEquals(""Expected one stable producer as service"", 1, references.get(LEAKY_SIEVE_STABLE));
    }
  }

  private void registerLeakyComponent() {
    // register leaky component
    context.addComponent(""leaky"", new LeakySieveComponent());
  }
}
{code}",,davsclaus,ukcrpb6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 17 08:56:39 UTC 2015,,,,,,,,,,,"0|i2k97b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Sep/15 07:11;davsclaus;Thanks for the very detailed report. ;;;","17/Sep/15 08:17;davsclaus;Your endpoint should not be singleton, or the producer should override isSingleton and return false.;;;","17/Sep/15 08:46;davsclaus;Though singleton endpoints/producer is possible with servicepoolaware also though its not so common.

I got a fix and with the test case there is no mbean leaks anymore.;;;","17/Sep/15 08:56;ukcrpb6;Yes in the TC as the intent was to simulate RemoteFileXxx it should override singleton as RemoteFileProducer does, but it still causes the leak.

Prospect of the fix sounds good, cheers :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
dropped support for multiple blueprint descriptors in unit tests,CAMEL-9142,12868756,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,scranton,scranton,16/Sep/15 12:19,16/Sep/15 14:27,14/Jul/23 05:50,16/Sep/15 14:23,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-test,,,,,,,0,,,,,,"Looks like update CAMEL-8948 dropped support for multiple blueprint descriptors within CamelBlueprintTestSupport file within camel-test-blueprint component. The symptom is a 'java.lang.RuntimeException: InputStream cannot be null' for unit tests that have a getBlueprintDescriptor with multiple file references, i.e. a '+' concatenating two or more descriptor files.",,davsclaus,githubbot,scranton,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 16 14:27:18 UTC 2015,,,,,,,Patch Available,,,,"0|i2k8y7:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"16/Sep/15 12:41;githubbot;GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/616

    CAMEL-9142: added back support for multiple blueprint descriptors in …

    …camel-test-blueprint

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-9142

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/616.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #616
    
----
commit 4f212df06867c7b7b4fd63e465080399c54ee6dc
Author: Scott Cranton <scott@cranton.com>
Date:   2015-09-16T12:39:07Z

    CAMEL-9142: added back support for multiple blueprint descriptors in camel-test-blueprint

----
;;;","16/Sep/15 14:17;davsclaus;Thanks for the patch Scott.;;;","16/Sep/15 14:27;githubbot;Github user scranton closed the pull request at:

    https://github.com/apache/camel/pull/616
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce component's LoginToken.java is broken,CAMEL-9141,12865840,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,devendra0008@yahoo.com,devendra0008@yahoo.com,16/Sep/15 12:09,22/Sep/15 23:50,14/Jul/23 05:50,22/Sep/15 23:50,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.0,,,,,,,,,,0,,,,,,"Apparently, Salesforce released a patch to all their non prod env's over the weekend and that has busted the camel components login.
Here is the error - 
Caused by: org.codehaus.jackson.map.exc.UnrecognizedPropertyException: Unrecognized field ""is_readonly"" (Class org.apache.camel.component.salesforce.internal.dto.LoginToken), not marked as ignorable
 at [Source: [B@3112c01a; line: 1, column: 147] (through reference chain: org.apache.camel.component.salesforce.internal.dto.LoginToken[""is_readonly""])

I've submitted a pull request - 
https://github.com/apache/camel/pull/615

I've tested it against https://test.salesforce.com, however its worth testing against https://login.salesforce.com",,davsclaus,devendra0008@yahoo.com,dhirajsb,,,,,,,,,,,,,,,,,,,,,CAMEL-9134,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 22 23:50:14 UTC 2015,,,,,,,,,,,"0|i2k8xj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Sep/15 14:28;davsclaus;Thanks for the PR;;;","22/Sep/15 22:42;dhirajsb;Another PR to future proof the LoginToken class http://github.com/apache/camel/pull/617;;;","22/Sep/15 23:50;dhirajsb;PR merged into master and camel-2.15.x branches;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing configuration properties in camel-facebook,CAMEL-9140,12864248,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,manuelh9r,manuelh9r,15/Sep/15 12:34,16/Sep/15 11:22,14/Jul/23 05:50,15/Sep/15 19:18,2.16.0,,,,,,,,,,,,,,2.16.0,,,,camel-facebook,,,,,,,0,,,,,,"For the new request methods that were introduced with the Facebook4j 2.x version (see CAMEL-7634) some new parameter arguments are required but were not added to the endpoint configuration (e.g. pageId for getPage) and thus endpoints for this methods fail to resolve.

For example, the following does not work: facebook://getPage?pageId=6538157161



",,githubbot,manuelh9r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 16 11:22:37 UTC 2015,,,,,,,,,,,"0|i2k77j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Sep/15 12:51;githubbot;GitHub user manuelh9r opened a pull request:

    https://github.com/apache/camel/pull/613

    CAMEL-9140: Missing configuration properties in camel-facebook

    For the new request methods that were introduced with the Facebook4j 2.x version (see CAMEL-7634) some new parameter arguments are required but were not added to the endpoint configuration (e.g. pageId for getPage) and thus endpoints for this methods fail to resolve.
    
    For example, the following does not work: facebook://getPage?pageId=6538157161


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/manuelh9r/camel camel-9140

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/613.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #613
    
----
commit abb8202f1f01b727973667fbe56a1767562fdc46
Author: Manuel Holzleitner <manuel.holzleitner@gmail.com>
Date:   2015-09-15T12:05:17Z

    [CAMEL-9140] Add missing configuration properties in camel-facebook

commit 628e389894184187c12f2644181ee8eccf790665
Author: Manuel Holzleitner <manuel.holzleitner@gmail.com>
Date:   2015-09-15T12:06:11Z

    Fix facebook tests to support newly created tokens
    
    With new facebook application tokens some API methods are deprecated and
    cause the tests to fail. These deprecation errors need to be ignored
    in the tests

----
;;;","16/Sep/15 11:22;githubbot;Github user manuelh9r closed the pull request at:

    https://github.com/apache/camel/pull/613
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reading parameter not configurable via header in camel-facebook,CAMEL-9139,12864190,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,manuelh9r,manuelh9r,15/Sep/15 09:13,24/Sep/15 06:37,14/Jul/23 05:50,15/Sep/15 19:17,2.16.0,,,,,,,,,,,,,,2.16.0,,,,camel-facebook,,,,,,,0,,,,,,"The reading parameter in camel-facebook can not be configured via an exchange header as described in the documentation:

bq. The reading option can be a reference or value of type facebook4j.Reading, or can be specified using the following reading options in either the endpoint URI *or exchange header with CamelFacebook. prefix*.",,githubbot,manuelh9r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 24 06:37:29 UTC 2015,,,,,,,,,,,"0|i2k6v3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Sep/15 09:34;githubbot;GitHub user manuelh9r opened a pull request:

    https://github.com/apache/camel/pull/612

    [CAMEL-9139] Make reading parameter configurable via header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/manuelh9r/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/612.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #612
    
----
commit 70e54b9b8a69199091c6b87e07d64ce18b18045e
Author: Manuel Holzleitner <manuel.holzleitner@gmail.com>
Date:   2015-09-15T09:22:30Z

    [CAMEL-9139] Make reading parameter configurable via header in camel-facebook

----
;;;","24/Sep/15 06:37;githubbot;Github user manuelh9r closed the pull request at:

    https://github.com/apache/camel/pull/612
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""need to add the dependency of jedis as redis client lib""",CAMEL-9130,12863789,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,djee,djee,14/Sep/15 08:04,14/Sep/15 12:27,14/Jul/23 05:50,14/Sep/15 11:47,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-spring-redis,,,,,,,0,easyfix,maven,,,,"When I tried to use spring-redis component, it turned out it needed a dependency on Jedis, which is explained in the pom of the component. I was wondering if there's any reason for the dependency not being used (looking for a more performant redis client for example) ? Otherwise, Jedis 2.6.3 should be used as 2.7.X didn't seem to work.",,davsclaus,djee,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 14 12:27:53 UTC 2015,,,,,,,,,,,"0|i2k4cf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Sep/15 09:34;davsclaus;You are welcome to work on a patch to add that dependency to the pom;;;","14/Sep/15 09:50;githubbot;GitHub user SyBen opened a pull request:

    https://github.com/apache/camel/pull/611

    CAMEL-9130 : added dependency to Jedis client

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/SyBen/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/611.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #611
    
----
commit 6d792905196323969db6cdacb298ef672ca0d05f
Author: SyBen <syben@users.noreply.github.com>
Date:   2015-09-14T09:49:11Z

    CAMEL-9130 : added dependency to Jedis client

----
;;;","14/Sep/15 11:46;davsclaus;What is wrong with the 2.7.x version?;;;","14/Sep/15 11:46;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/611
;;;","14/Sep/15 12:27;djee;Tested from 2.7.0 to 2.7.3, got the following stack trace :
{code:java}
Exception in thread ""main"" java.lang.NoSuchMethodError: redis.clients.jedis.JedisShardInfo.setTimeout(I)V
	at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.afterPropertiesSet(JedisConnectionFactory.java:126)
	at org.apache.camel.component.redis.RedisConfiguration.createDefaultConnectionFactory(RedisConfiguration.java:127)
	at org.apache.camel.component.redis.RedisConfiguration.getConnectionFactory(RedisConfiguration.java:106)
	at org.apache.camel.component.redis.RedisConfiguration.createDefaultTemplate(RedisConfiguration.java:135)
	at org.apache.camel.component.redis.RedisConfiguration.getRedisTemplate(RedisConfiguration.java:78)
	at org.apache.camel.component.redis.RedisProducer.<init>(RedisProducer.java:31)
	at org.apache.camel.component.redis.RedisEndpoint.createProducer(RedisEndpoint.java:41)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:402)
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:219)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1272)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:155)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:1122)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.processor.FilterProcessor.doStart(FilterProcessor.java:80)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.ChoiceProcessor.doStart(ChoiceProcessor.java:171)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1272)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:155)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:1122)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:340)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:182)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3106)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3036)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:2813)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2669)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2483)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2479)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2502)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2479)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2448)
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
SmppConsumer throws IllegalArgumentException if the delivery receipt contains vendor specific optional parameters,CAMEL-9127,12863207,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,aavinash,aavinash,10/Sep/15 21:27,11/Sep/15 08:56,14/Jul/23 05:50,11/Sep/15 08:56,,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-smpp,,,,,,,0,,,,,,"Error stack:
Cannot create exchange. This exception will be ignored.. Caused by: [java.lang.IllegalArgumentException - No tag for: 5120]
java.lang.IllegalArgumentException: No tag for: 5120
        at org.jsmpp.bean.OptionalParameter$Tag.valueOf(OptionalParameter.java:308)
        at org.apache.camel.component.smpp.SmppBinding.createOptionalParameterByName(SmppBinding.java:161)
        at org.apache.camel.component.smpp.SmppBinding.createSmppMessage(SmppBinding.java:112)
        at org.apache.camel.component.smpp.SmppEndpoint.createOnAcceptDeliverSmExchange(SmppEndpoint.java:123)
        at org.apache.camel.component.smpp.SmppEndpoint.createOnAcceptDeliverSmExchange(SmppEndpoint.java:107)
        at org.apache.camel.component.smpp.MessageReceiverListenerImpl.onAcceptDeliverSm(MessageReceiverListenerImpl.java:70)",,aavinash,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Sep/15 21:29;aavinash;CAMEL-9127.patch;https://issues.apache.org/jira/secure/attachment/12755235/CAMEL-9127.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 11 08:56:08 UTC 2015,,,,,,,,,,,"0|i2k0tr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Sep/15 08:56;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-swagger may see unrelated type=context mbeans,CAMEL-9126,12862767,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tdiesler,tdiesler,09/Sep/15 14:21,11/Sep/15 07:31,14/Jul/23 05:50,11/Sep/15 07:31,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-swagger,,,,,,,0,,,,,,"{code}
    val names = server.queryNames(new ObjectName(""*:type=context,*""), null)
    for (name <- names.asScala) {
{code}",,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 11 07:28:33 UTC 2015,,,,,,,,,,,"0|i2jy6n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Sep/15 14:28;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/608

    [CAMEL-9126] camel-swagger may see unrelated type=context mbeans

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9126

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/608.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #608
    
----
commit 97233dc866968eadf1b1a3f8145cfeaa81f799a3
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-09-09T14:23:19Z

    [CAMEL-9126] camel-swagger may see unrelated type=context mbeans

----
;;;","09/Sep/15 14:29;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/609

    [CAMEL-9126] camel-swagger may see unrelated type=context mbeans

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9126m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/609.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #609
    
----
commit 6342cda29d7a901433d82d90b7b1fc2c6b189349
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-09-09T14:23:19Z

    [CAMEL-9126] camel-swagger may see unrelated type=context mbeans

----
;;;","11/Sep/15 07:28;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/609
;;;","11/Sep/15 07:28;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/608
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot build camel-scr-example,CAMEL-9125,12862757,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,09/Sep/15 13:30,11/Sep/15 07:46,14/Jul/23 05:50,11/Sep/15 07:46,2.15.4,,,,,,,,,,,,,,2.15.4,,,,camel-scr,tooling,,,,,,0,,,,,,"affects branch 2.15.x

{code}
[INFO] [INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-scr-example ---
[INFO] [INFO] Compiling 1 source file to /Users/tdiesler/git/camel/tooling/archetypes/camel-archetype-scr/target/test-classes/projects/camel-scr-example/project/camel-scr-example/target/test-classes
[INFO] [INFO] -------------------------------------------------------------
[INFO] [ERROR] COMPILATION ERROR : 
[INFO] [INFO] -------------------------------------------------------------
[INFO] [ERROR] /Users/tdiesler/git/camel/tooling/archetypes/camel-archetype-scr/target/test-classes/projects/camel-scr-example/project/camel-scr-example/src/test/java/example/CamelScrExampleTest.java:[44,40] error: incompatible types: CamelContext cannot be converted to ModelCamelContext
[INFO] [INFO] 1 error
[INFO] [INFO] -------------------------------------------------------------
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [INFO] BUILD FAILURE
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [INFO] Total time: 2.409 s
[INFO] [INFO] Finished at: 2015-09-09T15:19:20+02:00
[INFO] [INFO] Final Memory: 22M/243M
[INFO] [INFO] ------------------------------------------------------------------------
{code}",,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 11 07:46:08 UTC 2015,,,,,,,,,,,"0|i2jy4f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Sep/15 07:46;davsclaus;Its only the archetype that generated invalid unit test code.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RedeliveryPattern should support property placeholders,CAMEL-9124,12862741,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Sep/15 12:23,09/Sep/15 12:32,14/Jul/23 05:50,09/Sep/15 12:32,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-core,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Can-t-configure-delayPattern-with-property-placeholders-tp5771356.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-09-09 12:23:11.0,,,,,,,,,,,"0|i2jy13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ruby script cannot access request object,CAMEL-9122,12862421,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,tdiesler,tdiesler,08/Sep/15 14:06,28/Sep/15 06:52,14/Jul/23 05:50,28/Sep/15 06:52,,,,,,,,,,,,,,,,,,,camel-script,,,,,,,0,,,,,,"with script

{code}
body = $request.getBody()
$request.setBody(""Hello "" + body);
{code}

we get 

{code}
uby: body = $request.getBody();
$request.setBody(""Hello "" + body);. Cause: org.jruby.embed.EvalFailedException: (NoMethodError) undefined method `getBody' for nil:NilClass
	at org.apache.camel.builder.script.ScriptBuilder.createScriptEvaluationException(ScriptBuilder.java:540)
	at org.apache.camel.builder.script.ScriptBuilder.evaluateScript(ScriptBuilder.java:409)
	at org.apache.camel.builder.script.ScriptBuilder.process(ScriptBuilder.java:181)
	at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:460)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:404)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:372)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:262)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:372)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:230)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:128)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:132)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:149)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:301)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:331)
	at org.wildfly.camel.test.script.ScriptIntegrationTest.scriptProcessing(ScriptIntegrationTest.java:100)
	at org.wildfly.camel.test.script.ScriptIntegrationTest.testRuby(ScriptIntegrationTest.java:75)
{code}

It seems that the scriptengine can load the script and that the request object is nil.
This used to work 2.15.2 and earlier 2.16 snapshots 

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/845",,acosentino,davsclaus,jamesnetherton,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 28 06:52:59 UTC 2015,,,,,,,,,,,"0|i2jw1z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Sep/15 14:30;jamesnetherton;I think the recent JRuby version upgrades may be causing this. 

The code sample works fine with JRuby 1.7.18 but fails with the recent upgrades to 1.7.21 & 1.7.22.;;;","08/Sep/15 15:40;acosentino;Hi Thomas,

For the moment I've reverted Jruby to version 1.7.18

I'll investigate why there is this problem.;;;","28/Sep/15 06:28;davsclaus;Lets keep 1.7.18 on this release, and maybe there is a working jruby release in the future.;;;","28/Sep/15 06:52;tdiesler;If we stick to a working jruby version, we can resolve this. Its no longer a bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
activemq-camel pulls in outdated version of commons-pool2,CAMEL-9121,12862379,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tdiesler,tdiesler,08/Sep/15 10:42,09/Sep/15 07:52,14/Jul/23 05:50,08/Sep/15 16:01,,,,,,,,,,,,,,,2.16.0,,,,camel-jms,,,,,,,0,,,,,,"wildfly-camel generates 

{code:xml}
<module xmlns=""urn:jboss:module:1.1"" name=""org.apache.commons.pool2"">
  <resources>
    <artifact name=""org.apache.commons:commons-pool2:2.3"" />
  </resources>
  <dependencies>
    <module name=""javax.api"" />
  </dependencies>
</module>
{code}

although camel defines 2.4.2. This leads to 

{code}
type org.apache.commons.pool2.impl.DefaultEvictionPolicy
	at org.apache.commons.pool2.impl.BaseGenericObjectPool.setEvictionPolicyClassName(BaseGenericObjectPool.java:607)
	at org.apache.commons.pool2.impl.GenericKeyedObjectPool.setConfig(GenericKeyedObjectPool.java:257)
	at org.apache.commons.pool2.impl.GenericKeyedObjectPool.<init>(GenericKeyedObjectPool.java:111)
	at org.apache.commons.pool2.impl.GenericKeyedObjectPool.<init>(GenericKeyedObjectPool.java:86)
	at org.apache.activemq.jms.pool.PooledConnectionFactory.initConnectionsPool(PooledConnectionFactory.java:89)
	at org.apache.activemq.jms.pool.PooledConnectionFactory.getConnectionsPool(PooledConnectionFactory.java:496)
	at org.apache.activemq.jms.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:224)
	at org.apache.activemq.jms.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:209)
	at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:180)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:483)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:243)
{code}",,acosentino,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 09 07:52:32 UTC 2015,,,,,,,,,,,"0|i2jvsn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Sep/15 10:42;tdiesler;I'll take a look;;;","08/Sep/15 13:48;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/606

    [CAMEL-9121] activemq-camel pulls in outdated version of commons-pool2

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9121

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/606.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #606
    
----
commit b38bbda2dce6634f3ed0b6c4f7ed5417b552515e
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-09-08T13:27:16Z

    [CAMEL-9121] activemq-camel pulls in outdated version of commons-pool2

----
;;;","08/Sep/15 16:01;acosentino;Thank you Thomas. The code has been merged :-);;;","09/Sep/15 07:52;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/606
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem upgrading to Camel 2.14.3 in Karaf 3.0.4,CAMEL-9112,12861512,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,camel.michael.esmann@gmail.com,camel.michael.esmann@gmail.com,03/Sep/15 09:27,26/Sep/15 08:35,14/Jul/23 05:50,26/Sep/15 08:35,2.14.3,,,,,,,,,,,,,,2.16.0,,,,camel-script,,,,,,,0,,,,,,"I am trying to upgrade to Camel 2.14.3 from 2.14.1. We are using Karaf 3.0.4 as server. 

There is a problem with this, which can be reproduced this way: 

- Make a clean Karaf 3.0.4 installation 

- Start Karaf and install features: 

   feature:repo-add camel 2.14.3 
   feature:install camel 
   feature:install camel-script 

- Stop Karaf and start it again. 

Now there is a warning and stacktrace in the Karaf logfile, as seen below. 
I also tried to additionally install camel-script-jruby and camel-ruby but this didn't help 
This warning and stacktrace is not present when using Camel 2.14.1 !! 

--------------------------------------------------------------------- 

2015-09-01 09:49:01,277 | WARN  | FelixStartLevel  | Activator                        | 94 - org.apache.camel.camel-script - 2.14.3 | Cannot create the ScriptEngineFactory: java.lang.IllegalStateException 
java.lang.IllegalStateException: Invalid ScriptEngineFactory: org.jruby.embed.jsr223.JRubyEngineFactory 
        at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.getFactory(Activator.java:231)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.getScriptNames(Activator.java:210)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.access$000(Activator.java:191)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator.getAvailableScriptNames(Activator.java:118)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator.updateAvailableScriptLanguages(Activator.java:138)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.camel.script.osgi.Activator.serviceChanged(Activator.java:184)[94:org.apache.camel.camel-script:2.14.3] 
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.registerService(Felix.java:3423)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:320)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.camel.impl.osgi.Activator$BaseService.doRegister(Activator.java:456)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.Activator$BaseService.doRegister(Activator.java:448)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.Activator$BundleMetaLanguageResolver.register(Activator.java:238)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.Activator.addingBundle(Activator.java:104)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:431)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.tracker.AbstractTracked.trackAdding(AbstractTracked.java:261)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.tracker.AbstractTracked.track(AbstractTracked.java:234)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:407)[70:org.apache.camel.camel-core:2.14.3] 
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)[org.apache.felix.framework-4.2.1.jar:] 
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)[org.apache.felix.framework-4.2.1.jar:] 
        at java.lang.Thread.run(Thread.java:744)[:1.7.0_51] ","Windows, Karaf, JDK 1.7",camel.michael.esmann@gmail.com,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 26 08:35:46 UTC 2015,,,,,,,,,,,"0|i2jqjr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Sep/15 08:35;davsclaus;Thanks for reporting. 

jruby is mistakenly installed by default in camel-script, you should use camel-script-jruby if you want ruby.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URI option mapMailMessage doesn't obey peek=true option,CAMEL-9106,12860573,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jnupponen,jnupponen,30/Aug/15 15:01,09/Jan/16 14:52,14/Jul/23 05:50,09/Jan/16 14:52,2.15.3,,,,,,,,,,,,,,2.15.6,2.16.2,2.17.0,,camel-mail,,,,,,,1,,,,,,"URI option mapMailMessage=true as is the default with Mail Component fetches IMAP-messages without peek=true option. This results to faulty rollback logic since in case of an exception and rollback, messages are already marked with flag SEEN and won't be rolled back to UNSEEN.

Messages are marked with peek-option in processBatch-method but mapping mail messages to Camel messages happens before that method call in createExchanges-method.

I've attached a patch where peek option is set to the messages already in the poll-method which resolves the issue. Unfortunately I couldn't write a proper jUnit test for this scenario since org.jvnet.mock_javamail.Mailbox doesn't seem to support marking messages as SEEN even if they have been fetched.  However, I have attached traces of faulty and fixed run with a test route (that route is also included).",,davsclaus,jnupponen,pascalschumacher,tdietm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/Aug/15 15:02;jnupponen;MapMailMessagesBugRoute.java;https://issues.apache.org/jira/secure/attachment/12753188/MapMailMessagesBugRoute.java","30/Aug/15 15:02;jnupponen;camel-mail.mapMailMessages-peek.patch;https://issues.apache.org/jira/secure/attachment/12753187/camel-mail.mapMailMessages-peek.patch","30/Aug/15 15:02;jnupponen;trace-bug.log;https://issues.apache.org/jira/secure/attachment/12753189/trace-bug.log","30/Aug/15 15:02;jnupponen;trace-fixed.log;https://issues.apache.org/jira/secure/attachment/12753190/trace-fixed.log",,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 09 14:52:12 UTC 2016,,,,,,,Patch Available,,,,"0|i2jkv3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Aug/15 15:02;jnupponen;Patch, traces and example.;;;","03/Jan/16 10:51;pascalschumacher;Any reasons why this patch was not applied yet?;;;","03/Jan/16 10:52;tdietm;Sehr geehrte Damen und Herren,

ich bin ab Mo. 4. 1. wieder im Hause und kann Ihre Nachricht erst dann bearbeiten. Ihre Nachricht wird nicht weitergeleitet.

mfg
Thomas Dietmaier.

;;;","09/Jan/16 14:52;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpHelper concats fixed endpoint URI query parameters with CamelHttpPath header in wrong order,CAMEL-9104,12859731,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,27/Aug/15 21:53,28/Aug/15 00:16,14/Jul/23 05:50,27/Aug/15 23:40,2.14.3,2.15.3,,,,,,,,,,,,,2.16.0,,,,camel-http,camel-http4,camel-netty4-http,,,,,0,,,,,,"{code}
.setHeader(Exchange.HTTP_PATH, constant(""/my/path""))
.to(""http4://myhost:80?abc=123"")
{code}

leads to Camel requesting the following URL:

{code}
http://myhost:80?abc=123/my/path
{code}

instead of:

{code}
http://myhost:80/my/path?abc=123
{code}",,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 27 23:40:21 UTC 2015,,,,,,,,,,,"0|i2jgxj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Aug/15 23:40;raulvk;Could not merge into 2.15.x or 2.14.x due to major differences in camel-http-common.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMQ specific message properties are forwarded as message headers,CAMEL-9101,12858581,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,nfx,nfx,25/Aug/15 11:31,24/Oct/15 08:29,14/Jul/23 05:50,24/Oct/15 08:29,2.15.2,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-rabbitmq,,,,,,,0,,,,,,"org.apache.camel.component.rabbitmq.RabbitMQProducer#buildProperties does not remove message headers from exchange after property is set, leading to message header pollution.

so constructs like 

{code}
final Object contentType = exchange.getIn().getHeader(RabbitMQConstants.CONTENT_TYPE);
        if (contentType != null) {
            properties.contentType(contentType.toString());
        }
{code}

must be rewritten as

{code}
final Object contentType = exchange.getIn().removeHeader(RabbitMQConstants.CONTENT_TYPE);
        if (contentType != null) {
            properties.contentType(contentType.toString());
        }
{code}

I don't think that these are used in business logic as this is solely transport specific.",,nfx,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-08-25 11:31:48.0,,,,,,,,,,,"0|i2jc1b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[camel-script] wrong detection of script engine factories,CAMEL-9099,12858545,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,25/Aug/15 07:31,25/Aug/15 07:55,14/Jul/23 05:50,25/Aug/15 07:55,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-script,,,,,,,0,,,,,,"{noformat}
java.lang.ClassNotFoundException: # Licensed to the Apache Software Foundation (ASF) under one or more not found by groovy-all [228]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1556)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:77)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1993)[org.apache.felix.framework-4.4.1.jar:]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.8.0_51]
	at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1853)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:958)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.getFactory(Activator.java:229)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.getScriptNames(Activator.java:210)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator$BundleScriptEngineResolver.access$000(Activator.java:191)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator.getAvailableScriptNames(Activator.java:118)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator.updateAvailableScriptLanguages(Activator.java:138)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.script.osgi.Activator.removedBundle(Activator.java:107)[230:org.apache.camel.camel-script:2.15.1]
	at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.customizerRemoved(BundleTracker.java:455)[176:org.apache.camel.camel-core:2.15.1]
	at org.apache.camel.impl.osgi.tracker.AbstractTracked.untrack(AbstractTracked.java:346)[176:org.apache.camel.camel-core:2.15.1]
	at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:413)[176:org.apache.camel.camel-core:2.15.1]
	at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:869)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:790)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:515)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4429)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.Felix.stopBundle(Felix.java:2528)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.Felix$RefreshHelper.stop(Felix.java:4859)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.Felix.refreshPackages(Felix.java:4130)[org.apache.felix.framework-4.4.1.jar:]
	at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:178)[org.apache.felix.framework-4.4.1.jar:]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_51]
{noformat}
",,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 25 07:55:05 UTC 2015,,,,,,,,,,,"0|i2jbtb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Aug/15 07:55;ggrzybek;Resolved in:
* [master branch|https://github.com/apache/camel/commit/bc103e141cae698091a3ea2c36ec44471d926486]
* [camel-2.15.x branch|https://github.com/apache/camel/commit/644e013cfda43d67e411847832528c1c23fa5929];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't use custom FTPParser on OSGI,CAMEL-9094,12857637,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tcunning,tcunning,20/Aug/15 20:29,13/Sep/15 15:41,14/Jul/23 05:50,13/Sep/15 15:41,2.15.2,,,,,,,,,,,,,,2.16.0,,,,camel-ftp,,,,,,,0,,,,,,"Using a custom ftp entry parser on OSGI results in an exception because of the use of Class.forName in commons-net DefaultFTPFileEntryParserFactory :

{code}
org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: com.example.CustomFTPEntryParser
 
        at org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:166)[commons-net:commons-net:3.3]
        at org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:202)[commons-net:commons-net:3.3]
        at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3246)[commons-net:commons-net:3.3]
        at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2930)[commons-net:commons-net:3.3]
        at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2977)[commons-net:commons-net:3.3]
        at org.apache.camel.component.file.remote.FtpOperations.listFiles(FtpOperations.java:779)[org.apache.camel:camel-ftp:2.12.0.redhat-611433]
        at org.apache.camel.component.file.remote.FtpConsumer.doPollDirectory(FtpConsumer.java:91)[org.apache.camel:camel-ftp:2.12.0.redhat-611433]
        at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:53)[org.apache.camel:camel-ftp:2.12.0.redhat-611433]
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:117)[org.apache.camel:camel-core:2.12.0.redhat-611433 com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4]
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)[org.apache.camel:camel-core:2.12.0.redhat-611433 com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4]
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)[org.apache.camel:camel-core:2.12.0.redhat-611433 com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_10]
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:351)[:1.7.0_10]
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:178)[:1.7.0_10]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)[:1.7.0_10]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.7.0_10]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)[:1.7.0_10]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)[:1.7.0_10]
        at java.lang.Thread.run(Thread.java:722)[:1.7.0_10]
{code}

Camel can work around this by creating a ParserFactory that is used if Camel is being used in an OSGI environment that simply extends the DefaultFTPFileEntryParserFactory and uses the Camel class resolver rather than Class.forName.",,davsclaus,githubbot,tcunning,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 13 15:41:03 UTC 2015,,,,,,,,,,,"0|i2j6bj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Aug/15 06:29;davsclaus;You are welcome to work on a patch. Though maybe the parser factory should just always be used by Camel, and use its ClassResolver api. Thats the api we use to load classes.;;;","11/Sep/15 20:13;githubbot;GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/610

    CAMEL-9094 Can't use custom FTPParser on OSGI

    https://issues.apache.org/jira/browse/CAMEL-9094
    
    Use ClassResolver to resolve class instead of Class.forName in DefaultFTPFileEntryParserFactory 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-9094

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/610.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #610
    
----
commit 6e1950d349a66298a315a63a0bb1db34fe7db715
Author: cunningt <tcunning@redhat.com>
Date:   2015-09-11T20:12:17Z

    CAMEL-9094 Can't use custom FTPParser on OSGI

----
;;;","11/Sep/15 20:18;tcunning;Submitted a pull :

https://github.com/apache/camel/pull/610/files;;;","13/Sep/15 15:40;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/610
;;;","13/Sep/15 15:41;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
MQTT consumer receives duplicate messages after broker restart,CAMEL-9092,12857456,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,igarashitm,igarashitm,20/Aug/15 07:00,28/Aug/15 15:01,14/Jul/23 05:50,28/Aug/15 15:01,2.15.2,2.16.0,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-mqtt,,,,,,,0,,,,,,"if clientId is specified, after ActiveMQ broker restart, camel-mqtt consumer starts to receive duplicate messages. Please see the testcase attached.",,davsclaus,githubbot,igarashitm,raulvk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"20/Aug/15 07:02;igarashitm;MQTTDuplicatesTest.java;https://issues.apache.org/jira/secure/attachment/12751429/MQTTDuplicatesTest.java","21/Aug/15 12:56;igarashitm;MQTTDuplicatesTest.java_activemq;https://issues.apache.org/jira/secure/attachment/12751717/MQTTDuplicatesTest.java_activemq",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 28 15:01:52 UTC 2015,,,,,,,,,,,"0|i2j57z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/Aug/15 06:31;davsclaus;Maybe its a ActiveMQ problem?;;;","21/Aug/15 10:56;igarashitm;Possibly, but so far it can't be reproduced without camel. I tried a plain ActiveMQ testcase with almost same broker settings on ActiveMQ 5.12.0 :
[^MQTTDuplicatesTest.java_activemq]
 but it didn't hit any duplicates. I'm still looking for the root cause, but I'm kind of stuck :(;;;","21/Aug/15 12:56;igarashitm;[^MQTTDuplicatesTest.java_activemq]

Tweaked to use CallbackConnection for sender as well - still it succeeds, so no duplicate. Note that this testcase depends on mqtt-client connection recovery feature unlike camel-mqtt is doing it by itself.;;;","26/Aug/15 07:10;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/601

    CAMEL-9092 MQTT consumer receives duplicate messages after broker res…

    …tart
    
    Listener.onDisconnect() is also invoked when connection recovery occurs in mqtt-client internally, so it shouldn't attempt to reconnect from outside.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9092

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/601.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #601
    
----
commit c4b2db9ded98f403f9705c4a56cc9c36f7cdad85
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-08-26T07:03:23Z

    CAMEL-9092 MQTT consumer receives duplicate messages after broker restart
    
    Listener.onDisconnect() is also invoked when connection recovery occurs in mqtt-client internally, so it shouldn't attempt to reconnect from outside.

----
;;;","26/Aug/15 07:16;igarashitm;I haven't yet made completely clear why that duplicates happen though, the pull request I submitted did fix the issue. As Listener.onDisconnected() is also invoked when connection recovery happens in mqtt-client internally, -invoking disconnect() due to this event triggers unnecessary connection re-initialization- not really, just doing connected = false without disconnect(), so it's even worse as the old connection is remained open.
I also added setting tracer to MQTT when trace is enabled.;;;","28/Aug/15 14:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/601
;;;","28/Aug/15 15:01;raulvk;The {{connected = true}} is OK in {{onConnected()}}.
Where it needed to be removed was from {{onDisconnected()}} because the MQTT client handles its own reconnection. Setting {{connected = false}} was tricking the endpoint into creating yet another connection while the original one was trying to reconnect. I think this led to more than 1 consumer showing up on the topic and hence the appearance of duplicates.

Thanks for the report and the patch, [~igarashitm]. I merged it with the aforementioned change as well as making the {{uri}} param final in the constructor of MQTTEndpoint.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - test dependency not in test scope?,CAMEL-9090,12857238,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,zolyfarkas,zolyfarkas,19/Aug/15 15:13,20/Aug/15 17:58,14/Jul/23 05:50,20/Aug/15 16:01,2.14.3,,,,,,,,,,,,,,2.16.0,,,,camel-cxf,,,,,,,0,,,,,,"The comment implies the dependency is for test purposes:

    <!-- test for cxf failover feature -->
                <dependency>
                                <groupId>org.apache.cxf</groupId>
                                <artifactId>cxf-rt-features-clustering</artifactId>
                                <version>${cxf-version}</version>
                </dependency>
",,davsclaus,githubbot,zolyfarkas,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 20 17:58:44 UTC 2015,,,,,,,,,,,"0|i2j3wv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Aug/15 06:36;davsclaus;You are welcome to provide a patch / PR
http://camel.apache.org/contributing;;;","20/Aug/15 07:05;githubbot;GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/594

    CAMEL-9090: change scope to test for cxf-rt-features-clustering

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-9090

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/594.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #594
    
----
commit 6a3e233c2aa9460bbe74bd94d438aa8c31b3f71e
Author: David J. M. Karlsen <david@davidkarlsen.com>
Date:   2015-08-20T07:04:07Z

    CAMEL-9090: change scope to test for cxf-rt-features-clustering

----
;;;","20/Aug/15 17:58;githubbot;Github user davidkarlsen closed the pull request at:

    https://github.com/apache/camel/pull/594
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ambiguous URI in Rest API,CAMEL-9089,12857209,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hubert.hesse,hubert.hesse,19/Aug/15 13:18,21/Aug/15 07:38,14/Jul/23 05:50,21/Aug/15 07:38,2.15.2,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-servlet,rest,,,,,,0,,,,,,"Configuration of multiple URIs for the same method in a REST service containing wildcards and fixed parts does not work. Example: 
{code}
<get uri=""/{uuid}/meta"" ...>
<get uri=""/{uuid}/{channel}"" ...>
{code}

This causes ServletRestServletResolveConsumerStrategy.java to identify 2 
consumerPath candidates (lines 70-77), which isn't handled afterwords (line 80). It probably should use the most specific one in this case.","Windows 7, Java 8, Tomcat 8",hubert.hesse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-08-19 13:18:20.0,,,,,,,,,,,"0|i2j3qf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-pgevent payload always null,CAMEL-9087,12857129,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,maschmid,maschmid,19/Aug/15 06:46,19/Aug/15 06:59,14/Jul/23 05:50,19/Aug/15 06:59,2.15.2,,,,,,,,,,,,,,2.15.4,2.16.0,,,,,,,,,,0,camel-pgevent,,,,,"(note, camel-pgevent doesn't seem to have a component listed in JIRA)

Having the following reproducer

{code}
@ContextName(""myCdiCamelContext"")
public class MyRoutes extends RouteBuilder {

    @Inject
    @Uri(""pgevent://localhost:5432/postgres/foobar?user=postgres&pass=mysecretpassword"")
    private Endpoint listenEndpoint;

    @Inject
    @Uri(""pgevent://localhost:5432/postgres/foobar?user=postgres&pass=mysecretpassword"")
    private Endpoint notifyEndpoint;

    @Inject
    @Uri(""timer:foo?period=5000"")
    private Endpoint timerEndpoint;

    @Inject
    @Uri(""log:output"")
    private Endpoint resultEndpoint;

    @Inject
    private SomeBean someBean;

    @Override
    public void configure() throws Exception {
        from(timerEndpoint)
                .transform().simple(""hello"")
                .to(notifyEndpoint);

        from(listenEndpoint)
            .to(resultEndpoint);
    }
}
{code}

together with

{code}
docker run --name some-postgres -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword -d postgres
{code}

the notify payload is always null

{noformat}
2015-08-19 08:40:51,216 [0 - timer://foo] DEBUG SendProcessor                  - >>>> Endpoint[pgevent://localhost:5432/postgres/foobar?pass=mysecretpassword&user=postgres] Exchange[Message: hello]
2015-08-19 08:40:51,227 [C EventLoop (2)] DEBUG SendProcessor                  - >>>> Endpoint[log://output] Exchange[Message: null]
2015-08-19 08:40:51,228 [C EventLoop (2)] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2015-08-19 08:40:56,199 [0 - timer://foo] DEBUG SendProcessor                  - >>>> Endpoint[pgevent://localhost:5432/postgres/foobar?pass=mysecretpassword&user=postgres] Exchange[Message: hello]
2015-08-19 08:40:56,200 [C EventLoop (2)] DEBUG SendProcessor                  - >>>> Endpoint[log://output] Exchange[Message: null]
2015-08-19 08:40:56,201 [C EventLoop (2)] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2015-08-19 08:41:01,199 [0 - timer://foo] DEBUG SendProcessor                  - >>>> Endpoint[pgevent://localhost:5432/postgres/foobar?pass=mysecretpassword&user=postgres] Exchange[Message: hello]
2015-08-19 08:41:01,201 [C EventLoop (2)] DEBUG SendProcessor                  - >>>> Endpoint[log://output] Exchange[Message: null]
2015-08-19 08:41:01,201 [C EventLoop (2)] INFO  output                         - Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
{noformat}

It seems that the camel-pgevent consumer uses 

outOnly.setOut(msg);
instead of 
outOnly.setIn(msg);

and the producer

exchange.getOut()
instead of 
exchange.getIn()",PostgreSQL 9.4.4,davsclaus,maschmid,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Aug/15 06:47;maschmid;pgevent.patch;https://issues.apache.org/jira/secure/attachment/12751226/pgevent.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 19 06:59:19 UTC 2015,,,,,,,,,,,"0|i2j38n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Aug/15 06:59;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 AdviceWithRouteBuilder's remove passes wrong value for selectLast,CAMEL-9084,12856571,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rparree@gmail.com,rparree@gmail.com,17/Aug/15 10:15,19/Aug/15 07:00,14/Jul/23 05:50,19/Aug/15 07:00,2.15.2,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-core,,,,,,,0,,,,,,"The remove implementation wrongfully passed the selectFirst value for the selectLast parameter

see https://github.com/apache/camel/pull/593",,davsclaus,githubbot,rparree@gmail.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 19 07:00:18 UTC 2015,,,,,,,,,,,"0|i2izxj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Aug/15 14:07;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/593
;;;","19/Aug/15 07:00;davsclaus;Thanks for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-freemarker version mismatch on karaf,CAMEL-9076,12855753,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,igarashitm,igarashitm,13/Aug/15 02:15,13/Aug/15 09:50,14/Jul/23 05:50,13/Aug/15 08:48,2.15.3,,,,,,,,,,,,,,2.15.4,,,,camel-freemarker,karaf,,,,,,0,,,,,,"Freemarker 2.3.20 is specified for karaf bundle while camel-freemarker requires freemarker 2.3.21. It needs alignment.

{noformat}
ERROR: Bundle camel-freemarker-version-mismatch [80] EventDispatcher: Error during dispatch. (java.lang.NoSuchFieldError: VERSION_2_3_21)
java.lang.NoSuchFieldError: VERSION_2_3_21
	at org.apache.camel.component.freemarker.FreemarkerComponent.getConfiguration(FreemarkerComponent.java:74)
	at org.apache.camel.component.freemarker.FreemarkerComponent.createEndpoint(FreemarkerComponent.java:48)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:114)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:558)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:79)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:200)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:107)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:113)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:62)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:56)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:505)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:217)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1025)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:185)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:841)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2911)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2634)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2483)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2479)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2502)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2479)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2448)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:212)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:150)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:943)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:794)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4445)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3431)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:353)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:682)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:377)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1127)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4429)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2100)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:976)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:963)
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:51)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.karaf.shell.console.commands.$BlueprintCommand928158108.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:195)
	at java.lang.Thread.run(Thread.java:745)
{noformat}",,davsclaus,githubbot,igarashitm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Aug 13 09:50:23 UTC 2015,,,,,,,,,,,"0|i2iuxj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Aug/15 02:18;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/592

    CAMEL-9076 camel-freemarker version mismatch on karaf

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-9076

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/592.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #592
    
----
commit 89348bc57217db30c78f2d848300aec906518dd7
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-08-13T02:16:10Z

    CAMEL-9076 camel-freemarker version mismatch on karaf

----
;;;","13/Aug/15 02:25;igarashitm;A reproducer is here - https://github.com/igarashitm/switchyard-issues/tree/master/camel-freemarker-version-mismatch;;;","13/Aug/15 08:48;davsclaus;Thanks for the patch.;;;","13/Aug/15 09:50;githubbot;Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/592
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Installing camel-cxf on Karaf with Java 7 does not work,CAMEL-9073,12854110,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,davsclaus,davsclaus,11/Aug/15 09:18,11/Aug/15 11:06,14/Jul/23 05:50,11/Aug/15 11:05,2.16.0,,,,,,,,,,,,,,,,,,camel-cxf,karaf,osgi,,,,,0,,,,,,"See CAMEL-8647

If you run Karaf on Java 7, then javax annotation 1.1 is exposed by default (see etc/jre.properties). And when using Java 8, its javax annotation 1.2.

CXF 3.1.x uses javax annotation 1.2 and then it causes osgi package problems.

{code}
karaf@root> features:install camel
karaf@root> features:install camel-cxf
Error executing command: Can't install feature camel-cxf/0.0.0:
Could not start bundle mvn:org.apache.cxf/cxf-rt-rs-extension-providers/3.1.2 in feature(s) cxf-jaxrs-3.1.2: Uses constraint violation. Unable to resolve bundle revision org.apache.cxf.cxf-rt-frontend-jaxrs [118.0] because it is exposed to package 'javax.annotation' from bundle revisions javax.annotation-api [79.0] and org.apache.felix.framework [0] via two dependency chains.

Chain 1:
  org.apache.cxf.cxf-rt-frontend-jaxrs [118.0]
    import: (&(osgi.wiring.package=javax.annotation)(version>=1.2.0)(!(version>=2.0.0)))
     |
    export: osgi.wiring.package=javax.annotation
  javax.annotation-api [79.0]

Chain 2:
  org.apache.cxf.cxf-rt-frontend-jaxrs [118.0]
    import: (&(osgi.wiring.package=org.springframework.context.annotation)(version>=3.1.0)(!(version>=5.0.0)))
     |
    export: osgi.wiring.package=org.springframework.context.annotation; uses:=javax.annotation
  org.apache.servicemix.bundles.spring-context [65.0]
    import: (osgi.wiring.package=javax.annotation)
     |
    export: osgi.wiring.package=javax.annotation
  org.apache.felix.framework [0]
karaf@root>
{code}
",,cp123,cschneider,davsclaus,ggrzybek,,,,,,,,,,,,,,,,,,,,CAMEL-8647,,,KARAF-3566,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 11 11:05:55 UTC 2015,,,,,,,,,,,"0|i2ikvj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Aug/15 09:19;cschneider;I just checked the jre.properties in karaf 2.4.3.
It has these settings:
javax.annotation;version=""1.1"", \
javax.annotation.processing;version=""1.1"", \

So we should install the api package in camel to fix this issue. Will try it.
;;;","11/Aug/15 09:27;ggrzybek;There's Karaf fix related to versions of {{javax.annotation}} package exported by system bundle. They should be {{1.0}} in *all* JDKs - probably even JDK9.
Maybe this Karaf fix should be backported to 2.4.x. We've fixed this in Fuse.;;;","11/Aug/15 09:31;cschneider;If it is wrong then a back port would be great. Can you add an issue for it in karaf. I think it would not help for our problem though.
As we still need to depend on the annotation jar in camel.;;;","11/Aug/15 09:48;ggrzybek;The issue is KARAF-3566. And if we use features, {{camel-cxf}} simply depends on {{cxf-core}} which includes {{cxf-specs}}:
{code:xml}
    <feature name=""cxf-specs"" version=""VERSION"" resolver=""(obr)"">
...
        <bundle start-level=""10"">mvn:javax.annotation/javax.annotation-api/1.2</bundle>
...
{code}
;;;","11/Aug/15 09:50;ggrzybek;The problem I had with Fabric8 was that javax.annotations needed by CXF were loaded from system bundle (because of wrong jre.properties versions) instead of correct {{mvn:javax.annotation/javax.annotation-api/1.2}}.;;;","11/Aug/15 11:05;cschneider;I did the backport for karaf 2.4.x and also added the annotation bundle to the spring feature. The camel install works fine with it. So we do not need any changes in camel.;;;","11/Aug/15 11:05;cschneider;Will be fixed in karaf 2.4.4.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Exchange created needs to be aware of its FROM endpoint. ,CAMEL-9065,12853685,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,omaralles,omaralles,09/Aug/15 11:58,27/Aug/16 14:33,14/Jul/23 05:50,10/Aug/15 07:39,2.15.2,,,,,,,,,,,,,,2.16.0,,,,camel-mongodb,,,,,,,0,,,,,,"In 2.16, DefaultRuntimeEndpointRegistry (an EventNotifier) is extended to being able to handle ExchangeCreatedEvent s. 
In its notify(EventObjet), when processing an ExchangeCreateEvent, a reference to exchange's from endpoint is needed in order to obtain its endpoint uri. 

{code:title=DefaultRuntimeEndpointRegistry.java|borderStyle=solid}
} else if (extended && event instanceof ExchangeCreatedEvent) {
            // we only capture details in extended mode
            ExchangeCreatedEvent ece = (ExchangeCreatedEvent) event;
            Endpoint endpoint = ece.getExchange().getFromEndpoint();
            String routeId = ece.getExchange().getFromRouteId();
            String uri = endpoint.getEndpointUri();
            String key = asUtilizationKey(routeId, uri);
            if (key != null) {
                inputUtilization.onHit(key);
            }
{code}

The problem is located in MongoDbEndpoint createMongoDbExchange)() 

{code:title=MongoDbEndpoint.java|borderStyle=solid}
public Exchange createMongoDbExchange(DBObject dbObj) {
        Exchange exchange = new DefaultExchange(this.getCamelContext(), getExchangePattern()); 
        ...
    }
{code}

This Exchange constructor does not take into consideration exchange's from endpoint, consequently causing a NPE when processing its associated ExchangeCreatedEvent.

When constructing an exchange,  MongoDbEndpoint should use its parent 's createExchange() which uses the proper Exchange constructors. 

{code:title=MongoDbEndpoint.java|borderStyle=solid}
public Exchange createMongoDbExchange(DBObject dbObj) {
//        Exchange exchange = new DefaultExchange(this.getCamelContext(), getExchangePattern());
        Exchange exchange = super.createExchange();
...
}
{code}
",,davsclaus,githubbot,omaralles,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Aug 27 14:33:05 UTC 2016,,,,,,,,,,,"0|i2ii9j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Aug/15 12:07;githubbot;GitHub user oalles opened a pull request:

    https://github.com/apache/camel/pull/591

    Exchange created needs to be aware of its FROM endpoint. 

    https://issues.apache.org/jira/browse/CAMEL-9065

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oalles/camel mongodb-exchange-construction

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/591.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #591
    
----
commit 7f38e79e339d28dcc15e4cda0773ca239b43f0fc
Author: oalles <oalles@gmail.com>
Date:   2015-08-09T12:02:36Z

    createMongoDbExchange should call its parent createExchange, so the
    proper exchange constructors are called.
    
    https://issues.apache.org/jira/browse/CAMEL-9065

----
;;;","10/Aug/15 07:39;davsclaus;Thanks for the PR;;;","10/Aug/15 07:39;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/591
;;;","10/Aug/15 08:01;davsclaus;I found some other components to improve as well, now they are all done

davsclaus:~/workspace/camel (master)/$ find . -name '*Endpoint.java' | xargs grep ""new DefaultExchange""
./camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java:        return new DefaultExchange(this, pattern);;;;","25/Aug/16 07:45;githubbot;GitHub user YoshikiHigo opened a pull request:

    https://github.com/apache/camel/pull/1142

    An additional modification for CAMEL-9065 

    This commit includes an additional modification for CAMEL-9065.
    Components should create Exchange from super (46a9a5b4926fd845042577f18ea6a935d2f5f91d).
    
    Yoshiki, Shinpei, Hideaki, and Mei


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/YoshikiHigo/camel fix08

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1142.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1142
    
----
commit fa7c029acba9898f438ec34a226716b4c7d1d3cd
Author: Yoshiki Higo <yoshiki.higo@gmail.com>
Date:   2016-08-25T07:40:15Z

    An additional modification for CAMEL-9065 (Components should create Exchange from super)

----
;;;","27/Aug/16 14:33;githubbot;Github user YoshikiHigo closed the pull request at:

    https://github.com/apache/camel/pull/1142
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Jetty exposes its endpoint without component name,CAMEL-9059,12852571,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Aug/15 12:58,06/Aug/15 13:25,14/Jul/23 05:50,06/Aug/15 13:25,2.15.2,,,,,,,,,,,,,,2.16.0,,,,camel-jetty,,,,,,,0,,,,,,"A simple route such as
{code}
        from(""jetty:http://0.0.0.0:8080/ping"").transform(constant(""PONG\n""));
{code}

Enlists the jetty endpoint as just: http://0.0.0.0:8080/ping. But then its mistakenly the http component. It should be the full url with jetty as prefix.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-08-06 12:58:53.0,,,,,,,,,,,"0|i2if3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Example Servlet REST generates java.lang.NoClassDefFoundError: scala/xml/PrettyPrinter,CAMEL-9057,12852277,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,05/Aug/15 15:45,05/Aug/15 16:29,14/Jul/23 05:50,05/Aug/15 16:20,2.16.0,,,,,,,,,,,,,,,,,,examples,,,,,,,0,,,,,,"After starting jetty:run maven goal and accessing the apiDoc of Swagger (http://localhost:8080/camel-example-servlet-rest-tomcat/api-docs/myCamel), the following error is reported

{code}
2015-08-05 17:42:18.053:INFO:oejs.Server:main: Started @18962ms
[INFO] Started Jetty Server
2015-08-05 17:42:26.619:WARN:oejs.ServletHandler:qtp1891031939-25: Error for /camel-example-servlet-rest-tomcat/api-docs/myCamel
java.lang.NoClassDefFoundError: scala/xml/PrettyPrinter
        at com.wordnik.swagger.core.util.JsonSerializer$.<init>(JsonSerializer.scala:31)
        at com.wordnik.swagger.core.util.JsonSerializer$.<clinit>(JsonSerializer.scala)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.renderResourceListing(RestSwaggerApiDeclarationServlet.scala:225)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.doGet(RestSwaggerApiDeclarationServlet.scala:111)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
        at org.apache.camel.component.swagger.RestSwaggerCorsFilter.doFilter(RestSwaggerCorsFilter.scala:44)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
        at org.eclipse.jetty.server.Server.handle(Server.java:497)
        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)
        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
        at java.lang.Thread.run(Thread.java:745)
Caused by: 
java.lang.ClassNotFoundException: scala.xml.PrettyPrinter
        at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:259)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:235)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:227)
        at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:450)
        at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:403)
        at com.wordnik.swagger.core.util.JsonSerializer$.<init>(JsonSerializer.scala:31)
        at com.wordnik.swagger.core.util.JsonSerializer$.<clinit>(JsonSerializer.scala)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.renderResourceListing(RestSwaggerApiDeclarationServlet.scala:225)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.doGet(RestSwaggerApiDeclarationServlet.scala:111)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
{code}

when the same url is called a second time, then we get another class not found error 

{code}
2015-08-05 17:47:33.803:WARN:oejs.ServletHandler:qtp1891031939-33: Error for /camel-example-servlet-rest-tomcat/api-docs/myCamel
java.lang.NoClassDefFoundError: Could not initialize class com.wordnik.swagger.core.util.JsonSerializer$
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.renderResourceListing(RestSwaggerApiDeclarationServlet.scala:225)
        at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.doGet(RestSwaggerApiDeclarationServlet.scala:111)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
        at org.apache.camel.component.swagger.RestSwaggerCorsFilter.doFilter(RestSwaggerCorsFilter.scala:44)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
        at org.eclipse.jetty.server.Server.handle(Server.java:497)
        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)
        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
        at java.lang.Thread.run(Thread.java:745)

{code}",,cmoulliard,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 05 16:29:49 UTC 2015,,,,,,,,,,,"0|i2idbr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Aug/15 15:55;cmoulliard;This error also occurs when the war is deployed on Tomcat;;;","05/Aug/15 16:20;cmoulliard;Add missing scala deps;;;","05/Aug/15 16:29;cmoulliard;Fixed --> 3f8df7f 2015-08-05 Charles Moulliard (HEAD, origin/master, origin/HEAD, master) CAMEL-9057. Add missing scala deps to resolve the issue
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Websocket Component not shutting down embedded jetty server on component shutdown,CAMEL-9049,12851423,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sabre1041,sabre1041,04/Aug/15 15:39,09/Aug/15 15:06,14/Jul/23 05:50,09/Aug/15 07:52,2.15.2,,,,,,,,,,,,,,2.14.4,2.15.3,2.16.0,,camel-websocket,,,,,,,0,,,,,,"When stopping the websocket component, it has been observed that the embedded Jetty server does not completely shut down. This causes a bind error when attempting to start the component again. ",,davsclaus,githubbot,sabre1041,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 09 15:06:19 UTC 2015,,,,,,,,,,,"0|i2ibjb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Aug/15 15:39;sabre1041;I have traced down this issue and will be putting together a patch shortly;;;","08/Aug/15 19:45;githubbot;GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/590

    CAMEL-9049: Modifying timing that Jetty connector added and removed

    Modified the timing the Jetty connector is added and removed.
    
    Existing functionality of calling connect/disconnect methods on component from endpoint is involved multiple times. This causes the number of references to a single connector to be incorrectly calculated. This resulted in the connector from being removed too early causing the endpoint from being available or not being removed at all. This resulted in the embedded jetty server to not shut down if the context was destroyed. If the context was started once again, the embedded jetty server would still be active and a bind error would occur.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-9049

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/590.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #590
    
----
commit a94704e50aa364826ce1e6d7b1c68a97993563cd
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-08-08T19:40:57Z

    CAMEL-9049: Modifying timing that Jetty connector added and removed

----
;;;","09/Aug/15 07:52;davsclaus;Thanks for the PR;;;","09/Aug/15 15:06;githubbot;Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/590
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core causes restart of karaf console if it is refreshed,CAMEL-9048,12851087,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cschneider,cschneider,cschneider,03/Aug/15 12:27,03/Oct/15 07:46,14/Jul/23 05:50,05/Aug/15 16:01,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-osgi,,,,,,,0,,,,,,"Start karaf 4.0.0

feature:repo-add mvn:org.apache.cxf.karaf/apache-cxf/3.1.1/xml/features
feature:repo-add mvn:org.apache.camel.karaf/apache-camel/2.15.2/xml/features
feature:install camel-core
feature:install -v wss4j

The last feature install causes the karaf shell to restart. The refreshed bundles list shows this:
    jline/2.12.1 (Wired to org.apache.camel.camel-core/2.15.2 which is being refreshed)
    org.apache.camel.camel-core/2.15.2 (Should be wired to: org.apache.servicemix.bundles.xalan/2.7.1.7 (through [org.apache.camel.camel-core/2.15.2] osgi.wiring.package; filter:=""(osgi.wiring.package=org.apache.xalan.xsltc.trax)""; resolution:=optional))

So this shows that the immediate reason is that jline was refreshed. As jline is used by the shell it also restarts.

Now it might seem strange that jline depends on camel-core. I had a similar issue in activemq-core Activator. It probed the classloaders of all bundles for well known interfaces to find extensions. I think camel-core does the same. The problem here is that jline has a dynamic import package: *. So the bundle classloader of jline is able to find any camel interface and will then have a wire to camel-core. So if then there is a refresh of camel-core it also will be refreshed.

This issue can hit all bundles that have a dynamic import package *. 

the solution is to not actually load interface classes but rather check the bundle wiring if there is a wiring to an interface package. This will then not change the wirings and so not cause these problems.

I will try to provide a fix for the problem.",,cschneider,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,KARAF-3888,,,CAMEL-9144,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 03 07:46:19 UTC 2015,,,,,,,,,,,"0|i2i9iv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Aug/15 10:01;cschneider;I have found a workaround at least in combination with jline. The newest snapshot of jline does not do a dynamic import anymore. So the console refresh does not happen. Still we should look into the problem in camel but it is less urgent.;;;","05/Aug/15 07:39;davsclaus;I wonder if the entries added to packageCapabilities should not be removed when the bundle is stopped? ;;;","05/Aug/15 08:06;cschneider;That makes sense. I just add a clear in the stop method.;;;","05/Aug/15 12:15;davsclaus;I suspect this caused everything to fail on Karaf 2.4.3.

Installing camel-example-osgi fails with

{code}
araf@root> Exception in thread ""SpringOsgiExtenderThread-2"" org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[timer://myTimer?fixedRate=true&period=20... because of Failed to resolve endpoint: timer://myTimer?fixedRate=true&period=2000 due to: No component found with scheme: timer
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1642)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:123)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:334)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:950)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)
	at java.lang.Thread.run(Thread.java:744)
Caused by: org.apache.camel.FailedToCreateRouteExcepti
{code};;;","05/Aug/15 12:29;davsclaus;Yes that is the problem. I am preparing a single squash commit that revert this so we can have it working again - especially for the 2.15.x branch as that is a patch branch.

Christian can you work on a solution that does not break Camel on Karaf. And please give it a test spin on more versions of Karaf.

Here is a quick way to test
{code}
karaf@root> features:chooseurl camel 2.16-SNAPSHOT
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.16-SNAPSHOT/xml/features
karaf@root> features:addUrl mvn:org.apache.camel/camel-example-osgi/2.16-SNAPSHOT/xml/features
karaf@root> features:install camel-example-osgi
karaf@root> log:tail -n 10
{code};;;","05/Aug/15 12:33;davsclaus;And for 2.15.x use 2.15.3-SNAPSHOT as version;;;","05/Aug/15 12:36;cschneider;I tested on karaf 3 and it worked fine. Please wait a bit with a revert. I will try to get it working on Karaf 2.4 too;;;","05/Aug/15 14:42;cschneider;Found one issue. It was the broken import for org.osgi.framework.* defined in camel parent again.
It tries to import a version of >= 1.5 for a ll packages. The packages there all have individual versions though. For org.osgi.framework.wiring we just need the 1.0 version and there is no 1.5 version at all.
Will change like in camel 2.16. 

This only makes camel start though .. Then I still see the issue you reported. Looking into it.;;;","05/Aug/15 15:50;cschneider;Also found the problem you reported now. Camel-core does not import the API so I missed it. As I only checked with the stream component that is external to camel-core I missed that.;;;","05/Aug/15 16:01;cschneider;I tested with your instructions on karaf 2.4.3 using camel 2.16-SNAPSHOT and 2.15.3-SNAPSHOT. Both should work fine now.
;;;","06/Aug/15 08:04;davsclaus;Thanks for the quick fix.

I do wonder if that clear is correct? Eg if a bundle is stopped, then it clears all of them, also entries that was added by other bundles that was started before hand? Should it not only remove the entries from the bundle that stopped, and not all of them ?;;;","06/Aug/15 08:14;cschneider;The Map<String, BundleCapability> packageCapabilities only contains the capabilties representing the packages that camel core exports. The map is only changed in cachePackageCapabilities and this is called only when camel core starts. 

When a bundle we track starts we just look up the capability for the package of the interface we check. So we do not store any data about the individual bundles. 

The clear on packageCapabilities is not even strictly necessary as we would just put the same capabilities on the next start but it is better to cleanup on stop.;;;","06/Aug/15 09:31;davsclaus;Thanks for the explanation;;;","06/Aug/15 09:34;davsclaus;Have you tried with cxf as a component?

All the tests in tests/camel-blueprint-cxf-test fails. Though not sure if its this recent change or the pojosr -> felix-connect;;;","03/Oct/15 07:46;davsclaus;Okay the tests in camel-blueprint-cxf-tests is now passing again with the recent fix of CAMEL-9144

Tests run: 13, Failures: 0, Errors: 0, Skipped: 0;;;",,,,,,,,,,,,,,,,,
Fix camel-example-cxf-osgi/blueprint examples,CAMEL-9043,12850657,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,trohovsky,trohovsky,trohovsky,31/Jul/15 17:58,03/Aug/15 10:07,14/Jul/23 05:50,03/Aug/15 10:02,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,examples,,,,,,,0,,,,,,Cannot deploy camel-example-cxf-osgi because of wrong Import-Package requirement. Expression for output filename is not evaluated properly in both examples.,,githubbot,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 03 10:01:12 UTC 2015,,,,,,,,,,,"0|i2i6wf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Jul/15 18:15;trohovsky;https://github.com/apache/camel/pull/582;;;","03/Aug/15 10:01;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/582
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
netty4-http - LEAK: ByteBuf.release() was not called before it's garbage-collected,CAMEL-9040,12850583,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,ralfsteppacher,ralfsteppacher,31/Jul/15 12:16,04/May/16 12:10,14/Jul/23 05:50,04/May/16 12:10,2.15.1,2.15.2,,,,,,,,,,,,,2.18.0,,,,camel-netty4-http,,,,,,,1,,,,,,"In a reverse-proxy with multiple routes that utilize the {{netty4-http}} component both as the consumer and producer I am receiving the following error:

{noformat}
2015-07-30 11:52:34,416 | ERROR | yServerTCPWorker | ResourceLeakDetector             | 97 - io.netty.common - 4.0.27.Final |   | LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.
{noformat}

Setting the Netty leak reporting to paranoid ({{-Dio.netty.leakDetectionLevel=paranoid}}) yields an error for almost every request (it probably is 1:1). 
The stacktraces come in two variants. Variant 1 is far less frequent than variant 2.

Variant 1:
{noformat}
Recent access records: 0
Created at:
io.netty.buffer.CompositeByteBuf.<init>(CompositeByteBuf.java:60)
io.netty.buffer.Unpooled.compositeBuffer(Unpooled.java:353)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:153)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:54)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
{noformat}

Variant 2:
{noformat}
Recent access records: 5
#5:
io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:223)
io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:684)
io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:40)
io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:677)
io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1493)
io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:40)
io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
java.io.BufferedInputStream.fill(BufferedInputStream.java:235)
java.io.BufferedInputStream.read1(BufferedInputStream.java:275)
java.io.BufferedInputStream.read(BufferedInputStream.java:334)
org.bouncycastle.util.io.TeeInputStream.read(Unknown Source)
com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
com.ctc.wstx.io.ReaderBootstrapper.initialLoad(ReaderBootstrapper.java:250)
com.ctc.wstx.io.ReaderBootstrapper.bootstrapInput(ReaderBootstrapper.java:133)
com.ctc.wstx.stax.WstxInputFactory.doCreateSR(WstxInputFactory.java:545)
com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:605)
com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:628)
com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:331)
ch.vivates.pep.stream.ResponseStatusFilter.filter(ResponseStatusFilter.java:41)
ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:141)
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
java.util.concurrent.FutureTask.run(FutureTask.java:262)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
java.lang.Thread.run(Thread.java:745)
#4:
io.netty.buffer.AdvancedLeakAwareByteBuf.release(AdvancedLeakAwareByteBuf.java:45)
io.netty.handler.codec.http.DefaultHttpContent.release(DefaultHttpContent.java:72)
io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:59)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:91)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
#3:
io.netty.buffer.AdvancedLeakAwareByteBuf.slice(AdvancedLeakAwareByteBuf.java:73)
io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:170)
io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:112)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:191)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:54)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
#2:
io.netty.buffer.AdvancedLeakAwareByteBuf.order(AdvancedLeakAwareByteBuf.java:63)
io.netty.buffer.CompositeByteBuf.addComponent0(CompositeByteBuf.java:170)
io.netty.buffer.CompositeByteBuf.addComponent(CompositeByteBuf.java:112)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:191)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:54)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
#1:
io.netty.buffer.AdvancedLeakAwareByteBuf.retain(AdvancedLeakAwareByteBuf.java:709)
io.netty.handler.codec.http.DefaultHttpContent.retain(DefaultHttpContent.java:60)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:190)
io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:54)
io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:242)
io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
Created at:
io.netty.buffer.UnpooledByteBufAllocator.newDirectBuffer(UnpooledByteBufAllocator.java:55)
io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:155)
io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:146)
io.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:107)
io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl.allocate(AdaptiveRecvByteBufAllocator.java:104)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:117)
io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
java.lang.Thread.run(Thread.java:745)
{noformat}

Variant 2 creates the buffer in {{UnpooledByteBufAllocator}}. Which might mean that there is no real resource leak in that case. Rather the coding pattern required for objects that might be pooled is not adhered to.
Nevertheless, running my load tests just long enough yields an OOME Direct buffer memory:

{noformat}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
        at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1635)[70:org.apache.camel.camel-core:2.15.2]
        at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:308)[70:org.apache.camel.camel-core:2.15.2]
        at org.apache.camel.component.netty4.handlers.ClientChannelHandler.exceptionCaught(ClientChannelHandler.java:81)[143:org.apache.camel.camel-netty4:2.15.2]
        at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:275)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:253)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:275)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:253)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.CombinedChannelDuplexHandler.exceptionCaught(CombinedChannelDuplexHandler.java:137)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:275)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:253)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.DefaultChannelPipeline.fireExceptionCaught(DefaultChannelPipeline.java:835)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.handleReadException(AbstractNioByteChannel.java:87)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:162)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)[138:io.netty.transport:4.0.27.Final]
        at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)[137:io.netty.common:4.0.27.Final]
        at java.lang.Thread.run(Thread.java:745)[:1.7.0_60]
Caused by: java.lang.OutOfMemoryError: Direct buffer memory
        at java.nio.Bits.reserveMemory(Bits.java:658)[:1.7.0_60]
        at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)[:1.7.0_60]
        at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:306)[:1.7.0_60]
        at io.netty.buffer.UnpooledUnsafeDirectByteBuf.allocateDirect(UnpooledUnsafeDirectByteBuf.java:108)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.UnpooledUnsafeDirectByteBuf.<init>(UnpooledUnsafeDirectByteBuf.java:69)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.UnpooledByteBufAllocator.newDirectBuffer(UnpooledByteBufAllocator.java:50)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:155)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:146)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:107)[139:io.netty.buffer:4.0.27.Final]
        at io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl.allocate(AdaptiveRecvByteBufAllocator.java:104)[138:io.netty.transport:4.0.27.Final]
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:117)[138:io.netty.transport:4.0.27.Final]
        ... 6 more
{noformat}

This is one of the routes that trigger the error:

{code:xml}
<route id=""pep-xds_b-registry"">
	<from uri=""netty4-http:http://{{pep.host}}:{{pep.xds.b.registry.port}}/XDS3/registry?matchOnUriPrefix=true&amp;disableStreamCache=true"" />
	<process ref=""registryInboundProcessor"" />
	<to uri=""netty4-http:http://{{xds.b.registry.host}}:{{xds.b.registry.port}}/XDS3/registry?bridgeEndpoint=true&amp;throwExceptionOnFailure=false&amp;chunkedMaxContentLength={{pep.xds.b.registry.max.message.size}}&amp;disableStreamCache=false"" />
	<!-- Unfortunately disabling the stream cache only works for requests, but not responses: https://issues.apache.org/jira/browse/CAMEL-7638 -->
	<process ref=""registryOutboundProcessor"" />
</route>
{code}",Karaf 3.0.3,acartapanis,davsclaus,frouleau,ralfsteppacher,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9940,CAMEL-8899,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 04 12:10:04 UTC 2016,,,,,,,,,,,"0|i2i6fz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Dec/15 11:00;frouleau;I have the same issue on camel 2.15.3 and Karaf 3.0.5 or Karaf 4.0.3;;;","09/Feb/16 09:50;davsclaus;Can you try with latest release?;;;","15/Feb/16 08:26;ralfsteppacher;[~davsclaus], thank you for your support! I will try to test, but as I have completely abandoned {{netty4-http}} in my projects I first need to set up a test. I hope I can do it some time this week, but cannot promise. ;;;","24/Mar/16 13:32;ralfsteppacher;Sorry for the long wait!

I tried with 2.16.2 and the problem persists. Though it appears it only shows under load now. When making single requests there are no errors. But when running my stress tests I start to get intermittent errors as before (with -Dio.netty.leakDetectionLevel=paranoid):

{noformat}
2016-03-24 14:28:08,486 | ERROR | qtp99151234-420  | ResourceLeakDetector             | 63 - io.netty.common - 4.0.33.Final | ID-Ralfs-MacBook-Pro-local-57997-1458825709312-5-15981  | LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 5
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:245)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:687)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:42)
	io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:694)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1496)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:42)
	io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
	com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
	com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
	com.ctc.wstx.io.MergedReader.read(MergedReader.java:105)
	com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:86)
	com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:56)
	com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:1001)
	com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:1046)
	com.ctc.wstx.sr.StreamScanner.getNextChar(StreamScanner.java:793)
	com.ctc.wstx.sr.BasicStreamReader.parseAttrValue(BasicStreamReader.java:1894)
	com.ctc.wstx.sr.BasicStreamReader.handleNsAttrs(BasicStreamReader.java:3065)
	com.ctc.wstx.sr.BasicStreamReader.handleStartElem(BasicStreamReader.java:2963)
	com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2839)
	com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1073)
	ch.vivates.pep.stream.ResponseStatusFilter.handleSimpleMessage(ResponseStatusFilter.java:61)
	ch.vivates.pep.stream.BaseStreamFilter.filter(BaseStreamFilter.java:168)
	ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:184)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	java.lang.Thread.run(Thread.java:745)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:245)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:687)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:42)
	io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:694)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1496)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:42)
	io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
	com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
	com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
	com.ctc.wstx.io.MergedReader.read(MergedReader.java:105)
	com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:86)
	com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:56)
	com.ctc.wstx.sr.StreamScanner.loadMoreFromCurrent(StreamScanner.java:1060)
	com.ctc.wstx.sr.StreamScanner.parseLocalName2(StreamScanner.java:1870)
	com.ctc.wstx.sr.StreamScanner.parseLocalName(StreamScanner.java:1830)
	com.ctc.wstx.sr.BasicStreamReader.handleStartElem(BasicStreamReader.java:2941)
	com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2839)
	com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1073)
	ch.vivates.pep.stream.ResponseStatusFilter.handleSimpleMessage(ResponseStatusFilter.java:61)
	ch.vivates.pep.stream.BaseStreamFilter.filter(BaseStreamFilter.java:168)
	ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:184)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	java.lang.Thread.run(Thread.java:745)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:245)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:687)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:42)
	io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:694)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1496)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:42)
	io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
	com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
	com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
	com.ctc.wstx.io.MergedReader.read(MergedReader.java:105)
	com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:86)
	com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:56)
	com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:1001)
	com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:1046)
	com.ctc.wstx.sr.StreamScanner.getNextChar(StreamScanner.java:793)
	com.ctc.wstx.sr.BasicStreamReader.parseAttrValue(BasicStreamReader.java:1894)
	com.ctc.wstx.sr.BasicStreamReader.handleNsAttrs(BasicStreamReader.java:3065)
	com.ctc.wstx.sr.BasicStreamReader.handleStartElem(BasicStreamReader.java:2963)
	com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2839)
	com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1073)
	ch.vivates.pep.stream.ResponseStatusFilter.handleSimpleMessage(ResponseStatusFilter.java:61)
	ch.vivates.pep.stream.BaseStreamFilter.filter(BaseStreamFilter.java:168)
	ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:184)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	java.lang.Thread.run(Thread.java:745)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:245)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:687)
	io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:42)
	io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:694)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1496)
	io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:42)
	io.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:120)
	java.io.BufferedInputStream.fill(BufferedInputStream.java:246)
	java.io.BufferedInputStream.read1(BufferedInputStream.java:286)
	java.io.BufferedInputStream.read(BufferedInputStream.java:345)
	com.ctc.wstx.io.BaseReader.readBytes(BaseReader.java:155)
	com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:368)
	com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:111)
	com.ctc.wstx.io.ReaderBootstrapper.initialLoad(ReaderBootstrapper.java:250)
	com.ctc.wstx.io.ReaderBootstrapper.bootstrapInput(ReaderBootstrapper.java:133)
	com.ctc.wstx.stax.WstxInputFactory.doCreateSR(WstxInputFactory.java:545)
	com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:605)
	com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:628)
	com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:331)
	ch.vivates.pep.stream.ResponseStatusFilter.handleSimpleMessage(ResponseStatusFilter.java:36)
	ch.vivates.pep.stream.BaseStreamFilter.filter(BaseStreamFilter.java:168)
	ch.vivates.pep.stream.BaseStreamFilter.run(BaseStreamFilter.java:184)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	java.lang.Thread.run(Thread.java:745)
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.release(AdvancedLeakAwareByteBuf.java:61)
	io.netty.handler.codec.http.DefaultHttpContent.release(DefaultHttpContent.java:72)
	io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:59)
	io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:91)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:318)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:304)
	io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:276)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:263)
	io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:318)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:304)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:112)
	java.lang.Thread.run(Thread.java:745)
Created at:
	io.netty.buffer.UnpooledByteBufAllocator.newDirectBuffer(UnpooledByteBufAllocator.java:56)
	io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:155)
	io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:146)
	io.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:107)
	io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl.allocate(AdaptiveRecvByteBufAllocator.java:104)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:117)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:112)
	java.lang.Thread.run(Thread.java:745)
{noformat};;;","04/May/16 09:15;davsclaus;Fixed a leak in the basic auth on the server side, and a few other spots. Its the producer side that seems to have the most common leak.;;;","04/May/16 12:10;davsclaus;You can now run the tests with a leak detector, with run-tests-leak.sh in the directory of the source code;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultJmsMessageListenerContainer leaks threads,CAMEL-9037,12850191,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,shpelda2,shpelda2,30/Jul/15 08:06,31/Jul/15 11:01,14/Jul/23 05:50,31/Jul/15 11:01,2.12.3,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-jms,,,,,,,0,,,,,,"Threads created by DefaultTaskExecutorType.ThreadPool at

org.apache.camel.component.jms.DefaultJmsMessageListenerContainer.createDefaultTaskExecutor()

are never stopped, as destroy method is never called on the ThreadPoolTaskExecutor",,shpelda2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-30 08:06:04.0,,,,,,,,,,,"0|i2i42f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unbind smpp connection bug ,CAMEL-9035,12850024,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,imranrazakhan,imranrazakhan,29/Jul/15 19:24,31/Jul/15 11:07,14/Jul/23 05:50,31/Jul/15 11:07,2.14.0,2.15.2,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-smpp,,,,,,,0,patch,,,,,"Suppose SMSC allowed one connection to client and due to any reason if session.unbindAndClose failed it will set session to null and dont retry to unbind. 

Connection/Session will remain open on SMSC till its TransactionTimeOut, mostly SMSc Admin set it to 5 to 10 mins. 

Following are snippet of org.apache.camel.component.smpp.SmppProducer and details are like 

1- if for any reason Camel try to unbind connection and it got failed below code print log and set session=null in both success/fail cases. 
2- After sending unbind it will try to reconnect. 
3- As SMSc allowed 1 connection which was not unbinded successfull it will not allowed second connection so reconnect will get failed. 
4- Camel call closesession on reconnection failure and will verify if session != null, as session is already null so this code will not send unbind again and apache camel will not able to get connection from SMSc until timeout happen on SMSc and this will results in 10 mins outage. 

If we change closeSession() like below 

current: 
{code}
private void  closeSession() { 
        if (session != null) { 
            session.removeSessionStateListener(this.internalSessionStateListener); 
            try { 
                Thread.sleep(1000); 
                session.unbindAndClose(); 
            } catch (Exception e) { 
              LOG.warn(""Could not close session "" + session); 
            } 

            session = null; 

        } 

    } 
{code}

Suggested: 
{code}
private void  closeSession() { 
        if (session != null) { 
            session.removeSessionStateListener(this.internalSessionStateListener); 
            try { 
                Thread.sleep(1000); 
                session.unbindAndClose(); 
                session = null; // if we put here then it will retry for unbind 
            } catch (Exception e) { 
              LOG.warn(""Could not close session "" + session); 
            } 
             session = null; // remove his line 
        } 
    } 
{code}",,davsclaus,imranrazakhan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 31 11:07:11 UTC 2015,,,,,,,Patch Available,,,,"0|i2i31r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Jul/15 11:07;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bean component - Should filter out abstract methods,CAMEL-9032,12849864,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/15 07:55,29/Jul/15 09:09,14/Jul/23 05:50,29/Jul/15 09:09,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-core,,,,,,,0,,,,,,"If you call a method on a bean then the introspector should filter out abstract methods if there is class inheritance with abstract defined methods.

See SO
http://stackoverflow.com/questions/31671894/camel-ambiguousmethodcallexception-abstract-classes",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-29 07:55:55.0,,,,,,,,,,,"0|i2i24n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dependency missing in camel-kafka feature,CAMEL-9031,12849837,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sabre1041,sabre1041,29/Jul/15 04:03,29/Jul/15 07:06,14/Jul/23 05:50,29/Jul/15 07:06,2.14.3,2.15.2,2.16.0,,,,,,,,,,,,2.15.3,2.16.0,,,camel-kafka,,,,,,,0,,,,,,"The following error occurs when deploying the camel-kafka feature

{code}
ERROR: Bundle rfid-ws-kafka-poc-bundle [270] EventDispatcher: Error during dispatch. (java.lang.NoClassDefFoundError: org/I0Itec/zkclient/serialize/ZkSerializer)
java.lang.NoClassDefFoundError: org/I0Itec/zkclient/serialize/ZkSerializer
	at kafka.javaapi.consumer.ZookeeperConsumerConnector.<init>(ZookeeperConsumerConnector.scala:66)
	at kafka.javaapi.consumer.ZookeeperConsumerConnector.<init>(ZookeeperConsumerConnector.scala:69)
	at kafka.consumer.Consumer$.createJavaConsumerConnector(ConsumerConnector.scala:105)
	at kafka.consumer.Consumer.createJavaConsumerConnector(ConsumerConnector.scala)
	at org.apache.camel.component.kafka.KafkaConsumer.doStart(KafkaConsumer.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2869)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3163)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3099)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3029)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:2797)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2653)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2467)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2463)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2463)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2432)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:180)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:212)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:150)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:943)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:794)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4445)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3431)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:353)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:682)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:377)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.ClassNotFoundException: org.I0Itec.zkclient.serialize.ZkSerializer not found by org.apache.servicemix.bundles.kafka_2.10 [266]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1556)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:77)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1993)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	... 58 more
{code}",,githubbot,sabre1041,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 29 07:06:23 UTC 2015,,,,,,,,,,,"0|i2i1yv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jul/15 04:21;githubbot;GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/576

    CAMEL-9031: Adding missing zkclient dependency from camel-kafka feature

    Dependency on zkclient added to camel-kafka feature

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-9031

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/576.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #576
    
----
commit d49b9c2f2a71eed93eeb0739a2d7165128a9a8b3
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-07-29T04:17:05Z

    CAMEL-9031: Adding missing zkclient dependency from camel-kafka feature

----
;;;","29/Jul/15 07:06;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/576
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The instructions for camel-example-box-osgi are incorrect,CAMEL-9030,12849680,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,trohovsky,trohovsky,trohovsky,28/Jul/15 17:34,28/Jul/15 19:45,14/Jul/23 05:50,28/Jul/15 19:45,2.15.2,,,,,,,,,,,,,,,,,,examples,,,,,,,0,,,,,,"Step 3 in the example's instructions reads as follows:

{quote}
3) Create a `box.properties` file in the Karaf working directory with the following properties set to your box account credentials.
{quote}
However, the camel-context.xml file sets up the PropertyPlaceholderConfigurer locations property to look for the ""box.com.properties"" file instead.

{code:xml}
<bean id=""placeholder"" class=""org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"">
   <property name=""locations"">
      <list>
        <value>file:box.com.properties</value>
      </list>
   </property>
   <property name=""ignoreResourceNotFound"" value=""true"" />
   <property name=""searchSystemEnvironment"" value=""true"" />
   <property name=""systemPropertiesModeName"" value=""SYSTEM_PROPERTIES_MODE_OVERRIDE"" />
</bean>
{code}",,githubbot,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 28 19:31:39 UTC 2015,,,,,,,,,,,"0|i2i11j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jul/15 17:36;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/574

    CAMEL-9030 The instructions for camel-example-box-osgi are incorrect

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-9030

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/574.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #574
    
----
commit 2879a446afba6a0f2674631a6f5c819fd6892d3d
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-07-28T17:37:40Z

    CAMEL-9030 The instructions for camel-example-box-osgi are incorrect

----
;;;","28/Jul/15 19:31;githubbot;Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/574
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JGroups managed routes can be started too early,CAMEL-9029,12849624,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,28/Jul/15 14:08,28/Jul/15 14:13,14/Jul/23 05:50,28/Jul/15 14:13,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,,,,,,,,0,,,,,,"{{JGroupsFilters#dropNonCoordinatorViews}} doesn't filter non-view messages properly which can cause the wrong route to be started. This issue was not so easy to detect, as usually the channels used for cluster management doesn't send any other messages, than view ones.",,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 28 14:13:27 UTC 2015,,,,,,,,,,,"0|i2i0pj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jul/15 14:13;hekonsek;Fixed and backported to 2.15.3.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sjms - Parse destinationName from endpointUri having colon in the name,CAMEL-9027,12849551,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cristi.tetic,cristi.tetic,28/Jul/15 08:46,29/Jul/15 09:08,14/Jul/23 05:50,29/Jul/15 09:08,2.15.2,,,,,,,,,,,,,,2.16.0,,,,camel-sjms,,,,,,,0,,,,,,"If jndi name of a topic or a queue contains "":"" (eg: /jms/test/hov.t1.dev:topic) the destination name won't be parsed correctly because of this code:

"" destinationName = getEndpointUri().substring(getEndpointUri().lastIndexOf("":"") + 1);""

inside class ""SjmsEndpoint"" line number 106.

",,cristi.tetic,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 29 07:59:43 UTC 2015,,,,,,,,,,,"0|i2i09j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jul/15 07:08;davsclaus;Its not really a good idea to use colons in JMS names.

;;;","29/Jul/15 07:59;cristi.tetic;I just received a topic to work with and I don't have rights to change the name.
As a workaround I have used SjmsEndpoint setDestinationName.
Also I don't have rights to created destination so I had to use a custom DestinationCreationStrategy.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException: kafka.serializer.StringEncoder,CAMEL-9026,12849345,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,tdiesler,tdiesler,27/Jul/15 15:19,29/Jul/15 20:37,14/Jul/23 05:50,27/Jul/15 15:41,,,,,,,,,,,,,,,2.16.0,,,,camel-kafka,,,,,,,0,,,,,,"KafkaEndpoint cannot load the StringEncoder because we do not expose the Kafka API to user code. It's an implementation detail of the camel-kafka component and only visible to that class loader

{code}
Caused by: java.lang.ClassNotFoundException: kafka.serializer.StringEncoder
	at org.apache.camel.impl.DefaultClassResolver.resolveMandatoryClass(DefaultClassResolver.java:80)
	at org.apache.camel.component.kafka.KafkaEndpoint.createProducer(KafkaEndpoint.java:83)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:431)
{code}",,acosentino,githubbot,mmindenhall,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 29 20:37:08 UTC 2015,,,,,,,,,,,"0|i2hz07:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jul/15 15:28;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/571

    [CAMEL-9026] ClassNotFoundException: kafka.serializer.StringEncoder

    https://issues.apache.org/jira/browse/CAMEL-9026

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-9026

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/571.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #571
    
----
commit fff0de295c954064b11f6375ffb84aa9dea9c26e
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-07-27T15:21:11Z

    [CAMEL-9026] ClassNotFoundException: kafka.serializer.StringEncoder

----
;;;","27/Jul/15 15:41;acosentino;Thank you very much Thomas :-);;;","28/Jul/15 07:18;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/571
;;;","28/Jul/15 21:05;mmindenhall;[~ancosen], [~tdiesler], I saw discussion of this go by in camel-dev, and have a couple of questions.

First, I'm concerned that this might have somehow been caused by the patch I submitted for CAMEL-8790.  However, there's a test in {{org.apache.camel.component.kafka.KafkaProducerFullTest}} that uses {{kafka.serializer.StringEncoder}}, and that test passes without this patch.  So I'm wondering if you can provide more details about the route configuration that resulted in the exception?

Second, the patch for CAMEL-8790 was backported to the 2.15.x branch...can this be backported as well?  It should merge cleanly, and if I was the cause, either this patch needs to be merged or my patch reverted from 2.15.x to avoid breaking things for existing 2.15.x users.

Thanks!
;;;","29/Jul/15 06:05;acosentino;Hi Mark. Yeah for sure, I will backport on 2.15.x branch in the evening. I forget to backport when I've merged the PR.;;;","29/Jul/15 07:59;tdiesler;[~ancosen] I suspect your run your test with a flat surefire classpath. In which case the test sees the transitive tree of mvn dependencies in scope test, provided, compile. If you do the same thing in a modular environment (i.e. wildfly) it would behave very differently. 

Although it is reasonable to assume that a deployment can see camel-kafka APIs, it is incorrect to assume that camel-kafka can use the deployments classloader to load internals that only camel-kafka should see.

The handling/caching of classloaders in Kafka is a tragedy as well as it reliance on a particular TCCL. An API that works well in a modular environment makes little assumptions about classloaders. Instead it provides the caller with a means to pass in a CL of its choice.

In this particular case, camel-kafka would want to pass to Kafka its own CL to load the StringEncoder;;;","29/Jul/15 08:41;acosentino;Hi Thomas, I think you were referring to Mark and not to me :-);;;","29/Jul/15 18:48;acosentino;Backported on branch 2.15.x :-);;;","29/Jul/15 20:37;mmindenhall;Thanks for the explanation...sounds like it was unrelated to my patch.;;;",,,,,,,,,,,,,,,,,,,,,,,
JacksonTypeConverter breaks CSV marshalling,CAMEL-9022,12849296,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,27/Jul/15 11:46,13/Aug/15 08:04,14/Jul/23 05:50,27/Jul/15 12:36,,,,,,,,,,,,,,,2.16.0,,,,,,,,,,,0,,,,,,"Marshalling a Map to CSV internally converts a Map to a List. It seems that the JacksonTypeConverters now claim to be able to this. It however fails with 

{code}
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.util.List with value {firstName=John, lastName=Doe} due java.lang.IllegalArgumentException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: N/A; line: -1, column: -1]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:585)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:131)
	at org.apache.camel.util.ExchangeHelper.convertToType(ExchangeHelper.java:203)
	at org.apache.camel.dataformat.csv.CsvMarshaller.marshal(CsvMarshaller.java:77)
	at org.apache.camel.dataformat.csv.CsvDataFormat.marshal(CsvDataFormat.java:78)
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:83)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:454)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:404)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:372)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:262)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:372)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:230)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:128)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:132)
	... 147 more
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: N/A; line: -1, column: -1]
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1642)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1247)
	at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:62)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:327)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:114)
	... 166 more
Caused by: java.lang.IllegalArgumentException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: N/A; line: -1, column: -1]
	at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3286)
	at com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:3212)
	at org.apache.camel.component.jackson.converter.JacksonTypeConverters.convertTo(JacksonTypeConverters.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)
	... 169 more
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: UNKNOWN; line: -1, column: -1]
	at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)
	at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:835)
	at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:831)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.handleNonArray(CollectionDeserializer.java:283)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:222)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:212)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:25)
	at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3281)
	... 176 more
{code}

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/784
",,davsclaus,tdiesler,,,,,,,,,,,,,,,,,,,,,,CAMEL-8554,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 27 12:55:53 UTC 2015,,,,,,,,,,,"0|i2hypr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jul/15 12:36;davsclaus;Fixed CAMEL-8554 to not be enabled by default.;;;","27/Jul/15 12:42;davsclaus;What is the test data you use for csv? Is it just a string or what data do you send to its marshal ?;;;","27/Jul/15 12:55;davsclaus;I also improved camel-csv to not do the list type conversion as that was wrong. It should iterate the body given in the marshal method as-is.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ManagedRuntimeEndpointRegistry was not enlisted in JMX,CAMEL-9019,12849152,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Jul/15 12:20,26/Jul/15 12:57,14/Jul/23 05:50,26/Jul/15 12:57,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-core,jmx,,,,,,0,,,,,,This is not enlisted as ManagedRuntimeEndpointRegistry but as event notifier because its also that instance.,,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-26 12:20:36.0,,,,,,,,,,,"0|i2hxuf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Hazelcast: HazelcastAggregationRepository::confirm should check useRecovery before using persistedCache,CAMEL-9017,12849147,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,26/Jul/15 09:03,26/Jul/15 10:25,14/Jul/23 05:50,26/Jul/15 10:25,,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-hazelcast,,,,,,,0,,,,,,"See Nabble:

http://camel.465427.n5.nabble.com/Bug-HazelcastIdempotentRepository-confirm-should-check-useRecovery-before-using-persistedCache-td5769887.html",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-26 09:03:55.0,,,,,,,,,,,"0|i2hxtb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel HTTP no longer supporting chunked transfer encoding with Tomcat,CAMEL-9013,12848908,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ukcrpb6,ukcrpb6,24/Jul/15 14:36,27/Jul/15 10:12,14/Jul/23 05:50,24/Jul/15 14:51,2.15.0,2.15.1,2.15.2,,,,,,,,,,,,2.15.3,,,,camel-http,camel-servlet,,,,,,0,,,,,,"When sending a chunked POST whilst running the servlet under Tomcat, camel now fails to read the input stream and sets the body to null.

[chunked-http-failure-test|https://github.com/ukcrpb6/chunked-http-failure-test]

This is due to camel checking the stream for available bytes introduced in CAMEL-5806. For whatever reason the CoyoteInputStream is returning 0 available bytes when handling a chunked request.

{code}
    if (len < 0) {
        InputStream is = request.getInputStream();
        if (is.available() == 0) {
            // no data so return null
            return null;
        }
    }
{code}
",,davsclaus,dkulp,prgp,ukcrpb6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 27 10:12:58 UTC 2015,,,,,,,,,,,"0|i2hwcv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Jul/15 15:25;ukcrpb6;Is there any commit available pertaining to this fix?;;;","24/Jul/15 15:42;davsclaus;Yes check the recent commits;;;","24/Jul/15 15:59;dkulp;The code is still calling ""is.available() == 0"" which is still wrong.   Per spec, available() does NOT return any information about whether the body has any data or not.  It only returns an estimate of the number of bytes that can be read without blocking.   Thus, the code is still wrong.  An http client can send the headers, flush the network connection, pause, then send the data.   If the call to available() occurs in the pause, available() would be 0.  ;;;","26/Jul/15 15:39;davsclaus;See CAMEL-8643;;;","27/Jul/15 08:56;ukcrpb6;This probably wont fix the issue for the servlet since the createConsumer method bypasses the getHttpBinding method it inherits.

{code}
        // ServletComponent.java # createConsumer

        // use the rest binding
        endpoint.setBinding(new ServletRestHttpBinding());
{code};;;","27/Jul/15 10:12;davsclaus;Thanks but it would not cause a problem as the default settings would not use that is.available check.

But I polished the code to inheirt those options on the binding also now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Olingo2's batch process generates the invalid request,CAMEL-9012,12848904,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,24/Jul/15 14:17,30/Jul/15 16:33,14/Jul/23 05:50,24/Jul/15 17:03,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-olingo2,,,,,,,0,,,,,,"The syntax check of olingo2 lib was tighten from version 2.0.1.
As a result, the batch message generated by camel-ollingo2's is rejected by olingo2 version 2.0.1 and newer.
Concretely, the current message includes two extra new lines within the batch part that is rejected by the olingo2 library.
OLINGO-739

We should remove these two extra lines.
",,ay,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-9038,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 24 17:03:54 UTC 2015,,,,,,,,,,,"0|i2hwbz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Jul/15 17:03;ay;Updated the camel-olingo2 code to work with a newer olingo's odata2 2.0.x library and against the 2.0.0 and more recent servers.

In another ticket, I will add a more practical test to this component that does not require manually setting up a separate test server.
regards, aki;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Yammer - Endpoint ""received"" does not work",CAMEL-9005,12848662,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,23/Jul/15 19:09,23/Jul/15 19:11,14/Jul/23 05:50,23/Jul/15 19:11,,,,,,,,,,,,,,,2.15.3,2.16.0,,,,,,,,,,0,,,,,,,,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-23 19:09:39.0,,,,,,,,,,,"0|i2huun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SJMS drops messages with null body even if allowNullBody is true,CAMEL-8989,12846344,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,20/Jul/15 19:39,20/Jul/15 19:47,14/Jul/23 05:50,20/Jul/15 19:47,,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-sjms,,,,,,,0,,,,,,,,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-20 19:39:05.0,,,,,,,,,,,"0|i2hgp3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't manually trigger quartz2 jobs,CAMEL-8988,12846331,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,20/Jul/15 19:03,20/Jul/15 19:37,14/Jul/23 05:50,20/Jul/15 19:37,,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-quartz2,,,,,,,0,,,,,,"Using org.quartz.Scheduler.triggerJob to manually trigger jobs will result in an exception like:

2015-07-20 16:17:28,295 [amel-1_Worker-1] ERROR CamelJob                       - Failed to execute CamelJob.
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: quartz2://MyTimer?cron=05+00+00+*+*+%3F due to: Trigger key Camel.MyTimer is already in use by Endpoint[quartz2://MyTimer?cron=05+00+00+*+*+%3F]

Problem is that CamelJob is having trouble with looking up the proper endpoint from a previously saved URI.",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-20 19:03:29.0,,,,,,,,,,,"0|i2hglr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BlueprintCamelContext OSGi service is not unregistered when context is stopped,CAMEL-8984,12846214,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,20/Jul/15 08:15,13/Aug/15 08:04,14/Jul/23 05:50,20/Jul/15 12:55,2.15.2,,,,,,,,,,,,,,2.16.0,,,,,,,,,,,0,,,,,,"{{org.apache.camel.core.osgi.OsgiCamelContextPublisher}} doesn't receive {{CamelContextStoppingEvent}} because {{org.apache.camel.util.EventHelper#doNotifyEvent()}} checks for {{started}} state and {{org.apache.camel.core.osgi.OsgiCamelContextPublisher}} is never started.
",,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-3381,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 20 12:55:19 UTC 2015,,,,,,,,,,,"0|i2hfw7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Jul/15 08:21;ggrzybek;In camel-test-blueprint tests I had problems with two separate ({{camel-1}} and {{camel-2}}) camel contexts available as OSGi services. When config admin configurations were updated twice, I had 3 services.;;;","20/Jul/15 12:55;ggrzybek;Resolved [here|https://github.com/apache/camel/commit/9aa1ab935a24f210a8592e08a34fc6cc5ed10eea];;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Setting of SOAP headers via the Camel Header ""org.apache.cxf.headers.Header.list"" not working for CXF data format ""PAYLOAD"" ",CAMEL-8978,12845816,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,forsthofer,forsthofer,17/Jul/15 07:22,13/Aug/15 08:04,14/Jul/23 05:50,22/Jul/15 13:53,2.14.3,2.15.2,,,,,,,,,,,,,2.16.0,,,,camel-cxf,,,,,,,0,,,,,,"In the camel-cxf documentation https://camel.apache.org/cxf.html is described in the chapter ""How to deal with the message for a camel-cxf endpoint in PAYLOAD data format"" that ""You can use the Header.HEADER_LIST as the key to set or get the SOAP headers"".

But this only works for getting SOAP headers.

If you want to set SOAP headers via the Camel header Header.HEADER_LIST, the headers are not taken into account in the CXF-to-endpoint.

I analysed the problem and found out that 
- the SOAP header list is forwarded to the CXF request context 
- that this header list is overwritten in CxfEndpoint.CamelCxfClientImpl by the CxfPayload.getHeaders() value.

My suggestion is that we merge the headers from the Camel header and the the CXF payload in CxfEndpoint.CamelCxfClientImpl. See the attached patch.

With the merging  we cover all different use cases:
- the headers can be set in the CxfPayload
- the headers can be set in the Camel header Header.list
- the headers can be set in the CXFPayload and the CamelHeader Header.list.

Also the case where the list instance in the CxfPayload is the same as in the Camel header (in this case no merge is necessary) is covered. This case happens if the from-endpoint is also a CXF endpoint and the CXF payload is forwarded to the to-CXF-endpoint.

I can commit the change. However, before I do it I want to have the agreement from the CXF experts.",,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Jul/15 07:23;forsthofer;0001-Setting-SOAP-header-in-payload-case-via-camel-header.patch;https://issues.apache.org/jira/secure/attachment/12745784/0001-Setting-SOAP-header-in-payload-case-via-camel-header.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 22 13:54:22 UTC 2015,,,,,,,Patch Available,,,,"0|i2hdi7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Jul/15 13:53;forsthofer;I have fixed the issue only in 2.16 because there is another way described in the documentation: You can use CxfPayload.getHeaders() to set SOAP headers in the payload list.

Nevertheless, with this improvement you can now also use the Camel Header.;;;","22/Jul/15 13:54;forsthofer;I updated also the wiki.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Karaf Camel command for route profile has karaf rbac problem,CAMEL-8967,12844893,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Jul/15 07:45,14/Jul/15 07:57,14/Jul/23 05:50,14/Jul/15 07:57,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,karaf,,,,,,,0,,,,,,"Its that darn rbac stuff that they make to strict that a system bundle like camel-karaf-commands cannot even call a operation on a mbean. It has bitten so many users - darn you!

{code}
2015-07-14 09:46:17,770 | ERROR | l Console Thread | Console                          | ?                                   ? | 17 - org.apache.karaf.shell.console - 2.4.2 | Exception caught while executing command
javax.management.MBeanException: RuntimeException thrown in RequiredModelMBean while trying to invoke operation dumpRouteStatsAsXml
	at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1282)[:1.7.0_45]
	at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:1081)[:1.7.0_45]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)[:1.7.0_45]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)[:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_45]
	at org.apache.karaf.management.boot.KarafMBeanServerBuilder$MBeanInvocationHandler.invoke(KarafMBeanServerBuilder.java:80)[karaf-jmx-boot.jar:]
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)[:]
	at org.apache.camel.commands.AbstractLocalCamelController.getRouteStatsAsXml(AbstractLocalCamelController.java:376)
	at org.apache.camel.commands.RouteProfileCommand.executeOnRoute(RouteProfileCommand.java:63)
	at org.apache.camel.commands.AbstractRouteCommand.execute(AbstractRouteCommand.java:56)
	at org.apache.camel.karaf.commands.RouteProfile.doExecute(RouteProfile.java:36)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)
	at sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_45]
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)[11:org.apache.aries.proxy.impl:1.0.4]
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)[11:org.apache.aries.proxy.impl:1.0.4]
	at org.apache.karaf.shell.console.commands.$BlueprintCommand216744734.execute(Unknown Source)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)[17:org.apache.karaf.shell.console:2.4.2]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:195)[17:org.apache.karaf.shell.console:2.4.2]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: java.lang.SecurityException: Insufficient roles/credentials for operation
	at org.apache.karaf.management.KarafMBeanServerGuard.handleInvoke(KarafMBeanServerGuard.java:301)
	at org.apache.karaf.management.KarafMBeanServerGuard.handleGetAttribute(KarafMBeanServerGuard.java:221)
	at org.apache.karaf.management.KarafMBeanServerGuard.invoke(KarafMBeanServerGuard.java:89)
	at org.apache.karaf.management.boot.KarafMBeanServerBuilder$MBeanInvocationHandler.invoke(KarafMBeanServerBuilder.java:63)[karaf-jmx-boot.jar:]
	at com.sun.proxy.$Proxy0.getAttribute(Unknown Source)[:]
	at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:267)[:1.7.0_45]
	at com.sun.proxy.$Proxy41.getRouteId(Unknown Source)
	at org.apache.camel.management.mbean.ManagedRoute.dumpRouteStatsAsXml(ManagedRoute.java:294)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_45]
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:75)[:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_45]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_45]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_45]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_45]
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:279)[:1.7.0_45]
	at javax.management.modelmbean.RequiredModelMBean$4.run(RequiredModelMBean.java:1249)[:1.7.0_45]
	at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_45]
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)[:1.7.0_45]
	at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1243)[:1.7.0_45]
	... 30 more
{code}

Also karaf do not log the command that caused this, it just says error while executing command.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-14 07:45:06.0,,,,,,,,,,,"0|i2h81b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext - API for control routes may cause Route not to update it state,CAMEL-8964,12844884,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Jul/15 06:59,14/Jul/15 07:58,14/Jul/23 05:50,14/Jul/15 07:58,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-core,,,,,,,0,,,,,,"See CAMEL-8963

Its the Route instance that do not update it state as well. But the RouteService has the correct state. So one can be Started and the other Suspended.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 14 07:09:04 UTC 2015,,,,,,,,,,,"0|i2h7zb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Jul/15 07:09;davsclaus;This is only a problem for suspend/resume state. The other works.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel:route-suspend karaf command doesn't work as expected,CAMEL-8963,12844871,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cp123,cp123,14/Jul/15 05:47,14/Jul/15 07:58,14/Jul/23 05:50,14/Jul/15 07:58,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,karaf,,,,,,,0,,,,,,"In previous versions of camel (2.13.2 for sure) it was possible to use camel:route-suspend command and specify route id only. In 2.15.2 its not possible anymore. For example:

{code}
karaf@root()> camel:route-list
 Context                           Route                                  Status
 -------                           -----                                  ------
 fi-remurex-cpty-context           fi-remurex-institution-queue           Started
karaf@root()> camel:route-suspend fi-remurex-institution-queue
Error executing command camel: route-suspend: argument context is required
{code}

At the same time, on <tab> key camel:route-suspend command still suggests route, but not context as second parameter. Used route id is unique, so I don't think its a good idea to ask for context in this case.

karaf 3.0.4, camel 2.15.2.",,cp123,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 14 07:58:14 UTC 2015,,,,,,,,,,,"0|i2h7wf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Jul/15 05:51;cp123;BTW, when I specify both route id and context id, I got no error messages, but route is still started. So this is also another bug probably.;;;","14/Jul/15 05:56;cp123;hawtio, at the same time, shows that route is suspended.;;;","14/Jul/15 06:09;davsclaus;The context id must be specified. You can use tab completion for the context-id.

If you look in the log with log:display it should say if the route is suspended/stopped etc, dont you see that?;;;","14/Jul/15 06:14;cp123;Yes, I can see log message that route was suspended. Just route-list displays wrong status after suspending.

And of course, there is no problem to specify context (just a bit inconvenient when route id is unique), but looks like tab completion doesn't work. 
;;;","14/Jul/15 06:51;davsclaus;Yeah its a bug in the commands got that fixed now
{code}
karaf@root> camel:route-list
 Context        Route          Status
 -------        -----          ------
 camel-1        route1         Started
 camel-2        route2         Started
karaf@root> camel:route-suspend route
route1   route2
karaf@root> camel:route-suspend route1 camel-1
karaf@root> camel:route-list
 Context        Route          Status
 -------        -----          ------
 camel-1        route1         Suspended
 camel-2        route2         Started
{code};;;","14/Jul/15 07:32;davsclaus;And yeah the 2nd completer didnt work I am fixing that too.;;;","14/Jul/15 07:41;davsclaus;Ah great I found a way to make the 2nd parameter optional, so you can just do by route id, and it also support * as wildcard, so you can do bulk operations.;;;","14/Jul/15 07:43;cp123;Claus, it *was* optional in 2.13.2, I've always used this command w/o context id.;;;","14/Jul/15 07:58;davsclaus;Yes but 2.13.x is old and the commands has been reworked to allow reuse for outside karaf and added more commands and whatnot.;;;",,,,,,,,,,,,,,,,,,,,,,,
Lock information is not handovered together with Exchange on-completion synchronizations,CAMEL-8954,12844423,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,andy.fedotov,andy.fedotov,12/Jul/15 11:01,16/Jul/15 19:49,14/Jul/23 05:50,16/Jul/15 19:49,2.14.3,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-core,,,,,,,0,,,,,,"This applies to the file components when using common read-lock strategies:

- *markerFile* - org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy
- *fileLock* - org.apache.camel.component.file.strategy.FileLockExclusiveReadLockStrategy

This strategies stores lock information in the Exchange properties:

- *Exchange.FILE_LOCK_FILE_ACQUIRED* == ""CamelFileLockFileAcquired""
- *Exchange.FILE_LOCK_FILE_NAME* == ""CamelFileLockFileName""
- *Exchange.FILE_LOCK_EXCLUSIVE_LOCK* == ""CamelFileLockExclusiveLock""
- *Exchange.FILE_LOCK_RANDOM_ACCESS_FILE* == ""CamelFileLockRandomAccessFile""

Lock information is stored as scalar values and can hold information about _only one single lock_.

When there are two Exchanges participates in the route, share UoW, and synchronizations are handovered from one Exchange to another, information about both locks can't be stored in the Exchange properties and lost. Consequently when on-completion synchronizations are performed, read-lock strategies can't access information about all the locks and they are not released.

For example, after completing this route lock for file1.dat is not released:
{code:java}
from(""file:data/input-a?fileName=file1.dat&readLock=markerFile"")
    .pollEnrich(""file:data/input-b?fileName=file2.dat&readLock=markerFile"")
    .to(""mock:result"");
{code}
",,andy.fedotov,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/Jul/15 11:03;andy.fedotov;MarkerFileExclusiveReadLockStrategyUnlockTest.java;https://issues.apache.org/jira/secure/attachment/12744926/MarkerFileExclusiveReadLockStrategyUnlockTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 16 17:33:51 UTC 2015,,,,,,,,,,,"0|i2h59z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Jul/15 11:03;andy.fedotov;Added unit test - [^MarkerFileExclusiveReadLockStrategyUnlockTest.java];;;","12/Jul/15 14:06;davsclaus;This is not really intended to do such use-case. ;;;","12/Jul/15 17:16;andy.fedotov;Currently in our project we actively use file/sftp components and similar use-cases with poll-enrich pattern. There are no any problem with locking because it is not needed at all, we are using *readLock=none*.

Maybe this has no really serious impact and has no actual use-cases, but such locking strategy design seems slightly wrong. When I tried to implement my own custom processor bean to handle poll-enrich, I also tried to figure out how to +correctly+ deal with Exchange UoW and synchronizations, and stumbled on this problem. I thought that I was doing something wrong, because lock files are not gone after route completion.

Just in case, I also stuck on that MarkerFileExclusiveReadLockStrategy is intended as kind of cross-route/JVM lock sharing. But MarkerFileExclusiveReadLockStrategy.prepareOnStartup() is blindly deletes all created *.camelLock files on every Consumer creation and startup.
;;;","12/Jul/15 17:55;davsclaus;Now its not, see the documentation about readLock and the warning section: http://camel.apache.org/file2;;;","14/Jul/15 15:16;davsclaus;I though we had an option to turn of deleting orphan lock files, but didn't so I logged a ticket:
https://issues.apache.org/jira/browse/CAMEL-8970;;;","16/Jul/15 17:33;davsclaus;Yeah the state should really be per file, so when you poll in that 2nd file, it wont override state from the 1st file. Thanks for the suggestion and the unit test.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
RecipientList with RAW parameter do not work,CAMEL-8951,12844186,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Jul/15 14:29,11/Jul/15 06:18,14/Jul/23 05:50,11/Jul/15 06:18,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-core,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/java-net-URISyntaxException-using-recipientList-tp5769103.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-10 14:29:56.0,,,,,,,,,,,"0|i2h3tr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Injected Quartz2 scheduler doesn't have access to CamelContext in jobs,CAMEL-8950,12844182,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,10/Jul/15 14:16,10/Jul/15 14:19,14/Jul/23 05:50,10/Jul/15 14:19,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,,,,,,,,0,,,,,,"Currently if you inject a scheduler the CamelContext won't be available for jobs to access. When the scheduler is created automatically, the context is added to the quartz scheduler context so the jobs can access it:

quartzContext.put(QuartzConstants.QUARTZ_CAMEL_CONTEXT + ""-"" + camelContextName, getCamelContext());
",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 10 14:19:45 UTC 2015,,,,,,,,,,,"0|i2h3sv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jul/15 14:19;janstey;https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=4fc73b4cde1b0f6e8d57e4a9c32377e118dcb69e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Netty 3 component spins on receiving TCP RST,CAMEL-8949,12844173,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,10/Jul/15 13:42,10/Jul/15 13:55,14/Jul/23 05:50,10/Jul/15 13:55,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,,,,,,,,0,,,,,,"When receiving a TCP RST, Netty 3 goes into a deep recursion identified by a stack something like:
{code}
[Camel Thread #1 - NettyServerTCPWorker] WARN  org.apache.camel.component.netty.http.NettyHttpConsumer  - HttpServerChannelHandler is not found as attachment to handle exception, send 404 back to the client.
java.io.IOException: Broken pipe
	at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:51)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:487)
	at org.jboss.netty.channel.socket.nio.SocketSendBufferPool$UnpooledSendBuffer.transferTo(SocketSendBufferPool.java:203)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:201)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.exceptionCaught(SimpleChannelUpstreamHandler.java:153)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.exceptionCaught(FrameDecoder.java:377)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:112)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireExceptionCaught(Channels.java:525)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.write0(AbstractNioWorker.java:291)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromUserCode(AbstractNioWorker.java:146)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.handleAcceptedSocket(NioServerSocketPipelineSink.java:99)
	at org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.eventSunk(NioServerSocketPipelineSink.java:36)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:779)
	at org.jboss.netty.channel.Channels.write(Channels.java:725)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.doEncode(OneToOneEncoder.java:71)
	at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:59)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:591)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:582)
	at org.jboss.netty.channel.Channels.write(Channels.java:704)
	at org.jboss.netty.channel.Channels.write(Channels.java:671)
	at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:248)
	at org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.exceptionCaught(HttpServerMultiplexChannelHandler.java:142)
...
{code}
It isn't a problem for Netty 4 and also if you set orderedThreadPoolExecutor=true it works for Netty 3 as well.
",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 10 13:55:44 UTC 2015,,,,,,,,,,,"0|i2h3qv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jul/15 13:55;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/821bddf5;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loop - Should break out looping if exception happened during routing,CAMEL-8945,12843844,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Jul/15 11:38,09/Jul/15 11:46,14/Jul/23 05:50,09/Jul/15 11:46,2.15.2,,,,,,,,,,,,,,2.14.4,2.15.3,2.16.0,,camel-core,eip,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/31312281/apache-camel-loop-does-not-stop-on-exception

",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-09 11:38:32.0,,,,,,,,,,,"0|i2h1rr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mail consumer (imap) polls continuously (not using the default polling interval),CAMEL-8933,12842756,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bocamel,bocamel,06/Jul/15 00:05,06/Jul/15 09:18,14/Jul/23 05:50,06/Jul/15 09:18,2.15.0,2.15.1,2.15.2,,,,,,,,,,,,2.15.3,2.16.0,,,camel-mail,,,,,,,0,,,,,,"The mail consumer (at least IMAP) would poll email continuously unless the consumer.delay is explicitly set.  Below is the IMAP debug log.  It should stop at A6 instead of continuing indefinitely.   This does not happen with 2.14.x.

2015-07-05 20:04:02,534 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Connecting to MailStore: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG: getProvider() returning javax.mail.Provider[STORE,imaps,com.sun.mail.imap.IMAPSSLStore,Oracle]
DEBUG IMAPS: mail.imap.fetchsize: 16384
DEBUG IMAPS: mail.imap.ignorebodystructuresize: false
DEBUG IMAPS: mail.imap.statuscachetimeout: 1000
DEBUG IMAPS: mail.imap.appendbuffersize: -1
DEBUG IMAPS: mail.imap.minidletime: 10
DEBUG IMAPS: trying to connect to host ""imap.gmail.com"", port 993, isSSL true
* OK Gimap ready for requests from 76.108.169.41 k7mb499616512ywc
A0 CAPABILITY
* CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 XYZZY SASL-IR AUTH=XOAUTH2 AUTH=PLAIN AUTH=PLAIN-CLIENTTOKEN AUTH=XOAUTH
A0 OK Thats all she wrote! k7mb499616512ywc
DEBUG IMAPS: AUTH: XOAUTH2
DEBUG IMAPS: AUTH: PLAIN
DEBUG IMAPS: AUTH: PLAIN-CLIENTTOKEN
DEBUG IMAPS: AUTH: XOAUTH
DEBUG IMAPS: protocolConnect login, host=imap.gmail.com, user=test@e-bonding.com, password=<non-null>
DEBUG IMAPS: AUTHENTICATE PLAIN command trace suppressed
DEBUG IMAPS: AUTHENTICATE PLAIN command result: A1 OK test@e-bonding.com authenticated (Success)
A2 CAPABILITY
* CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 UIDPLUS COMPRESS=DEFLATE ENABLE MOVE CONDSTORE ESEARCH UTF8=ACCEPT
A2 OK Success
2015-07-05 20:04:03,120 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Getting folder INBOX
A3 LIST """" INBOX
* LIST (\HasNoChildren) ""/"" ""INBOX""
A3 OK Success
2015-07-05 20:04:03,162 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Polling mailbox folder: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG IMAPS: connection available -- size: 1
A4 SELECT INBOX
* FLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing)
* OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing \*)] Flags permitted.
* OK [UIDVALIDITY 1] UIDs valid.
* 53 EXISTS
* 0 RECENT
* OK [UIDNEXT 294] Predicted next UID.
* OK [HIGHESTMODSEQ 85418]
A4 OK [READ-WRITE] INBOX selected. (Success)
A5 SEARCH UNSEEN ALL
* SEARCH
A5 OK SEARCH completed (Success)
2015-07-05 20:04:03,272 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Fetching 0 messages. Total 0 messages.
2015-07-05 20:04:03,272 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Close mailbox folder INBOX from imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
A6 CLOSE
A6 OK Returned to authenticated state. (Success)
DEBUG IMAPS: added an Authenticated connection -- size: 1
DEBUG IMAPS: IMAPProtocol noop
A7 NOOP
A7 OK Success
2015-07-05 20:04:03,880 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Polling mailbox folder: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG IMAPS: connection available -- size: 1
A8 SELECT INBOX
* FLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing)
* OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing \*)] Flags permitted.
* OK [UIDVALIDITY 1] UIDs valid.
* 53 EXISTS
* 0 RECENT
* OK [UIDNEXT 294] Predicted next UID.
* OK [HIGHESTMODSEQ 85418]
A8 OK [READ-WRITE] INBOX selected. (Success)
A9 SEARCH UNSEEN ALL
* SEARCH
A9 OK SEARCH completed (Success)
2015-07-05 20:04:04,003 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Fetching 0 messages. Total 0 messages.
2015-07-05 20:04:04,004 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Close mailbox folder INBOX from imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
A10 CLOSE
A10 OK Returned to authenticated state. (Success)
DEBUG IMAPS: added an Authenticated connection -- size: 1
DEBUG IMAPS: IMAPProtocol noop
A11 NOOP
A11 OK Success
2015-07-05 20:04:04,572 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Polling mailbox folder: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG IMAPS: connection available -- size: 1
A12 SELECT INBOX
* FLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing)
* OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing \*)] Flags permitted.
* OK [UIDVALIDITY 1] UIDs valid.
* 53 EXISTS
* 0 RECENT
* OK [UIDNEXT 294] Predicted next UID.
* OK [HIGHESTMODSEQ 85418]
A12 OK [READ-WRITE] INBOX selected. (Success)
A13 SEARCH UNSEEN ALL
* SEARCH
A13 OK SEARCH completed (Success)
2015-07-05 20:04:04,665 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Fetching 0 messages. Total 0 messages.
2015-07-05 20:04:04,665 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Close mailbox folder INBOX from imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
A14 CLOSE
A14 OK Returned to authenticated state. (Success)
DEBUG IMAPS: added an Authenticated connection -- size: 1
DEBUG IMAPS: IMAPProtocol noop
A15 NOOP
A15 OK Success
2015-07-05 20:04:05,232 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Polling mailbox folder: imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
DEBUG IMAPS: connection available -- size: 1
A16 SELECT INBOX
* FLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing)
* OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $NotPhishing $Phishing \*)] Flags permitted.
* OK [UIDVALIDITY 1] UIDs valid.
* 53 EXISTS
* 0 RECENT
* OK [UIDNEXT 294] Predicted next UID.
* OK [HIGHESTMODSEQ 85418]
A16 OK [READ-WRITE] INBOX selected. (Success)
A17 SEARCH UNSEEN ALL
* SEARCH
A17 OK SEARCH completed (Success)
2015-07-05 20:04:05,357 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Fetching 0 messages. Total 0 messages.
2015-07-05 20:04:05,358 [0 - imaps://imap.gmail.com:993] DEBUG MailConsumer                   - Close mailbox folder INBOX from imaps://imap.gmail.com:993 (SSL enabled), folder=INBOX
A18 CLOSE
A18 OK Returned to authenticated state. (Success)
DEBUG IMAPS: added an Authenticated connection -- size: 1",,bocamel,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 06 09:18:25 UTC 2015,,,,,,,,,,,"0|i2gv5z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Jul/15 09:18;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ahc-ws - Do not swallow exception when connecting,CAMEL-8927,12842270,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Jul/15 09:42,02/Jul/15 09:44,14/Jul/23 05:50,02/Jul/15 09:44,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-ahc,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-Websocket-Connection-key-not-set-tp5766728p5766730.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-07-02 09:42:32.0,,,,,,,,,,,"0|i2gs8v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Kafka: Topic name lookup from message headers in the producer causes infinite loop,CAMEL-8923,12841928,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rahulj51,rahulj51,01/Jul/15 08:21,04/Sep/15 08:28,14/Jul/23 05:50,01/Jul/15 15:20,2.15.1,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-kafka,,,,,,,0,,,,,,"Refer changes done for CAMEL-7331

The change causes a critical bug.
For a camel route as follows:
{code}
from(""kafka://<broker>?topic=T1"")
.process(myProcessor)
.to(""kafka://<broker>?topic=T2"")
{code}
KafkaExchange will be created by KafkaConsumer and the topic will be set to ""T1"" in the header.
For the 'to' endpoint, KafkaProducer will try to read the topic from the exchange header which is still ""T1"" instead of ""T2"" thereby causing an infinite loop.

As discussed in user-group, a different header should be used to read the topic name from message. ",,njiang,rahulj51,raulvk,,,,,,,,,,,,,,,,,CAMEL-9108,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 02 22:24:54 UTC 2015,,,,,,,,,,,"0|i2gq6f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Jul/15 08:33;njiang;You can workaround this issue by removing the topic header before sending the message to another topic.
We can add bridgeEndpoint option to let the producer ignore the topic header to fix this kind of issue.
{code}
from(""kafka://<broker>?topic=T1"")
.process(myProcessor)
.removeHeader(""kafka.TOPIC"")
.to(""kafka://<broker>?topic=T2"")
{code};;;","01/Jul/15 08:42;rahulj51;Yes. For now, I am doing exactly that. ;;;","01/Jul/15 15:20;njiang;Added the option of bridgeEndpoint.;;;","02/Sep/15 22:24;raulvk;Backported to 2.15.4.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support autoCreate=true in ftp/ftps/sftp consumers,CAMEL-8916,12841278,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,29/Jun/15 09:17,29/Jun/15 10:20,14/Jul/23 05:50,29/Jun/15 10:20,2.15.2,,,,,,,,,,,,,,2.16.0,,,,camel-ftp,,,,,,,0,,,,,,"{{GenericFileEndpoint}} supports {{autoCreate}} option. It may be used to create necessary path for fileconsumer and producers for file/ftp/ftps/sftp endpoints.
This flag however isn't used for ftp/ftps/sftp consumers.",,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 29 10:20:33 UTC 2015,,,,,,,,,,,"0|i2gm73:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jun/15 10:20;ggrzybek;Resolved [here|https://github.com/apache/camel/commit/162f3a5cfdfe713083b2d9b3c105ae6c0ad08d94] in {{master}} branch for 2.16.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to shutdown endpoint when intercepted with interceptSendToEndpoint,CAMEL-8914,12841258,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gterral,gterral,29/Jun/15 07:49,01/Jul/15 09:17,14/Jul/23 05:50,01/Jul/15 09:17,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,,,,,,,,0,,,,,,"I'm facing an issue with the version of camel 2.15.2 

I have a component that create an endpoint. 

This endpoint override the shutdown and doShutdown method so we can log values at shutdown time. 

But when this endpoint is intercept with the interceptSendToEnpoint method the shutdown is not called. 

Here is an example of code to reproduce: 

the Component: 
public class CustomComponent extends DefaultComponent {

        @Override
        protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
            return new CustomEndpoint();
        }
    }

the Endpoint: 
    public class CustomEndpoint extends DefaultEndpoint {

        @Override
        public Producer createProducer() throws Exception {
            return new DefaultProducer(this) {
                @Override
                public void process(Exchange exchange) throws Exception {
                    log.info(exchange.getExchangeId());
                }
            };
        }

        @Override
        public Consumer createConsumer(Processor processor) throws Exception {
            return null;
        }

        @Override
        public boolean isSingleton() {
            return false;
        }

        @Override
        public void shutdown() throws Exception {
            super.shutdown();
            System.out.println(""SHUTDOWN"");
        }

        @Override
        protected void doShutdown() throws Exception {
            super.doShutdown();
            System.out.println(""do SHUTDOWN"");
        }

        @Override
        protected String createEndpointUri() {
            return ""myEndpoint"";
        }
    }

the route: 
public class MyRoute extends RouteBuilder {

        @Override
        public void configure() {
            try {
                getContext().addComponent(""myEndpoint"", new CustomComponent());
            } catch (Exception e) {
                e.printStackTrace();
            }
            interceptSendToEndpoint(""myEndpoint:producer"")
                    .log(""INTERCEPTED"");

            from(""direct:murex"").routeId(""Trade Repository Route"")
                 .to(""myEndpoint:producer"");
        }
    }

When there is an interceptor the shutdown on the endpoint is not called, when there is no interceptor the shutdown is called. 

After some debugging I noticed that in the DefaultCamelContext at the shutdown time the shutdown is called on the list of endpoints, when there is an interceptor the list do not contain the CustomEnpoint but only the Interceptor, and because the interceptor does not implement ShutdownableAware the shutdown is not propagate to the underlying endpoint (here the CustomEndpoint) 

Without the interceptor the CustomEndpoint appears in the list and the shutdown method is called. ",,davsclaus,gterral,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 01 09:17:17 UTC 2015,,,,,,,,,,,"0|i2gm2n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Jul/15 09:17;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Examples are missing from Camel doc pages,CAMEL-8911,12841187,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jsherman1,jsherman1,28/Jun/15 17:17,01/Jul/15 07:14,14/Jul/23 05:50,01/Jul/15 07:14,,,,,,,,,,,,,,,,,,,documentation,,,,,,,0,,,,,,"The examples on the Camel documentation are missing.  For example, the Camel Tracer [1], Camel Redelivery [2], and Camel Blueprint Test [3] just to name a few.  This appears to affect all the current Camel Docs.

[1] http://camel.apache.org/tracer.html
[2] http://camel.apache.org/redeliverypolicy.html
[3] http://camel.apache.org/blueprint-testing.html",,jsherman1,,,,,,,,,,,,,,,,,,,,,,,AMQ-5866,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 29 18:09:36 UTC 2015,,,,,,,,,,,"0|i2gln3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jun/15 18:07;jsherman1;The follow thread has been opened on this issue as well in Camel User Forum:

http://camel.465427.n5.nabble.com/Camel-website-is-not-showing-the-code-blocks-td5768644.html#a5768689;;;","29/Jun/15 18:09;jsherman1;Actually the issue appears to be resolved.  Please close.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jasypt CLI outputs help twice,CAMEL-8909,12841111,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,janstey,janstey,27/Jun/15 17:39,27/Jun/15 17:41,14/Jul/23 05:50,27/Jun/15 17:41,2.15.2,,,,,,,,,,,,,,2.16.0,,,,,,,,,,,0,,,,,,"Using -help results in the following output:

[janstey@bender apache-camel-2.15.2]$ java -jar lib/camel-jasypt-2.15.2.jar -help
Apache Camel Jasypt takes the following options

  -h or -help = Displays the help screen
  -c or -command <command> = Command either encrypt or decrypt
  -p or -password <password> = Password to use
  -i or -input <input> = Text to encrypt or decrypt
  -a or -algorithm <algorithm> = Optional algorithm to use


Error: Command is empty

Apache Camel Jasypt takes the following options

  -h or -help = Displays the help screen
  -c or -command <command> = Command either encrypt or decrypt
  -p or -password <password> = Password to use
  -i or -input <input> = Text to encrypt or decrypt
  -a or -algorithm <algorithm> = Optional algorithm to use
",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jun 27 17:41:58 UTC 2015,,,,,,,,,,,"0|i2gl67:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jun/15 17:41;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/cf447ac2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Kafka: Adapter causes Camel NotifyBuilder to throw a NullPointer exception,CAMEL-8908,12841057,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rahulj51,rahulj51,27/Jun/15 06:36,28/Jun/15 08:53,14/Jul/23 05:50,28/Jun/15 08:53,2.15.2,,,,,,,,,,,,,,2.14.4,2.15.3,2.16.0,,camel-kafka,,,,,,,0,,,,,,"Camel-kafka component (2.15.1) gives a NullPointer exception in NotifyBuilder causing our assertions to fail.

The error seems to be due to the fact that the Exchange created by the component has fromEndPoint set to null.

In KafkaEndpoint.java

   public Exchange createKafkaExchange(MessageAndMetadata<byte[], byte[]> mm) {
        Exchange exchange = new DefaultExchange(getCamelContext(), getExchangePattern());

I believe this should be instantiated as 
Exchange exchange = new DefaultExchange(this, getExchangePattern());",,davsclaus,rahulj51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Jun/15 06:51;rahulj51;CAMEL-8908.diff;https://issues.apache.org/jira/secure/attachment/12742301/CAMEL-8908.diff",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Sun Jun 28 08:53:18 UTC 2015,,,,,,,Patch Available,,,,"0|i2gku7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Jun/15 08:53;davsclaus;Thanks for the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
encoding problems in jsonpath,CAMEL-8905,12840517,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,forsthofer,forsthofer,25/Jun/15 12:13,18/Jul/15 07:33,14/Jul/23 05:50,18/Jul/15 07:33,2.15.2,,,,,,,,,,,,,,2.16.0,,,,camel-jsonpath,,,,,,,0,,,,,,"I detected three different encoding problems in jsonpath:

- if jsonpath is called with an input stream which has an encoding different from the default encoding (given by Charset.defaultCharset()) then jsonpath still uses the default encoding. Error location in JsonPathEngine:
        else if (json instanceof InputStream) {
            InputStream is = (InputStream) json;
            return path.read(is, Charset.defaultCharset().displayName(), 
configuration);}
      

- if jsonpath is called with a json file whose encoding is different from UTF-8, then jsonpath still parses the document with UTF-8. Error location in JsonPathEngine:
       else if (json instanceof File) {
            File file = (File) json;
            return path.read(file, configuration);
       }
 path.read(file, configuration) uses always UTF-8

- if jsonpath is called with an URL pointing to a JSON document whose encoding is different from UTF-8, then jsonPath still parses the document with UTF-8. Error location in JsonPathEngine:
         else if (json instanceof URL) {
            URL url = (URL) json;
            return path.read(url, configuration);
         }
path.read(url, configuration) uses UTF-8

My solution proposal is to determine the encoding of the JSON documents automatically according to the specification RFC-4627 (https://www.ietf.org/rfc/rfc4627.txt; see chapter 3. Encoding) and then call the method path.read(jsonDocument,foundEncoding,configuration) with the found encoding. See attached patch.

Actually I can commit the patch myself. However, I would like that somebody who is more familiar with jsonpath than I does review my patch.

So please tell me if my patch can be accepted or not. I can then do the actual commit or I will discard the patch.",,davsclaus,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/Jul/15 06:44;forsthofer;0001-jsonpath-automatic-charset-detection.patch;https://issues.apache.org/jira/secure/attachment/12743458/0001-jsonpath-automatic-charset-detection.patch","26/Jun/15 04:39;forsthofer;booksUTF16BE.json;https://issues.apache.org/jira/secure/attachment/12742045/booksUTF16BE.json","26/Jun/15 04:39;forsthofer;booksUTF16LE.json;https://issues.apache.org/jira/secure/attachment/12742046/booksUTF16LE.json","26/Jun/15 04:39;forsthofer;jsonUCS2BigEndianWithBOM.txt;https://issues.apache.org/jira/secure/attachment/12742047/jsonUCS2BigEndianWithBOM.txt","26/Jun/15 04:39;forsthofer;jsonUCS2BigEndianWithoutBOM.txt;https://issues.apache.org/jira/secure/attachment/12742048/jsonUCS2BigEndianWithoutBOM.txt","26/Jun/15 04:39;forsthofer;jsonUCS2LittleEndianWithBom.txt;https://issues.apache.org/jira/secure/attachment/12742049/jsonUCS2LittleEndianWithBom.txt","26/Jun/15 04:39;forsthofer;jsonUCS2LittleEndianWithoutBOM.txt;https://issues.apache.org/jira/secure/attachment/12742050/jsonUCS2LittleEndianWithoutBOM.txt","26/Jun/15 04:39;forsthofer;jsonUTF32BEWithBOM.txt;https://issues.apache.org/jira/secure/attachment/12742051/jsonUTF32BEWithBOM.txt","26/Jun/15 04:39;forsthofer;jsonUTF32BEWithoutBOM.txt;https://issues.apache.org/jira/secure/attachment/12742052/jsonUTF32BEWithoutBOM.txt","26/Jun/15 04:39;forsthofer;jsonUTF32LEWithBOM.txt;https://issues.apache.org/jira/secure/attachment/12742053/jsonUTF32LEWithBOM.txt","26/Jun/15 04:39;forsthofer;jsonUTF32LEWithoutBOM.txt;https://issues.apache.org/jira/secure/attachment/12742054/jsonUTF32LEWithoutBOM.txt",,11.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jul 18 06:29:51 UTC 2015,,,,,,,Patch Available,,,,"0|i2ghl3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Jun/15 04:39;forsthofer;I attache the test files whose encodings are different from UTF-8 because they are not part of the patch. ;;;","28/Jun/15 09:05;davsclaus;Are you sure you have the IP clearance of the code? You may get the feeling that its some code copied from SAP (eg commerical company).

+        // SAPJVM SS 2008-08-26 workaround for broken InputStreams that 
+        // throw EOFException instead of returning -1

;;;","29/Jun/15 15:22;forsthofer;The IP clearance is fine. The code is just an implementation of the encoding part of spec RFC 4627.

But I am wondering if it is really a good idea to restrict the encoding of JSON documents to unicode as specified in RFC 4627. There is another specification of JSON: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf. In this spec no encoding is mentioned. 

Instead of automatically determining the charset from the Json document, one could get the endcoding via the method org.apache.camel.util.IOHelper.getCharSetName(Exchange)which determines the encoding from the message header Exchange.CHARSET_NAME or the exchange property Exchange.CHARSET_NAME. But with this solution the header or property must be set somehow.

What is your opinion on this?
;;;","03/Jul/15 06:44;forsthofer;I Improved the patch further. I have introduced the header ""CamelJsonpathJsonEncoding"". Here the user can specify the charset of the JSON document. In most of the cases it is not necessary to specify the charset in the header. If the charset is one of the unicode charsets then the charset can be determined automatically. Or if the message body is of type String or GenericFile with CharSet then also no charset must be specified.;;;","15/Jul/15 15:44;davsclaus;The patch is IMHO to big of a change to do on an existing patch branch - less changes the better. I am okay for making changes to the next release eg 2.16.;;;","15/Jul/15 15:45;davsclaus;Also it seems a bit too much we have to do this in Camel, and its not a function of jsonpath library itself. Have you got in contact with them? 

Isn't this a general problem in json-path and better to be fixed/improved there?;;;","16/Jul/15 06:27;forsthofer;Hi Claus,

you are right, the charset determination should not be part of camel. Actually it also should not be part of jayway/jsonpath, but be part of the used json parser. Currently jayway/jsonpath offers to use three different parsers: gson, jsonsmart, and jackson. Only the jackson parser offers the possibility to determine the charset. So the right way would be to move the function to gson and jsonsmart. But this will definitely take some time. I will try first to get into contact with jayway/jsonpath.

Regards Franz;;;","16/Jul/15 07:09;davsclaus;What does jsonpath use as parser by default? I assume its not jackson, and thus maybe this can be beneficial as an interim solution until those would work with encoding detection out of the box?

And btw does the input stream wrapper work with ""stream caching"" eg they are re-readable so you can use them in a content based router as predicate, and then afterwards read the full stream again?;;;","17/Jul/15 09:13;forsthofer;jasonpath uses by default the jsonsmart parser. I also think that we could use the proposed patch as interim solution until all parsers work with encoding detection. 

Concerning the stream caching: The stream wrapper does not effect the stream caching functionality because the stream wrapper is never returned as body of the Camel message. At least not in the proposed solution. Of course, one could think of other use cases for the stream wrapper where it is set to the message body. For example you could write a processor whose only purpose it is to detect the encoding of a JSON document and you could return the stream wrapper in the body. In this case one has to test whether stream caching works. My feeling is that it will work. However, one has to test this. But as I said, currently this is not the use case for the stream wrapper.

So, shall I go on and commit the change?;;;","17/Jul/15 09:17;davsclaus;I do think that you should add an option that can be used to turn this off (but it can be enabled by default). But for people that are using jackson etc then they can use their detection. And then also say in the documentation for this option its an interim solution until all parsers support the detection out of the box.

Yeah go ahead.;;;","18/Jul/15 06:29;forsthofer;Sorry for not explaining this earlier in more detail:
Jackson does offer the encoding detection. However jasonpath does not call the Jackson API with the encoding detection; jasonpath has hardcoded the ""UTF-8"" encoding. So currently I do not think that an option to turn off the encoding detection makes sense.
So I will go ahead without the switch.
;;;",,,,,,,,,,,,,,,,,,,,,
Camel Facebook - Endpoint URI must contain a parameter,CAMEL-8902,12840425,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,25/Jun/15 04:01,25/Jun/15 06:56,14/Jul/23 05:50,25/Jun/15 06:56,2.14.3,2.15.2,,,,,,,,,,,,,2.14.4,2.15.3,2.16.0,,camel-facebook,,,,,,,0,,,,,,"Endpoint URI must contain a parametr otherwise method [FacebookEndpoint#initState|https://github.com/jboss-fuse/camel/blob/camel-2.15.1.redhat-620123/components/camel-facebook/src/main/java/org/apache/camel/component/facebook/FacebookEndpoint.java#L119] will not be called. This results in the following exception:

{code}
Caused by: java.lang.NullPointerException
	at java.util.Collections$UnmodifiableCollection.<init>(Collections.java:1026)[:1.8.0_45]
	at java.util.Collections$UnmodifiableList.<init>(Collections.java:1302)[:1.8.0_45]
	at java.util.Collections.unmodifiableList(Collections.java:1287)[:1.8.0_45]
	at org.apache.camel.component.facebook.FacebookEndpoint.getCandidates(FacebookEndpoint.java:186)

{code}
This behaviour is not correct because it is not possible easily change endpoint parameter values.

*We should support the following usecase:*
header: {{CamelFacebook.userId = xxxxx}} 
{code:xml}
<to uri=""facebook://user""/>
{code}

and not only:
{code:xml}
<to uri=""facebook://user?userId=xxxxx""/>
{code}
",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 25 06:56:18 UTC 2015,,,,,,,,,,,"0|i2gh0v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jun/15 06:56;dhirajsb;Fix merged into master, camel-2.15.x and camel-2.14.x branches;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NBSP characters in camel-kafka:KafkaConfiguration parameter,CAMEL-8901,12840374,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,guildencrantz,guildencrantz,24/Jun/15 23:34,25/Jun/15 06:32,14/Jul/23 05:50,25/Jun/15 06:32,2.14.2,2.14.3,2.15.0,2.15.1,2.15.2,,,,,,,,,,2.14.4,2.15.3,2.16.0,,camel-kafka,,,,,,,0,,,,,,There are some rogue NBSP characters that prevent the kafka zookeeper.session.timeout.ms and zookeeper.sync.time.ms from being set.,,davsclaus,guildencrantz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/Jun/15 23:35;guildencrantz;0001-Remove-NBSP-characters-from-camel-kafka-KafkaConfigu.patch;https://issues.apache.org/jira/secure/attachment/12741733/0001-Remove-NBSP-characters-from-camel-kafka-KafkaConfigu.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,https://github.com/ReturnPath/camel/commit/eec5b25803891f066015c1b060ec0f9abe2be10b,,,,,,,,,,,9223372036854775807,,,Thu Jun 25 06:32:08 UTC 2015,,,,,,,Patch Available,,,,"0|i2ggpz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jun/15 06:32;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc parser in API Component Framework misses first method with void return type in JDK7,CAMEL-8900,12840371,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,24/Jun/15 23:15,25/Jun/15 03:48,14/Jul/23 05:50,25/Jun/15 03:48,2.14.3,2.15.2,,,,,,,,,,,,,2.14.4,2.15.3,,,camel-core,,,,,,,0,,,,,,"When using JDK 7 to generate Javadoc, the Javadoc parser based on javax.swing.text.html.parser.Parser fails to extract the first method if it has a void return type. For some reason the combination of the Javadoc generated by JDK7 and its Parser class gets the elements in the wrong order, causing the parser to go into the wrong state missing the first method. The next method element puts the parser back in the right state. 
The fix is to not let the parser come out of the METHOD_SUMMARY if it has not seen any methods at that point. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 25 03:48:21 UTC 2015,,,,,,,,,,,"0|i2ggpb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Jun/15 03:48;dhirajsb;Fix merged into master, camel-2.15.x and camel-2.14.x branches. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ElementNotFoundException on LinkedIn authentication,CAMEL-8898,12840208,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,tdiesler,tdiesler,24/Jun/15 13:34,18/Sep/15 08:01,14/Jul/23 05:50,18/Sep/15 07:51,2.15.2,,,,,,,,,,,,,,2.15.4,2.16.0,,,,,,,,,,0,,,,,,"{code}
Caused by: com.gargoylesoftware.htmlunit.ElementNotFoundException: elementName=[form] attributeName=[name] attributeValue=[oauth2SAuthorizeForm]
	at com.gargoylesoftware.htmlunit.html.HtmlPage.getFormByName(HtmlPage.java:669)
	at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.getRefreshToken(LinkedInOAuthRequestFilter.java:169)
	at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.updateOAuthToken(LinkedInOAuthRequestFilter.java:279)
	at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.filter(LinkedInOAuthRequestFilter.java:240)
	at org.apache.cxf.jaxrs.client.spec.ClientRequestFilterInterceptor.handleMessage(ClientRequestFilterInterceptor.java:60)
{code}

To reproduce:

1. add your credentials to src/test/resources/test-options.properties
2. run [camel-linkedin-component]$ mvn clean install -P linkedin-test",,dhirajsb,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 18 08:01:48 UTC 2015,,,,,,,,,,,"0|i2gfpb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Jun/15 13:36;tdiesler;I use test-options.properties like this

{code}
# LinkedIn user name
userName=thomas.diesler@gmail.com
# LinkedIn user password
userPassword=9ZU...
# LinkedIn App clientId
clientId=7799h7dzr3o2e3
# LinkedIn App clientSecret
clientSecret=mC8GR...
# LinkedIn App required scopes
scope=r_basicprofile,r_fullprofile,r_emailaddress,r_network,r_contactinfo,rw_nus,rw_company_admin,rw_groups,w_messages
# LinkedIn App redirect URI
redirectUri=https://localhost
{code};;;","13/Jul/15 23:13;dhirajsb;Hi Tomas, LinkedIn has changed scopes that are accessible by default. One must get their permissions for most scopes for testing an app. The only ones that worked for me IIRC were r_basicprofile and r_network. They also changed the way exception handling is done when using their login form, which breaks the form parsing logic in the component causing the exception you see. This also means a lot of integration tests can't be run right now without getting LinkedIn's approval for the test application. 
I will update the component to handle error messages from the new login form, to generate a better error message. ;;;","14/Jul/15 06:20;tdiesler;Ok, thanks. Could you please setup a profile for the Camel build that can run in Jenkins to verify this functionality. It can run on a rare basis. I can then do the same for the wildfly-camel prod branch possibly using the same credentials.;;;","18/Sep/15 07:51;dhirajsb;Fixed component to handle LinkedIn's new style of returning oauth errors, also added w_share scope. 
Adding a test account is dicey, since anyone with access to the branch could cause havoc, creating issues in builds, which will have to be constantly chased down in the future. So I'm not adding a test LinkedIn account or a test branch. This is also the case with a lot of other Camel components that require an account with other service providers, for e.g. Facebook, which means that integration testing has to be done manually or in a controlled QE environment. ;;;","18/Sep/15 08:01;dhirajsb;The default scopes for LinkedIn apps that have not been verified are r_basicprofile,r_emailaddress,rw_company_admin,w_share. A number of tests fail without a verified app, hence it's recommended to use one for integration testing with -Plinkedin-test. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce-maven-plugin: Unable to generate DTOs due to new encrypted field,CAMEL-8890,12839470,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,simondelfab,simondelfab,22/Jun/15 07:24,01/Oct/15 05:26,14/Jul/23 05:50,01/Oct/15 05:26,2.15.2,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-salesforce,,,,,,,0,,,,,,"The maven plugin is failing to generate the DTOs. It appears that Salesforce has recently introduced a new boolean field call encrypted to the 'DescribeSObjectResult' object [1,2]

The fix is to modify the org.apache.camel.component.salesforce.api.dto.SObjectField and add the following:

private Boolean encrypted;

   public Boolean getEncrypted() {
        return encrypted;
    }

    public void setEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
    }

With this change the DTOs are generated. However, not sure if there is anything else which needs to be done.

Btw, I am surprised that this new field causes a problem because the default API version Camel-Salesforce is configured to is 33.0 and this new field appears in 34.0.

[1] https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_describesobjects_describesobjectresult.htm#topic-title
[2] http://releasenotes.docs.salesforce.com/en-us/summer15/release-notes/rn_security_platform_encryption.htm",,davsclaus,dhirajsb,simondelfab,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 30 00:59:37 UTC 2015,,,,,,,,,,,"0|i2gbnj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jun/15 17:13;davsclaus;[~dhirajsb] wonder if you got some time to look into this?;;;","29/Sep/15 07:07;davsclaus;Dhiraj havent we improved this component so it works now? ;;;","30/Sep/15 00:33;dhirajsb;I will update the affected class. ;;;","30/Sep/15 00:57;dhirajsb;[~davsclaus], you are right, the field exists on master and camel-2.15.x branches. ;;;","30/Sep/15 00:59;dhirajsb;The field was added as part of CAMEL-8397;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Aws EC2: Add getMessageForResponse to the producer as the other components already do,CAMEL-8888,12839091,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,19/Jun/15 10:29,19/Jun/15 20:23,14/Jul/23 05:50,19/Jun/15 20:23,,,,,,,,,,,,,,,2.16.0,,,,camel-aws,,,,,,,0,,,,,,"The EC2 producer has to be aligned to the other components with the getMessageForResponse method, otherwise there will be no difference when a specific Exchange Pattern will be specify.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-06-19 10:29:47.0,,,,,,,,,,,"0|i2g9br:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions on routes SFTP and SEDA or DISRUPTOR (probably others),CAMEL-8887,12839073,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gegefr,gegefr,19/Jun/15 08:46,05/Aug/15 11:32,14/Jul/23 05:50,05/Aug/15 11:32,,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-ftp,,,,,,,0,,,,,,"When polling from SFTP, if the exchanges are sent to asynchronous routes (seda, disruptor) many different types of exceptions happen everytime, when retrienving the content or deleting / moving / renaming the polled files.

The cause is that when routes are executed asynchronously, concurrent calls to SftpOperations are made. It looks like SftpOperations as well as ChannelSftp (Jsch) are not thread-safe. Sftp commands are either colliding, and sometime are invalid at the protocol level.

One workaround is to make SftpOperations thread-safe by making its methods synchronized.

Maybe there is another better place for a fix but i leave that to the specialists.","Camel running on Windows, polling Linux server.",davsclaus,gegefr,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 19 12:30:29 UTC 2015,,,,,,,,,,,"0|i2g97z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Jun/15 08:48;gegefr;Link to the related discussion on the maling list archive (nabble)

http://camel.465427.n5.nabble.com/sftp-gt-seda-yields-GenericFileOperationFailedException-during-GenericFileOnCompletion-move-processig-td2905598.html;;;","19/Jun/15 08:51;davsclaus;Use synchronous on the ftp endpoint, eg synchronous=true. You cannot have it async. Marking methods as synchronous is not the solution.;;;","19/Jun/15 09:07;gegefr;Where can this option be set ?
I use xml dsl in spring.;;;","19/Jun/15 09:11;davsclaus;See
http://camel.apache.org/how-do-i-configure-endpoints.html;;;","19/Jun/15 12:30;gegefr;If I understood correctly, adding ""sftp://........?synchronous=true&......"" to the endpoint URI should do the job.

The ""synchronous"" property seems to be understood since if i type it wrong the uri cannot be parsed.

However, no matter if it is true or false, I still have the same exceptions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
ConsumeLockEntity without ConsumeDelete,CAMEL-8885,12838716,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,demenis,demenis,18/Jun/15 08:27,09/Jul/15 06:25,14/Jul/23 05:50,09/Jul/15 06:25,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-jpa,,,,,,,0,,,,,,"I think that condition at the beginning of the lock function is wrong:

{code}
protected boolean lockEntity(Object entity, EntityManager entityManager) {
        if (!getEndpoint().isConsumeDelete() || !getEndpoint().isConsumeLockEntity()) {
            return true;
        }
...
{code}

If I wanna just select and then update entity I should set consumeDelete=false, but If so entity will  newer be locked...
",,davsclaus,demenis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 09 06:25:21 UTC 2015,,,,,,,,,,,"0|i2g727:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jul/15 06:25;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel:run with CDI has been reported to not work,CAMEL-8884,12838714,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Jun/15 08:17,18/Jun/15 12:18,14/Jul/23 05:50,18/Jun/15 09:36,,,,,,,,,,,,,,,2.16.0,,,,camel-cdi,tooling,,,,,,0,,,,,,To reproduce try the cdi example,,acosentino,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 18 12:18:11 UTC 2015,,,,,,,,,,,"0|i2g71r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Jun/15 09:30;acosentino;Camel-example-cdi seems to work correctly..;;;","18/Jun/15 10:03;acosentino;Just for reporting. Running mvn camel:run inside camel-example-cdi I get the following error:

{code}
[INFO] Starting Camel ...
2015-06-18 11:59:05,342 [cdi.Main.main()] INFO  MainSupport                    - Apache Camel 2.16-SNAPSHOT stopping
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.cdi.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:455)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.IllegalStateException: Too many implementations of org.apache.deltaspike.cdise.api.CdiContainer found in the classpath! Details: file:/home/ancosen/Rilasci/maven_repository/org/apache/deltaspike/cdictrl/deltaspike-cdictrl-weld/1.4.1/deltaspike-cdictrl-weld-1.4.1.jarorg.apache.deltaspike.cdise.weld.WeldContainerControl
file:/home/ancosen/Rilasci/maven_repository/org/apache/deltaspike/cdictrl/deltaspike-cdictrl-owb/1.4.1/deltaspike-cdictrl-owb-1.4.1.jarorg.apache.deltaspike.cdise.owb.OpenWebBeansContainerControl

	at org.apache.deltaspike.cdise.api.CdiContainerLoader.getCdiContainer(CdiContainerLoader.java:74)
	at org.apache.camel.cdi.Main.doStart(Main.java:89)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:124)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:348)
	at org.apache.camel.cdi.Main.main(Main.java:47)
	... 6 more
[ERROR] *************************************

{code};;;","18/Jun/15 11:20;davsclaus;You need to rebuild the maven plugins as it has a fix also;;;","18/Jun/15 12:11;acosentino;Ok. Sorry :-);;;","18/Jun/15 12:18;acosentino;I didn't see the camel-maven-plugin fix :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint-archetypes should have test dependency of camel-test-blueprint,CAMEL-8874,12837854,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,15/Jun/15 14:49,15/Jun/15 15:13,14/Jul/23 05:50,15/Jun/15 15:13,2.15.0,2.15.1,2.15.2,,,,,,,,,,,,2.15.3,2.16.0,,,camel-archetypes,,,,,,,0,,,,,,"The camel-test-blueprint dependency scope should be test, otherwise bundle plugin could import the packages of pojosr framework.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 15 15:07:53 UTC 2015,,,,,,,,,,,"0|i2g1uf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jun/15 15:07;njiang;Applied the patch into camel master and camel-2.15.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
null body after exception from transform method,CAMEL-8871,12837769,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,HansO,HansO,15/Jun/15 08:19,15/Jun/15 09:31,14/Jul/23 05:50,15/Jun/15 09:31,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-core,,,,,,,0,,,,,,"When an exception is thrown from a transform method I lose the content of the message body. This behaviour is unexpected because it does not happen when an exception is thrown from a bean call.

.bean(ErrorBean.class, ErrorBean.METHOD)
Vs.
.transform().method(ErrorBean.class, ErrorBean.METHOD)

I have a testcase that I will try to get attached but here are the routes:
{code:java}
if (""testTransformExceptionToErrorRoute"".equals(getTestMethodName())) {
                    from(START)
                    .routeId(""exception.test.transform"")
                    .transform().method(ErrorBean.class, ErrorBean.METHOD)
                    .to(END);
                } else {
                    from(START)
                    .routeId(""exception.test.bean"")
                    .bean(ErrorBean.class, ErrorBean.METHOD)
                    .to(END);
                }

    public static class ErrorBean {
        private static final String METHOD = ""throwException"";
        public static void throwException(Exchange exchange) {
            String body = exchange.getIn().getBody(String.class);
            Assertions.assertThat(body).isEqualTo(BODY);
            throw new NullPointerException();
        }
    }
{code}",,davsclaus,HansO,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Jun/15 08:23;HansO;ExceptionToErrorRouteTest.java;https://issues.apache.org/jira/secure/attachment/12739566/ExceptionToErrorRouteTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 15 09:31:41 UTC 2015,,,,,,,,,,,"0|i2g1bj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jun/15 08:23;HansO;CamelTestSupport test that shows the difference between exception from different calls. I would expect both tests to succeed and both methods to show the same exception behavior.;;;","15/Jun/15 08:24;davsclaus;Use bean as workaround;;;","15/Jun/15 08:51;davsclaus;The same problem is potential in setBody / setHeader. Fixing a few others as well.;;;","15/Jun/15 09:31;davsclaus;Thanks for reporting and the test case;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Aggregator JDBC repository always overwrites old exchange,CAMEL-8864,12837592,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pankajtakawale,pankajtakawale,13/Jun/15 12:52,23/Jun/15 17:49,14/Jul/23 05:50,23/Jun/15 17:49,2.15.2,,,,,,,,,,,,,,2.16.0,,,,camel-sql,,,,,,,0,,,,,,"I'm using FlexibleAggregationStrategy to aggregate objects into collection. I found following issue where Aggregator ends up overwriting old collection with the new one.

JdbcCamelCodec is not marshaling all of the exchange properties. 
E.g. it does not marshal exchange's 'CamelFlexAggrStrCollectionGuard' property.
So next time Aggregator tries to fetch BLOB from database, oldExchange does not have above property.
So following code creates new collection for each new object, and hence overwrites the old collection.
private Collection<E> FlexibleAggregationStrategy::safeInsertIntoCollection(Exchange oldExchange, Collection<E> oldValue, E toInsert) {
        Collection<E> collection = null;
        try {
            if (oldValue == null || oldExchange.getProperty(COLLECTION_AGGR_GUARD_PROPERTY, Boolean.class) == null) {
                try {
                     collection = collectionType.newInstance();    //**EVERYTIME NEW COLLECTION as previous aggregation did not serialize COLLECTION_AGGR_GUARD_PROPERTY to database.






",,davsclaus,pankajtakawale,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 23 17:49:37 UTC 2015,,,,,,,,,,,"0|i2g08f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jun/15 17:49;davsclaus;Thanks have added that property to the other codecs.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Too many connection in TIME_WAIT when tempfilename is set in the FTP producer URI.,CAMEL-8860,12837120,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,himanshu,himanshu,11/Jun/15 12:36,22/Sep/17 11:55,14/Jul/23 05:50,20/Sep/17 06:07,2.14.0,,,,,,,,,,,,,,,,,,camel-ftp,,,,,,,0,,,,,,"So many connections remain in TIME_WAIT state while configuring a FTP producer route with tempfilename property in FTP producer. 

Files are writen using producer template.

Producertemplate.sendBodyAndHeader(producerURI, Exchange.FILE_NAME, fileName) to write file to destination. 

Producer URI : {{ftp://<USER@MACHINE_ADDRESS>//?password=RAW(PASSWORD)&binary=true&passiveMode=false&delete=true&pollStrategy=#ConsumerPollStrategy&disconnect=false&tempFileName=/temp/hello.tmp&initialDelay=10&throwExceptionOnConnectFailed=true&reconnectDelay=10&maximumReconnectAttempts=0&maxMessagesPerPoll=100&readLock=changed&readLockCheckInterval=500&readLockMinLength=1&sendEmptyMessageWhenIdle=true}}

fileName: {{file.tmp}}

We are writing ~ 2000 files . First files are written to temp directory then moved to destination. Connections opened for tempfiles are not re used to write temporary files and we run out of connection after writing 1000 files. 
Route resumes once connections are released. 
Is there a way we can  reuse connection to write temporary files also.

Once tempfilename is removed from the configuration then single connection is used for ftp transfer.",,ggrzybek,himanshu,,,,,,,,,,,,,,,,,,,,,,CAMEL-11792,,,,,,,,,,,"01/Jul/15 12:00;himanshu;NetStat_NoTempFIle.PNG;https://issues.apache.org/jira/secure/attachment/12743062/NetStat_NoTempFIle.PNG","01/Jul/15 12:00;himanshu;NetStat_Passive_False.PNG;https://issues.apache.org/jira/secure/attachment/12743058/NetStat_Passive_False.PNG","01/Jul/15 12:00;himanshu;NetStat_Passive_true.PNG;https://issues.apache.org/jira/secure/attachment/12743059/NetStat_Passive_true.PNG","01/Jul/15 12:00;himanshu;Passive_false.log;https://issues.apache.org/jira/secure/attachment/12743060/Passive_false.log","01/Jul/15 12:00;himanshu;Passive_false_NoTempFile.log;https://issues.apache.org/jira/secure/attachment/12743063/Passive_false_NoTempFile.log","01/Jul/15 12:00;himanshu;Passive_true.log;https://issues.apache.org/jira/secure/attachment/12743061/Passive_true.log","30/Jun/15 11:10;himanshu;ResultWithOutTempFileName.log;https://issues.apache.org/jira/secure/attachment/12742785/ResultWithOutTempFileName.log","30/Jun/15 11:13;himanshu;ResultWithTempfileName.log;https://issues.apache.org/jira/secure/attachment/12742788/ResultWithTempfileName.log","30/Jun/15 11:13;himanshu;Result_With_tempfileName_FTPServer_Connection_Count.PNG;https://issues.apache.org/jira/secure/attachment/12742787/Result_With_tempfileName_FTPServer_Connection_Count.PNG","30/Jun/15 11:10;himanshu;Result_Without_tempfilename.PNG;https://issues.apache.org/jira/secure/attachment/12742786/Result_Without_tempfilename.PNG","30/Jun/15 10:59;himanshu;TestFTPConnectionLeak.java;https://issues.apache.org/jira/secure/attachment/12742782/TestFTPConnectionLeak.java",,11.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 20 06:07:05 UTC 2017,,,,,,,,,,,"0|i2fxef:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Jun/15 13:53;himanshu;Issue exists in 2.15.2 also .. ;;;","29/Jun/15 11:39;ggrzybek;[~himanshu], could you provide more details? Could you enable DEBUG logging for {{org.apache.camel.component.file.remote}} logger and attach the logs?
I tried with special socket factory to see when sockets are created and connected and I had single connection reused for all writes:
{noformat}
2015-06-29 13:36:43,103 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 1642030774
2015-06-29 13:36:43,103 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 1642030774 to localhost/127.0.0.1:21000
2015-06-29 13:36:43,194 [main           ] DEBUG RemoteFileProducer             - Connected and logged in to: Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]
2015-06-29 13:36:43,292 [main           ] DEBUG FtpOperations                  - About to store file: file1.txt.part using stream: java.io.ByteArrayInputStream@2f7298b
2015-06-29 13:36:43,336 [main           ] DEBUG FtpOperations                  - Took 0.044 seconds (44 millis) to store file: file1.txt.part and FTP client returned: true
2015-06-29 13:36:43,337 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file1.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,337 [main           ] DEBUG FtpOperations                  - Renaming file: out/file1.txt.part to: out/file1.txt
2015-06-29 13:36:43,343 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part] Exchange[Message: Hello World]
2015-06-29 13:36:43,437 [main           ] DEBUG FtpOperations                  - About to store file: file2.txt.part using stream: java.io.ByteArrayInputStream@6eda5c9
2015-06-29 13:36:43,479 [main           ] DEBUG FtpOperations                  - Took 0.042 seconds (42 millis) to store file: file2.txt.part and FTP client returned: true
2015-06-29 13:36:43,481 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file2.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,481 [main           ] DEBUG FtpOperations                  - Renaming file: out/file2.txt.part to: out/file2.txt
2015-06-29 13:36:43,487 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part] Exchange[Message: Hello World]
2015-06-29 13:36:43,580 [main           ] DEBUG FtpOperations                  - About to store file: file3.txt.part using stream: java.io.ByteArrayInputStream@55b7a4e0
2015-06-29 13:36:43,623 [main           ] DEBUG FtpOperations                  - Took 0.043 seconds (43 millis) to store file: file3.txt.part and FTP client returned: true
2015-06-29 13:36:43,625 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file3.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,625 [main           ] DEBUG FtpOperations                  - Renaming file: out/file3.txt.part to: out/file3.txt
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - ********************************************************************************
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - Testing done: testConnectionLeak(org.apache.camel.component.file.remote.FileToFtpTempFileNameProducerConnectionLeakTest)
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - Took: 0.606 seconds (606 millis)
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - ********************************************************************************
2015-06-29 13:36:43,629 [main           ] DEBUG CamelTestSupport               - tearDown test
2015-06-29 13:36:43,630 [main           ] DEBUG SharedProducerServicePool      - Stopping service pool: org.apache.camel.impl.SharedProducerServicePool@166fa74d
2015-06-29 13:36:43,631 [main           ] DEBUG RemoteFileProducer             - Disconnecting from: Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]
2015-06-29 13:36:43,632 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1642030774
{noformat}
;;;","30/Jun/15 10:50;himanshu;Here is the output of netstat command which i used to track number of TCP connection from ftp server to my machine (10.80.12.47 in this case);;;","30/Jun/15 10:54;himanshu;Processed  around 5000 files from '10.80.160.137' to '10.80.12.47'.
ProducerURI : {{""ftp://scppuser@10.80.160.137//home/scppuser/hmittal?password=RAW(PASSWORD)&binary=true&passiveMode=false&delete=true&disconnect=false&tempFileName=/temp/hello.tmp&initialDelay=10&throwExceptionOnConnectFailed=true&reconnectDelay=10&maximumReconnectAttempts=0&maxMessagesPerPoll=100&readLock=changed&readLockCheckInterval=500&readLockMinLength=1&sendEmptyMessageWhenIdle=true""}}
;;;","30/Jun/15 10:59;himanshu;Sample java ;;;","30/Jun/15 11:10;himanshu;Attaching the result without tempfilename property in URI. Processes 5000 files and here netstat result in screenshot shows that number of connection do not increase from 3-4 .;;;","30/Jun/15 11:13;himanshu;Processed 5000 messages with tempfilename in URI . Screen shot clearly shows that tcp connection count reached uptill 3104.;;;","01/Jul/15 08:52;ggrzybek;[~himanshu], I was checking your example and I see that I was using {{passiveMode=true}}, you were using active mode, so:
* without using tempFileName, each send operation created one server socket on your side (FTP active mode) to send the file to server
* when using tempFileName, each send operation create *three* server sockets
** to check if target file exists
** to check if temp file exists
** to store file

Mina FTP client doesn't provide a way to set SO_REUSEADDR option in server socket, so it defaults to .... platform specific value. In my case (Linux 4.0.6) the value is true, so when creating another server socket, Linux can reuse existing socket in TIME-WAIT state.
Didn't you try considering ftp passive mode?;;;","01/Jul/15 12:00;himanshu;Grzegorz ,

{{passiveMode=true/false}} does not make any difference in number of connection being opened.
Here test sample is 200 messages with FTP sender. Screen shot shows number of connection reached up till 400( 2 per transaction) 
After removing tempfilename from URI we have a single tcp connection for transaction.
NetStat_NoTempFile.PNG
Passive_false_NoTempFile.log
NetStat_Passive_False.PNG
Passive_false.log
NetStat_Passive_True.PNG
Passive_True.log

As you mentioned in case of tempfileName there will be 3 active sockets else only 1 will be created. Tempfile configuration should yield just 3 times connection .
These configuration must not change the behavior of SO_REUSEADDR . 
Assume SO_REUSEADDR is set to false in my ftp server it could have created as many number of connections as there were transactions in both scenarios(with / without tempfilename ).
Currently I am figuring out to check SO_REUSEADDR property on my ftp server but I believe it is set to true as same connection is reused when we do not write temp files.
;;;","02/Jul/15 06:05;ggrzybek;Thanks for comments - I'll search more...;;;","07/Jul/15 09:50;ggrzybek;[~himanshu], I checked again with camel 2.16-SNAPSHOT and even when I used passive mode and NO tempFileName, I had connection per write.

I've additionally set a range of passive ports to be used in ftp server (mina-ftp used in camel ftp tests) to {{40000-40020}} and I wrote 1000 files. {{ss -napt | wc -l}} showed me 1000 sockets in TIME-WAIT state like this:
{noformat}
...
TIME-WAIT  0      0          ::ffff:127.0.0.1:60184     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60185     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60190     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60193     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60197     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60212     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60217     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60220     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60235     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60241     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60259     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60274     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60277     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60284     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60290     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60295     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60301     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60322     ::ffff:127.0.0.1:40003 
...
{noformat}
So no problem with reusing TIME-WAIT sockets.

Also I've used my own socket factory to be used in ftp endpoint:
{code:java}
    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry jndi = super.createRegistry();

        SocketFactory sf = new AuditingSocketFactory();
        jndi.bind(""sf"", sf);
        return jndi;
    }
{code}

I used this parameter in FTP endpoint: {{ftpClient.socketFactory=#sf}}. My socket factory just logged information about opening and closing sockets. I had 1000 blocks of such logs:
{noformat}
2015-07-07 11:49:38,264 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin@localhost:21000/out/?disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=true&password=xxxxxx&tempFileName=%2Ftemp%2Fhello.tmp] Exchange[Message: Hello World 00018]
2015-07-07 11:49:38,266 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 298317613
2015-07-07 11:49:38,266 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 298317613 to /127.0.0.1:40014
2015-07-07 11:49:38,267 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 298317613
2015-07-07 11:49:38,267 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 298317613
2015-07-07 11:49:38,307 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 1597289593
2015-07-07 11:49:38,307 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 1597289593 to /127.0.0.1:40001
2015-07-07 11:49:38,308 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1597289593
2015-07-07 11:49:38,308 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1597289593
2015-07-07 11:49:38,350 [main           ] DEBUG FtpOperations                  - About to store file: hello.tmp using stream: java.io.ByteArrayInputStream@7d34a4c3
2015-07-07 11:49:38,351 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 187514477
2015-07-07 11:49:38,351 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 187514477 to /127.0.0.1:40003
2015-07-07 11:49:38,352 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 187514477
2015-07-07 11:49:38,352 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 187514477
2015-07-07 11:49:38,391 [main           ] DEBUG FtpOperations                  - Took 0.041 seconds (41 millis) to store file: hello.tmp and FTP client returned: true
2015-07-07 11:49:38,393 [main           ] DEBUG RemoteFileProducer             - Wrote [out//temp/hello.tmp] to [Endpoint[ftp://admin@localhost:21000/out/?disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=true&password=xxxxxx&tempFileName=%2Ftemp%2Fhello.tmp]]
2015-07-07 11:49:38,393 [main           ] DEBUG FtpOperations                  - Renaming file: out//temp/hello.tmp to: out/file-00018.txt
{noformat};;;","07/Jul/15 09:57;ggrzybek;And what is the ftp server you are using?;;;","07/Jul/15 13:30;himanshu;Hi Grzegorz Grzybek,

I am using {{vsftp version 2.2.2 with camel 2.14. }}
Could it be an issue with the ftp server ?

In above comments you have mentioned that even without {{tempfileName}} in URI you are seeing 1000 connection in TIME_WAIT and you have {{disconnect=false}} set in URI. 
With this configuration it should not have opened 1000 connection in TIME_WAIT. That means sockets are not re-used . I am not sure whether my understanding is correct here.

Do you have any other alternative to avoid these many connection ?

;;;","07/Jul/15 14:31;ggrzybek;I checked with camel 2.14.0 as well with the same result. I hade many sockets in TIME-WAIT state.
Please try debugging https://github.com/apache/commons-net/blob/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java#L810 - commons-net/ftpclient opens either {{_serverSocketFactory_.createServerSocket}} (active mode) or {{_socketFactory_.createSocket()}} (passive mode), but I didn't have problems with creating socket (reusing them)...

Maybe you have the problem described here: http://ma.juii.net/blog/excessive-ftp-connections ?;;;","07/Jul/15 14:45;himanshu;Hi Grzegorz Grzybek,

Thats a nice article and explains well about ftp active/passive mode. 
My only point here is {{tempFIleName}} configuration in URI should not drive socket behavior as it is happening in my case. It clearly stays that there is a problem in the implementation.

Anyways thanks for your inputs;;;","07/Jul/15 14:48;ggrzybek;yes, I understand. This is how ftpclient works - what's weird is how did you actually get this socket reuse... hmm, maybe my socket factory should do some reuse? Maybe default socket factory does this?;;;","07/Jul/15 15:01;himanshu;I will debug FTPClient code and check about the connection creation difference with/without tempFileName configuration.

Still I feel problem that active/passive mode is not resulting in these many connections . Need to check Camel FTP component. As the behavior is driven by tempFIleName configuration;;;","08/Jul/15 11:24;ggrzybek;Thanks.
I saw that passive mode doesn't make any difference. And for me not using tempFileName didn't lead to single socket use...;;;","13/Jul/15 07:12;himanshu;Grzegorz Grzybek,

As you mentioned that even {{tempFileName}} does not make any difference in number of connections. Number of Connections shoot up with each file transfer and result in TIME_WAIT connections.
Should not camel-ftp check the connection handling part ? As FTP URI config already has {{disconnect=false}}.;;;","27/Jan/16 08:43;himanshu;Issue was with endpoint URi which was changing with every message transfer and forcing camel to create a new connection for every changed URI .We have changed the configuration. Taken out tempFileName from endpointURI and setting it as header in Producer template. With this approach uri remains static for each file transfer.;;;","27/Jan/16 08:45;himanshu;Issue was with endpoint URi which was changing with every message transfer and forcing camel to create a new connection for every changed URI .We have changed the configuration. Taken out tempFileName from endpointURI and setting it as header in Producer template. With this approach uri remains static for each file transfer.;;;","27/Jan/16 08:47;ggrzybek;[~himanshu] thanks for the update ;) I'm glad it works.;;;","20/Sep/17 05:36;himanshu;[~grzes], 
It solved the problem of connection leak at camel end , but still creates a new connection if tempFileName is added as uri paramaters in camel ftp uri. Verified it in 2.19.2 . And same issue

Reiterating the issue
When we have {{tempFilename}} in camel uri and we use producer template to write file to remote ftp location , camel opens new connection for every file transfer. Though {{disconnect}} option is set to false in uri.
If we take out {{tempFilename}} from uri connections are reused.;;;","20/Sep/17 05:38;ggrzybek;Pretty please create new issue with the details and new version of Camel.;;;","20/Sep/17 06:07;himanshu;Created CAMEL-11792 for other issue;;;",,,,,,,
Camel-Hazelcast: HazelcastComponentHelper miss some operations in mapping,CAMEL-8858,12837084,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,11/Jun/15 09:00,11/Jun/15 15:22,14/Jul/23 05:50,11/Jun/15 15:22,,,,,,,,,,,,,,,2.16.0,,,,camel-hazelcast,,,,,,,0,,,,,,Some new Hazelcast operations are not mapped inside HazelcastComponentHelper.,,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 11 15:22:09 UTC 2015,,,,,,,,,,,"0|i2fx6f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Jun/15 15:22;acosentino;Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/26e09e13;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel:context-inflight returns 'Object name cannot be null',CAMEL-8841,12836073,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lichtin,lichtin,08/Jun/15 07:19,15/Jun/15 11:12,14/Jul/23 05:50,15/Jun/15 11:12,2.15.1,2.15.2,,,,,,,,,,,,,2.15.3,2.16.0,,,karaf,tooling,,,,,,0,,,,,,"{noformat}
karaf> camel:context-inflight myCamelContext
Error executing command: Object name cannot be null 

karaf> log:exception-display
javax.management.RuntimeOperationsException: Object name cannot be null
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.isRegistered(DefaultMBeanServerInterceptor.java:569)[:1.8.0_45]
        at com.sun.jmx.mbeanserver.JmxMBeanServer.isRegistered(JmxMBeanServer.java:638)[:1.8.0_45]
        at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_45]
        at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_45]
        at org.apache.karaf.management.boot.KarafMBeanServerBuilder$MBeanInvocationHandler.invoke(KarafMBeanServerBuilder.java:80)[karaf-jmx-boot.jar:]
        at com.sun.proxy.$Proxy0.isRegistered(Unknown Source)[:]
        at org.apache.camel.commands.AbstractLocalCamelController.browseInflightExchanges(AbstractLocalCamelController.java:186)
        at org.apache.camel.commands.ContextInflightCommand.performContextCommand(ContextInflightCommand.java:56)
        at org.apache.camel.commands.AbstractContextCommand.executeLocal(AbstractContextCommand.java:74)
        at org.apache.camel.commands.AbstractContextCommand.execute(AbstractContextCommand.java:42)
        at org.apache.camel.karaf.commands.ContextInflight.doExecute(ContextInflight.java:40)
        at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)[25:org.apache.karaf.shell.console:3.0.3]
        at Proxy199cb572_c6d4_4d06_851e_3f55b795651b.execute(Unknown Source)[:]
        at Proxy199cb572_c6d4_4d06_851e_3f55b795651b.execute(Unknown Source)[:]
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
        at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:208)
        at org.apache.karaf.shell.ssh.ShellFactoryImpl$ShellImpl$1.runConsole(ShellFactoryImpl.java:158)[52:org.apache.karaf.shell.ssh:3.0.3]
        at org.apache.karaf.shell.ssh.ShellFactoryImpl$ShellImpl$1$1.run(ShellFactoryImpl.java:133)
        at java.security.AccessController.doPrivileged(Native Method)[:1.8.0_45]
        at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)[26:org.apache.karaf.jaas.modules:3.0.3]
        at org.apache.karaf.shell.ssh.ShellFactoryImpl$ShellImpl$1.run(ShellFactoryImpl.java:129)[52:org.apache.karaf.shell.ssh:3.0.3]
Caused by: java.lang.IllegalArgumentException: Object name cannot be null
        ... 30 more
{noformat}

I think when combining the object name

            Set<ObjectName> set = mBeanServer.queryNames(new ObjectName(agent.getMBeanObjectDomainName() + "":type=services,name=DefaultInflightRepository,*""), null);

The "":context=context-name"" part seems missing.
The query should be something like

org.apache.camel:context=<context-name>,type=services,name=DefaultInflightRepository ",Karaf 3.0.3,davsclaus,lichtin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/Jun/15 08:08;lichtin;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12739563/patchfile.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 15 11:12:29 UTC 2015,,,,,,,,,,,"0|i2fqsv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Jun/15 06:58;davsclaus;Martin are you working on a patch?;;;","14/Jun/15 10:51;lichtin;Yes, I'll give it a whirl.;;;","14/Jun/15 13:16;lichtin;Following http://camel.apache.org/contributing.html

{noformat}
git clone https://git-wip-us.apache.org/repos/asf/camel.git
cd camel
mvn eclipse:eclipse
{noformat}

unfortunately fails with

{noformat}
[ERROR] Failed to execute goal on project camel-gae: Could not resolve dependencies for project org.apache.camel:camel-gae:bundle:2.16-SNAPSHOT: The following artifacts could not be resolved: com.google.gdata:gdata-contacts-3.0:jar:1.41.5, com.google.gdata:gdata-calendar-2.0:jar:1.41.5, com.google.gdata:gdata-client-1.0:jar:1.41.5, com.google.gdata:gdata-core-1.0:jar:1.41.5: Could not find artifact com.google.gdata:gdata-contacts-3.0:jar:1.41.5 in bbp-repo (http://repo.bbp.ch/artifactory/repo) -> [Help 1]
{noformat};;;","14/Jun/15 14:08;davsclaus;Dont use mvn eclipse:eclipse. Instead Eclipse has out of the box maven plugin, so you can import existing maven project and select the folder of the platforms/commands

;;;","14/Jun/15 20:55;lichtin;Right. Just wanted to report that I cannot build Camel given the instructions.
""mvn clean install -Dtest=false"" fails the same way. But anyways.. don't need to for this JIRA.

What's confusing is that the context names listed by ""camel:context-list"" don't match what is expected by JMX as the 'context' name.
There is a so-called ""ManagementName"" expected when composing the object name. Not a problem, just one more thing.;;;","15/Jun/15 06:47;davsclaus;the context name is not required to be unique in the entire jvm and also end users can configure an explict name such as myCamel etc. Where as management name must be unique in the JVM. Therefore these 2 can differ. ;;;","15/Jun/15 08:23;lichtin;BTW, I see a regression in 2.16-SNAPSHOT with regards to Blueprint config files.
For example:

{noformat}
	<camelContext id=""myContext"" xmlns=""http://camel.apache.org/schema/blueprint""
		xsi:schemaLocation=""http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"" depends-on=""jms,PROPAGATION_REQUIRED"">
{noformat}

gives

{noformat}
org.osgi.service.blueprint.container.ComponentDefinitionException: Unresolved ref/idref to component: jms,PROPAGATION_REQUIRED
{noformat}

It no longer seems to understand the ""depends-on"" in case of more than one reference mentioned.
As far as I remember, the separator could be comma or space.;;;","15/Jun/15 11:12;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException while logging,CAMEL-8829,12835080,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,stafi,stafi,03/Jun/15 15:00,19/Jun/15 15:18,14/Jul/23 05:50,04/Jun/15 09:08,2.15.2,,,,,,,,,,,,,,2.16.0,,,,camel-core,,,,,,,0,,,,,,"There is a route which consumes messages from CXFRS endpoint.
It publishes them into 2 SEDA endpoints:
{code}
from(""direct:someCxfRsEndpoint"")
   ...
   .to(""seda:queue1?waitForTaskToComplete=Never&size=100&blockWhenFull=true&concurrentConsumers=1"")
   .to(""seda:queue2?waitForTaskToComplete=Never&size=100&blockWhenFull=true&concurrentConsumers=1"")
   ...
{code}

Both the seda consumers print the message into log:
{code}
from(""seda.."")
   ...
   .to(""log:queuelog?showAll=true&multiline=true"")
{code}

ConcurrentModificationException is thrown during logging the message:
{code}
Error processing exchange. Exchange[Message: ...]. Caused by: [java.util.ConcurrentModificationException - null]
java.util.ConcurrentModificationException: null
        at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429) ~[na:1.8.0_40]
        at java.util.HashMap$EntryIterator.next(HashMap.java:1463) ~[na:1.8.0_40]
        at java.util.HashMap$EntryIterator.next(HashMap.java:1461) ~[na:1.8.0_40]
        at java.util.AbstractMap.toString(AbstractMap.java:531) ~[na:1.8.0_40]
        at java.lang.String.valueOf(String.java:2982) ~[na:1.8.0_40]
        at java.lang.StringBuilder.append(StringBuilder.java:131) ~[na:1.8.0_40]
        at java.util.AbstractMap.toString(AbstractMap.java:536) ~[na:1.8.0_40]
        at java.lang.String.valueOf(String.java:2982) ~[na:1.8.0_40]
        at java.lang.StringBuilder.append(StringBuilder.java:131) ~[na:1.8.0_40]
        at org.apache.camel.processor.DefaultExchangeFormatter.format(DefaultExchangeFormatter.java:99) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.processor.CamelLogProcessor.process(CamelLogProcessor.java:66) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.processor.CamelLogProcessor.process(CamelLogProcessor.java:61) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.component.log.LogProducer.process(LogProducer.java:39) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) ~[camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:291) [camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:200) [camel-core-2.15.2.jar:2.15.2]
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:147) [camel-core-2.15.2.jar:2.15.2]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_40]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_40]
        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_40]
{code}

There is also another cause when it happens:
{code}
 org.eclipse.jetty.http.HttpFields -
java.util.ConcurrentModificationException: null
at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901) ~[na:1.8.0_40]
at java.util.ArrayList$Itr.next(ArrayList.java:851) ~[na:1.8.0_40]
at org.eclipse.jetty.http.HttpFields.toString(HttpFields.java:585) ~[jetty-http-9.2.9.v20150224.jar:9.2.9.v20150224]
at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886) [na:1.8.0_40]
at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763) [na:1.8.0_40]
at java.util.Formatter.format(Formatter.java:2520) [na:1.8.0_40]
at java.util.Formatter.format(Formatter.java:2455) [na:1.8.0_40]
at java.lang.String.format(String.java:2928) [na:1.8.0_40]
at org.eclipse.jetty.server.Response.toString(Response.java:1331) [jetty-server-9.2.9.v20150224.jar:9.2.9.v20150224]
at java.lang.String.valueOf(String.java:2982) [na:1.8.0_40]
at java.lang.StringBuilder.append(StringBuilder.java:131) [na:1.8.0_40]
at java.util.AbstractMap.toString(AbstractMap.java:536) [na:1.8.0_40]
at java.lang.String.valueOf(String.java:2982) [na:1.8.0_40]
at java.lang.StringBuilder.append(StringBuilder.java:131) [na:1.8.0_40]
at java.util.AbstractMap.toString(AbstractMap.java:536) [na:1.8.0_40]
at java.lang.String.valueOf(String.java:2982) [na:1.8.0_40]
at java.lang.StringBuilder.append(StringBuilder.java:131) [na:1.8.0_40]
at org.apache.camel.processor.DefaultExchangeFormatter.format(DefaultExchangeFormatter.java:99) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.processor.CamelLogProcessor.process(CamelLogProcessor.java:66) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.processor.CamelLogProcessor.process(CamelLogProcessor.java:61) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.component.log.LogProducer.process(LogProducer.java:39) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:291) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:200) [camel-core-2.15.2.jar:2.15.2]
at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:147) [camel-core-2.15.2.jar:2.15.2]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_40]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_40]
at java.lang.Thread.run(Thread.java:745) [na:1.8.0_40]
{code}",,davsclaus,stafi,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8886,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 04 09:08:33 UTC 2015,,,,,,,,,,,"0|i2fkyn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Jun/15 16:13;davsclaus;Yeah its the seda producer when you use wait=never that does a shallow copy and therefore its the same header map that the 2 loggers are using, and as they are routed concurrently then that exception may happen.

The fix would be to force the seda producer to copy the headers defensivly instead of shallow.;;;","04/Jun/15 09:08;davsclaus;This required a slight api change so keeping this for the next release.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Elasticsearch component fails in an OSGi environment due to missing names.txt,CAMEL-8816,12833665,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,29/May/15 03:11,01/Jun/15 14:17,14/Jul/23 05:50,01/Jun/15 14:17,2.14.3,2.15.2,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-elasticsearch,,,,,,,0,,,,,,"CAMEL-8194 just fix the setting load issue without using the local elasticsearch. When using the local elasticsearch in OSGi container, we still hit the error.",,njiang,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8194,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 01 14:17:10 UTC 2015,,,,,,,,,,,"0|i2fcz3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Jun/15 14:17;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[web page] default value of producerPoolMinEvictableIdle,CAMEL-8815,12833629,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,ssogabe,ssogabe,29/May/15 00:43,29/May/15 06:49,14/Jul/23 05:50,29/May/15 06:49,,,,,,,,,,,,,,,2.16.0,,,,camel-netty,,,,,,,0,wiki,,,,,"Netty component page (http://camel.apache.org/netty.html) describes that 
producerPoolMinEvictableIdle is 30,000 (30s). But it should be 300,000 (300s). 

See  NettyConfiguration.java,

    @UriParam(label = ""producer"", defaultValue = """" + 5 * 60 * 1000L)
    private long producerPoolMinEvictableIdle = 5 * 60 * 1000L;

camel-netty4 has same issue.
",,njiang,ssogabe,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 29 06:49:18 UTC 2015,,,,,,,,,,,"0|i2fcr3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/May/15 06:49;njiang;I just updated the wiki with thanks  to Seiji.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in HL7MLLPNettyDecoder,CAMEL-8812,12833342,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,vandenbrink@zorgdomein.nl,vandenbrink@zorgdomein.nl,28/May/15 08:15,29/May/15 15:27,14/Jul/23 05:50,29/May/15 15:27,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-hl7,,,,,,,0,,,,,,"HL7MLLPNettyDecoder leaks memory because it doesn't release the Netty ByteBuf it uses.

Checkout http://netty.io/wiki/reference-counted-objects.html for more information about Netty ByteBuf and preventing leaks.

When I set the leak detection level to paranoid (-Dio.netty.leakDetectionLevel=paranoid) I get consistent leak reports like the one below.

I think the solution is to call buf.release() in the decode() method after it's done with buf. But I'm still trying to reproduce this in a unit test.


2015-05-28 10:13:48,951 ERROR io.netty.util.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.
Recent access records: 5
#5:
	io.netty.buffer.AdvancedLeakAwareByteBuf.release(AdvancedLeakAwareByteBuf.java:45)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:236)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	java.lang.Thread.run(Thread.java:745)
#4:
	io.netty.buffer.AdvancedLeakAwareByteBuf.toString(AdvancedLeakAwareByteBuf.java:697)
	org.apache.camel.component.hl7.HL7MLLPNettyDecoder.asString(HL7MLLPNettyDecoder.java:90)
	org.apache.camel.component.hl7.HL7MLLPNettyDecoder.decode(HL7MLLPNettyDecoder.java:66)
	io.netty.handler.codec.DelimiterBasedFrameDecoder.decode(DelimiterBasedFrameDecoder.java:216)
	io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:315)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:229)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	java.lang.Thread.run(Thread.java:745)
#3:
	io.netty.buffer.AdvancedLeakAwareByteBuf.slice(AdvancedLeakAwareByteBuf.java:73)
	org.apache.camel.component.hl7.HL7MLLPNettyDecoder.decode(HL7MLLPNettyDecoder.java:64)
	io.netty.handler.codec.DelimiterBasedFrameDecoder.decode(DelimiterBasedFrameDecoder.java:216)
	io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:315)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:229)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	java.lang.Thread.run(Thread.java:745)
#2:
	io.netty.buffer.AdvancedLeakAwareByteBuf.bytesBefore(AdvancedLeakAwareByteBuf.java:607)
	org.apache.camel.component.hl7.HL7MLLPNettyDecoder.decode(HL7MLLPNettyDecoder.java:62)
	io.netty.handler.codec.DelimiterBasedFrameDecoder.decode(DelimiterBasedFrameDecoder.java:216)
	io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:315)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:229)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	java.lang.Thread.run(Thread.java:745)
#1:
	io.netty.buffer.AdvancedLeakAwareByteBuf.retain(AdvancedLeakAwareByteBuf.java:709)
	io.netty.handler.codec.DelimiterBasedFrameDecoder.decode(DelimiterBasedFrameDecoder.java:277)
	org.apache.camel.component.hl7.HL7MLLPNettyDecoder.decode(HL7MLLPNettyDecoder.java:60)
	io.netty.handler.codec.DelimiterBasedFrameDecoder.decode(DelimiterBasedFrameDecoder.java:216)
	io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:315)
	io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:229)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:324)
	io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:847)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	java.lang.Thread.run(Thread.java:745)
Created at:
	io.netty.buffer.UnpooledByteBufAllocator.newDirectBuffer(UnpooledByteBufAllocator.java:55)
	io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:155)
	io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:146)
	io.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:107)
	io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl.allocate(AdaptiveRecvByteBufAllocator.java:104)
	io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:117)
	io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	java.lang.Thread.run(Thread.java:745)
",,njiang,vandenbrink@zorgdomein.nl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/May/15 10:34;vandenbrink@zorgdomein.nl;0001-Release-netty-ByteBuf-after-use-fixes-resource-leak.patch;https://issues.apache.org/jira/secure/attachment/12736106/0001-Release-netty-ByteBuf-after-use-fixes-resource-leak.patch","29/May/15 10:24;vandenbrink@zorgdomein.nl;HL7MLLPNettyDecoderResourceLeakTest.java;https://issues.apache.org/jira/secure/attachment/12736105/HL7MLLPNettyDecoderResourceLeakTest.java",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Fri May 29 15:27:25 UTC 2015,,,,,,,Patch Available,,,,"0|i2fb1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/May/15 10:24;vandenbrink@zorgdomein.nl;Attached is a unit test that reproduces the ResourceLeak error message. I'm not sure how to turn this into a proper test though. Don't know what to assert on..;;;","29/May/15 10:34;vandenbrink@zorgdomein.nl;This seems to fix it for me.;;;","29/May/15 15:27;njiang;Applied the patch into Camel master, camel 2.15.x branch with thanks to Gijsbert.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel CXF may propagate wrong Content-Length headers,CAMEL-8810,12833335,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,forsthofer,siano,siano,28/May/15 07:33,13/Jun/15 11:12,14/Jul/23 05:50,13/Jun/15 11:12,2.14.2,2.15.2,2.16.0,,,,,,,,,,,,2.14.4,2.15.3,2.16.0,,camel-cxf,,,,,,,0,,,,,,"In some rare cases camel-cxf may propagate wrong Content-Length HTTP headers in routing scenarios.

The scenario in question is a simple camel-cxf to camel-cxf scenario with a request-reply pattern. If the called server does respond with a Content-Length (not chunked) and the server does not send any HTTP protocol header that is not filtered (like Content-Length or Content-Type) the headers from the original server response are forwarded.

If the payload returned by Camel is longer than the payload returned by the called server (which provided the Content-Length) e.g. because the proxy is working in PAYLOAD mode and the server uses shorter namespace prefixes for the SOAP envelope, the Content-Length will be too short and the calling client may cut off the message.

See the attached unit test for details.

The reason for that is that the original headers get set when copying the invocation context from the camel exchange. Normally the protocol header map will be overwritten with the map of filtered headers, so this is not an issue, however of the map of filtered headers is completely empty this will not happen. The fix is to remove the copied protocol headers in that case.

The situation will rarely occur in real life because the Server header is there most of the time, so the list of filtered protocol headers is not empty. ",,forsthofer,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/May/15 07:37;siano;0001-CAMEL-8810-Camel-CXF-may-propagate-wrong-Content-Len.patch;https://issues.apache.org/jira/secure/attachment/12735819/0001-CAMEL-8810-Camel-CXF-may-propagate-wrong-Content-Len.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jun 13 11:11:27 UTC 2015,,,,,,,Patch Available,,,,"0|i2fazz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jun/15 11:11;forsthofer;Patch from Stephan applied to 2.16.0, 2.15.3, and 2.14.4. Thanks to Stephan  Siano.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException on RestletComponent.disconnect,CAMEL-8805,12833062,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,27/May/15 14:36,28/May/15 06:27,14/Jul/23 05:50,27/May/15 16:41,,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-restlet,,,,,,,0,,,,,,"{code}
[0m[33m10:06:06,278 WARN  [org.apache.camel.impl.DefaultCamelContext] (pool-2-thread-1) Error occurred while shutting down service: org.apache.camel.impl.RouteService@3f760e97. This exception will be ignored.: 
java.lang.NullPointerException
	at org.apache.camel.component.restlet.RestletComponent.disconnect(RestletComponent.java:216) [camel-restlet-2.15.2.jar:2.15.2]
	at org.apache.camel.component.restlet.RestletEndpoint.disconnect(RestletEndpoint.java:125) [camel-restlet-2.15.2.jar:2.15.2]
	at org.apache.camel.component.restlet.RestletConsumer.doStop(RestletConsumer.java:86) [camel-restlet-2.15.2.jar:2.15.2]
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:141) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:204) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.RouteService.stopChildService(RouteService.java:359) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.RouteService.doStop(RouteService.java:237) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:77) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:101) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:141) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:204) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:2827) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:2852) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:2840) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:2675) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2432) [camel-core-2.15.2.jar:2.15.2]
	at org.wildfly.camel.test.restlet.RestletConsumerIntegrationTest.testCxfRsConsumer(RestletConsumerIntegrationTest.java:59) [jaxrs-consumer-tests:]
{code}

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/651",,davsclaus,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 28 06:27:47 UTC 2015,,,,,,,,,,,"0|i2f9bj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/May/15 14:44;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/529

    [CAMEL-8805] NullPointerException on RestletComponent.disconnect

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8805

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/529.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #529
    
----
commit fe23607b49c9fb3997fa38b330a147e995439cc2
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-05-27T14:43:48Z

    [CAMEL-8805] NullPointerException on RestletComponent.disconnect

----
;;;","27/May/15 16:41;davsclaus;Thanks for the PR;;;","28/May/15 06:27;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/529
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in RestSwaggerReader,CAMEL-8804,12833059,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,27/May/15 14:29,27/May/15 17:04,14/Jul/23 05:50,27/May/15 17:04,,,,,,,,,,,,,,,2.16.0,,,,camel-swagger,,,,,,,0,,,,,,"{code}
16:21:14,281 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-3-thread-1) Apache Camel 2.16-SNAPSHOT (CamelContext: swagger-test) is starting
16:21:14,283 INFO  [org.apache.camel.management.ManagedManagementStrategy] (pool-3-thread-1) JMX is enabled
16:21:14,360 INFO  [org.wildfly.extension.camel] (MSC service thread 1-5) Bound camel naming object: java:jboss/camel/context/swagger-test
16:21:14,360 INFO  [org.wildfly.extension.camel] (pool-3-thread-1) Camel context starting: swagger-test
16:21:14,493 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-3-thread-1) AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
16:21:14,494 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-3-thread-1) StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
16:21:14,577 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-3-thread-1) Route: route2 started and consuming from: Endpoint[direct://hello]
16:21:14,580 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-3-thread-1) Route: route1 started and consuming from: Endpoint[servlet:///hello/%7Bname%7D?httpMethodRestrict=GET]
16:21:14,580 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-3-thread-1) Total 2 routes, of which 2 is started.
16:21:14,581 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-3-thread-1) Apache Camel 2.16-SNAPSHOT (CamelContext: swagger-test) started in 0.299 seconds
16:21:15,358 INFO  [stdout] (pool-3-thread-1) org.apache.camel:context=swagger-test,type=context,name=""swagger-test"": <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
16:21:15,358 INFO  [stdout] (pool-3-thread-1) <rests xmlns=""http://camel.apache.org/schema/spring"">
16:21:15,358 INFO  [stdout] (pool-3-thread-1)     <rest path=""/hello"">
16:21:15,358 INFO  [stdout] (pool-3-thread-1)         <get uri=""/{name}"">
16:21:15,358 INFO  [stdout] (pool-3-thread-1)             <param paramType=""path"" name=""name"" required=""true""/>
16:21:15,359 INFO  [stdout] (pool-3-thread-1)             <to uri=""direct:hello"" id=""to1""/>
16:21:15,359 INFO  [stdout] (pool-3-thread-1)         </get>
16:21:15,359 INFO  [stdout] (pool-3-thread-1)     </rest>
16:21:15,359 INFO  [stdout] (pool-3-thread-1) </rests>
16:21:15,360 INFO  [stdout] (pool-3-thread-1) 
16:21:15,364 INFO  [stdout] (pool-3-thread-1) jboss.jsr77:j2eeType=JVM,name=default,J2EEServer=default: null
16:21:15,365 INFO  [stdout] (pool-3-thread-1) jboss.jsr77:j2eeType=J2EEServer,name=default: null
16:21:15,365 INFO  [stdout] (pool-3-thread-1) jboss.jsr77:j2eeType=J2EEDomain,name=jboss.jsr77: null
16:21:15,820 ERROR [io.undertow.request] (default task-2) UT005023: Exception handling request to /swagger-tests/api-docs: java.lang.NullPointerException
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$createParameters$2.apply(RestSwaggerReader.scala:190)
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$createParameters$2.apply(RestSwaggerReader.scala:179)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.Iterator$class.foreach(Iterator.scala:727)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)
	at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
{code}",,tdiesler,,,,,,,,,,,,,,,,,,,,CAMEL-8791,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-05-27 14:29:25.0,,,,,,,,,,,"0|i2f9av:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Conflicting classes in camel-jetty9 Maven artifact dependencies,CAMEL-8803,12833012,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mtommila,mtommila,27/May/15 11:24,29/Jul/15 13:34,14/Jul/23 05:50,29/Jul/15 13:34,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-jetty,,,,,,,0,maven,,,,,"The Maven artifact camel-jetty9 depends on org.apache.geronimo.specs:geronimo-servlet_3.0_spec.

camel-jetty9 also depends on org.eclipse.jetty:jetty-server:jar:9.2.9.v20150224, which further depends on javax.servlet:javax.servlet-api:jar:3.1.0

The dependencies of camel-jetty9 include thus two conflicting and different versions of several classes. Both the Servlet API 3.0 version and Servlet API 3.1 version are included as (transitive) dependencies.

Instead of depending on the geronimo artifact, couldn't camel-jetty9 just depend on the servlet-api artifact (of the correct version)?",All,davsclaus,mtommila,,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jul 29 13:34:45 UTC 2015,,,,,,,,,,,"0|i2f90f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jul/15 13:34;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
weaveAddLast throwing UnsupportedOperation when route have a ChoiceDefinition,CAMEL-8798,12832710,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gterral,gterral,26/May/15 13:14,29/May/15 07:43,14/Jul/23 05:50,29/May/15 07:43,2.14.2,2.15.0,2.15.1,2.15.2,,,,,,,,,,,2.14.4,2.15.3,2.16.0,,camel-core,,,,,,,0,,,,,,"I'm currently upgrading from Camel 2.14.1 to 2.15.2, after the upgrade some of my test are failing. 

My route is: 
        {code}from(""file:input?idempotent=true&moveFailed=.error"").routeId(""MyRoute"")
        .choice()
             .when(body().isEqualTo(""body1""))
                 .log(""body1"")
             .otherwise()
                .log(""notBody1"")
       .end()
 {code}
My test contains : 
 
        {code}camelContext.getRouteDefinition(""MyRoute"").adviceWith(camelContext, new AdviceWithRouteBuilder() {
            @Override
            public void configure() {
                weaveAddLast().to(mockOutput);
            }
        });
{code}
The weaveAddLast is failing with the following stackTrace: 
{code}
java.lang.UnsupportedOperationException 
        at java.util.AbstractList.add(AbstractList.java:148) 
        at org.apache.camel.builder.AdviceWithTasks$4.task(AdviceWithTasks.java:298) 
        at org.apache.camel.model.RouteDefinition.adviceWith(RouteDefinition.java:270) 
{code}
After some debug I found that when my route and with a Choice I cannot weaveAddLast the route. 
When the AdviceWithTasks task method try to add the outputs ([here|https://github.com/apache/camel/blob/camel-2.15.2/camel-core/src/main/java/org/apache/camel/builder/AdviceWithTasks.java#L298]) the implementation of the list return by the ChoiceDefinition class does not implements the method add(int,Object) then we have the UnsupportedOperation 

The difference between 2.14.1 and 2.15.2 is that in the AdviceWithTasks the outputs list where the weaveAddLast try to find the last Processor to add the outputs is not a list returned by ChoiceDefinition but it's a list with the Logs processor. 

This difference is there because now in 2.15.2 the method that is going through the route to retrieve the outputs nodes have a maximum depth which is computed [here|https://github.com/apache/camel/blob/camel-2.15.2/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java#L221]

When my route have finish with a ChoiceDefinition the maximum depth computed is only 1 then I cannot have my logs in outputs an the weaveAddLast have in his list only the ChoiceDefinition. ",JDK 7.0 64bits,antonin.stefanutti,davsclaus,gterral,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 29 07:43:57 UTC 2015,,,,,,,,,,,"0|i2f767:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"29/May/15 07:43;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-schematron - Provide the class loader of this component to work in OSGi environments,CAMEL-8796,12832494,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,akhettar,akhettar,25/May/15 10:13,05/Jun/15 09:55,14/Jul/23 05:50,05/Jun/15 09:55,2.14.0,2.14.1,2.14.2,2.15.0,2.15.1,2.15.2,,,,,,,,,2.15.3,2.16.0,,,camel-schematron,,,,,,,0,,,,,,"Schematron component requires Saxon, rules loader requires class loader of this component to work in OSGI environment.  See discussion here: http://camel.465427.n5.nabble.com/Schematron-component-Not-supported-http-saxon-sf-net-feature-linenumbering-td5766887.html",,akhettar,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 05 09:23:07 UTC 2015,,,,,,,,,,,"0|i2f5uv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/May/15 10:14;akhettar;I can't assign this to myself. I am working on patch fix for this hopefully I should get it resolved today. I will create a pull request once done.

Ayache;;;","01/Jun/15 19:30;githubbot;GitHub user akhettar opened a pull request:

    https://github.com/apache/camel/pull/537

    Handling resources loading in OSGI environment

    This pull request is in relation to the following Jira ticket: https://issues.apache.org/jira/browse/CAMEL-8796
    Hopefully this change should go to all camel releases from version 14.0.0 onwards.
    
    Thanks

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/akhettar/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/537.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #537
    
----
commit 82d6e60d07a017faa48af3c99d47a036979c3699
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-03-24T11:12:20Z

    * component creates its own instance only if it's not provided
    * ability to reference the instance by its name

commit 20b416788a0f52f45437967e7b962f53cb7400e7
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-03-25T11:27:39Z

    Adding a check if the hazelcastInstanceName parameter is present or not before querying the cluster.

commit 28e4371a74f6f35b1bda415e113178c43a5d6388
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-06-01T19:18:19Z

    Handling resource loading in OSGI environment

commit e84c13f43aff9de32a70a0bfbfde97b6ded19f20
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-06-01T19:22:21Z

    Merge remote-tracking branch 'upstream/master'
    
    Conflicts:
    	components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/HazelcastComponent.java
    	components/camel-schematron/src/main/java/org/apache/camel/component/schematron/SchematronEndpoint.java

----
;;;","01/Jun/15 19:32;akhettar;Let me know if you need any help in porting the changes to all the versions.

Thanks

Ayache;;;","02/Jun/15 08:05;githubbot;Github user akhettar closed the pull request at:

    https://github.com/apache/camel/pull/537
;;;","02/Jun/15 08:20;githubbot;GitHub user akhettar opened a pull request:

    https://github.com/apache/camel/pull/538

    Adding support for resource loading in OSGI environment

    Hi Claus,
    
    Sorry about the hazelcast mix up, it's now a clean pull request
    
    https://issues.apache.org/jira/browse/CAMEL-8796
    
    Ayache

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/akhettar/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/538.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #538
    
----
commit 39d7f3f53c491826383443dc674796d7fcf1b702
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-06-02T08:18:07Z

    Handling resources loading in OSGI environment

----
;;;","05/Jun/15 09:20;githubbot;Github user akhettar closed the pull request at:

    https://github.com/apache/camel/pull/538
;;;","05/Jun/15 09:23;akhettar;Hi

Could you let me know when the affected versions are updated?

Regards,

Ayache;;;",,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException thrown when accessing swagger generated /api-docs in camel-example-servlet-rest-tomcat,CAMEL-8791,12832106,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,vchalupa,vchalupa,22/May/15 09:37,28/May/15 04:56,14/Jul/23 05:50,27/May/15 16:57,2.16.0,,,,,,,,,,,,,,2.16.0,,,,camel-swagger,,,,,,,0,,,,,,"SEVERE [http-nio-8080-exec-2] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [ApiDeclarationServlet] in context with path [/camel-example-servlet-rest-tomcat] threw exception
 java.lang.NullPointerException
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$createParameters$2.apply(RestSwaggerReader.scala:190)
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$createParameters$2.apply(RestSwaggerReader.scala:179)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.Iterator$class.foreach(Iterator.scala:727)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)
	at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at org.apache.camel.component.swagger.RestSwaggerReader.createParameters(RestSwaggerReader.scala:179)
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$read$2.apply(RestSwaggerReader.scala:123)
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$read$2.apply(RestSwaggerReader.scala:70)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at org.apache.camel.component.swagger.RestSwaggerReader.read(RestSwaggerReader.scala:70)
	at org.apache.camel.component.swagger.RestApiListingCache$$anonfun$listing$1$$anonfun$apply$1.apply(RestApiListingCache.scala:42)
	at org.apache.camel.component.swagger.RestApiListingCache$$anonfun$listing$1$$anonfun$apply$1.apply(RestApiListingCache.scala:41)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)
	at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45)
	at org.apache.camel.component.swagger.RestApiListingCache$$anonfun$listing$1.apply(RestApiListingCache.scala:41)
	at org.apache.camel.component.swagger.RestApiListingCache$$anonfun$listing$1.apply(RestApiListingCache.scala:38)
	at scala.Option.orElse(Option.scala:257)
	at org.apache.camel.component.swagger.RestApiListingCache$.listing(RestApiListingCache.scala:38)
	at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.renderResourceListing(RestSwaggerApiDeclarationServlet.scala:171)
	at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.doGet(RestSwaggerApiDeclarationServlet.scala:98)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.camel.component.swagger.RestSwaggerCorsFilter.doFilter(RestSwaggerCorsFilter.scala:44)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:617)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
",Tomcat 8.0.22,davsclaus,vchalupa,,,,,,,,,,,,,,,,,,CAMEL-8804,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 28 04:56:33 UTC 2015,,,,,,,,,,,"0|i2f3iv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/May/15 16:56;davsclaus;You must be using 2.16-SNAPSHOT as that code in 2.15.x is working;;;","27/May/15 16:57;davsclaus;And the stacktrace does not match 2.15.x. It only matches 2.16-SNAPSHOT;;;","28/May/15 04:56;vchalupa;Sorry, it is 2.16-SNAPSHOT.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Websocket with jetty 9 is not working due to class name and package name changes ,CAMEL-8789,12831875,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,acosentino,apatel2000,apatel2000,21/May/15 17:27,20/Apr/16 13:03,14/Jul/23 05:50,20/Apr/16 13:03,2.15.2,,,,,,,,,,,,,,2.18.0,,,,camel-websocket,,,,,,,0,,,,,,"http://camel.465427.n5.nabble.com/websocket-with-jetty-9-tp5766712p5767217.html

I did try websocket component with jetty 9 and Apache Camel 2.15.2 and i got  same exception due to  SslContextFactory  class  moved in jetty 9 to  org.eclipse.jetty.util.ssl.folder and Apache  websocket 
reference to  org.eclipse.jetty.http.ssl.SslContextFactory  that is only  exist in Jetty 8 and below version. ",Mac/Window on Jetty 9.x ,apatel2000,davsclaus,jarslanian,njiang,,,,,,,,,,,,,,,,,,,,CAMEL-9890,CAMEL-8637,,CAMEL-9890,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 19 16:44:29 UTC 2016,,,,,,,,,,,"0|i2f253:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/May/15 00:39;njiang;Just add the other task which is related to Jetty9 upgrade.;;;","25/Jan/16 21:13;jarslanian;Is there any ETA on this?  I checked out the master branch and it looks to still be setup for jetty 8 in the camel-websocket component pom.  I am working on a decision on what to do about lack of support for Jetty 9 websockets.;;;","28/Jan/16 12:22;davsclaus;Yeah we love contributions, so people is welcome to help migrate camel-websocket to be jetty 9.;;;","01/Feb/16 16:52;jarslanian;We are now leaning toward fixing this ourselves.  Has anyone done any initial assessment for the level of effort of this task?  This would be my first time working with any of the camel source code, if there is any information or guidance you can provide on getting started on this that would be much appreciated.;;;","01/Feb/16 20:12;davsclaus;See here how to contribute
http://camel.apache.org/contributing;;;","19/Feb/16 16:44;davsclaus;This is massive work, moving to next release where we drop jetty8;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[doc] camel-http doc should mention that NTLM support is very limited.,CAMEL-8788,12831743,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,tmielke,tmielke,21/May/15 14:27,22/May/15 08:23,14/Jul/23 05:50,21/May/15 15:59,2.15.2,,,,,,,,,,,,,,,,,,documentation,,,,,,,0,documentation,http,httpclient,,,"The documentation of the [camel-http|http://camel.apache.org/http.html] component implies there is full support for NTLM. 

However tests against IIS 8 prove this wrong.
Further from http://hc.apache.org/httpclient-3.x/authentication.html#NTLM

""NT Lan Manager (NTLM) authentication is a proprietary, closed challenge/response authentication protocol for Microsoft Windows. Only some details about NTLM protocol are available through reverse engineering. HttpClient provides limited support for what is known as NTLMv1, the early version of the NTLM protocol. HttpClient does not support NTLMv2 at all. ""

These limitations on NTLM should be documented on the camel-http component doc. ",,davsclaus,tmielke,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 21 15:58:12 UTC 2015,,,,,,,,,,,"0|i2f1t3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/May/15 14:29;tmielke;I could imagine a comment like the following being added to the ""Authentication and Proxy"" section of the camel-http documentation.

{quote}
Note: camel-http is based on HttpClient v3.x and as such has only [limited support|http://hc.apache.org/httpclient-3.x/authentication.html#NTLM] for what is known as NTLMv1, the early version of the NTLM protocol. It does not support NTLMv2 at all.""
{quote}


I am happy to add this note to the documentation if there is agreement.;;;","21/May/15 14:34;davsclaus;+1 go ahead Torsten we love contributions;;;","21/May/15 15:58;tmielke;Resolved with revision 88 of 
https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=54726;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The ServletContext init parameters check is not right in CamelServletContextListener,CAMEL-8786,12831616,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,21/May/15 06:34,21/May/15 14:21,14/Jul/23 05:50,21/May/15 14:21,2.14.2,2.15.2,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-servletlistener,,,,,,,0,,,,,,"CamelServletContextListener always complains, even the parameter is quite useful. 
{code}
There are 1 ServletContext init parameters, unknown to Camel. Maybe they are  used by other frameworks? [{routeBuilder-routes=com.mycompany.MyRoute}]
{code}
There is [the mail thread|http://camel.465427.n5.nabble.com/ServletContext-init-parameters-unknown-to-Camel-tp5767347.html]  about it ",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 21 14:21:20 UTC 2015,,,,,,,,,,,"0|i2f11b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/May/15 14:21;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StackOverFlowError using Custom InterceptStrategy,CAMEL-8785,12831591,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,21/May/15 03:16,21/May/15 06:53,14/Jul/23 05:50,21/May/15 06:53,2.14.2,,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-core,,,,,,,0,,,,,,"Testing a route including camel's custom InterceptStrategy, http://camel.apache.org/intercept.html, got a StackOverFlowError as below,
{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Test]
at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1379)
at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:283)
at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:381)
at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
Caused by: java.lang.StackOverflowError
at java.lang.ThreadLocal$ThreadLocalMap.nextIndex(ThreadLocal.java:313)
at java.lang.ThreadLocal$ThreadLocalMap.expungeStaleEntry(ThreadLocal.java:563)
at java.lang.ThreadLocal$ThreadLocalMap.remove(ThreadLocal.java:461)
at java.lang.ThreadLocal$ThreadLocalMap.access$200(ThreadLocal.java:261)
at java.lang.ThreadLocal.remove(ThreadLocal.java:202)
{code}
The stack shows me StackOverFlowError on the org.apache.camel.processor.InterceptorToAsyncProcessorBridge.process() for the affected camel versions.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 21 06:53:45 UTC 2015,,,,,,,,,,,"0|i2f0vr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/May/15 03:18;njiang;As the Custom InterceptStrategy could introduce a cycle to processor chain, that lead to the StackOverFlowError.
We need to avoid this cycle when setup the InterceptorToAsyncProcessorBridge.;;;","21/May/15 06:53;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Policy, Validate, Wiretap Scala DSL don't work out of box",CAMEL-8784,12831351,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/May/15 11:52,21/May/15 02:50,14/Jul/23 05:50,21/May/15 02:50,2.14.2,2.15.2,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-scala,,,,,,,0,,,,,,"org.apache.camel.scala.dsl.SAbstractDefinition just return this instance when calling ""Policy, Validate, Wiretap"" scala DSL, it cause the same issue of CAMEL-8783",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8783,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 21 02:50:41 UTC 2015,,,,,,,,,,,"0|i2ezfr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"21/May/15 02:50;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Transacted not working correctly in scala,CAMEL-8783,12831178,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,flaroche,flaroche,19/May/15 21:19,05/Sep/15 09:11,14/Jul/23 05:50,05/Sep/15 09:11,2.15.2,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-scala,,,,,,,0,,,,,,"When I try to use transacted in a scala route, I get an error and the camel context doesn't start.

The error states that there is no output in route.

After some time watching at the code with different breakpoints, I noticed :

In org.apache.camel.scala.dsl.builder.RouteBuilder (l199) the transacted with URI doesn't call the stack.top.transacted with the URI parameter.

Even with this done, it still gives the same error : 

""Route myRoute has no output processors. You need to add outputs to the route such as to(""log:foo"").""

even when  my route is as simple as :

""direct:something"" ==> {
  routeId(""log:foo"")
  transacted(""SomeStrategy"")
  --> (""log:foo"")
}

After some more debug, I saw that the output list for the transacted node stays empty, so my guess is that, in the org.apache.camel.scala.dsl.SAbstractDefinition class, the line def transacted(ref: String) = wrap(target.transacted(ref)) should return something else to handle outputs.

Since I can mix java and scala routes, there are workarounds, but still, now that I've gotten used to scala routes, I don't really want to go back to java routes ;)

",,davsclaus,flaroche,njiang,,,,,,,,,,,,,,,,,,,,,CAMEL-8784,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 05 09:11:25 UTC 2015,,,,,,,,,,,"0|i2eydz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/May/15 07:41;njiang;It's caused by SAbstractDefinition wrap method doesn't return a write object, I just commit a quick fix with a simple test of it.;;;","20/May/15 07:41;davsclaus;btw Willem as policy works similar as transacted could you check that if we need a similar fix for that also?

{code}
from a
  policy myPolicy
  to b
{code};;;","20/May/15 08:00;njiang;Yeah, some other DSLs have the similar issue, I'm working on it now.;;;","24/Aug/15 12:49;flaroche;I have tested today with 2.15.3 and I still get the same issues.

I have tried the following dsl nodes :

transacted(uri: String) // something seems wrong with this node, since the code states : def transacted(uri: String) = stack.top.transacted in org.apache.camel.scala.dsl.builder.RouteBuilder:198
transacted
policy(policy: Policy)

all these tries give me a no processor exception.

GL with them !;;;","05/Sep/15 07:37;davsclaus;That is because you use the ==> syntax which dont work as well. If you just do

      from(""direct:start"")
        .routeId(""myRoute"").transacted.to(""mock:result"")

it works fine;;;","05/Sep/15 08:15;davsclaus;Okay tracked this down to when using ==> style then the Camel routes it builds do not get prepared which is the process that setup transactions and whatnot. If you use the java style then this happens as its just java based.

;;;","05/Sep/15 09:11;davsclaus;I got it fixed now;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Configuring endpoints using reference lookup may fail with matching primitive types with their Object counterpart types,CAMEL-8782,12831145,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/May/15 19:44,19/May/15 20:25,14/Jul/23 05:50,19/May/15 20:25,2.15.2,,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-core,,,,,,,0,,,,,,"Based on PR
https://github.com/apache/camel/pull/522#issuecomment-103620070

Yeah I had a look its due primtive vs object types, that causes Camel to not match the setter method.

eg the method uses a boolean type, but the returned value from the reference lookup is a java.lang.Boolen type. And therefor its not used. I will log a ticket and fix that.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-05-19 19:44:04.0,,,,,,,,,,,"0|i2ey6n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel exec component have trouble to load arguments list from message header,CAMEL-8780,12830574,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,18/May/15 05:18,22/May/15 02:59,14/Jul/23 05:50,22/May/15 02:59,2.14.2,2.15.2,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-exec,,,,,,,0,,,,,,"When trying to set the following header:
{code}
            <setHeader headerName=""CamelExecCommandArgs"" >
                <simple>""--import"" ""--export""</simple>
            </setHeader>
{code}
We receive the following error:
{code}
org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.util.List with value ""--import"" ""--export"" due java.lang.NumberFormatException: For input string: """"--import"" ""--export""""
{code}
",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 22 02:59:02 UTC 2015,,,,,,,,,,,"0|i2euon:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/May/15 05:21;njiang;It turns out that DefaultExecBinding try to turn the String into a List, but other type converter just introduces an exception when doing it.
;;;","22/May/15 02:59;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultJettyHttpBinding preserves CONTEXT_ENCODING from the request even HTTP response doesn't contain the header,CAMEL-8774,12829486,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,matihost,matihost,13/May/15 08:09,27/May/15 14:19,14/Jul/23 05:50,27/May/15 14:19,2.15.2,,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-jetty,,,,,,,0,,,,,,"When Http Request is Gzip encoded (CONTENT_ENCODING is set) but the HTTP response is not ( httpExchange.getResponseHeaders().get(HttpHeaders.CONTENT_ENCODING) == null) then Exchange.CONTENT_ENCODING is present in the Camel out message.

This is because DefaultJettyHttpBinding:125 preserves all in headers.

I believe that HTTP protocol headers (except custom ones) from the in shouldn't be copied to the Camel out message.",,matihost,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 27 14:19:53 UTC 2015,,,,,,,,,,,"0|i2eo3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/May/15 12:14;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches.;;;","14/May/15 13:05;matihost;Looks better, but I'm wondering still about ""Content-Encoding"" header.
It is not included  in HttpHeaderFilterStrategy.
Could you add also some test for that?

PS. Thanks for really fast attention.;;;","15/May/15 01:58;njiang;Hi Mateusz, 

You are right, I made a mistake to use the HttpHeaderFilterStrategy directly.
As this HttpHeaderFilter doesn't filter all http related protocol and it also filter the Camel related headers. 
I will commit a quick fix for it by apply a custom HttpHeaderFilterStrategy to use.

Regards,

Willem;;;","15/May/15 02:09;njiang;I just found camel-http, camel-http4, camel-ahc have the same issue here.;;;","27/May/15 14:19;njiang;Just applied a patch into camel master, camel-2.15.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
hdfs2 component overwrite option is also being applied to directory filesystem path,CAMEL-8768,12829204,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hfaouaz,hfaouaz,12/May/15 14:45,09/Jul/15 10:08,14/Jul/23 05:50,09/Jul/15 10:08,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-hdfs,,,,,,,0,hadoop,,,,,"If you need to produce files into an existing HDFS2 path, the default behavoir is overwrite the path, which will delete all existing files on HDFS.  If overwrite option is disabled, then the component will complain that the existing HDFS directory exists and will not work.  

The propose solution is to add the following if statement to ignore check if the HDFS directory exists. The overwrite option should only be used for files not directories.

code snippet in HdfsOutputStream.java and patch is attached

 if (ret.info.getFileSystem().exists(new Path(ret.actualPath))) {
                //only check of not directory
                if (!ret.info.getFileSystem().isDirectory(new Path(ret.actualPath))) {
                    if (configuration.isOverwrite()) {
                        ret.info.getFileSystem().delete(new Path(ret.actualPath), true);
                    } else {
                        throw new RuntimeCamelException(""The file already exists"");
                    }
                }
            }",,davsclaus,hfaouaz,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/May/15 15:04;hfaouaz;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12732253/patchfile.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Thu Jul 09 10:08:16 UTC 2015,,,,,,,,,,,"0|i2emfj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/May/15 15:04;hfaouaz;patch is attached  to handle directory path in HDFS;;;","09/Jul/15 10:08;davsclaus;Thanks for the patch. I did similar for the hdfs 1.x component.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JpaConsumer - May poll too soon before JPA stuff is initialized,CAMEL-8765,12828678,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/May/15 18:34,10/May/15 18:43,14/Jul/23 05:50,10/May/15 18:42,2.15.2,,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-jpa,,,,,,,0,,,,,,"There can be a NPE if the jpa consumer polls too soon
{code}
2015-05-10 20:35:25,605 [ction.BookOrder] WARN  JpaConsumer                    - Consumer Consumer[jpa://camelinaction.BookOrder] failed polling endpoint: Endpoint[jpa://camelinaction.BookOrder]. Will try again at next poll. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.camel.component.jpa.JpaConsumer$1.doInTransaction(JpaConsumer.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)
	at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:94)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-05-10 18:34:08.0,,,,,,,,,,,"0|i2ej8f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Spring-Redis: Jedis bundle require commons-pool2 ,CAMEL-8764,12828662,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,acosentino,acosentino,acosentino,10/May/15 14:22,10/May/15 14:36,14/Jul/23 05:50,10/May/15 14:32,,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-spring-redis,,,,,,,0,Redis,,,,,"Actually when you run CamelSpringRedisTest Karaf Integration test you get the following error:

{code}
ERROR: Bundle org.apache.servicemix.bundles.jedis [90] Error starting mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jedis/2.6.2_1 (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.jedis [90]: Unable to resolve 90.0: missing requirement [90.0] osgi.wiring.package; (osgi.wiring.package=org.apache.commons.pool2))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.jedis [90]: Unable to resolve 90.0: missing requirement [90.0] osgi.wiring.package; (osgi.wiring.package=org.apache.commons.pool2)
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:745)
ERROR: Bundle org.apache.servicemix.bundles.jedis [90] Error starting/stopping bundle. (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.jedis [90]: Unable to resolve 90.0: missing requirement [90.0] osgi.wiring.package; (osgi.wiring.package=org.apache.commons.pool2))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.jedis [90]: Unable to resolve 90.0: missing requirement [90.0] osgi.wiring.package; (osgi.wiring.package=org.apache.commons.pool2)
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1491)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:334)
	at java.lang.Thread.run(Thread.java:745)
[org.ops4j.pax.exam.rbc.client.RemoteBundleContextClient] : Remote bundle context found after 5495 millis
{code}

The test passes, but we need to avoid these kind of errors.

We need to add a dependency inside features.xml file with org.apache.commons/commons-pool2 package.",,acosentino,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 10 14:32:38 UTC 2015,,,,,,,,,,,"0|i2ej4v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/May/15 14:32;acosentino;Related commit on master:

http://git-wip-us.apache.org/repos/asf/camel/commit/ecad8a1e

Cherry-pick on camel-2.15.x:

http://git-wip-us.apache.org/repos/asf/camel/commit/b5a30b10;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE for CacheComponent,CAMEL-8758,12828347,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jcarnus,jcarnus,08/May/15 12:36,10/May/15 07:12,14/Jul/23 05:50,10/May/15 07:11,2.14.2,,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-cache,,,,,,,0,,,,,,"I have randomly NPE for cache component
java.lang.NullPointerException
	at org.apache.camel.component.cache.CacheProducer.performCacheOperation(CacheProducer.java:98)
	at org.apache.camel.component.cache.CacheProducer.process(CacheProducer.java:71)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:113)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:103)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:562)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:500)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:468)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1093)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:990)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)",,davsclaus,githubbot,jcarnus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun May 10 07:12:16 UTC 2015,,,,,,,,,,,"0|i2eh7r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/May/15 19:16;githubbot;GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/513

    CAMEL-8758: Fix to Camel Cache producer to avoid NPE in race condition

    Fix to avoid potential race condition which can cause NPE. An element is retrieved from the cache to perform a null check and if not null, retrieved once again to perform object retrieval. If the object is either removed from the cache or TTL expires, can result in NPE.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8758

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/513.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #513
    
----
commit b684be16fce360000bad4853666d29a8f7f56781
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-05-09T18:02:56Z

    CAMEL-8758: Fix to Camel Cache producer to avoid NPE in race condition

----
;;;","10/May/15 07:10;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/513
;;;","10/May/15 07:12;davsclaus;Thanks Andrew for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"KafkaConsumer doesn't stop consuming when suspended, preventing graceful route shutdown",CAMEL-8756,12828320,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,astein,astein,08/May/15 10:42,07/Aug/15 14:17,14/Jul/23 05:50,07/Aug/15 14:17,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-kafka,,,,,,,1,consumer,kafka,,,,"Hi,

we encountered a problem when consuming events from Kafka and stopping the route while there are still events in Kafka.
Obviously, the {{run}}-method doesn't stop reading events from Kafka stream and so there are always events in-flight what prevents the route from being gracefully shut down.

{noformat}
12:30:27.611 INFO o.a.c.impl.DefaultCamelContext - Apache Camel 2.15.2 (CamelContext: camel-1) is shutting down
12:30:27.612 INFO o.a.c.i.DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 300 seconds)
12:30:27.615 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 300 seconds.
12:30:28.615 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 299 seconds.
12:30:29.615 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 298 seconds.
12:30:30.616 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 297 seconds.
12:30:31.616 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 296 seconds.
12:30:32.616 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 295 seconds.
12:30:33.618 INFO o.a.c.c.kafka.KafkaConsumer - Stopping Kafka consumer
12:30:33.618 INFO k.c.ZookeeperConsumerConnector - [camelGroup1_localhorst-1431081021945-a3d9f455], ZKConsumerConnector shutting down
12:30:33.626 INFO k.c.ConsumerFetcherManager - [ConsumerFetcherManager-1431081022017] Stopping leader finder thread
12:30:33.626 INFO k.c.ConsumerFetcherManager$LeaderFinderThread - [camelGroup1_localhorst-1431081021945-a3d9f455-leader-finder-thread], Shutting down
12:30:33.626 INFO k.c.ConsumerFetcherManager$LeaderFinderThread - [camelGroup1_localhorst-1431081021945-a3d9f455-leader-finder-thread], Stopped 
12:30:33.627 INFO k.c.ConsumerFetcherManager$LeaderFinderThread - [camelGroup1_localhorst-1431081021945-a3d9f455-leader-finder-thread], Shutdown completed
12:30:33.627 INFO k.c.ConsumerFetcherManager - [ConsumerFetcherManager-1431081022017] Stopping all fetchers
12:30:33.627 INFO k.consumer.ConsumerFetcherThread - [ConsumerFetcherThread-camelGroup1_localhorst-1431081021945-a3d9f455-0-0], Shutting down
12:30:33.627 INFO k.consumer.ConsumerFetcherThread - [ConsumerFetcherThread-camelGroup1_localhorst-1431081021945-a3d9f455-0-0], Stopped 
12:30:33.627 INFO k.consumer.ConsumerFetcherThread - [ConsumerFetcherThread-camelGroup1_localhorst-1431081021945-a3d9f455-0-0], Shutdown completed
12:30:33.627 INFO k.c.ConsumerFetcherManager - [ConsumerFetcherManager-1431081022017] All connections stopped
12:30:33.662 INFO o.I0Itec.zkclient.ZkEventThread - Terminate ZkClient event thread.
12:30:33.696 INFO org.apache.zookeeper.ZooKeeper - Session: 0x14d2d359d900022 closed
12:30:33.696 INFO org.apache.zookeeper.ClientCnxn - EventThread shut down
12:30:33.696 INFO k.c.ZookeeperConsumerConnector - [camelGroup1_localhorst-1431081021945-a3d9f455], ZKConsumerConnector shutdown completed in 78 ms
12:30:33.698 INFO o.a.c.i.DefaultShutdownStrategy - Route: route1 shutdown complete, was consuming from: Endpoint[kafka://localhost:9092?groupId=camelGroup1&topic=mykafkatopic&zookeeperHost=localhost]
12:30:33.699 INFO o.a.c.i.DefaultShutdownStrategy - Graceful shutdown of 1 routes completed in 6 seconds
12:30:33.703 INFO o.a.c.impl.DefaultCamelContext - Apache Camel 2.15.2 (CamelContext: camel-1) uptime 12.510 seconds
12:30:33.703 INFO o.a.c.impl.DefaultCamelContext - Apache Camel 2.15.2 (CamelContext: camel-1) is shutdown in 6.091 seconds
12:30:33.717 ERROR o.a.c.p.DefaultErrorHandler - Failed delivery for (MessageId: ID-localhorst-33557-1431081020733-0-1656461 on ExchangeId: ID-localhorst-33557-1431081020733-0-1656462). Exhausted after delivery attempt: 1 caught: java.util.concurrent.RejectedExecutionException

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [                                                                              ] [        14]
[route1            ] [filter1           ] [filter[{SimpleKafkaToCamelExample$1$$Lambda$1/1468303011@a38d7a3}]            ] [         1]
[route1            ] [bean1             ] [bean[SimpleKafkaToCamelExample$1$$Lambda$2/1354011814@e4ce7ae]                ] [         0]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-localhorst-33557-1431081020733-0-1656462
	ExchangePattern     InOnly
	Headers             {breadcrumbId=ID-localhorst-33557-1431081020733-0-1656461, CamelRedelivered=false, CamelRedeliveryCounter=0, kafka.EXCHANGE_NAME=0, kafka.TOPIC=mykafkatopic}
	BodyType            byte[]
	Body                SOMESTRING
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.util.concurrent.RejectedExecutionException: null
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:349) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:58) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.component.kafka.KafkaConsumer$AutoCommitConsumerTask.run(KafkaConsumer.java:209) [camel-kafka-2.15.2.jar:2.15.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_45]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
12:30:34.171 INFO k.c.ZookeeperConsumerConnector - [camelGroup1_localhorst-1431081021945-a3d9f455], stopping watcher executor thread for consumer camelGroup1_localhorst-1431081021945-a3d9f455
{noformat}

Regards,
-- 
André",,astein,davsclaus,kollgandren,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/May/15 10:47;astein;CAMEL-8756.patch;https://issues.apache.org/jira/secure/attachment/12731433/CAMEL-8756.patch","08/May/15 10:44;astein;SimpleKafkaToCamelExample.java;https://issues.apache.org/jira/secure/attachment/12731432/SimpleKafkaToCamelExample.java",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Aug 07 14:17:48 UTC 2015,,,,,,,,,,,"0|i2eh1r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/May/15 10:44;astein;You can use the attached example to reproduce the issue.
Just set up a Kafka containing enough events to not be empty before hitting any key to initiate the shutdown.;;;","08/May/15 10:47;astein;We produced a patch for {{org.apache.camel.component.kafka.KafkaConsumer}} and would be happy about a review.;;;","07/Aug/15 14:17;davsclaus;Thanks for reporting and the patch. I polished it a bit;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DozerBeanMapper cannot instantiate DozerThreadContextClassLoader ,CAMEL-8748,12827664,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tdiesler,tdiesler,06/May/15 13:50,28/Jan/16 10:17,14/Jul/23 05:50,11/Sep/15 07:31,2.15.3,,,,,,,,,,,,,,2.15.4,2.16.0,,,camel-dozer,,,,,,,0,,,,,,"
{code}
15:26:16,518 SEVERE [org.jboss.arquillian.protocol.jmx.JMXTestRunner] (pool-2-thread-1) Failed: org.wildfly.camel.test.csv.CSVIntegrationTest.testMarshal: org.dozer.MappingException: java.lang.InstantiationException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82) [dozer-5.5.1.jar:]
	at org.dozer.util.ReflectionUtils.newInstance(ReflectionUtils.java:366) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.registerClassLoader(DozerInitializer.java:118) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.initialize(DozerInitializer.java:98) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.init(DozerInitializer.java:79) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.init(DozerInitializer.java:64) [dozer-5.5.1.jar:]
	at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173) [dozer-5.5.1.jar:]
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:99) [dozer-5.5.1.jar:]
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.createDozerBeanMapper(DozerTypeConverterLoader.java:232) [camel-dozer-2.16-SNAPSHOT.jar:2.16-SNAPSHOT]
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.<init>(DozerTypeConverterLoader.java:118) [camel-dozer-2.16-SNAPSHOT.jar:2.16-SNAPSHOT]
	at org.wildfly.camel.test.csv.CSVIntegrationTest.testMarshal(CSVIntegrationTest.java:68) [csv-dataformat-tests:]
...
Caused by: java.lang.InstantiationException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader
	at java.lang.Class.newInstance(Class.java:423) [rt.jar:1.8.0_31]
	at org.dozer.util.ReflectionUtils.newInstance(ReflectionUtils.java:364) [dozer-5.5.1.jar:]
	... 150 more
Caused by: java.lang.NoSuchMethodException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader.<init>()
	at java.lang.Class.getConstructor0(Class.java:3074) [rt.jar:1.8.0_31]
	at java.lang.Class.newInstance(Class.java:408) [rt.jar:1.8.0_31]
	... 151 more
{code}

The {{org.dozer.DozerInitializer}} does

{code}
  private void registerClassLoader(GlobalSettings globalSettings, ClassLoader classLoader, BeanContainer beanContainer) {
    String classLoaderName = globalSettings.getClassLoaderName();
    if (!DozerConstants.DEFAULT_CLASS_LOADER_BEAN.equals(classLoaderName)) {
      DefaultClassLoader defaultClassLoader = new DefaultClassLoader(classLoader);
      Class<? extends DozerClassLoader> classLoaderType = loadBeanType(classLoaderName, defaultClassLoader, DozerClassLoader.class);
      DozerClassLoader classLoaderBean = ReflectionUtils.newInstance(classLoaderType);
      beanContainer.setClassLoader(classLoaderBean);
    }
  }
{code}",,davsclaus,githubbot,njiang,tdiesler,,,,,,,,,,,,,,,,,,,,CAMEL-8689,,,CAMEL-9545,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Sep 11 08:05:40 UTC 2015,,,,,,,,,,,"0|i2ed2f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/May/15 06:20;davsclaus;Thomas do you have a link to that unit test that causes this problem?

Its maybe starting up / initializating camel and dozer in a bit different way that we do on unit tests + karaf we have at Apache Camel. It seems it tries to create a new dozer converter class using a default no-arg ctr. But none of these converter classes has that, neither the ones that are out of the box from Dozer itself.;;;","27/May/15 14:27;tdiesler;This now depends on wildfly-9.0.0.CR2 because of the required update to cxf-3.0.5.
I have a branch that works on a wildfly snapshot for the very brave who want to investigate early.;;;","29/May/15 14:15;njiang;[~tdiesler] FYI,  I just upgrade the cxf version of camel master branch to 3.0.5.;;;","09/Jul/15 09:50;davsclaus;Assume working with newer CXF;;;","21/Jul/15 12:00;tdiesler;This still shows

{code}
13:55:50,056 INFO  [org.dozer.jmx.JMXPlatformImpl] (pool-3-thread-1) Dozer JMX MBean [org.dozer.jmx:type=DozerAdminController] auto registered with the Platform MBean Server
13:55:50,065 SEVERE [org.jboss.arquillian.protocol.jmx.JMXTestRunner] (pool-3-thread-1) Failed: org.wildfly.camel.test.dozer.DozerIntegrationTest.testStatelessSessionBean: org.dozer.MappingException: java.lang.InstantiationException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82)
	at org.dozer.util.ReflectionUtils.newInstance(ReflectionUtils.java:366)
	at org.dozer.DozerInitializer.registerClassLoader(DozerInitializer.java:118)
	at org.dozer.DozerInitializer.initialize(DozerInitializer.java:98)
	at org.dozer.DozerInitializer.init(DozerInitializer.java:79)
	at org.dozer.DozerInitializer.init(DozerInitializer.java:64)
	at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173)
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:99)
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.createDozerBeanMapper(DozerTypeConverterLoader.java:232)
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.<init>(DozerTypeConverterLoader.java:118)
	at org.wildfly.camel.test.dozer.DozerIntegrationTest.testStatelessSessionBean(DozerIntegrationTest.java:67)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
...
Caused by: java.lang.InstantiationException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader
	at java.lang.Class.newInstance(Class.java:423)
	at org.dozer.util.ReflectionUtils.newInstance(ReflectionUtils.java:364)
	... 152 more
Caused by: java.lang.NoSuchMethodException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader.<init>()
	at java.lang.Class.getConstructor0(Class.java:3074)
	at java.lang.Class.newInstance(Class.java:408)
	... 153 more
{code}

You can reproduce this with https://github.com/tdiesler/wildfly-camel/tree/wfc592;;;","27/Jul/15 11:59;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/570

    [CAMEL-8748] DozerBeanMapper cannot instantiate DozerThreadContextCla…

    …ssLoader

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8748

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/570.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #570
    
----
commit 6e2194e222e41ce035bbec7bb831b581b2f5745a
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-07-27T11:57:42Z

    [CAMEL-8748] DozerBeanMapper cannot instantiate DozerThreadContextClassLoader

----
;;;","27/Jul/15 12:59;davsclaus;Thanks for the PR. Do you mind closing it at github;;;","27/Jul/15 13:03;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/570
;;;","09/Sep/15 13:04;tdiesler;Reopened, also needed in 2.15.4. I'll provide a PR;;;","09/Sep/15 13:55;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/607

    [CAMEL-8748] DozerBeanMapper cannot instantiate DozerThreadContextCla…

    …ssLoader

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8748

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/607.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #607
    
----
commit 6e5d5ee6c553cb7d94e4a7094d00414676b97983
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-07-27T11:57:42Z

    [CAMEL-8748] DozerBeanMapper cannot instantiate DozerThreadContextClassLoader

----
;;;","11/Sep/15 08:05;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/607
;;;",,,,,,,,,,,,,,,,,,,,,
camel-rx - Should leverage UoW when subscribe or observe,CAMEL-8747,12827584,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/May/15 07:58,06/May/15 08:19,14/Jul/23 05:50,06/May/15 08:19,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-rx,,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/30057358/camel-rx-is-not-deleting-objects-consumed-from-s3

The work should be done in an UoW to ensure on completions is executed.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-05-06 07:58:33.0,,,,,,,,,,,"0|i2ecjz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jasypt with BridgePropertyPlaceholderConfigurer is not handling spring property injection with defaults anymore,CAMEL-8746,12827580,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,OHolzma,OHolzma,06/May/15 07:48,07/May/15 16:24,14/Jul/23 05:50,07/May/15 16:24,2.15.2,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-jasypt,camel-spring,,,,,,0,,,,,,"After updating from 2.15.1 to 2.15.2 injecting property values handled by Jasypt via {{BridgePropertyPlaceholderConfigurer}} is not supporting default values any more.

Code like 
{code}
    @Value(""${testProperty:test}"")
    private String test;
{code}
is leading to {{NullPointerException}}:
{quote}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private java.lang.String org.apache.camel.component.jasypt.Test.test; nested exception is java.lang.NullPointerException
        at java.util.regex.Matcher.getTextLength(Matcher.java:1234)
        at java.util.regex.Matcher.reset(Matcher.java:308)
        at java.util.regex.Matcher.<init>(Matcher.java:228)
        at java.util.regex.Pattern.matcher(Pattern.java:1088)
        at org.apache.camel.component.jasypt.JasyptPropertiesParser.parseProperty(JasyptPropertiesParser.java:56)
        at org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer.resolvePlaceholder(BridgePropertyPlaceholderConfigurer.java:121)
        at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.resolvePlaceholder(PropertyPlaceholderConfigurer.java:162)
{quote}",,davsclaus,OHolzma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/May/15 07:16;OHolzma;diff_CAMEL-8746.txt;https://issues.apache.org/jira/secure/attachment/12731107/diff_CAMEL-8746.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu May 07 16:24:55 UTC 2015,,,,,,,,,,,"0|i2ecj3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/May/15 08:31;davsclaus;Are you saying that the default value is ""test"", eg @Value is a spring property placeholder, not a Camel one.;;;","06/May/15 09:04;OHolzma;Yes, the property name is ""testProperty"" with a default value ""test"". The Spring property injection for properties with default values is broken.

{{JasyptPropertiesParser.parseProperty}} is called with {{value = null}} because the property {{testProperty:test}} could not be resolved in first attempt by {{PropertyPlaceholderConfigurer}}.

I think the change introduced with CAMEL-7849 is causing this issue. In the new method {{BridgePropertyPlaceholderConfigurer.resolvePlaceholder}} the parser should not be called for {{null}} values.;;;","06/May/15 11:04;davsclaus;You are welcome to provide a patch with a fix;;;","07/May/15 07:16;OHolzma;Adding ""null"" check to JasyptPropertiesParser solves this issue.;;;","07/May/15 16:24;davsclaus;Thanks for reporting and the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger requires context name with quotes ,CAMEL-8745,12827561,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tdiesler,tdiesler,06/May/15 06:50,06/May/15 08:05,14/Jul/23 05:50,06/May/15 08:05,2.15.1,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-swagger,,,,,,,0,,,,,,"{code}
    <servlet>
        <servlet-name>ApiDeclarationServlet</servlet-name>
        <servlet-class>org.apache.camel.component.swagger.DefaultCamelSwaggerServlet</servlet-class>
        <init-param>
            <param-name>base.path</param-name>
            <param-value>rest</param-value>
        </init-param>
        <init-param>
            <param-name>api.path</param-name>
            <param-value>api-docs</param-value>
        </init-param>
        <init-param>
            <param-name>api.version</param-name>
            <param-value>1.2.3</param-value>
        </init-param>
        <init-param>
            <param-name>api.title</param-name>
            <param-value>User Services</param-value>
        </init-param>
        <init-param>
            <param-name>api.description</param-name>
            <param-value>Camel Rest Example with Swagger that provides an User REST service</param-value>
        </init-param>
        <init-param>
            <param-name>camelId</param-name>
            <param-value>""swagger-test""</param-value>
        </init-param>
        <load-on-startup>2</load-on-startup>
    </servlet>
{code}",,njiang,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 06 08:05:32 UTC 2015,,,,,,,,,,,"0|i2ecen:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/May/15 06:57;njiang;We just need to take off the quotes when looking up the camel id from the ObjectName.;;;","06/May/15 07:00;tdiesler;While you're at it, this code seems fishy

{code}
    val server: MBeanServer = ManagementFactory.getPlatformMBeanServer
    val names = server.queryNames(new ObjectName(""*:type=context,*""), null)
    for (name <- names.asScala) {
      val on = name.asInstanceOf[ObjectName]
      val id: String = on.getKeyProperty(""name"")
      if (camelId == null || camelId.equals(id)) {
        found = on
      }
    }
{code}

If the the config does not explicitly give a camelId, it iterates over all MBeans and always uses the last even if the last MBean does not return a valid invocation result;;;","06/May/15 08:05;njiang;Applied the patch into camel-2.15.x and master branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken link in OGNL component documentation,CAMEL-8743,12827252,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,davidkeen,davidkeen,05/May/15 10:41,15/May/15 14:57,14/Jul/23 05:50,05/May/15 17:26,,,,,,,,,,,,,,,,,,,documentation,,,,,,,0,,,,,,"The first link on the OGNL component documentation page is broken.

Text is ""Camel allows OGNL to be used...""

Correct link should be http://commons.apache.org/proper/commons-ognl/.",,davidkeen,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/May/15 14:57;davidkeen;signature.asc;https://issues.apache.org/jira/secure/attachment/12733157/signature.asc",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 15 14:57:40 UTC 2015,,,,,,,,,,,"0|i2eaov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/May/15 17:26;hekonsek;Fixed. Thanks for reporting!

BTW Maybe you would like to have write access to our wiki?;;;","15/May/15 14:57;davidkeen;Hi Henryk

Thanks for that. I’d be happy to have wiki access so I can update any other small issues I may come across.

Cheers

David


;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMqConsumer did not retry if connection failed,CAMEL-8742,12827158,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,reusable,reusable,05/May/15 06:45,28/Jan/16 16:43,14/Jul/23 05:50,28/Jan/16 08:26,2.15.1,,,,,,,,,,,,,,2.17.0,,,,camel-rabbitmq,,,,,,,1,,,,,,"Camel Rabbitmq is used to consume a queue in RabbitMQ. 
Sometimes, the Administrator would delete the queue and create a fresh queue. Or, the Camel container was started while all or some queue was not declared.

During these period, Camel will fail with the following error:
{noformat}
[localhost-startStop-1] 14:03:31,824 INFO  org.apache.camel.component.rabbitmq.RabbitMQConsumer - Connection failed, will start background thread to retry!
java.io.IOException
	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:106)
	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:102)
	at com.rabbitmq.client.impl.ChannelN.basicConsume(ChannelN.java:976)
	at com.rabbitmq.client.impl.ChannelN.basicConsume(ChannelN.java:943)
	at com.rabbitmq.client.impl.ChannelN.basicConsume(ChannelN.java:935)
	at org.apache.camel.component.rabbitmq.RabbitMQConsumer$RabbitConsumer.start(RabbitMQConsumer.java:285)
	at org.apache.camel.component.rabbitmq.RabbitMQConsumer.startConsumer(RabbitMQConsumer.java:109)
	at org.apache.camel.component.rabbitmq.RabbitMQConsumer.startConsumers(RabbitMQConsumer.java:96)
	at org.apache.camel.component.rabbitmq.RabbitMQConsumer.doStart(RabbitMQConsumer.java:119)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2869)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3163)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3099)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3029)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:2797)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:2653)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:167)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2467)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2463)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2463)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2432)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:255)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:121)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:332)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:948)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:389)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:294)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4973)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5467)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)
	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:670)
	at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1839)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; reason: {#method<channel.close>(reply-code=404, reply-text=NOT_FOUND - no queue 'ad_google_dfa_reporting_queue' in vhost '/', class-id=60, method-id=20), null, """"}
	at com.rabbitmq.utility.ValueOrException.getValue(ValueOrException.java:67)
	at com.rabbitmq.utility.BlockingValueOrException.uninterruptibleGetValue(BlockingValueOrException.java:33)
	at com.rabbitmq.client.impl.AMQChannel$BlockingRpcContinuation.getReply(AMQChannel.java:343)
	at com.rabbitmq.client.impl.ChannelN.basicConsume(ChannelN.java:974)
	... 43 more
Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; reason: {#method<channel.close>(reply-code=404, reply-text=NOT_FOUND - no queue 'ad_google_dfa_reporting_queue' in vhost '/', class-id=60, method-id=20), null, """"}
	at com.rabbitmq.client.impl.ChannelN.asyncShutdown(ChannelN.java:474)
	at com.rabbitmq.client.impl.ChannelN.processAsync(ChannelN.java:315)
	at com.rabbitmq.client.impl.AMQChannel.handleCompleteInboundCommand(AMQChannel.java:144)
	at com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:91)
	at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:533)
{noformat}

From the log, it shows retrying. But after 45 minutes, nothing happen. 

While waiting for CAMEL-8487 (which i have no idea how to configure :( ), is there anything i can do for retry to work/happen sooner?",,ceefour,davsclaus,githubbot,reusable,unleashed85,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 28 16:43:18 UTC 2016,,,,,,,,,,,"0|i2ea9z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/May/15 06:24;davsclaus;Do you have a chance to dive into the Rabbit MQ client api to find what it offers for failover - re-connection etc, so we can see if there is an option or what code it takes to add to camel-rabbitmq to make it support this?

Other brokers like ActiveMQ has that out of the box in its JMS client.;;;","10/May/15 02:41;reusable;Im on it. ;;;","07/Sep/15 09:46;davsclaus;Anyone working on this?;;;","12/Oct/15 15:45;unleashed85;I've have also seen this happen. I glanced at the code a few months ago but I think this is going to require a redesign of how consumers are created. If I remember correctly, when the consumer is created we pass in a rabbit channel instead of passing in the pool or connection details. So when that channel is closed there is no way for the consumer to recover.;;;","13/Oct/15 05:42;davsclaus;Brad, yeah that sounds like what would be needed.;;;","14/Jan/16 22:34;unleashed85;I keep hitting this so I'll work on it.
;;;","27/Jan/16 17:35;githubbot;GitHub user brreitme opened a pull request:

    https://github.com/apache/camel/pull/812

    CAMEL-8742 - Reconnect when connections are closed.

    * Publishers and subscribers will reconnect if the connection / channel is closed
    * Cancel reply manager when sending a message in the producer fails so the reply thread doesn't time out.
    * Change the SuspendResume test to use a different queue since it conflicts with other queue settings

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/brreitme/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/812.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #812
    
----
commit a389806e2884ba16aa8793a8944971c4d50b0dc9
Author: Brad Reitmeyer <brreitme@cisco.com>
Date:   2016-01-26T22:39:12Z

    CAMEL-8742 - Reconect when connections are closed.
    
    * Cancel reply manager when sending a message in the producer fails
    * Change the SuspendResume test to use a different queue since it conflicts with other queue settings

----
;;;","28/Jan/16 08:26;davsclaus;Thanks Brad for the PR;;;","28/Jan/16 16:43;githubbot;Github user brreitme closed the pull request at:

    https://github.com/apache/camel/pull/812
;;;",,,,,,,,,,,,,,,,,,,,,,,
camel-salesforce - Unable to generate DTOs for Filtered Lookup fields,CAMEL-8737,12826861,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,simondelfab,simondelfab,04/May/15 06:53,06/May/15 01:51,14/Jul/23 05:50,04/May/15 20:21,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-salesforce,,,,,,,0,,,,,,"Get the following exception:

Caused by: org.apache.maven.plugin.MojoExecutionException: Error getting SObject description for 'Account_Request__c': Can not deserialize instance of java.lang.String out of START_ARRAY token
 at [Source: java.io.ByteArrayInputStream@1bd8e9d9; line: 1, column: 36155] (through reference chain: org.apache.camel.component.salesforce.api.dto.SObjectDescription[""fields""]->org.apache.camel.component.salesforce.api.dto.SObjectField[""filteredLookupInfo""]->org.apache.camel.component.salesforce.ap
i.dto.FilteredLookupInfo[""controllingFields""])
        at org.apache.camel.maven.CamelSalesforceMojo.execute(CamelSalesforceMojo.java:312)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        ... 19 more
Caused by: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_ARRAY token
 at [Source: java.io.ByteArrayInputStream@1bd8e9d9; line: 1, column: 36155] (through reference chain: org.apache.camel.component.salesforce.api.dto.SObjectDescription[""fields""]->org.apache.camel.component.salesforce.api.dto.SObjectField[""filteredLookupInfo""]->org.apache.camel.component.salesforce.ap
i.dto.FilteredLookupInfo[""controllingFields""])
        at org.codehaus.jackson.map.JsonMappingException.from(JsonMappingException.java:163)

Any suggestions what could causing this issue?

From the looks of it, the class

public class FilteredLookupInfo extends AbstractDTOBase {

    private String controllingFields;
    ...
}

should be 

public class FilteredLookupInfo extends AbstractDTOBase {

    private List controllingFields;
}

The type in question has a child relation to another custom object.",,dhirajsb,simondelfab,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8269,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 06 01:51:26 UTC 2015,,,,,,,,,,,"0|i2e8h3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/May/15 07:24;simondelfab;Found out what the problem is. For the default version of the API (33.0), the DescribeSObjectResult has a string array for controllingFields: 

https://www.salesforce.com/developer/docs/api/Content/sforce_api_calls_describesobjects_describesobjectresult.htm#topic-title

So my hunch in the description is correct. The controllingFields field should be a List.

I was able to get the code generator to work when I specified API version 30.0. Will this cause an issue later on?;;;","04/May/15 17:15;dhirajsb;This is weird. I ran integration tests with version 33.0, which exercises _DescribeSObjectResult_, and it worked. Maybe the test Salesforce account had no data for this field. I'm troubleshooting this now, so any hints on how this SObject description got a value for this field will help. 

As long as you use the same API version at runtime as used in code generation, you should be ok. Obviously, you won't have access to any Salesforce fields that were added after 30.0. 

As for the solution, off the bat I'm not sure how _DescribeSObjectResult_ could have an array and non-array field simultaneously based on API versions. Maybe a custom type handler?? ;;;","04/May/15 19:07;dhirajsb;This is an issue in the new type _FilteredLookupInfo_ added for supporting API v 33.0. Adding link to original issue where the type was introduced, which I will reopen and fix. ;;;","04/May/15 20:21;dhirajsb;Fixed issue and commit merged in camel-2.12.x, camel-2.13.x, camel-2.14.x, camel-2.15.x, and master branches. ;;;","04/May/15 20:24;dhirajsb;Hi [~simondelfab], I updated the integration test account to add filtered lookups and it worked correctly with a {{List<String> controllingFields}}. Please close this issue once you have verified the fix. ;;;","06/May/15 01:50;simondelfab;Hi Dhiraj, I can confirm that 2.15.3-SNAPSHOT worked. Thank you for the quick fix.

> Maybe the test Salesforce account had no data for this field. I'm troubleshooting this now, so any hints on how this SObject description got a value for this field will help

A third party devs are working on SF app (and I am not an expert on SF), but from what I can see, I think you are right regarding there being no data for this field. ;;;","06/May/15 01:51;simondelfab;Generating classes works with the fix;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Connection leak with ftp consumer and invalid credentials,CAMEL-8718,12825874,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,29/Apr/15 09:34,08/May/15 07:08,14/Jul/23 05:50,07/May/15 18:14,2.12.5,2.13.4,2.14.2,2.15.1,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-ftp,,,,,,,0,,,,,,"In each iteration new socket connection is created, but never closed. This leads to growth of {{ESTABLISHED}} connections to FTP server.",,davsclaus,ggrzybek,kvileid@yahoo.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri May 08 07:08:39 UTC 2015,,,,,,,,,,,"0|i2e2g7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Apr/15 11:17;ggrzybek;Fixed in:
* [master branch|https://github.com/apache/camel/commit/e129b88c223e53595113b54a3637e6fabb5a940f]
* [camel-2.15.x branch|https://github.com/apache/camel/commit/7c51a070b9ef6d2d690eaa8f370b2bb1fbc8504f]
* [camel-2.14.x branch|https://github.com/apache/camel/commit/c18c4157d30fa81785c8e7d938006818da5af34b]
;;;","05/May/15 15:07;kvileid@yahoo.com;I am working in a project that has been hit by this problem with leaking sockets, and great to see that problem is attacked.
However I have some comments to the chosen solution.

1. In FtpBadLoginConnectionLeakTest.java using maximumReconnectAttempts=3 (which is camel default), causes leaking sockets, and hence test to fail.

2. In RemoteFileConsumer.java. Some FTP servers (at least one of ours), responds OK to getOperations().sendNoop(), even though user has not been authorized.
This again causes leaking sockets where;
            isConnected = getOperations().sendNoop();  // isConnected is true

and loggedIn is always false (since credentials are wrong in this case), causing new connect, without disconnecting previous connection, for every poll.

        if (!loggedIn || !isConnected) {
            loggedIn = getOperations().connect((RemoteFileConfiguration) endpoint.getConfiguration());

3. Problem with leaking connections is also seen for Ftp producers, suggesting that solution could be done in common part for consumers and producers.

----------

Possible solutions:
1. In FtpOperations.java could disconnect if login failed

{code}
if (!login) {
    throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString());
}
{code}

Changed to:

{code}
if (!login) {
    client.disconnect();
    throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString());
}
{code}

2. Disconnect regardless of what goes wrong, maybe a more robust solution. In FtpOperations.java

{code}
public boolean connect(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {
{code}

Changed to:

{code}
public boolean connect(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {
    try {
        return connectInternal(configuration);
    } catch (GenericFileOperationFailedException e) {
        if (isConnected()) {
            disconnect();
        }
        throw e;
    }
}
   
private boolean connectInternal(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {
{code}
;;;","07/May/15 06:23;davsclaus;Karsten, have you tried implementing those code changes you suggest and test it on your system to see if it works?

You are welcome to contribute these changes as a patch or PR
http://camel.apache.org/contributing.html;;;","07/May/15 08:42;kvileid@yahoo.com;I have tried implementing the code changes and tested them. However I will test the code changes a bit more in our system, and provide some additional unit tests (for ftp producers), and create a pull request.

;;;","07/May/15 09:26;ggrzybek;Thank you very much!


;;;","07/May/15 15:36;ggrzybek;I confirm that simply disconnecting {{client}} after {{org.apache.commons.net.ftp.FTPClient#login()}} returns {{false}} prevents from leaking sockets/connections.
Checking with producer and whether this is correct solution.;;;","07/May/15 18:13;ggrzybek;Fixed producer and consumer connection leak (general approach) in:
* [master branch|https://github.com/apache/camel/commit/e1b6592a18362a5903c88923d18abb3430c1c630]
* [camel-2.15.x branch|https://github.com/apache/camel/commit/8c6dce78c11c91d070ba1894c0a4d71336ad4e03]
* [camel-2.14.x branch|https://github.com/apache/camel/commit/3f44084b38030e2fb6bd6bf399e1afedc4382d5a]
;;;","07/May/15 18:14;ggrzybek;[~kvileid@yahoo.com], could you check if this works for you?
I added a test for this {{NOOP}} case too, but I think now it is not an issue anymore.;;;","08/May/15 07:07;kvileid@yahoo.com;I can confirm that fix has been tested and works;;;","08/May/15 07:08;ggrzybek;Thanks for checking!;;;",,,,,,,,,,,,,,,,,,,,,,
camel-kafka feature miss kafka-clients bundle ,CAMEL-8717,12825851,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,29/Apr/15 08:15,29/Apr/15 10:27,14/Jul/23 05:50,29/Apr/15 10:27,,,,,,,,,,,,,,,2.15.2,2.16.0,,,karaf,,,,,,,0,,,,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 29 10:27:46 UTC 2015,,,,,,,,,,,"0|i2e2b3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Apr/15 10:27;ffang;commit fix
http://git-wip-us.apache.org/repos/asf/camel/commit/cd95b8b3 for master
https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=f42186b1 for camel-2.15.x branch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - Should close ResultSet,CAMEL-8715,12825799,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Apr/15 05:40,29/Apr/15 11:13,14/Jul/23 05:50,29/Apr/15 11:13,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-sql,,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/29933629/apache-camel-sql-component-is-not-closing-resultset

The Spring javadocs says

	 * <p><b>NOTE:</b> Any ResultSets opened should be closed in finally blocks
	 * within the callback implementation. Spring will close the Statement
	 * object after the callback returned, but this does not necessarily imply
	 * that the ResultSet resources will be closed: the Statement objects might
	 * get pooled by the connection pool, with {@code close} calls only
	 * returning the object to the pool but not physically closing the resources.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-04-29 05:40:56.0,,,,,,,,,,,"0|i2e1zj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ParallelAggregate option when using parallel mode does not run in parallel,CAMEL-8713,12825555,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Apr/15 15:08,28/Apr/15 18:34,14/Jul/23 05:50,28/Apr/15 18:34,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-core,eip,,,,,,0,,,,,,"See CAMEL-7521

When using parallel processing then the boss thread aggregate on the fly is a single threaded boss thread that controls the aggregation. So even if setting parallel aggregate = true, then its still only 1 boss thread.

We should have a thread pool (or allow to use the existing pool for parallel processing) for worker threads to do the aggregate work in parallel.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-04-28 15:08:13.0,,,,,,,,,,,"0|i2e0kf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAP unmarshalling shouldn't fail for Faults that lack an optional Detail element,CAMEL-8708,12824339,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,alex_savitsky,alex_savitsky,27/Apr/15 16:51,14/Dec/15 07:56,14/Jul/23 05:50,14/Dec/15 07:09,2.15.1,,,,,,,,,,,,,,2.16.2,2.17.0,,,camel-soap,,,,,,,0,,,,,,"Camel-soap code assumes that all Faults that a Camel SOAP endpoint is receiving, are containing a Detail element. Sending a Fault without Detail will result in an NPE. Detail is optional element in SOAP Faults (see http://www.w3.org/TR/soap12-part1/#soapfault) and its absence should not generate an error.",,alex_savitsky,davsclaus,githubbot,jxwest,pascalschumacher,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 14 07:56:18 UTC 2015,,,,,,,,,,,"0|i2dtev:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Apr/15 18:40;davsclaus;People is welcome to work on a patch to fix this.

It would be good to report the stacktrace of the NPE as that helps people to pin point the location where to fix this.;;;","28/Apr/15 18:50;alex_savitsky;The culprit piece is in org.apache.camel.dataformat.soap.Soap12DataFormatAdapter.createExceptionFromFault() method, first line dereferences fault.getDetail().getAny(), but getDetail() can return null as per SOAP spec. I would've done a patch as well, but I'm not sure of the functionality the original author has intended to put in this method, that's why I'd prefer the original author to take a look at it. Basically, the whole method seem to insist to have the FaultDetail around, yet it's optional, and it's not clear what the intended functionality was for its absence (if there was any, that is);;;","04/Dec/15 12:42;jxwest;Was this ever fixed/patched?;;;","07/Dec/15 06:37;davsclaus;No a patch is much welcome, just do that != null check as suggested by Alex.
http://camel.apache.org/contributing;;;","11/Dec/15 19:34;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/727

    CAMEL-8708: SOAP marshaling shouldn't fail for Faults that lack an op…

    …tional Detail element

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel CAMEL-8708

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/727.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #727
    
----
commit 6e81be37253fc7c78c39d4483bfe4f8be57e8417
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-12-11T17:22:40Z

    CAMEL-8708: SOAP marshaling shouldn't fail for Faults that lack an optional Detail element

----
;;;","11/Dec/15 19:38;pascalschumacher;Just adding a != null check for the detail was not possible, because it is used to determine the class of the exception created. I solved this be creating a generic SOAPFaultException when the detail is not present.;;;","14/Dec/15 07:56;githubbot;Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/727
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
camel-smpp: smpps doesn't work over proxy,CAMEL-8707,12824295,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,kgururaja,kgururaja,27/Apr/15 14:50,28/Apr/15 14:05,14/Jul/23 05:50,28/Apr/15 14:05,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-smpp,,,,,,,0,,,,,,"

We are evaluating on using apache camel + jsmpp for sending smses. 
apache camel version: 2.15.1
jsmpp version: 2.1.1
smpp works fine with proxy, but smpps with doesn't work. 
Route definition is as follows: 
from(direct:start)
.to(smpps://user@smschost:smscport?password=********&httpProxyHost=proxyhostname&httpProxyPort=proxyport®isteredDelivery=1&lazySessionCreation=true)
from(smpps://user@smschost:smscport?password=********&httpProxyHost=proxyhostname&httpProxyPort=proxyport®isteredDelivery=1)
.to(direct.result)
When using smpps, we are getting the following exception: 
Failed to start camel Context
java.io.IOException: SmppConnectionFactory: Unrecognized SSL message,
plaintext connection?
        at
org.apache.camel.component.smpp.SmppConnectionFactory.createConnection(SmppConnectionFactory.java:97)
        at
org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:221)
        at
org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
        at
org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:95)
        at
org.apache.camel.component.smpp.SmppConsumer.doStart(SmppConsumer.java:84)
In SmppConnectionFactory.createConnection(), for smpps, there is a HTTP
connect in SSL Socket. 
We should be tunnelling SSL through HTTP, as given below: 
https://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/samples/sockets/client/SSLSocketClientWithTunneling.java
",,kgururaja,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/Apr/15 14:57;kgururaja;camel-smpp.smpps.proxy.patch;https://issues.apache.org/jira/secure/attachment/12728424/camel-smpp.smpps.proxy.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Moderate,,,,,,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Apr 28 14:05:25 UTC 2015,,,,,,,Patch Available,,,,"0|i2dt5b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Apr/15 14:58;kgururaja;Attachment has the patch to fix this.;;;","28/Apr/15 14:05;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches with thanks to Gururaja.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"when occurs ""Connection reset by peer"",netty4 client's EventLoopGroup select thread won't shut down",CAMEL-8702,12824067,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hhymarco,hhymarco,26/Apr/15 07:18,30/Apr/15 06:06,14/Jul/23 05:50,30/Apr/15 06:06,2.15.0,2.15.1,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-netty4,,,,,,,0,,,,,,"I used netty4 and netty4http as producer ,when occurs  exception ""Connection reset by peer"",netty4 client's EventLoopGroup ""Selector"" thread and related port won't shut down.I used thread dump and found ClientChannelHandler's method exceptionCaught just close channel,it won't close ""Selector"" thread and port, and the same to NettyProducer.NettyProducerPoolableObjectFactory.destroyObject.",,hhymarco,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 27 09:41:06 UTC 2015,,,,,,,,,,,"0|i2drr3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Apr/15 02:43;njiang;You can configure the wokerGroup option to setup a custom eventloop across the all the NettyProducer, in this way the NettyProducer are sharing this workGroup across the NettyEndpoint, and we just need shutdown it when the whole application is shutdown.
I will commit a quick fix it incase the user doesn't setup the workGroup option to let the producer show the workerGroup across the NettyProducer.;;;","27/Apr/15 09:41;njiang;I just committed a patch for it, please try the latest Camel 2.15.2-SNAPSHOT for verification. Now we just create one WorkGroup for all the NettyProducer if the WorkGroup option is not specified.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.NullPointerException in at org.apache.camel.component.netty4.http.NettyHttpProducer$NettyHttpProducerCallback.done,CAMEL-8694,12823658,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,hzariv,hzariv,24/Apr/15 05:48,24/Apr/15 21:30,14/Jul/23 05:50,24/Apr/15 21:30,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-netty4-http,,,,,,,0,,,,,,"I am using camel-netty4-http 2.15.1 version and getting the following NPE in org.apache.camel.component.netty4.http.NettyHttpProducer$NettyHttpProducerCallback.done. Debugging through the code it seems like null check for response is missing.

 public void done(boolean doneSync) {
            try {
                NettyHttpMessage nettyMessage = exchange.hasOut() ? exchange.getOut(NettyHttpMessage.class) : exchange.getIn(NettyHttpMessage.class);
                if (nettyMessage != null) {
                    FullHttpResponse response = nettyMessage.getHttpResponse();
                    // Need to retain the ByteBuffer for producer to consumer
                    // TODO Remove this part of ByteBuffer right away
                    response.content().retain();  <-- response in null
                    if (response != null) {

java.lang.NullPointerException
	at org.apache.camel.component.netty4.http.NettyHttpProducer$NettyHttpProducerCallback.done(NettyHttpProducer.java:98)
	at org.apache.camel.component.netty4.NettyProducer.process(NettyProducer.java:181)
	at org.apache.camel.component.netty4.http.NettyHttpProducer.process(NettyHttpProducer.java:52)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:111)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.netty4.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:134)
	at org.apache.camel.component.netty4.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:105)
	at org.apache.camel.component.netty4.http.handlers.HttpServerChannelHandler.channelRead0(HttpServerChannelHandler.java:202)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at org.apache.camel.component.netty4.http.handlers.HttpServerMultiplexChannelHandler.channelRead0(HttpServerMultiplexChannelHandler.java:119)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
	at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:32)
	at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:329)
	at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:36)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	at java.lang.Thread.run(Thread.java:744)",,davsclaus,hzariv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 24 05:51:00 UTC 2015,,,,,,,,,,,"0|i2dp9r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"24/Apr/15 05:51;davsclaus;You are welcome to work on a patch to fix this
http://camel.apache.org/contributing.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel HDFS2 - ShutdownHookManager class not found when shutting down OSGi framework,CAMEL-8690,12823440,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,23/Apr/15 15:00,23/Apr/15 15:13,14/Jul/23 05:50,23/Apr/15 15:13,2.15.1,,,,,,,,,,,,,,2.15.2,,,,camel-hdfs,,,,,,,0,,,,,,"During shutdown of Karaf with {{camel-hdfs2}} installed, I'm getting:
{noformat}
Exception in thread ""Thread-56"" java.lang.NoClassDefFoundError: org/apache/hadoop/util/ShutdownHookManager$2
	at org.apache.hadoop.util.ShutdownHookManager.getShutdownHooksInOrder(ShutdownHookManager.java:124)
	at org.apache.hadoop.util.ShutdownHookManager$1.run(ShutdownHookManager.java:52)
Caused by: java.lang.ClassNotFoundException: Unable to load class 'org.apache.hadoop.util.ShutdownHookManager$2' because the bundle wiring for org.apache.servicemix.bundles.hadoop-client is no longer valid.
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1521)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:77)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1993)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	... 2 more
{noformat}",,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 23 15:13:03 UTC 2015,,,,,,,,,,,"0|i2dnyn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Apr/15 15:13;ggrzybek;Resolved in master and camel-2.15.x branches;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-dozer: Multiple contexts / bundles - Does not use the correct classloader,CAMEL-8689,12823407,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,23/Apr/15 12:37,06/May/15 13:50,14/Jul/23 05:50,04/May/15 18:54,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-dozer,,,,,,,0,,,,,,"Dozer is a tough library to work with in a multi-module context, because of its use of singletons for configuration. In an OSGi environment, each bundle will have its own classloader but Dozer's architecture makes it impossible to cater for this scenario nicely. Unfortunately, it expects a single container-wide classloader configured in the BeanContainer singleton.

In Camel we worked around this by providing a custom DozerClassLoader implementation that is aware of the Camel Context, but what happens if we are sharing Dozer across multiple Camel Contexts? The most recently initialized context will override the container-wide classloader.

We need a solution such that the classloader can dynamically change based on the Camel Context that is using the component.",,davsclaus,raulvk,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8748,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed May 06 13:42:36 UTC 2015,,,,,,,,,,,"0|i2dnrz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Apr/15 12:48;raulvk;Fix pushed to branch [fix/CAMEL-8689-camel-dozer-classloading-issue|https://github.com/apache/camel/tree/fix/CAMEL-8689-camel-dozer-classloading-issue].
[~davsclaus] - would you mind having a quick look as you know the Dozer stuff better than I do?

Thanks.;;;","23/Apr/15 14:05;davsclaus;Looks good. I posted some comments on the github link;;;","30/Apr/15 05:29;davsclaus;Raul, you didnt merge this to the master and 2.15.x branch so you missed the release train.

Can you get it merged?;;;","04/May/15 18:54;raulvk;Tested at a customer with satisfactory results.;;;","06/May/15 13:42;tdiesler;With this I get 

{code}
15:26:16,518 SEVERE [org.jboss.arquillian.protocol.jmx.JMXTestRunner] (pool-2-thread-1) Failed: org.wildfly.camel.test.csv.CSVIntegrationTest.testMarshal: org.dozer.MappingException: java.lang.InstantiationException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82) [dozer-5.5.1.jar:]
	at org.dozer.util.ReflectionUtils.newInstance(ReflectionUtils.java:366) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.registerClassLoader(DozerInitializer.java:118) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.initialize(DozerInitializer.java:98) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.init(DozerInitializer.java:79) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.init(DozerInitializer.java:64) [dozer-5.5.1.jar:]
	at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173) [dozer-5.5.1.jar:]
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:99) [dozer-5.5.1.jar:]
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.createDozerBeanMapper(DozerTypeConverterLoader.java:232) [camel-dozer-2.16-SNAPSHOT.jar:2.16-SNAPSHOT]
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.<init>(DozerTypeConverterLoader.java:118) [camel-dozer-2.16-SNAPSHOT.jar:2.16-SNAPSHOT]
	at org.wildfly.camel.test.csv.CSVIntegrationTest.testMarshal(CSVIntegrationTest.java:68) [csv-dataformat-tests:]
...
Caused by: java.lang.InstantiationException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader
	at java.lang.Class.newInstance(Class.java:423) [rt.jar:1.8.0_31]
	at org.dozer.util.ReflectionUtils.newInstance(ReflectionUtils.java:364) [dozer-5.5.1.jar:]
	... 150 more
Caused by: java.lang.NoSuchMethodException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader.<init>()
	at java.lang.Class.getConstructor0(Class.java:3074) [rt.jar:1.8.0_31]
	at java.lang.Class.newInstance(Class.java:408) [rt.jar:1.8.0_31]
	... 151 more
{code}

The {{org.dozer.DozerInitializer}} does

{code}
  private void registerClassLoader(GlobalSettings globalSettings, ClassLoader classLoader, BeanContainer beanContainer) {
    String classLoaderName = globalSettings.getClassLoaderName();
    if (!DozerConstants.DEFAULT_CLASS_LOADER_BEAN.equals(classLoaderName)) {
      DefaultClassLoader defaultClassLoader = new DefaultClassLoader(classLoader);
      Class<? extends DozerClassLoader> classLoaderType = loadBeanType(classLoaderName, defaultClassLoader, DozerClassLoader.class);
      DozerClassLoader classLoaderBean = ReflectionUtils.newInstance(classLoaderType);
      beanContainer.setClassLoader(classLoaderBean);
    }
  }
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Removed StreamCache when doing a Wiretap,CAMEL-8688,12823390,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,geertvanheusden,geertvanheusden,23/Apr/15 12:02,04/May/15 18:00,14/Jul/23 05:50,04/May/15 18:00,2.15.1,,,,,,,,,,,,,,2.16.0,,,,camel-core,,,,,,,0,,,,,,"Hi,

I noticed a bug where the body (StreamCache) was already removed before the exchange reached the end (in the Wiretap route).

I added a test as an attachment.

f you run the test you can clearly see the temp file deletion followed by the closed stream exception:

Tried 1 to delete file: /var/folders/db/brq60fqj4vb8mnx_5nlz36nw0000gn/T/camel/camel-tmp-00cd1ce2-7d44-47fe-b357-008e8146f770/cos8797132745923044996.tmp with result: true

Cannot reset stream from file /var/folders/db/brq60fqj4vb8mnx_5nlz36nw0000gn/T/camel/camel-tmp-00cd1ce2-7d44-47fe-b357-008e8146f770/cos8797132745923044996.tmp

I encountered the same issue during a more complex route that does some splitting (zip file) and multicasting. This occurred on Camel 2.14.1 so it could be fixed by https://issues.apache.org/jira/browse/CAMEL-8284 but I need to test this.

Kind regards,

Geert",,davsclaus,forsthofer,geertvanheusden,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/May/15 13:02;forsthofer;0001-wire-tap-streaming-problem-camel-core.patch;https://issues.apache.org/jira/secure/attachment/12729758/0001-wire-tap-streaming-problem-camel-core.patch","23/Apr/15 12:04;geertvanheusden;WireTapTest.java;https://issues.apache.org/jira/secure/attachment/12727595/WireTapTest.java",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,http://camel.465427.n5.nabble.com/Closed-removed-StreamCache-when-doing-a-Wiretap-td5765977.html,,,,,,,,,,,9223372036854775807,,,Mon May 04 18:00:05 UTC 2015,,,,,,,,,,,"0|i2dno7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Apr/15 12:07;geertvanheusden;Solution proposal by [~forsthofer]:

{quote}
My original proposal to copy the stream cache file is not the optimal 
solution. A better solution would be to have only one stream cache 
file and to delete this file only when all exchanges which need this 
file are done. This does mean we have to register listeners to the 
event onDone of all UnitOfWorks of the relevant exchanges in the 
stream cache file object and only when all listeners have got the 
onDone event, then the file can be deleted.  However this will require 
quite some changes 

Probably we could also use this solution for the agregator and splitter case.. 
{quote};;;","01/May/15 10:05;forsthofer;Hi,
I am working on a patch.
Regards Franz;;;","01/May/15 13:02;forsthofer;Hi,
Here is the patch. It consists of two files. One for camel-core and one for camel-netty-http.

I had to change the clone() method in the interface StreamCache to

StreamCache clone(Exchange exchange)

because I needed to count the exchanges which are relevant for the cached file.

Regards Franz Forsthofer
SAP SE
e-mail: franz.forsthofer@sap.com;;;","04/May/15 18:00;davsclaus;Thanks for the patch.

There we are few other components where the copy needed to be adjusted. But its all sorted now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SyslogConverter doesn't handle the structured data rightly,CAMEL-8687,12823310,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,23/Apr/15 06:24,23/Apr/15 07:54,14/Jul/23 05:50,23/Apr/15 07:54,2.14.2,2.15.1,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,,,,,,,,0,,,,,,"As there are ' ' inside the structured data, we cannot just check ' '  for separation of the structured message.
Here is the discussion about it.
http://camel.465427.n5.nabble.com/Syslog-data-format-incorrect-parsing-of-structured-data-td5766123.html",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 23 07:54:26 UTC 2015,,,,,,,,,,,"0|i2dn5z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Apr/15 07:54;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using load balancer in onException adds duplicate outputs for each route defined,CAMEL-8683,12822962,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Apr/15 10:00,23/Apr/15 13:52,14/Jul/23 05:50,23/Apr/15 13:52,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-core,,,,,,,0,,,,,,"If using load balancer in context scoped onException then it adds duplicate outputs per route you have. So if you have 3 routes, then there is 2 x duplicates as there is 2 additional routes.
",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 23 13:50:59 UTC 2015,,,,,,,,,,,"0|i2dl7z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Apr/15 13:50;davsclaus;This requires CAMEL-8684 but I think this is justified to fix this other bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Context scoped OnException should not be stopped if a route is stopped,CAMEL-8682,12822941,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Apr/15 08:46,22/Apr/15 09:53,14/Jul/23 05:50,22/Apr/15 09:53,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-core,,,,,,,0,,,,,,"If you stop a route and uses context scoped error handling, then its services may be stopped when the route stops. This should not happen for context scoped as they are reused by other routes etc.

This can also happen for OnCompletion which has same scope as OnException.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-04-22 08:46:36.0,,,,,,,,,,,"0|i2dl3j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite recursion in TransactionErrorHandler toString method,CAMEL-8678,12822365,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,20/Apr/15 16:24,20/Apr/15 16:28,14/Jul/23 05:50,20/Apr/15 16:28,,,,,,,,,,,,,,,2.15.2,2.16.0,,,,,,,,,,0,,,,,,"This causes the stack to overflow, which is bad :-) Offending code: 

https://github.com/apache/camel/blob/66e04492c34cc4150abcd9908c8afd837c9eb51d/components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java#L227-L229",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 20 16:28:47 UTC 2015,,,,,,,,,,,"0|i2dhif:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Apr/15 16:28;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/b7138260;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Netty4 does not set remote UDP address in headers,CAMEL-8674,12822266,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tuure.laurinolli@portalify.com,tuure.laurinolli@portalify.com,20/Apr/15 09:44,22/Apr/15 11:26,14/Jul/23 05:50,22/Apr/15 11:26,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-netty4,,,,,,,0,,,,,,"It appears that camel-netty4 does not set CamelNettyRemoteAddress in *headers* of an Exchange generated by an in-only UDP endpoint.

It does set CamelNettyRemoteAddress in *properties* of the exchange.

CamelNettyRemoteAddress in *properties* is set from AddressedEnvelope#sender(). CamelNettyRemoteAddress in *headers* is set from ChannelHandlerContext#channel().remoteAddress().

It appears that the latter does not actually contain the remote address. Possible solutions are:
1) Change NettyEndpoint to set CamelNettyRemoteAddress in *headers* from the AddressedEnvelope received
2) Change NettyEndpoint to set CamelNettyRemoteAddress from *properties* (and to set *properties* of the Exchange first)",,njiang,tuure.laurinolli@portalify.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 22 11:26:50 UTC 2015,,,,,,,,,,,"0|i2dgwv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Apr/15 08:11;njiang;Thanks for reporting this, I just wrote a simple test and produce the error.
Current we just set the CamelNettyRemoteAddress on the Exchange property to help us find a way to send the response message back.
I just updated the code of NettyEndpoint to setup the CamelNettyRemoteAddress on the message header at the same time.;;;","22/Apr/15 08:14;tuure.laurinolli@portalify.com;Thank you. That's the reason I need the information as well :);;;","22/Apr/15 11:26;njiang;I just merge the patch into camel master, camel-2.15.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException when creating dynamic routes,CAMEL-8673,12822256,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,dreske,dreske,20/Apr/15 09:12,22/Apr/15 00:06,14/Jul/23 05:50,22/Apr/15 00:06,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-core,,,,,,,0,,,,,,"This ticket refers to CAMEL-7836.
The fix seems to be slightly wrong. (We still geht the ConcurrentModificationException)

The cause seems to be in removeRouteCollection and addRouteCollection. See here:
{code}
void removeRouteCollection(Collection<Route> routes) {
        synchronized (routes) {
            this.routes.removeAll(routes);
        }
}
{code}
Here the code synchronizes on the routes parameter, but should be on this.routes (as it getRoutes() does). The same in addRouteCollection().",,dreske,njiang,rlu,,,,,,,,,,,,,,,,,,,,,CAMEL-7836,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 22 00:06:50 UTC 2015,,,,,,,,,,,"0|i2dgun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"22/Apr/15 00:06;njiang;Applied the patch into camel master ,camel-2.15.x and camel-2.14.x branch with thanks to Dirk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet Rest Component properties are ignored,CAMEL-8672,12822223,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,koscejev,koscejev,20/Apr/15 06:12,22/Apr/15 06:33,14/Jul/23 05:50,20/Apr/15 06:50,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-restlet,rest,,,,,,0,,,,,,"Rest properties for RestletComponent are not picked up by the component because it's incorrectly looking for ""restle"" properties instead of ""restlet"".

{code}
        // configure component options
        RestConfiguration config = getCamelContext().getRestConfiguration();
        if (config != null && (config.getComponent() == null || config.getComponent().equals(""restle""))) {
            // configure additional options on spark configuration
            if (config.getComponentProperties() != null && !config.getComponentProperties().isEmpty()) {
                setProperties(this, config.getComponentProperties());
            }
        }
{code}",,acosentino,davsclaus,githubbot,koscejev,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7364,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 22 06:33:26 UTC 2015,,,,,,,,,,,"0|i2dgnb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Apr/15 06:38;davsclaus;Thanks do you work on a patch to fix this?;;;","20/Apr/15 06:41;githubbot;GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/499

    Fix CAMEL-8672 Restlet Rest Component properties are ignored

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8672
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-restlet-component

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/499.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #499
    
----
commit 9f8d32bae506440ea59db114f1065e180583400b
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-20T06:38:29Z

    Fix CAMEL-8672 Restlet Rest Component properties are ignored

----
;;;","20/Apr/15 06:43;acosentino;I didn't read Claus message. If you want to submit the patch, I close my PR without problem :-)

Just let me know :-);;;","20/Apr/15 06:45;koscejev;I'm not sure how to test this properly, so I devised a test that directly checks the properties from the component in camel context. The test fails without the fix.

I was about to create a pull request, but someone else was faster. Well, mine has a test. ;)

;;;","20/Apr/15 06:46;githubbot;GitHub user koscejev opened a pull request:

    https://github.com/apache/camel/pull/500

    CAMEL-8672: RestletComponent should look for ""restlet"" properties

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/koscejev/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/500.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #500
    
----
commit 0be60879ef3509ad5ac24d06cf6b2100183a96d0
Author: Anton Koscejev <anton.koscejev@zoomint.com>
Date:   2015-04-20T06:43:23Z

    CAMEL-8672: RestletComponent should look for ""restlet"" properties

----
;;;","20/Apr/15 06:47;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/499
;;;","20/Apr/15 06:48;acosentino;I close my PR :-)

Your is better :-);;;","20/Apr/15 06:49;acosentino;Sorry for this.;;;","20/Apr/15 06:50;davsclaus;Thanks guys;;;","22/Apr/15 06:33;githubbot;Github user koscejev closed the pull request at:

    https://github.com/apache/camel/pull/500
;;;",,,,,,,,,,,,,,,,,,,,,,
java.lang.NullPointerException CamelSpringTestContextLoader.java:174,CAMEL-8667,12822111,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,chrislovecnm,chrislovecnm,18/Apr/15 23:24,19/Aug/15 07:02,14/Jul/23 05:50,19/Aug/15 07:02,2.15.1,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-spring,,,,,,,1,,,,,,"I am getting a NPE with camel spring unit testing.  I am trying to convert 

https://github.com/apache/camel/blob/master/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trim/BindySimpleFixedLengthUnmarshallTest.java 

to pure annotations ... and I am getting a NPE ... 

I am using:
{code:java}
@ContextConfiguration()
@RunWith(SpringJUnit4ClassRunner.class)
@BoostrapWith(CamelTestContextBootstrapper.class)
{code}

Here is my stack trace.

{code:java}
Caused by: java.lang.NullPointerException: null 
at org.apache.camel.test.spring.CamelSpringTestContextLoader.cleanup(CamelSpringTestContextLoader.java:174)
at org.apache.camel.test.spring.CamelSpringTestContextLoader.loadContext(CamelSpringTestContextLoader.java:86) 
at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:68)
at org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:86)
at org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:72)
{code}

The unit test is attached.",,chrislovecnm,davidkarlsen@gmail.com,davsclaus,hekonsek,jordan.armstrong,nkukhar,stijn.van.bael,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Apr/15 00:21;chrislovecnm;DailyWeatherDataBeanUnmarshallTest.java;https://issues.apache.org/jira/secure/attachment/12726411/DailyWeatherDataBeanUnmarshallTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 19 07:02:20 UTC 2015,,,,,,,,,,,"0|i2dfzb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Apr/15 00:20;chrislovecnm;I am tracing this back to
{code:java}
return CamelSpringTestHelper.getTestClass();  // Line 472 CamelSpringTestContextLoader
{code}

Is coming back as a null. 

Here is the testClazz.get() in CamelSpringTestHelper.java:

{code:java}
private static ThreadLocal<Class<?>> testClazz = new ThreadLocal<Class<?>>();

public static Class<?> getTestClass() {
  return testClazz.get(); // returning null
}
{code}

Thanks

Chris;;;","19/Apr/15 00:21;chrislovecnm;I have uploaded a copy of the unit test that is throwing a NPE;;;","19/Apr/15 00:27;chrislovecnm;Missed java version:

java version ""1.8.0_11""
Java(TM) SE Runtime Environment (build 1.8.0_11-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)

And OS:

Linux 3.16.5-gentoo #2 SMP Mon Dec 1 13:18:03 MST 2014 x86_64 Intel(R) Core(TM) i7-3740QM CPU @ 2.70GHz GenuineIntel GNU/Linux
;;;","19/Apr/15 06:04;davsclaus;Thanks for reporting. ;;;","19/Apr/15 06:06;davsclaus;Chris are you working on a patch?

We love contributions and anyone is welcome to try to fix this. Seems like a good candidate if you fancy trying to work on the Camel code and provide patches.
http://camel.apache.org/contributing.html;;;","20/Apr/15 05:14;chrislovecnm;Claus you don't want me coding threads :) I will let one of your gurus take a look at it. Thanks for the offer. So much code to write too little time ;);;;","20/Apr/15 16:58;chrislovecnm;Providing some more information.  I am using a spring boot application, and able to run the unit test by using:

{code}
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = Application.class)
@BootstrapWith(CamelTestContextBootstrapper.class)
{code}

But that starts all of the camel routes, which is not preferable for unit testing.;;;","21/Apr/15 01:23;nkukhar;Hi Chris,

Could you please attach to this issue other files that are required to run your test (like DailyWeatherDataBean)?


;;;","21/Apr/15 19:05;chrislovecnm;I would love to except is it closed source :( 

One thought would be to migrate https://github.com/apache/camel/blob/master/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trimfield/BindySimpleFixedLengthUnmarshallTrimFieldTest.java to using annotations.  Basically the same test that I am doing, just a custom pojo.;;;","21/Apr/15 20:44;hekonsek;if this is Spring Boot related, then let me take it form this point forward. ;);;;","21/Apr/15 20:51;chrislovecnm;[~hekonsek] I am uncertain if it is Spring Boot, but I am trying to use a pure annotation driven unit test inside of a spring boot project.  Only want to load a camel context and spring context ... Not all of Spring Boot, because then I get all of the routes that spring boot sees ... I am probably just trying to create a mess :P

So if I am doing this oddly, please give me more docs on how to do it 'correctly' ... but I am pretty sure that I found a NPE as well.

Guys ... APPRECIATED ... love me some camel coding ;)

As I mentioned, the unit test runs when using:

{code}
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = WeatherApplication.class)
@BootstrapWith(CamelTestContextBootstrapper.class)
{code}

And refering to the Bindy unit test: https://github.com/apache/camel/blob/master/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/fixed/unmarshall/simple/trimfield/BindySimpleFixedLengthUnmarshallTrimFieldTest.java

I externalized the following route builder into a '@Service' that is in another class in /src/test/java 

{code}
 public static class ContextConfig extends RouteBuilder {
        BindyFixedLengthDataFormat camelDataFormat = new BindyFixedLengthDataFormat(""org.apache.camel.dataformat.bindy.fixed.unmarshall.simple.trimfield"");

        public void configure() {
            from(URI_DIRECT_START).unmarshal(camelDataFormat).to(URI_MOCK_RESULT);
        }

    }
{code};;;","08/Jul/15 19:26;jordan.armstrong;I just ran into this issue and found this via google. The issue is with the documentation. The documentation at [Spring Testing|http://camel.apache.org/spring-testing.html] says to use {{@RunWith(SpringJUnit4ClassRunner.class)}}, but it should be {{@RunWith(CamelSpringJUnit4ClassRunner.class)}}. When using {{SpringJUnit4ClassRunner}} the method {{CamelSpringTestHelper.setTestClass}} never gets called.

For a working example see [CamelSpringDelegatingTestContextLoaderTest|https://github.com/apache/camel/blob/master/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/test/CamelSpringDelegatingTestContextLoaderTest.java]. It's not using the {{@Bootstrap}} annotation, instead using the loader param for {{@ContextConfiguration}}, but the effect is the same.
;;;","08/Jul/15 20:46;jordan.armstrong;Just a note that not all of the documentation is wrong. Just the section ""Plain Spring Test using JUnit 4.1.x Runner with XML Config"". It's not possible to use the plain Spring test runner with {{CamelTestContextBootstrapper}}. Persumably if {{CamelSpringTestHelper.setTestClass(testClass);}} was added to the {{CamelSpringTestContextLoader.loadContext}} method it might work, although you may run into other issues.;;;","03/Aug/15 12:24;stijn.van.bael;Ran into the same issue, please correct the docs at http://camel.apache.org/spring-testing.html, section ""Plain Spring Test using JUnit 4.1.x Runner with XML Config"";;;","12/Aug/15 12:13;davidkarlsen@gmail.com;I fixed it in rev v.39 of that wiki page - wait a bit for the static site pages to be generated and then I think this issue can be closed.;;;","19/Aug/15 07:02;davsclaus;Thanks David for the wiki page update;;;",,,,,,,,,,,,,,,,
Throttler EIP - Using method call for message per sec exp fails in spring,CAMEL-8665,12822058,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Apr/15 06:17,18/Apr/15 07:20,14/Jul/23 05:50,18/Apr/15 07:20,2.14.2,2.15.1,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-core,camel-spring,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Throtteling-and-dynamically-changing-MaxRequestsPerPeriod-via-Bean-tp5765952.html

It works in java dsl but not in xml dsl",,davsclaus,nkukhar,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-04-18 06:17:44.0,,,,,,,,,,,"0|i2dfnj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Namespaces defined on the SOAP envelope get lost in PAYLOAD mode,CAMEL-8663,12821943,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,siano,siano,17/Apr/15 17:50,21/Mar/19 16:30,14/Jul/23 05:50,05/Aug/15 16:01,,,,,,,,,,,,,,,2.16.0,,,,camel-cxf,,,,,,,0,,,,,,"If a request message is send to a CXF consumer or a response is returned to the CXF provider that contains namespace definions at the SOAP envelope and the Camel-CXF endpoint is configured in PAYLOAD mode the namespace definition gets lost unless streaming is disabled.

If the resulting CxfPayload is then converted e.g. to String that String will contain invalid XML (because some namespace definition is missing).

For non-streaming mode (system property org.apache.camel.component.cxf.streaming is set to false) there are special precautions met to set these envelope namespaces on the first DOM element of the payload but this coding is missing for StAX.

The messages in question look like that:
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">
  <soap:Body>
    <ns2:getTokenResponse xmlns:ns2=""http://camel.apache.org/cxf/namespace"">
      <return xsi:type=""xs:string"">Return Value</return>
    </ns2:getTokenResponse>
  </soap:Body>
</soap:Envelope>

If the CxfPayload is converted to String it will lack the definition for the xsi namespace prefix (and further XML parsing will fail).",,ay,davsclaus,siano,,,,,,,,,,,,,,,CAMEL-13357,,,,,,CXF-6394,,,,,,CAMEL-11681,,,,,"04/May/15 12:47;siano;0001-CAMEL-8663-Namespaces-defined-on-SOAP-envelope-lost-.patch;https://issues.apache.org/jira/secure/attachment/12730172/0001-CAMEL-8663-Namespaces-defined-on-SOAP-envelope-lost-.patch","08/May/15 12:15;siano;0001-Extension-to-Aki-s-patch.patch;https://issues.apache.org/jira/secure/attachment/12731461/0001-Extension-to-Aki-s-patch.patch",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 05 16:01:27 UTC 2015,,,,,,,Patch Available,,,,"0|i2dexz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Apr/15 18:50;siano;The attached patch tracks the namespaces in another interceptor and adds a nsMap in DefaultCxfBinding (similar to the one provided for DOM).

A delegation XMLStreamReader then re-injects the namespaces.

See the attached tests for details of the fix.;;;","04/May/15 11:54;siano;The new version of the patch directly writes to a CachedOutputStream when doing the identity transformation. The previous version was intermediately storing the message in a String internally;;;","06/May/15 14:37;ay;I think the xsi prefix in your example should not actually cause any problem when the StAXSource is correctly serialized (because it should find the namespace bound to prefix xsi and can serialize this attribute along with its namespace declrattion). If xsi's declaration disappears when converting to String, I think there is something wrong with the converter.

But your example points out another issue, namely of handling the implicitly referenced prefixes (the prefix ""xs"" used in attribute value ""xs:string""). To include this prefix declaration in the detached payload text, we need to collect the bindings from the envelope.

I think the easiest way to do this is to make CXF provide this context map so that camel-cxf can directly inject it when instantiating CxfPayload.

But in any case, the downside of including all implicitly referenced declarations is that they will be then included even when they are not even used. We might need to provide an option to not include additional declarations.

I'll look into this.;;;","07/May/15 11:55;ay;Hi Stephan,
I added an option CXF to directly gather the namespace map of the soap:body so this can be directly retrieved at camel-cxf.
Using this feature, I made a simpler patch and the code passes your test cases. 
I am submitting this patch including your tests but the tests are disabled for now (wait for cxf-3.0.6).

If you could look at the change and your feedback, that would be appreciated.
regards, aki;;;","08/May/15 12:15;siano;Hi Aki,

I have added some extensions to your patch. It contains the following changes:
1. I removed unused import statements left behind by your refactoring
2. I made the DelegatingXMLStream reader less aggressive. The namespaces are only injected on the top element that is read, not on every element of the payload.
3. The CachedCxfPayload will wrap the XMLStreamReader only into a DelegatingXMLStreamReader if it is not already one (the type converter normally already does this wrapping). The following identity transformation is done directly into a StreamResult backed by a CachedOutputStream. This avoids the type conversion into a StreamSource which is backed by a String that is then copied into a CachedOutputStream in the constructor of the StreamSourceCache.
4. I added two addiontional tests that also test this kind of messages with stream caching.
5. I think the org.apache.cxf.binding.soap.addNamespaceContext should always be set to true for Camel-CXF endpoints in payload mode. It is very intransparent to the user whether this setting is reqired or not, so I think it should always be enabled to be on the safe side.

What do you think?

Best regards
Stephan;;;","08/May/15 17:42;ay;Hi Stephan,
thanks.
1. aah. I often forget to run the sourcecheck because it's not active by default clean install ;-( thanks
2. okay. But we need to change this logic so that the additional ns-decls get included only at the root level and not at any time when the namespaces are read at the first time. Otherwise you'll get an inconsistent behavior when some app repeatedly invokes next() and then does getNamespaceXX. At that point, the added prefixes might have be overwritten at some higher level. And also the additional ns-decls need to be included back at the root level at its end-element event. I'll adjust this accordingly.
3. okay
4. okay
5. thought about this for a while, That will make it more practical for most camel users. So okay. fine.

Willem already fixed some of the original checkstyle issue. So I need to run the merge against the earlier version and then rebasing to the current version. And there are still several checkstyle errors that I need to fix before pushing the change this time.  So just a moment.
;;;","30/Jul/15 08:44;ay;Somehow I forgot about this ticket. I don't remember if I completed the work and forgot to mark it complete or if something is still left.
I will take care of it today.
;;;","05/Aug/15 09:41;davsclaus;Did you get a chance to look into this?;;;","05/Aug/15 14:01;ay;I was interrupted and waited realized that this needed to wait for a new cxf version which has just been released.
I will activate the disabled tests and push the change after verifying it.


;;;","05/Aug/15 16:01;ay;For now, the patch is only pushed to master/2.16.0.

This patch does not integrate automatically into 2.15.x, as its change depends on the change made with CAMEL-8410 and CAMEL-8688.

That means, if this patch needs to be integrated into 2.15.x, either bring these previous changes into 2.15.x or adjust this patch to work without these change.

;;;",,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Disconnect when no messages dont call disconnect,CAMEL-8660,12821886,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Apr/15 13:49,17/Apr/15 14:34,14/Jul/23 05:50,17/Apr/15 14:34,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-ftp,,,,,,,0,,,,,,"Its due disconnect is now done as part of UoW to not disconnect before deleting files etc.

But if there is no messages then the UoW is not called as no Exchange. In that case we should disconnect if its true.

See nabble
http://camel.465427.n5.nabble.com/FTP-disconnect-problem-tp5765934.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-04-17 13:49:42.0,,,,,,,,,,,"0|i2delj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel RAW() cannot handle String of  %2050,CAMEL-8649,12821564,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,16/Apr/15 15:59,28/Aug/22 19:54,14/Jul/23 05:50,19/Apr/15 07:01,2.14.2,2.15.1,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-core,,,,,,,0,,,,,,"{code}
file:inbox?fileName=data+.txt (expected ""inbox/data .txt"" and result is OK)
file:inbox?fileName=data%20.txt (expected ""inbox/data .txt"" and result is OK)
file:inbox?fileName=RAW(data+.txt) (expected ""inbox/data+.txt"" and result is OK)
file:inbox?fileName=RAW(data%20.txt) (expected ""inbox/data%20.txt"", but actually it's ""inbox/data .txt"") - I think it's WRONG (disobeyed RAW)
file:inbox?fileName=RAW(data%2520.txt) (expected ""inbox/data%2520.txt"", but actually it's also ""inbox/data .txt"") - I think it's WRONG (disobeyed RAW + double URL decode)
Additional info:
RAW(data%252520.txt) results in ""data%20.txt"" (disobeyed RAW + double URL decode - it means there is not triple URL decode in this case)
RAW(data%2B.txt) results in ""data+.txt"" (disobeyed RAW + single URL decode - it means there is not double URL decode in this case)
data%252B.txt results in ""data%2B.txt"" (single URL decode - it means there is not double URL decode in this case)
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,CAMEL-18435,,,,CAMEL-8607,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 16 16:10:20 UTC 2015,,,,,,,,,,,"0|i2dcp3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Apr/15 16:10;njiang;It's caused by the UnsafeUriCaharctersEncoder doesn't do the encoding for the String which is encoded like ""%20"" which could introduce some trouble when camel decode the URI parameter, so we need to encode the % in RAW message to fix the issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Http Post from a streaming client sometimes fails to parse,CAMEL-8643,12821189,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,richard.peter,richard.peter,15/Apr/15 14:50,26/Jul/15 15:38,14/Jul/23 05:50,17/Jul/15 10:54,2.15.0,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-http,camel-http4,,,,,,1,,,,,,When upgrading from camel 2.14.1 to 2.15.0 our http posts from clients were sometimes failing.  Traced issue to https://issues.apache.org/jira/browse/CAMEL-5806.  The linked issue added a check of InputStream.available() which on a slow or remote client the binary stream isn't always immediately available.  Since this is done as part of the initial setup the data is never parsed when it becomes available.,redhat 6.4,davsclaus,richard.peter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 17 10:56:09 UTC 2015,,,,,,,,,,,"0|i2daen:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"17/Jul/15 10:56;davsclaus;There is a new option eagerCheckContentAvailable that is default false to correct this behavior. You can set it to true to have the 2.15.x situation.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File endpoints NPE when shutdown if never started,CAMEL-8641,12821183,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,richard.peter,richard.peter,15/Apr/15 14:41,17/Apr/15 06:05,14/Jul/23 05:50,17/Apr/15 06:05,2.14.2,,,,,,,,,,,,,,2.14.3,,,,camel-core,,,,,,,1,,,,,,The ScheduledPollConsumer does not have a scheduler if it has never been started.  The scheduler is not checked for null in doStop.  This comes up when routes are set to not autoStart and context managent later stops the route.,,davsclaus,jaysensharma,richard.peter,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 17 06:05:29 UTC 2015,,,,,,,,,,,"0|i2dadb:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"15/Apr/15 17:14;jaysensharma;Looks like Claus Ibsen has already fixed it in later version of Camel please check: 

https://github.com/apache/camel/commit/a8fd547fbc63429831be89b5f5566334bd9b4358;;;","15/Apr/15 17:35;richard.peter;Yes, he fixed on master/2.15.x branch.  2.14.x needs the commit as well, since it was broken on 2.14.2.;;;","17/Apr/15 06:05;davsclaus;Thanks for reporting and highlighting the commit to backport;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel FTP component cannot recover after network failure,CAMEL-8639,12821105,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,Khajiit,Khajiit,15/Apr/15 09:50,19/Jul/15 08:09,14/Jul/23 05:50,18/Jul/15 07:36,,,,,,,,,,,,,,,2.15.3,2.16.0,,,camel-ftp,,,,,,,1,,,,,,"Camel FTP endpoint cannot recover by itself after network failure if no custom PollingConsumerPollStrategy is defined. Few years ago there was similar issue (https://issues.apache.org/jira/browse/CAMEL-1838), and it was fixed by adding in RemoteFileConsumer:
this.setPollStrategy(new RemoteFilePollingConsumerPollStrategy());

However it is broken again, as FtpEndpoint is overriding it with DefaultPollingConsumerPollStrategy in initConsumerProperties method, inherited from ScheduledPollEndpoint. I believe RemoteFilePollingConsumerPollStrategy should be used as default in RemoteFileEndpoint as well.

Adding this.setPollStrategy(new RemoteFilePollingConsumerPollStrategy()); in RemoteFilePollingConsumerPollStrategy should fix this issue.

Workaround for this bug is to create RemoteFilePollingConsumerPollStrategy in the registry and provide it directly to FTP endpoint by adding consumer.pollStrategy=#myRemoteFilePollingConsumerPollStrategyBeanId to the URL. This is also why FromFtpSimulateNetworkIssueRecoverTest didn't catch it - it's using custom PollingStrategy.",,davsclaus,Khajiit,robses,,,,,,,,,,,,,,,,,,,,,CAMEL-1838,,,,,,,,,,,"17/Jul/15 17:53;robses;0001-CAMEL-8639-Fix-recovering-after-network-failure-for-.patch;https://issues.apache.org/jira/secure/attachment/12745850/0001-CAMEL-8639-Fix-recovering-after-network-failure-for-.patch","17/Jul/15 17:53;robses;0002-Add-basic-unit-test-for-CAMEL-8639.patch;https://issues.apache.org/jira/secure/attachment/12745851/0002-Add-basic-unit-test-for-CAMEL-8639.patch",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jul 18 07:36:28 UTC 2015,,,,,,,,,,,"0|i2d9vz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jul/15 10:19;davsclaus;Can you work on a patch or something to better explain what you think needs to be fixed?;;;","17/Jul/15 17:52;robses;First steps in contributing to camel, so bear with me. See the attached patch and basic unit test that fixes this issue as described above. Regards Rob

 ;;;","18/Jul/15 07:36;davsclaus;Thanks for reporting, and Rob for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-kafka need to commit the last batch of messages when the auto commit is false,CAMEL-8636,12821069,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Apr/15 06:38,15/Apr/15 07:02,14/Jul/23 05:50,15/Apr/15 07:02,2.15.0,2.15.1,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-kafka,,,,,,,0,,,,,,"CAMEL-8085 introduced a new feature of commit the consumer offset in batch mode, but it doesn't commit the last batch of messages.",,njiang,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8085,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 15 07:02:10 UTC 2015,,,,,,,,,,,"0|i2d9nz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Apr/15 07:02;njiang;Committed the patch into camel master and camel-2.15.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-dozer component fails when multiple expressions are used in a mapping,CAMEL-8628,12820611,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,kcbabo,kcbabo,13/Apr/15 19:14,14/Apr/15 12:17,14/Jul/23 05:50,14/Apr/15 05:43,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-dozer,,,,,,,0,,,,,,"The reference to the current exchange is cleared on each invocation of ExpressionMapper in the done() method.  If a mapping file contains multiple expression mappings, the first expression clears out the exchange reference and subsequent expression mappings fail with:
{noformat}
java.lang.IllegalStateException: Current exchange has not been set for ExpressionMapper
{noformat}
Fix is to not clear the reference in ExpressionMapper.done().  We should do this in DozerProducer after all mappings in the mapping file have completed.",,davsclaus,githubbot,kcbabo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 14 12:17:25 UTC 2015,,,,,,,Patch Available,,,,"0|i2d6z3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Apr/15 19:17;githubbot;GitHub user kcbabo opened a pull request:

    https://github.com/apache/camel/pull/485

    CAMEL-8628: camel-dozer component fails with multiple expression mappings

    https://issues.apache.org/jira/browse/CAMEL-8628

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kcbabo/camel CAMEL-8628

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/485.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #485
    
----
commit 07fedad005b2cfa72006ea386b07600cb6926942
Author: Keith Babo <kbabo@redhat.com>
Date:   2015-04-13T19:15:24Z

    CAMEL-8628: camel-dozer component fails with multiple expression mappings

----
;;;","14/Apr/15 05:43;davsclaus;Thanks for the PR;;;","14/Apr/15 12:17;githubbot;Github user kcbabo closed the pull request at:

    https://github.com/apache/camel/pull/485
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Leaking exchangesInFlightKeys in ManagedRoute,CAMEL-8626,12820555,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,matihost,matihost,13/Apr/15 15:15,20/Apr/15 09:17,14/Jul/23 05:50,19/Apr/15 07:03,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-core,,,,,,,0,,,,,,"Having a camel context with a single route:
{code}
        onException(Throwable.class)
                .handled(true)
                .process(handleException()); // essentially  doing exchange.setException(someConvertedException);

        from(""direct:generalFlow"")
                .routingSlip(property(GeneralFlowRoute.class.getName()));
{code}

started from Spring:
{code}
    <camelContext id=""flows"" xmlns=""http://camel.apache.org/schema/spring"">
        <template id=""template"" defaultEndpoint=""direct:generalFlow""/>
        <routeBuilder ref=""generalFlow""/>
    </camelContext>

    <bean id=""generalFlow"" class=""com.blabla.GeneralFlowRoute""/>
{code}

During performance test both exchangesInFlightKeys  and exchangesInFlightStartTimestamps are accumulating over time.

But if the test is run in one thread with debug - nothing is accumulated.

Issue found after migration from 2.14.1 to 2.15.1
","Java 8 u 40 64 bit, Linux",davsclaus,matihost,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Apr/15 08:12;davsclaus;camel-core-2.15.2-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12726101/camel-core-2.15.2-SNAPSHOT.jar",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 20 09:17:08 UTC 2015,,,,,,,,,,,"0|i2d6mv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Apr/15 15:45;matihost;Output from Eclipse Memory Analizer Tool
{code}
Class Name                                                                                                              | Shallow Heap | Retained Heap
-------------------------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.management.mbean.ManagedSuspendableRoute @ 0xa8ac4cf0                                                  |          128 |    33 939 752
|- <class> class org.apache.camel.management.mbean.ManagedSuspendableRoute @ 0xa8ecfd20                                 |            0 |             0
|- lastExchangeFailureExchangeId java.lang.String @ 0x8b01cb68  ID-plabq10-dev-sabre-com-21992-1428925014784-0-9822762  |           24 |           152
|- lastExchangeCompletedExchangeId java.lang.String @ 0x9b134df8  ID-plabq10-dev-sabre-com-21992-1428925014784-0-9823226|           24 |           152
|- context org.apache.camel.spring.SpringCamelContext @ 0xa8272878                                                      |          384 |        60 760
|- exchangesInFlightKeys java.util.concurrent.ConcurrentHashMap @ 0xa87d7358                                            |           64 |     4 977 264
|- exchangesTotal org.apache.camel.management.mbean.Statistic @ 0xa8aad000                                              |           40 |            40
|- resetTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad028                                              |           40 |            40
|- exchangesCompleted org.apache.camel.management.mbean.Statistic @ 0xa8aad050                                          |           40 |            40
|- exchangesFailed org.apache.camel.management.mbean.Statistic @ 0xa8aad078                                             |           40 |            40
|- exchangesInflight org.apache.camel.management.mbean.Statistic @ 0xa8aad0a0                                           |           40 |            40
|- failuresHandled org.apache.camel.management.mbean.Statistic @ 0xa8aad0c8                                             |           40 |            40
|- redeliveries org.apache.camel.management.mbean.Statistic @ 0xa8aad0f0                                                |           40 |            40
|- externalRedeliveries org.apache.camel.management.mbean.Statistic @ 0xa8aad118                                        |           40 |            40
|- minProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad140                                           |           40 |            40
|- maxProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad168                                           |           40 |            40
|- totalProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad190                                         |           40 |            40
|- lastProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad1b8                                          |           40 |            40
|- deltaProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad1e0                                         |           40 |            40
|- meanProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad208                                          |           40 |            40
|- firstExchangeCompletedTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad230                             |           40 |            40
|- firstExchangeFailureTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad258                               |           40 |            40
|- lastExchangeCompletedTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad280                              |           40 |            40
|- lastExchangeFailureTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad2a8                                |           40 |            40
|- load org.apache.camel.management.mbean.LoadTriplet @ 0xa8aad2d0                                                      |           40 |            40
|- exchangesInFlightStartTimestamps java.util.concurrent.ConcurrentSkipListMap @ 0xa8ab4850                             |           48 |     4 421 800
-------------------------------------------------------------------------------------------------------------------------------------------------------
{code}

And some statistics values:

exchangesInFlightKeys  -> 98175 non-empty entries
exchangesTotal.value 4911592
exchangesCompleted.value 4788850
exchangesFailed.value 122742
exchangesInFlight.value  27
failuresHandled.value 0
failuresHandled.updateCount 0
redeliveries.value 0
externalRedeliveries.value 0;;;","14/Apr/15 06:15;davsclaus;Thanks for reporting, its when an exchange had failed the leak happens. Not for succesfull exchanges.;;;","14/Apr/15 06:58;davsclaus;attached fixed camel-core JAR;;;","14/Apr/15 06:59;davsclaus;I have build a JAR with the fix, you are welcome to give a test. 

You can also build from source yourself
http://camel.apache.org/building.html;;;","14/Apr/15 09:13;matihost;Thanks for a fast fix.

WIll run a test again and will have report tomorrow after 6 AM CDT.;;;","15/Apr/15 09:38;matihost;Still exchangesInFlightStartTimestamps  leaking  (see MAT dump below)

However it is a case of one of ManagedSuspendableRoute object out of existing 214 in the system.

It is for a route:
{code}
        from(""direct:loopV300"")
                .choice().when(property(WHILE_COUNTER).isGreaterThan(0))
                    // some procesing
                    .setProperty(WHILE_COUNTER, decrementProperty(WHILE_COUNTER))
                    .to(""direct:loopV300"")
                .end();
{code}

MAT dump:

{code}
Class Name                                                                                                              | Shallow Heap | Retained Heap
-------------------------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.management.mbean.ManagedSuspendableRoute @ 0x78b76a5e8                                                 |          128 |   153 059 616
|- <class> class org.apache.camel.management.mbean.ManagedSuspendableRoute @ 0x789ef31b0                                |            0 |             0
|- lastExchangeCompletedExchangeId java.lang.String @ 0x782074c98  ID-plabq10-dev-sabre-com-30368-1429011401321-0-934556|           24 |           152
|- context org.apache.camel.spring.SpringCamelContext @ 0x788396c88                                                     |          384 |        83 344
|- exchangesInFlightStartTimestamps java.util.concurrent.ConcurrentSkipListMap @ 0x789fb5760                            |           48 |   153 056 936
|- exchangesInFlightKeys java.util.concurrent.ConcurrentHashMap @ 0x789fb5790                                           |           48 |         1 792
|- route org.apache.camel.impl.EventDrivenConsumerRoute @ 0x78a7b88d8                                                   |           72 |           592
|- exchangesTotal org.apache.camel.management.mbean.Statistic @ 0x78bb01220                                             |           40 |            40
|- resetTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb01248                                             |           40 |            40
|- exchangesCompleted org.apache.camel.management.mbean.Statistic @ 0x78bb01270                                         |           40 |            40
|- exchangesFailed org.apache.camel.management.mbean.Statistic @ 0x78bb01298                                            |           40 |            40
|- exchangesInflight org.apache.camel.management.mbean.Statistic @ 0x78bb012c0                                          |           40 |            40
|- failuresHandled org.apache.camel.management.mbean.Statistic @ 0x78bb012e8                                            |           40 |            40
|- redeliveries org.apache.camel.management.mbean.Statistic @ 0x78bb01310                                               |           40 |            40
|- externalRedeliveries org.apache.camel.management.mbean.Statistic @ 0x78bb01338                                       |           40 |            40
|- minProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb01360                                          |           40 |            40
|- maxProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb01388                                          |           40 |            40
|- totalProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb013b0                                        |           40 |            40
|- lastProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb013d8                                         |           40 |            40
|- deltaProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb01400                                        |           40 |            40
|- meanProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb01428                                         |           40 |            40
|- firstExchangeCompletedTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb01450                            |           40 |            40
|- firstExchangeFailureTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb01478                              |           40 |            40
|- lastExchangeCompletedTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb014a0                             |           40 |            40
|- lastExchangeFailureTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb014c8                               |           40 |            40
|- load org.apache.camel.management.mbean.LoadTriplet @ 0x78bb014f0                                                     |           40 |            40
|- firstExchangeCompletedExchangeId java.lang.String @ 0x790515100  ID-plabq10-dev-sabre-com-30368-1429011401321-0-2    |           24 |           136
|- firstExchangeFailureExchangeId java.lang.String @ 0x7928bb518  ID-plabq10-dev-sabre-com-30368-1429011401321-0-223200 |           24 |           152
|- lastExchangeFailureExchangeId java.lang.String @ 0x79931b290  ID-plabq10-dev-sabre-com-30368-1429011401321-0-834588  |           24 |           152
-------------------------------------------------------------------------------------------------------------------------------------------------------


route.endpoint direct://loopV300
exchangesInFlightKeys size = 0
exchangesInFlightStartTimestamps  size = 1 401 792
exchangeInFlight.value 0
exchangesTotal.value 1 869 106
exchangedFailed.value 10
exchangesCompleted.value 1 869 096

{code}


;;;","17/Apr/15 07:04;davsclaus;Ah you may do something bad/odd with your ""while loop trick"". There is a loop eip you should favor to use
http://camel.apache.org/loop

;;;","17/Apr/15 07:05;davsclaus;If you look using jconsole / jvisualvm there is a inflight repository mbean under services. What does it say?;;;","17/Apr/15 07:57;davsclaus;Okay found the leak when you call the same route recursive which you do in your ""while loop"". I will commit a fix and attach a new JAR for you to test;;;","17/Apr/15 08:12;davsclaus;Attached the updated JAR with a new fix.;;;","18/Apr/15 16:55;matihost;Thanks for the second patch.

First tests and dumps shows that the leak is gone. I will have full result tests tomorrow.

When is 1.15.2 going to be released?


;;;","19/Apr/15 07:03;davsclaus;Thanks for testing.

Follow this talk about the 2.15.2 release
http://camel.465427.n5.nabble.com/Apache-Camel-2-15-2-Patch-Release-td5765747.html;;;","20/Apr/15 09:17;matihost;Finally confirming that the issues are gone.
Thanks
Looking forward the patched release.
;;;",,,,,,,,,,,,,,,,,,,
Bean component - Potential NPE in BeanInfo,CAMEL-8624,12820488,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Apr/15 08:37,13/Apr/15 09:13,14/Jul/23 05:50,13/Apr/15 09:13,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-core,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/transformers-not-working-after-update-to-2-15-1-tp5765600.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-04-13 08:37:29.0,,,,,,,,,,,"0|i2d67z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When proxyAuthHost is defined in camel-https4 with sslContextParameters it fails.,CAMEL-8613,12819935,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jaysensharma,jaysensharma,10/Apr/15 04:15,21/Apr/15 15:50,14/Jul/23 05:50,21/Apr/15 15:50,2.12.0,,,,,,,,,,,,,,2.13.0,,,,camel-http4,,,,,,,0,,,,,,"- camel-https4 fails when  ""sslContextParameters"" and ""proxyAuthHost"" are defined together.
{code}
    <to uri=""https4://dic.googlecode.com/files/GoogleSearch.wsdl?sslContextParameters=#testSSLContext&amp;throwExceptionOnFailure=true""/>
{code}

Above works fine but if i add the ""proxyAuthHost"" info then it fails with the following error:
{code}
   <to uri=""https4://dic.googlecode.com/files/GoogleSearch.wsdl?sslContextParameters=#testSSLContext&amp;throwExceptionOnFailure=true&amp;proxyAuthHost=my.squid.proxy.com&amp;proxyAuthPort=3128""/>
{code}


  The following Error occurs: 
{code}
[jsensharma@localhost CamelBased]$ mvn clean install camel:run

[INFO] Starting Camel ...
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/jsensharma/.m2/repository/org/slf4j/slf4j-log4j12/1.6.6/slf4j-log4j12-1.6.6.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/jsensharma/.m2/repository/org/slf4j/slf4j-log4j12/1.7.10/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.12.0.redhat-610379 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle redhat-case is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http4.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http.HttpConverter.toServletRequest(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http4.HttpConverter.toServletRequest(org.apache.camel.Message)
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http.HttpConverter.toServletResponse(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http4.HttpConverter.toServletResponse(org.apache.camel.Message)
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) is starting
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is enabled on CamelContext: myCamelId
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Tracing is enabled on CamelContext: myCamelId
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] HttpComponent                  INFO  Created ClientConnectionManager org.apache.http.impl.conn.PoolingClientConnectionManager@1a428ecd
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https on port 2831
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https4 on port 2831
[         Blueprint Extender: 1] SSLContextParameters           INFO  Available providers: SUN version 1.7.
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https on port 443
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https4 on port 443
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[         Blueprint Extender: 1] DefaultStreamCachingStrategy   INFO  StreamCaching in use with spool directory: /tmp/camel/camel-tmp-75033967-7017-48d6-9394-d690a6174d87 and rules: [Spool > 128K body size]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) is shutting down
[         Blueprint Extender: 1] HttpComponent                  INFO  Shutting down ClientConnectionManager: org.apache.http.impl.conn.PoolingClientConnectionManager@1a428ecd
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) uptime 0.308 seconds
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) is shutdown in 0.004 seconds
[         Blueprint Extender: 1] BlueprintCamelContext          ERROR Error occurred during starting Camel: CamelContext(myCamelId) due Failed to create Producer for endpoint: Endpoint[https4://dic.googlecode.com/files/GoogleSearch.wsdl?proxyAuthHost=my.squid.proxy.com&sslContextParameters=%23testSSLContext&throwExceptionOnFailure=true&proxyAuthPort=2831]. Reason: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[https4://dic.googlecode.com/files/GoogleSearch.wsdl?proxyAuthHost=my.squid.proxy.com&sslContextParameters=%23testSSLContext&throwExceptionOnFailure=true&proxyAuthPort=2831]. Reason: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:409)
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:191)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:358)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:153)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:994)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:329)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2150)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2080)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1868)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1740)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1579)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1547)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:872)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:792)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:540)
	at de.kalpatec.pojosr.framework.PojoSR$1.serviceChanged(PojoSR.java:66)
	at de.kalpatec.pojosr.framework.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:116)
	at de.kalpatec.pojosr.framework.PojoSRBundleContext.registerService(PojoSRBundleContext.java:88)
	at de.kalpatec.pojosr.framework.PojoSRBundleContext.registerService(PojoSRBundleContext.java:260)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:668)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:370)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.component.http4.HttpEndpoint.createHttpClient(HttpEndpoint.java:149)
	at org.apache.camel.component.http4.HttpEndpoint.getHttpClient(HttpEndpoint.java:113)
	at org.apache.camel.component.http4.HttpProducer.<init>(HttpProducer.java:83)
	at org.apache.camel.component.http4.HttpEndpoint.createProducer(HttpEndpoint.java:99)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:405)
	... 92 more
Caused by: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.component.http4.HttpComponent.registerPort(HttpComponent.java:329)
	at org.apache.camel.component.http4.HttpEndpoint.createHttpClient(HttpEndpoint.java:147)
	... 96 more
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) is starting
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is enabled on CamelContext: myCamelId
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Tracing is enabled on CamelContext: myCamelId
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http4.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http.HttpConverter.toServletRequest(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http4.HttpConverter.toServletRequest(org.apache.camel.Message)
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http.HttpConverter.toServletResponse(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http4.HttpConverter.toServletResponse(org.apache.camel.Message)
[         Blueprint Extender: 1] HttpComponent                  INFO  Created ClientConnectionManager org.apache.http.impl.conn.PoolingClientConnectionManager@235089b4
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https on port 2831
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https4 on port 2831
[         Blueprint Extender: 1] SSLContextParameters           INFO  Available providers: SUN version 1.7.
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https on port 443
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https4 on port 443
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[         Blueprint Extender: 1] DefaultStreamCachingStrategy   INFO  StreamCaching in use with spool directory: /tmp/camel/camel-tmp-75033967-7017-48d6-9394-d690a6174d87 and rules: [Spool > 128K body size, Spool > 128K body size]
[         Blueprint Extender: 1] BlueprintCamelContext          ERROR Error occurred during starting Camel: CamelContext(myCamelId) due Failed to create Producer for endpoint: Endpoint[https4://dic.googlecode.com/files/GoogleSearch.wsdl?proxyAuthHost=my.squid.proxy.com&sslContextParameters=%23testSSLContext&throwExceptionOnFailure=true&proxyAuthPort=2831]. Reason: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[https4://dic.googlecode.com/files/GoogleSearch.wsdl?proxyAuthHost=my.squid.proxy.com&sslContextParameters=%23testSSLContext&throwExceptionOnFailure=true&proxyAuthPort=2831]. Reason: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:409)
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:191)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:358)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:153)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:994)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:329)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2150)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2080)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1868)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1740)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1579)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1547)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:872)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:792)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:540)
	at de.kalpatec.pojosr.framework.PojoSR$1.serviceChanged(PojoSR.java:66)
	at de.kalpatec.pojosr.framework.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:116)
	at de.kalpatec.pojosr.framework.PojoSRBundleContext.registerService(PojoSRBundleContext.java:95)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:439)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:379)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.component.http4.HttpEndpoint.createHttpClient(HttpEndpoint.java:149)
	at org.apache.camel.component.http4.HttpEndpoint.getHttpClient(HttpEndpoint.java:113)
	at org.apache.camel.component.http4.HttpProducer.<init>(HttpProducer.java:83)
	at org.apache.camel.component.http4.HttpEndpoint.createProducer(HttpEndpoint.java:99)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:405)
	... 76 more
Caused by: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.component.http4.HttpComponent.registerPort(HttpComponent.java:329)
	at org.apache.camel.component.http4.HttpEndpoint.createHttpClient(HttpEndpoint.java:147)
	... 80 more
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=de.kalpatec.pojosr.framework, Bundle-Vendor=kalpatec, Bundle-Version=0.2.1
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [31], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [32], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [8], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintListener], bundle: redhat-case [2], symbolicName: redhat-case
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [31], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-http [4], symbolicName: org.apache.camel.camel-http
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [32], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [8], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [32], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [22], symbolicName: org.apache.aries.proxy.impl
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: redhat-case [2], symbolicName: redhat-case
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-http [4], symbolicName: org.apache.camel.camel-http
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-http4 [7], symbolicName: org.apache.camel.camel-http4
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-http4 [7], symbolicName: org.apache.camel.camel-http4
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle redhat-case
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1428558491683
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:240)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:202)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:104)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:352)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
{code}",All,jaysensharma,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Apr 21 15:50:12 UTC 2015,,,,,,,,,,,"0|i2d2uv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Apr/15 04:17;jaysensharma;- In order to reproduce this issue we can use the following kind of blueprint.xml. 
- Try running a camel route as following WITH and then WITHOUT the  ""proxyAuthHost""  along with ""sslContextParameters""  *(problem happens when these are used together)*

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/blueprint""
	xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                            http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">

	<sslContextParameters xmlns=""http://camel.apache.org/schema/blueprint"" id=""testSSLContext"" camelContextId=""myCamelId"" >
		<secureSocketProtocols>
			<secureSocketProtocol>TLSv1</secureSocketProtocol>
		</secureSocketProtocols>
		<keyManagers keyPassword=""rmi+ssl"">
			<keyStore type=""JKS"" password=""rmi+ssl"" resource=""/home/jsensharma/Certs/chap8.keystore"" />
		</keyManagers>
		<trustManagers>
			<keyStore type=""JKS"" password=""rmi+ssl"" resource=""/home/jsensharma/Certs/chap8.keystore"" />
		</trustManagers>
		<cipherSuitesFilter>
			<include>.*</include>
		</cipherSuitesFilter>
	</sslContextParameters>
	
	<camelContext trace=""true"" id=""myCamelId"" xmlns=""http://camel.apache.org/schema/blueprint""  streamCache=""true"">
           <route >
               <from uri=""timer://foo?delay=2s&amp;repeatCount=1""/>
                 <setHeader headerName=""CamelHttpMethod"">
                    <constant>GET</constant>
                 </setHeader>

                 <to uri=""https4://dic.googlecode.com/files/GoogleSearch.wsdl?sslContextParameters=#testSSLContext&amp;throwExceptionOnFailure=true&amp;proxyAuthHost=my.squid.proxy.com&amp;proxyAuthPort=3128""/>

                 <!--   
                 Following as ""https4:"" also should work wtihout any issue here  as it does not have the proxy info.
                 <to uri=""https4://dic.googlecode.com/files/GoogleSearch.wsdl?sslContextParameters=#testSSLContext&amp;throwExceptionOnFailure=true""/>
                 -->

               <to uri=""file:target/RECEIVED""/>   <!-- here the WSDL will be stored -->
          </route>
	</camelContext>

</blueprint>
{code}
;;;","21/Apr/15 15:50;njiang;This issue is already fix since Camel 2.13.0 with upgrading of http client 4 .;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove open-jpa bundle from camel-jpa feature,CAMEL-8609,12819772,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,09/Apr/15 18:26,09/Apr/15 18:37,14/Jul/23 05:50,09/Apr/15 18:37,2.14.2,2.15.1,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-jpa,,,,,,,0,,,,,,"The camel-jpa component uses open-jpa for testing, but it does not require the bundle in the feature, and could be used with other JPA implementations, such as Hibernate. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 09 18:37:15 UTC 2015,,,,,,,,,,,"0|i2d1sn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Apr/15 18:37;dhirajsb;Fix merged into branches camel-2.14.x camel-2.15.x master;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel endpoint RAW password unsafe characters,CAMEL-8607,12819716,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,haffar,haffar,09/Apr/15 15:32,23/Apr/15 10:52,14/Jul/23 05:50,23/Apr/15 10:52,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-core,,,,,,,0,,,,,,"I am creating a camel endpoint such as this (somehost/someport/baseurl have been replaced):
https4://somehost:someport/baseurl?authenticationPreemptive=true&authPassword=RAW(foo%bar)&authUsername=RAW(username)

This causes camel to log the entire endpoint, including the user/password:
(DefaultComponent.java:67) - Supplied URI 'https4://somehost:someport/baseurl?authenticationPreemptive=true&authPassword=RAW(foo%bar)&authUsername=RAW(username)' contains unsafe characters, please check encoding

Consider:
-It is a security issue to log the username/password

-Specifiying RAW would allow for special characters, specifically for passwords, as indicated here : https://camel.apache.org/configuring-camel.html, but it seems that UnsafeUriCharactersEncoder is not handling them appropriately.


","java version ""1.7.0_45"", Linux, Mac",haffar,njiang,,,,,,,,,,,,,,,,,,,,,,CAMEL-8649,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 23 10:52:33 UTC 2015,,,,,,,,,,,"0|i2d1g7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Apr/15 07:51;njiang;The encoding issue is fixed in CAMEL-8649, I will clean up the warning log to avoid logging the username/password.;;;","23/Apr/15 10:52;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Elasticsearch component ignores indexType header set from endpoint URL,CAMEL-8597,12787971,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jkot,jkot,03/Apr/15 12:00,04/Apr/15 18:24,14/Jul/23 05:50,04/Apr/15 14:07,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-elasticsearch,,,,,,,0,,,,,,"When indexName and indexType is configured only by endpoint URL then indexType is ignored, resp. it is mistakenly replaced with indexName, see https://github.com/apache/camel/blob/master/components/camel-elasticsearch/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchProducer.java#L112



",,davsclaus,githubbot,jkot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 04 18:24:34 UTC 2015,,,,,,,,,,,"0|i27r33:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Apr/15 12:04;githubbot;GitHub user jkot opened a pull request:

    https://github.com/apache/camel/pull/466

    CAMEL-8597: fix setting of indexType message header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jkot/camel CAMEL-8597

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/466.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #466
    
----
commit 9d82ada53de68db899b29c1fd853ad37b5770420
Author: Jakub Kotowski <jakub@kotowski.cz>
Date:   2015-04-03T12:00:55Z

    CAMEL-8597: fix setting of indexType message header

----
;;;","04/Apr/15 14:07;davsclaus;Thanks for the PR;;;","04/Apr/15 18:24;githubbot;Github user jkot closed the pull request at:

    https://github.com/apache/camel/pull/466
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in AbstractListAggregationStrategy if empty list,CAMEL-8592,12787628,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,davsclaus,davsclaus,02/Apr/15 09:50,03/Apr/15 02:17,14/Jul/23 05:50,03/Apr/15 02:17,2.15.1,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-core,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/NullPointerException-on-empty-List-in-AbstractListAggregationStrategy-tp5764965.html",,davsclaus,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 03 02:17:01 UTC 2015,,,,,,,,,,,"0|i27ozz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Apr/15 02:17;njiang;The NPE is caused the result exchange could be null, I just fixed it by adding a null check there.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"url.getPort returning -1, needs additional check",CAMEL-8589,12787543,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,mcasperson,mcasperson,02/Apr/15 01:32,02/Apr/15 06:33,14/Jul/23 05:50,02/Apr/15 06:33,2.15.0,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-swagger,,,,,,,0,,,,,,"In our environment, the camel-swagger component is building relative urls with a port of -1. http://docs.oracle.com/javase/7/docs/api/java/net/URL.html#getPort() is what is returning -1.

The fix is to change

      if (url.getPort != 80) {

to

      if (url.getPort != 80 && url.getPort != -1) {

in RestSwaggerApiDeclarationServlet.scala. See https://github.com/apache/camel/blob/camel-2.15.x/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerApiDeclarationServlet.scala#L111 for the line of code that is affected.",,mcasperson,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 02 06:33:38 UTC 2015,,,,,,,,,,,"0|i27oh3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Apr/15 06:33;njiang;Applied the patch into camel master and camel-2.15.x branches with thanks to Matthew.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The lazy load option doesn't unlock the file,CAMEL-8585,12787329,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,4ntoin3,4ntoin3,01/Apr/15 13:03,02/Apr/15 08:42,14/Jul/23 05:50,02/Apr/15 08:42,2.15.0,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-csv,,,,,,,0,,,,,,"Hi, 
After to upgrade camel from 2.14.1 to 2.15.0, a org.apache.camel.component.file.GenericFileOperationFailedException Exception is thrown when camel move/delete the file at the end of process.
After some tests, I've notice that the issue appear when the lazy load option is enabled. I think, the reader or parser used by the component Apache CSV 1.0 aren't closed at the end of file.

My stacktrace: 
{code}
14:30:48,960 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) org.apache.camel.component.file.GenericFileOperationFailedException: Error renaming file from C:\temp\import\source\file_20150304162756890.csv to C:\temp\import\source\error\file_20150304162756890_20150401143044944.csv

14:30:48,964 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:81)

14:30:48,966 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:113)

14:30:48,973 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.rollback(GenericFileRenameProcessStrategy.java:66)

14:30:48,976 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyRollback(GenericFileOnCompletion.java:151)

14:30:48,977 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:86)

14:30:48,979 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.GenericFileOnCompletion.onFailure(GenericFileOnCompletion.java:58)

14:30:48,980 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:101)

14:30:48,981 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:229)

14:30:48,982 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65)

14:30:48,983 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:650)

14:30:48,984 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:618)

14:30:48,986 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:240)

14:30:48,987 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.impl.MDCUnitOfWork$MDCCallback.done(MDCUnitOfWork.java:231)

14:30:48,988 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:106)

14:30:48,989 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)

14:30:48,991 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:433)

14:30:48,992 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211)

14:30:48,993 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175)

14:30:48,994 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)

14:30:48,995 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)

14:30:48,997 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)

14:30:48,998 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)

14:30:48,999 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)

14:30:49,000 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)

14:30:49,001 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)

14:30:49,002 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)

14:30:49,004 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at java.lang.Thread.run(Thread.java:745)

14:30:49,005 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) Caused by: java.io.IOException: Renaming file from 'C:\temp\import\source\file_20150304162756890.csv' to 'C:\temp\import\source\error\file_20150304162756890_20150401143044944.csv' failed: Cannot delete file 'C:\temp\import\source\file_20150304162756890.csv' after copy succeeded

14:30:49,008 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.util.FileUtil.renameFileUsingCopy(FileUtil.java:471)

14:30:49,010 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.util.FileUtil.renameFile(FileUtil.java:443)

14:30:49,012 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:78)

14:30:49,013 INFO  [stdout] (Camel (Socle-CamelContext) thread #3 - file://C:/temp/import/source) 	... 26 more
{code}",,4ntoin3,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 02 08:42:55 UTC 2015,,,,,,,,,,,"0|i27n4v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Apr/15 08:18;davsclaus;This only affects windows users.;;;","02/Apr/15 08:42;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Circuit breaker does not honour halfOpenAfter period,CAMEL-8584,12787316,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,kapowie,kapowie,01/Apr/15 11:15,02/Apr/15 12:48,14/Jul/23 05:50,02/Apr/15 08:13,2.15.0,2.15.1,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-core,,,,,,,0,,,,,,"The CircuitBreakerLoadBalancer will always switch to a half-open state immediately after the first rejected message instead of honouring the halfOpenAfter period.

It's due to the failed message count getting reset in the rejectExchange method:
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java#L207",,davsclaus,githubbot,kapowie,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 02 12:48:05 UTC 2015,,,,,,,,,,,"0|i27n1z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Apr/15 13:56;githubbot;GitHub user kapowie opened a pull request:

    https://github.com/apache/camel/pull/458

    CAMEL-8584 Circuit breaker does not honour halfOpenAfter period

    Updated unit test and fix for CAMEL-8584 Circuit breaker does not honour halfOpenAfter period

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kapowie/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/458.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #458
    
----
commit 82b59c703e64b46bbb36f8e09f810e7f5023499d
Author: jack.perrett <jack.perrett@gamesys.co.uk>
Date:   2015-04-01T11:55:16Z

    CAMEL-8584 Update half-open test to assert circuit stays open during
    halfOpenAfter period

commit 6559752f61e287ea88fc4e7159a34b83f624e2db
Author: jack.perrett <jack.perrett@gamesys.co.uk>
Date:   2015-04-01T13:48:39Z

    CAMEL-8584 Ensure circuit stays open during halfOpenAfter period

----
;;;","02/Apr/15 08:13;davsclaus;Thanks for the PR;;;","02/Apr/15 12:48;githubbot;Github user kapowie closed the pull request at:

    https://github.com/apache/camel/pull/458
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http - May double encode uri when using HTTP_URI or HTTP_QUERY headers,CAMEL-8578,12786980,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,31/Mar/15 09:54,14/Jul/15 08:54,14/Jul/23 05:50,14/Jul/15 08:38,2.14.1,,,,,,,,,,,,,,2.16.0,,,,camel-http,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Apache-Camel-decodes-HTTP-query-params-and-httpclient-fails-with-Invalid-query-exception-tp5764794p5764843.html",,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 14 08:54:00 UTC 2015,,,,,,,,,,,"0|i27l1j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Jul/15 20:20;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/559

    CAMEL-8578 - May double encode uri when using HTTP_URI or HTTP_QUERY …

    Fix for issue https://issues.apache.org/jira/browse/CAMEL-8578.
    camel-http uses class UnsafeUriCharactersEncoder in HttpHelper#createURI.
    UnsafeUriCharactersEncoder explicitly doesn't encode character >= 128.
    
    If url = ""http://www.google.com/search?hl=en&q=%E2%82%AC"" is
    as parameter for HttpHelper#createURI, then:
    
    $URI uri = new URI(url);
    
    Here uri now contains queryString in unencoded form,
    which means, that also euro-character is in encoded form.
    http://www.fileformat.info/info/unicode/char/20aC/index.htm.
    
    Later in same method
    $// need to encode query string
    $queryString = UnsafeUriCharactersEncoder.encodeHttpURI(queryString);
    
    Method UnsafeUriCharactersEncoder#encodeHttpURI does not
    encode euro character back to encoded form.
    
    Fix was to add UTF-8 encoding support into UnsafeUriCharactersEncoder#encodeHttpURI
    according to https://tools.ietf.org/html/rfc3986.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-8578

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/559.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #559
    
----
commit 7f186ddabf6808968c730eab03247352ef686b07
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2015-07-10T20:04:51Z

    CAMEL-8578 - May double encode uri when using HTTP_URI or HTTP_QUERY headers

----
;;;","11/Jul/15 18:54;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/559
;;;","12/Jul/15 12:26;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/561

    CAMEL-8578 - May double encode uri when using HTTP_URI or HTTP_QUERY

    HTTPHelper#createURI now uses raw queries instead of encoding them with UnsafeCharacterEncoder.
    Queries should already be in encoded form so no encoding is needed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-8578

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/561.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #561
    
----
commit 4ed0a0086ca0d65cdf0e8364293ee02bf0921e4a
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2015-07-12T12:24:04Z

    CAMEL-8578 - May double encode uri when using HTTP_URI or HTTP_QUERY headers

----
;;;","14/Jul/15 08:54;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/561
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Salesforce component doesn't properly retries the request when doing re-login,CAMEL-8575,12786963,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,pingw33n,pingw33n,31/Mar/15 08:23,06/Apr/15 20:58,14/Jul/23 05:50,06/Apr/15 20:58,2.14.2,2.15.0,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,camel-salesforce,,,,,,,0,,,,,,"When the authentication token is revoked by other means then using {{SalesforceSession.logout()}}, it's unable (in most cases) to properly retry the original request.

The exception follows.

{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: [Body is null]]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1380)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:623)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:471)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:133)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:149)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:301)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:331)
	at org.apache.camel.component.salesforce.RestApiIntegrationTest.doTestGetGlobalObjects(RestApiIntegrationTest.java:136)
	at org.apache.camel.component.salesforce.RestApiIntegrationTest.testRetry(RestApiIntegrationTest.java:89)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
Caused by: {message:'Unexpected exception: Response not received yet',statusCode:0}
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onException(AbstractClientBase.java:135)
	at org.eclipse.jetty.client.HttpEventListenerWrapper.onException(HttpEventListenerWrapper.java:94)
	at org.eclipse.jetty.client.RedirectListener.onException(RedirectListener.java:210)
	at org.eclipse.jetty.client.AsyncHttpConnection.handle(AsyncHttpConnection.java:168)
	at org.eclipse.jetty.io.nio.SslConnection.handle(SslConnection.java:196)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:696)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:53)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.IllegalStateException: Response not received yet
	at org.eclipse.jetty.client.CachedExchange.getResponseStatus(CachedExchange.java:47)
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onResponseComplete(AbstractClientBase.java:149)
	at org.eclipse.jetty.client.HttpEventListenerWrapper.onResponseComplete(HttpEventListenerWrapper.java:123)
	at org.eclipse.jetty.client.RedirectListener.onResponseComplete(RedirectListener.java:106)
	at org.eclipse.jetty.client.HttpExchange.setStatus(HttpExchange.java:305)
	at org.eclipse.jetty.client.AbstractHttpConnection$Handler.messageComplete(AbstractHttpConnection.java:340)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:904)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.client.AsyncHttpConnection.handle(AsyncHttpConnection.java:135)
	... 6 more
{code}",,davsclaus,dhirajsb,pingw33n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"31/Mar/15 08:25;pingw33n;CAMEL-8575.patch;https://issues.apache.org/jira/secure/attachment/12708375/CAMEL-8575.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 06 20:58:16 UTC 2015,,,,,,,Patch Available,,,,"0|i27kxr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"31/Mar/15 08:25;pingw33n;The patch is made against 2.14.x branch.;;;","05/Apr/15 16:24;davsclaus;[~dhirajsb] would you have a second to look at this patch?;;;","06/Apr/15 20:58;dhirajsb;Thanks Dmitry. Patch verified and applied to camel-2.12.x, camel-2.13.x, camel-2.14.x, camel-2.15.x, master. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature camel-hdfs doesn't install all required dependencies,CAMEL-8574,12786834,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,30/Mar/15 20:58,30/Mar/15 21:33,14/Jul/23 05:50,30/Mar/15 21:33,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-hdfs,,,,,,,0,,,,,,"Feature camel-hdfs doesn't install all required dependencies
{noformat}
mvn clean install -Pvalidate
...
[WARNING] Failed to validate feature camel-hdfs
[WARNING] No export found to match javax.servlet.jsp;version=""[2.1,3)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-core/1.2.1_1)
[WARNING] No export found to match javax.servlet.http;version=""[2.5,3)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-core/1.2.1_1)
[WARNING] No export found to match javax.servlet.jsp (imported by mvn:commons-jxpath/commons-jxpath/1.3)
[WARNING] No export found to match javax.servlet (imported by mvn:org.apache.jackrabbit/jackrabbit-webdav/2.5.2)
[WARNING] No export found to match javax.servlet;version=""[2.5,3)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-core/1.2.1_1)
[WARNING] No export found to match javax.servlet.http (imported by mvn:commons-jxpath/commons-jxpath/1.3)
[WARNING] No export found to match javax.servlet.http (imported by mvn:org.apache.jackrabbit/jackrabbit-webdav/2.5.2)
[WARNING] No export found to match javax.servlet (imported by mvn:commons-jxpath/commons-jxpath/1.3)
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-03-30 20:58:15.0,,,,,,,,,,,"0|i27k53:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature camel-hbase doesn't install all required dependencies,CAMEL-8573,12786828,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,30/Mar/15 20:25,30/Mar/15 21:33,14/Jul/23 05:50,30/Mar/15 21:33,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-hbase,,,,,,,0,,,,,,"Feature camel-hbase doesn't install all required dependencies:
{noformat}
mvn clean install -Pvalidate
...
[WARNING] Failed to validate feature camel-hbase
[WARNING] No export found to match javax.servlet.jsp;version=""[2.1,3)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-core/1.2.1_1)
[WARNING] No export found to match javax.servlet.jsp;version=""[2.1,3)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hbase/0.94.6_1)
[WARNING] No export found to match javax.servlet.jsp (imported by mvn:commons-jxpath/commons-jxpath/1.3)
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-03-30 20:25:32.0,,,,,,,,,,,"0|i27k3r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when using CXF-component in a spring-boot application with loglevel >= INFO,CAMEL-8570,12786620,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hekonsek,jakob.thun,jakob.thun,30/Mar/15 07:24,07/Sep/15 09:55,14/Jul/23 05:50,07/Sep/15 09:55,2.15.0,2.15.1,,,,,,,,,,,,,2.16.0,,,,camel-core,camel-cxf,camel-spring-boot,,,,,0,,,,,,"I get a NullPointerException when using log-level INFO or finer in a spring-boot application with CXF. 

The exception is thrown from DefaultCamelContext.java:2449, where it tries to log how many routes have been started.

I have made an example project to reproduce it, it's available here: 
https://github.com/jakobthun/spring-boot-camel-cxf-logging-bug

I have tried with camel version: 2.15.0 & 2.15-SNAPSHOT. Both have the same behaviour.

+Andrew Block started som analysis:+
It is running into issues in this code block which is executed at logging level >= INFO 

        if (log.isInfoEnabled()) { 
            // count how many routes are actually started 
            int started = 0; 
            for (Route route : getRoutes()) { 
                if (getRouteStatus(route.getId()).isStarted()) { 
                    started++; 
                } 
            } 
            log.info(""Total "" + getRoutes().size() + "" routes, of which "" + started + "" is started.""); 
            log.info(""Apache Camel "" + getVersion() + "" (CamelContext: "" + getName() + "") started in "" + TimeUtils.printDuration(stopWatch.taken())); 
        } 

The exception occurs when the status for the route is pulled from the route service. It is null and the exception is thrown. The route is initially spun up but then refreshes when the CXF consumer is initialized. 

Swapping it to test with a direct consumer does not result in a similar situation and startup succeeds at all logging level. 

It appears the route is not being registered with the route service",,davsclaus,hekonsek,jakob.thun,sabre1041,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 07 09:55:01 UTC 2015,,,,,,,,,,,"0|i27iuf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"30/Mar/15 22:34;sabre1041;Part of the issue is due to the CXF bus not being registered to the Camel endpoint. When the endpoint spins up, it finds that the bus is null and instantiates it. By doing so, the BusApplicationContext refreshes the Spring context which causes the Camel Spring Boot RoutesCollector to recreate the routes in the context (routes that are spun up are shut down and reinitialized). By doing so, the route which was registered in the routeservice is no longer present which causes the nullpointerexception. To mitigate, we can define the CXFEndpoint and specify the bus as follows within the PingPongRoute class

{code}
@Autowired
	private Bus bus;
	
	@Override
	public void configure() throws Exception {
		....
		CxfEndpoint endpoint = new CxfEndpoint();
		endpoint.setAddress(""/PingPong"");
		endpoint.setBus(bus);
		endpoint.setServiceClass(PingPongService.class);

		// @formatter:off
		from(endpoint)	
               ....
{code};;;","31/Mar/15 09:47;jakob.thun;Glad to hear. Tried it, and it is working fine. Then there is a fully functional workaround.

Is there something wrong with my way of configuring the Bus? 
Should it be done in a different way in my code, or is it still to be considered a defect?;;;","31/Mar/15 12:15;jakob.thun;I was a bit too quick in respoding with my previous comment. The workaround described above got successful startup of routes, but the service itself did not execute as expected.

Instead I got a NullPointer in: _DefaultConsumer.java:88_
UnitOfWork uow = *endpoint.getCamelContext()*.getUnitOfWorkFactory().createUnitOfWork(exchange);

getCamelContext returns null, that is solved by getting the camelContext instance and setting it on the endpoint, as below:

{noformat}
@Autowired
Bus bus;
@Autowired
CamelContext camelContext;

@Override
public void configure() throws Exception {

	CxfEndpoint cxfPingPongEndpoint = new CxfEndpoint();
	cxfPingPongEndpoint.setAddress(""/PingPong"");
	cxfPingPongEndpoint.setBus(bus);
	cxfPingPongEndpoint.setCamelContext(camelContext);
	cxfPingPongEndpoint.setServiceClass(PingPongService.class);

	// @formatter:off
	from(cxfPingPongEndpoint)
{noformat};;;","01/Apr/15 00:24;jakob.thun;Tried with camel 2.16-SNAPSHOT and the defect shown by my example works with that version.
I also noticed that it was enough to set _camel-spring-boot_ to _2.16-SNAPSHOT_, so I guess the fix is somewhere in that component.

While looking for a solution I saw this [commit discussion|https://github.com/apache/camel/commit/84aab93c00c3521f59b7523a551c9f53da273aac] in camel-spring-boot where Henryk seems to be spot on and says he will try to find a solution for bus-creation to work better with Spring 4: 
{quote}
You need to refer your custom bus (cxf) in the endpoint URI:
{noformat}from(""cxf:/incident?serviceClass="" + IncidentService.class.getName() + ""&bus=#cxf""){noformat}

Otherwise Camel will try to create the bus for you. Unfortunately Camel refreshes Spring context while creating default bus, what collides a little bit with the Spring 4 application lifecycle.

Please try it and let me know how it works. BTW I will use your example as a base for Camel+CXF tests. *I will also try to make camel-spring-boot and camel-cxf a bit smarter to handle bus registration nicely.*
{quote}

It seems like he has already solved it in 2.16-SNAPSHOT. So this defect will be fixed in a future version, but I'm not sure how we should handle it, should Henryk label it with correct fix versions or something, or should it just be closed?;;;","02/Apr/15 08:46;davsclaus;Can you build and try with latest 2.15-SNAPSHOT ?;;;","02/Apr/15 10:55;jakob.thun;Tried it again with 2.15-SNAPSHOT. Error is still there.

I forced gradle to download the dependencies again to make sure I was not using some locally cached version. 

This is the version it downloaded with 2.15-SNAPSHOT:
{noformat}
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.15-SNAPSHOT/camel-core-2.15-20150307.023702-161.jar
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-spring-boot/2.15-SNAPSHOT/camel-spring-boot-2.15-20150307.024139-100.jar
{noformat}

Then I tried 2.15.1-SNAPSHOT. Error is there. Deps with timestamp:
{noformat}
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.15.1-SNAPSHOT/camel-core-2.15.1-20150328.025219-17.jar
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-spring-boot/2.15.1-SNAPSHOT/camel-spring-boot-2.15.1-20150328.025553-15.jar
{noformat}

Then I tried 2.15.2-SNAPSHOT: Error is there. Deps. with timestamp:
{noformat}
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.15.2-SNAPSHOT/camel-core-2.15.2-20150402.024619-5.jar
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-spring-boot/2.15.2-SNAPSHOT/camel-spring-boot-2.15.2-20150401.025036-4.jar
{noformat}

For full verification I tried 2.16-SNAPSHOT again. Success.
{noformat}
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.16-SNAPSHOT/camel-core-2.16-20150402.024543-26-sources.jar
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-spring-boot/2.16-SNAPSHOT/camel-spring-boot-2.16-20150402.025258-24-sources.jar
{noformat}

I also noticed that 2.16 might use a different version of spring (I saw these spring-jars being downloaded in the last test). Not sure if this means anything in relation to this issue:
{noformat}
https://repo1.maven.org/maven2/org/springframework/spring-context/4.1.6.RELEASE/spring-context-4.1.6.RELEASE.jar
https://repo1.maven.org/maven2/org/springframework/spring-tx/4.1.6.RELEASE/spring-tx-4.1.6.RELEASE.jar
https://repo1.maven.org/maven2/org/springframework/spring-core/4.1.6.RELEASE/spring-core-4.1.6.RELEASE.jar
{noformat};;;","09/Apr/15 11:05;hekonsek;I will take a look at this.;;;","09/Jul/15 10:24;davsclaus;Jakub can you try with latest 2.15.2 release.;;;","11/Jul/15 08:34;jakob.thun;Issue is still there in 2.15.2.
And it still works fine with 2.16-snapshot. (tried it again to verify);;;","07/Sep/15 09:55;davsclaus;Okay it works from next release onwards.;;;",,,,,,,,,,,,,,,,,,,,,,
Feature camel-swagger doesn't install all required dependencies,CAMEL-8568,12786568,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,29/Mar/15 21:36,29/Mar/15 21:45,14/Jul/23 05:50,29/Mar/15 21:45,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-swagger,,,,,,,0,,,,,,"The camel-swagger feature doesn't install the scala bundle, which is a required dependency. This leads to errors like this one:
{noformat}
ERROR: Bundle org.apache.servicemix.bundles.swagger-core [89] Error starting mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.swagger-core/1.3.12_1 (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.swagger-core [89]: Unable to resolve 89.0: missing requirement [89.0] osgi.wiring.package; (&(osgi.wiring.package=scala.reflect.api)(version>=2.10.0)(!(version>=3.0.0))))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.swagger-core [89]: Unable to resolve 89.0: missing requirement [89.0] osgi.wiring.package; (&(osgi.wiring.package=scala.reflect.api)(version>=2.10.0)(!(version>=3.0.0)))
    at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
    at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
    at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
    at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
    at java.lang.Thread.run(Thread.java:745)
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-03-29 21:36:50.0,,,,,,,,,,,"0|i27iiv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature camel-cxf doesn't install all required dependencies,CAMEL-8566,12786554,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,29/Mar/15 20:17,29/Mar/15 20:24,14/Jul/23 05:50,29/Mar/15 20:24,2.15.1,,,,,,,,,,,,,,2.15.2,2.16.0,,,karaf,,,,,,,0,,,,,,"The camel-cxf feature doesn't install the camel-spring feature, which is a required dependency. This leads to errors like this one:
{noformat}
ERROR: Bundle org.apache.camel.camel-cxf [105] Error starting mvn:org.apache.camel/camel-cxf/2.15.1 (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-cxf [105]: Unable to resolve 105.0: missing requirement [105.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.spring)(version>=2.15.0)(!(version>=2.16.0))))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-cxf [105]: Unable to resolve 105.0: missing requirement [105.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.spring)(version>=2.15.0)(!(version>=2.16.0)))
    at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
    at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
    at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
    at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
    at java.lang.Thread.run(Thread.java:745)
ERROR: Bundle org.apache.camel.camel-cxf [105] Error starting/stopping bundle. (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-cxf [105]: Unable to resolve 105.0: missing requirement [105.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.spring)(version>=2.15.0)(!(version>=2.16.0))))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-cxf [105]: Unable to resolve 105.0: missing requirement [105.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.spring)(version>=2.15.0)(!(version>=2.16.0)))
    at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
    at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
    at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1491)
    at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:334)
    at java.lang.Thread.run(Thread.java:745)
{noformat}",,muellerc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-03-29 20:17:18.0,,,,,,,,,,,"0|i27ifr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AnnotationTypeConverterLoader treats package as class,CAMEL-8556,12785875,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tdiesler,tdiesler,26/Mar/15 12:56,26/Mar/15 14:27,14/Jul/23 05:50,26/Mar/15 14:27,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-core,,,,,,,0,,,,,,"A package with an uppercase letter like 

{code}
org.wildfly.camel.test.core.subA
{code}

would be treated as class leading to 

{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.loadConverterMethods(AnnotationTypeConverterLoader.java:262)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:130)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:544)
{code}",,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 26 14:27:01 UTC 2015,,,,,,,,,,,"0|i27eaf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Mar/15 13:43;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/446

    [CAMEL-8556] AnnotationTypeConverterLoader treats package as class

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8556

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/446.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #446
    
----
commit f2f46faa82e3491ef86888ef29e2890132a6bb49
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-03-26T13:41:47Z

    [CAMEL-8556] AnnotationTypeConverterLoader treats package as class

----
;;;","26/Mar/15 14:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/446
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Usage of camel-xmlbeans depends on TCCL,CAMEL-8547,12785576,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jamesnetherton,jamesnetherton,25/Mar/15 16:17,26/Mar/15 11:58,14/Jul/23 05:50,26/Mar/15 11:58,2.15.0,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,,,,,,,,0,,,,,,"xmlbeans marshalling and unmarshalling does not respect the ApplicationContextClassLoader
CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/457",,githubbot,jamesnetherton,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 26 11:58:23 UTC 2015,,,,,,,,,,,"0|i27chb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Mar/15 16:44;githubbot;GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/445

    [CAMEL-8547] Usage of camel-xmlbeans depends on TCCL

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-8547

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/445.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #445
    
----
commit dec46867f6d02fa26e14892776b68c33428ec708
Author: James Netherton <jnethert@redhat.com>
Date:   2015-03-25T16:19:16Z

    [CAMEL-8547] Usage of camel-xmlbeans depends on TCCL

----
;;;","26/Mar/15 08:44;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/445
;;;","26/Mar/15 11:58;njiang;Applied the patch into camel-2.15.x and camel-2.14.x branch with thanks to James, I also rewrite the patch in camel master branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No LanguageResolver found for language=js,CAMEL-8546,12785571,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,barthorre,barthorre,25/Mar/15 16:07,30/Mar/15 12:58,14/Jul/23 05:50,26/Mar/15 12:00,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,camel-script,,,,,,,0,,,,,,"{noformat}Unable to start blueprint container for bundle test.xml due to unresolved dependencies [(&(language=js)(objectClass=org.apache.camel.spi.LanguageResolver))]
java.util.concurrent.TimeoutException
        at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:293)[10:org.apache.aries.blueprint:0.3.2]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_17]
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)[:1.7.0_17]
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)[:1.7.0_17]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)[:1.7.0_17]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)[:1.7.0_17]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_17]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_17]
        at java.lang.Thread.run(Thread.java:722)[:1.7.0_17] {noformat}


This happens when we try to use script with blueprint because blueprint tries to resolve the LanguageResolver with filter language=js. However camel.osgi registered a default LanguageResolver under resolver=default which causes blueprint to wait for ever.",,barthorre,davsclaus,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 30 12:58:31 UTC 2015,,,,,,,,,,,"0|i27cg7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"25/Mar/15 16:13;davsclaus;You need to install the camel-script-javascript feature to install the language;;;","25/Mar/15 16:13;githubbot;GitHub user barthorre opened a pull request:

    https://github.com/apache/camel/pull/444

    CAMEL-8546: fix script language resolvers

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/barthorre/camel CAMEL-8546

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/444.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #444
    
----
commit d48a2600c1972a55d092224f7bcc64ed0e555703
Author: bart <bart@anova.be>
Date:   2015-03-25T15:59:57Z

    CAMEL-8546: fix script language resolvers

----
;;;","25/Mar/15 16:14;barthorre;created a pull request for master branch at https://github.com/apache/camel/pull/444;;;","25/Mar/15 17:08;barthorre;I installed the camel-script-javascript feature but could not find a LanguageResolver registered with language=js in the services list.
;;;","26/Mar/15 12:00;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches with thanks to Bart. I also polish the code to avoid the NPE.;;;","30/Mar/15 12:58;githubbot;Github user barthorre closed the pull request at:

    https://github.com/apache/camel/pull/444
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
S3Consumer uses maxMessagesPerPoll incorrectly,CAMEL-8540,12785216,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ahanin,ahanin,24/Mar/15 16:31,30/Mar/15 12:39,14/Jul/23 05:50,30/Mar/15 12:32,2.15.0,,,,,,,,,,,,,,2.15.2,2.16.0,,,camel-aws,,,,,,,0,,,,,,"S3Consumer sets the maximum number of keys to retrieve from S3 to the value of {{maxMessagesPerPoll}} property. According to documentation (http://camel.apache.org/batch-consumer.html), the limit can be disabled by setting the value to negative or zero. In case of S3Consumer, setting the {{maxMessagesPerPoll}} URI property will have and effect of always empty result.

{code:lang=java|title=S3Consumer.java}
listObjectsRequest.setMaxKeys(maxMessagesPerPoll);
{code}

The consumer must set key limit only when value of {{maxMessagesPerPoll}} is greater than 0.",,acosentino,ahanin,davsclaus,githubbot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 30 12:39:08 UTC 2015,,,,,,,,,,,"0|i27ac7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Mar/15 12:28;githubbot;GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/450

    CAMEL 8540 S3Consumer uses maxMessagesPerPoll incorrectly

    Hi,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8540
    
    Thanks,
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel camel-8540-aws-s3-consumer-maxMessagesPerPoll

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/450.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #450
    
----
commit b3a915c026734a8635d1d21308c70938ca7c8ea5
Author: ancosen <ancosen@gmail.com>
Date:   2015-03-29T12:24:57Z

    Fix Camel-8540 S3Consumer uses maxMessagesPerPoll incorrectly

----
;;;","29/Mar/15 12:28;acosentino;PR submitted:
https://github.com/apache/camel/pull/450

Andrea;;;","30/Mar/15 12:32;davsclaus;Thanks for reporting and the PR;;;","30/Mar/15 12:39;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/450
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
can't install camel-github feature in karaf,CAMEL-8530,12784739,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,23/Mar/15 05:38,23/Mar/15 06:03,14/Jul/23 05:50,23/Mar/15 06:03,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,,,,,,,,0,,,,,,,,ffang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 23 06:03:07 UTC 2015,,,,,,,,,,,"0|i277nb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Mar/15 05:42;ffang;get exception like
{code}
Caused by: java.lang.Exception: Unable to install bundle mvn:org.eclipse.mylyn.github/org.eclipse.egit.github.core/2.1.5
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:45)
	... 18 more
Caused by: org.osgi.framework.BundleException: Could not create bundle object.
	at org.apache.felix.framework.Felix.installBundle(Felix.java:2960)
	at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:165)
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:43)
	... 18 more
Caused by: java.lang.IllegalArgumentException: Unable to parse header: com.google.gson;version=""[1.6.0,2.2.0]"",com.google.gson.annotations;version=""[1.6.0,2.2.0]"",com.google.gson.reflect;version=""[1.6.0,2.2.0]"",com.google.gson.stream;version=""[1.6.0,2.2.0]
	at org.apache.felix.framework.util.manifestparser.ManifestParser.parseStandardHeader(ManifestParser.java:1926)
	at org.apache.felix.framework.util.manifestparser.ManifestParser.<init>(ManifestParser.java:179)
	at org.apache.felix.framework.BundleRevisionImpl.<init>(BundleRevisionImpl.java:121)
	at org.apache.felix.framework.BundleImpl.createRevision(BundleImpl.java:1243)
	at org.apache.felix.framework.BundleImpl.<init>(BundleImpl.java:112)
	at org.apache.felix.framework.Felix.installBundle(Felix.java:2907)
	... 20 more

{code}


This is caused by that the OSGi header for org.eclipse.mylyn.github/org.eclipse.egit.github.core/2.1.5 isn't correct, the 
{code}
Import-Package: com.google.gson;version=""[1.6.0,2.2.0]"",com.google.gso
 n.annotations;version=""[1.6.0,2.2.0]"",com.google.gson.reflect;version
 =""[1.6.0,2.2.0]"",com.google.gson.stream;version=""[1.6.0,2.2.0]
{code}
miss a ""\"""" at the end of the line

need use the smx wrapped one(SMX4-1857);;;","23/Mar/15 06:03;ffang;commit fix
https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=13caf518 for master
http://git-wip-us.apache.org/repos/asf/camel/commit/4a4cdcfa for camel-2.15.x branch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-script - Should try all classloaders before throwing IAE,CAMEL-8521,12783510,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,20/Mar/15 07:00,20/Mar/15 07:02,14/Jul/23 05:50,20/Mar/15 07:02,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-script,,,,,,,0,,,,,,Due CAMEL-8338],,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-03-20 07:00:34.0,,,,,,,,,,,"0|i270xb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel XMPP doesn't use a DNS resolver to look at SRV records,CAMEL-8520,12783447,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bharris,bharris,20/Mar/15 00:38,20/Mar/15 06:52,14/Jul/23 05:50,20/Mar/15 06:52,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-xmpp,,,,,,,0,,,,,,"Camel XMPP doesn't use a DNS resolver to look at SRV records, whereas in 2.14.1 it did.

In 2.15.0, ConnectionConfiguration calls {{DNSUtil.resolveXMPPDomain(serviceName)}} which runs this code:

{code:title=DNSUtil.java|borderStyle=solid}
public static List<HostAddress> resolveXMPPDomain(final String domain) {
        if (dnsResolver == null) {
            List<HostAddress> addresses = new ArrayList<HostAddress>(1);
            addresses.add(new HostAddress(domain, 5222));
            return addresses;
        }
        return resolveDomain(domain, 'c');
    }
{code}

dnsResolver is never initialised, so it returns the service name, in my case 'jabberzac.org', instead of the actual XMPP server from the SRV Record, 'xmpp.jabberzac.org', which then causes a timeout.

The dnsResolver is meant to be instantiated in init(), which is meant to be called by SmackConfiguration, but never is.

{code:title=DNSUtil.java|borderStyle=solid}
    /**
     * Initializes DNSUtil. This method is automatically called by SmackConfiguration, you don't
     * have to call it manually.
     */
    public static void init() {
        final String[] RESOLVERS = new String[] { ""javax.JavaxResolver"", ""minidns.MiniDnsResolver"",
                        ""dnsjava.DNSJavaResolver"" };
        for (String resolver :RESOLVERS) {
            DNSResolver availableResolver = null;
            String resolverFull = ""org.jivesoftware.smack.util.dns"" + resolver;
            try {
                Class<?> resolverClass = Class.forName(resolverFull);
                Method getInstanceMethod = resolverClass.getMethod(""getInstance"");
                availableResolver = (DNSResolver) getInstanceMethod.invoke(null);
                if (availableResolver != null) {
                    setDNSResolver(availableResolver);
                    break;
                }
            }
            catch (ClassNotFoundException|NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
                LOGGER.log(Level.FINE, ""Exception on init"", e);
            }
        }
    }
{code}

2.14.1 doesn't seem to have this problem as DNSUtil class in 2.14.1 doesn't have an init() function which is meant to be 'automatically called', it just has a static code block:

{code}
    static {
        try {
            Hashtable env = new Hashtable();
            env.put(""java.naming.factory.initial"", ""com.sun.jndi.dns.DnsContextFactory"");
            context = new InitialDirContext(env);
        }
        catch (Exception e) {
            // Ignore.
        }
    }
{code}",,bharris,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 20 06:52:48 UTC 2015,,,,,,,,,,,"0|i270jb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Mar/15 06:31;davsclaus;I dont think its a Camel problem. The init code is called when I run an unit test. But it seems those DNS classes that it attempts to load are not in the classpath. So you may need to add some JARs to include the resolver classes.;;;","20/Mar/15 06:32;davsclaus;Now using static code blocks and static configuration classes as how smack is done is of course a very bad idea - but that is how they decided to code their library - nothing we can do here.;;;","20/Mar/15 06:36;bharris;If they are in {{org.jivesoftware.smack.util.dns}} shouldn't they be part of camel-xmpp's smack dependencies?

see: https://www.igniterealtime.org/builds/smack/docs/latest/javadoc/org/jivesoftware/smack/util/dns/dnsjava/DNSJavaResolver.html;;;","20/Mar/15 06:36;davsclaus;And they have a bug in the code loading the resolvers

This is the resolved name in the java code:
{code}
org.jivesoftware.smack.util.dnsdnsjava.DNSJavaResolver
{code}

Notice the a dot is missing
{code}
org.jivesoftware.smack.util.dns.dnsjava.DNSJavaResolver
{code};;;","20/Mar/15 06:38;bharris;Right. Over to Smack then...;;;","20/Mar/15 06:38;davsclaus;Ah which seems to be fixed in 4.0.7;;;","20/Mar/15 06:45;davsclaus;You need to add the DNS dependency you want - they have 3 different implementations.;;;","20/Mar/15 06:52;davsclaus;Upgraded to 4.0.7;;;",,,,,,,,,,,,,,,,,,,,,,,,
Salesforce component security listener does not replace old auth header,CAMEL-8519,12783426,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,19/Mar/15 23:32,20/Mar/15 21:41,14/Jul/23 05:50,20/Mar/15 21:41,2.13.4,2.14.2,2.15.0,,,,,,,,,,,,2.14.3,2.15.1,,,camel-salesforce,,,,,,,0,,,,,,"The security listener incorrectly adds a copy of the auth header for streaming api client. Although this causes the exchange to ultimately fail, the BayeuxClient reconnects and proceeds without raising errors in Camel route. However, this ends up logging multiple warnings from the security listener and the BayeuxClient. 
Fixing the security listener to reset the auth header will optimize this process and let the BayeuxClient continue with the existing exchange. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 20 21:41:00 UTC 2015,,,,,,,,,,,"0|i270en:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Mar/15 21:41;dhirajsb;Fix merged to branches
 master
 camel-2.12.x
 camel-2.13.x
 camel-2.14.x
 camel-2.15.x
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel marshal/unmarshal - Should catch throwable in case dataformat causes an java.lang.Error,CAMEL-8515,12783250,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Mar/15 14:44,19/Mar/15 14:45,14/Jul/23 05:50,19/Mar/15 14:45,2.14.2,2.15.0,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,camel-core,,,,,,,0,,,,,,"For example if crypto dataformat cannot load some class and throw 
{code}
Caused by: java.lang.NoClassDefFoundError: javax/crypto/CipherOutputStream
        at org.apache.camel.converter.crypto.CryptoDataFormat.marshal(CryptoDataFormat.java:131)
        at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:81)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
{code}

We should detect and handle that in marshaller / unmarshaller like the rest of the routing engine does.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-03-19 14:44:22.0,,,,,,,,,,,"0|i26zcv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE will be thrown from doAppend() of PaxLoggingConsumer during load testing,CAMEL-8510,12783110,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xldai,xldai,19/Mar/15 03:49,19/Mar/15 06:40,14/Jul/23 05:50,19/Mar/15 06:40,2.14.2,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,,,,,,,,0,,,,,,"this NPE is thrown sometimes using camel-paxlogging feature and paxlogging bundles.

{code}
java.lang.NullPointerException
	at org.apache.camel.component.paxlogging.PaxLoggingConsumer.doAppend(PaxLoggingConsumer.java:58)[59:org.apache.camel.camel-paxlogging:2.14.0]
	at org.ops4j.pax.logging.service.internal.PaxAppenderProxy.doAppend(PaxAppenderProxy.java:63)[4:org.ops4j.pax.logging.pax-logging-service:1.8.1]
	at org.ops4j.pax.logging.service.internal.AppenderBridgeImpl.append(AppenderBridgeImpl.java:67)[4:org.ops4j.pax.logging.pax-logging-service:1.8.1]
	at org.ops4j.pax.logging.service.internal.AppenderBridgeImpl.doAppend(AppenderBridgeImpl.java:61)[4:org.ops4j.pax.logging.pax-logging-service:1.8.1]
{code}

the executor should be validated if it's null before use it.",JDK 1.7,davsclaus,njiang,xldai,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/Mar/15 03:51;xldai;patch;https://issues.apache.org/jira/secure/attachment/12705506/patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 19 06:28:57 UTC 2015,,,,,,,,,,,"0|i26yhr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"19/Mar/15 03:51;xldai;A patch attached.;;;","19/Mar/15 06:19;njiang;I don't think it's a bug, the executor is set when the PaxloggingConsumer is started, please make the you start the PaxLoggingConsumer rightly.;;;","19/Mar/15 06:26;davsclaus;I think the executor should be created before the registration, eg flip the order and it should improve;;;","19/Mar/15 06:28;davsclaus;I pushed a fix where the order is flipped.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missed CamelSchematronValidationStatus header,CAMEL-8505,12782822,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cp123,cp123,18/Mar/15 10:49,18/Mar/15 11:37,14/Jul/23 05:50,18/Mar/15 11:37,2.14.0,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,camel-schematron,,,,,,,0,,,,,,"CamelSchematronValidationStatus header missed somewhere in this method of SchematronProducer class:

{code:java}
    /**
     * Sets validation report and status
     *
     * @param exchange
     * @param report
     * @param status
     */
    private void setValidationReport(Exchange exchange, String report, String status) {
        // if exchange pattern is In and Out set details on the Out message.
        Map<String, Object> headers = new HashMap<String, Object>();
        headers.put(Constants.VALIDATION_STATUS, status);
        headers.put(Constants.VALIDATION_REPORT, report);
        exchange.getOut().setHeader(Constants.VALIDATION_REPORT, report);
        if (exchange.getPattern().isOutCapable()) {
            exchange.getOut().setHeaders(exchange.getIn().getHeaders());
            exchange.getOut().getHeaders().putAll(headers);
        } else {
            exchange.getIn().getHeaders().putAll(headers);
        }
    }
{code}

status variable value is SUCCESS here, but right after:

{code:xml}
            <to uri=""schematron:schematron/dogs.sch"" />
{code}

there is no such header - only CamelSchematronValidationReport present.
",,cp123,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 18 11:37:34 UTC 2015,,,,,,,,,,,"0|i26wrr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Mar/15 11:37;njiang;We cannot setup the header on the out message if the message exchange pattern is not InOut. I just commit a quick fix into camel master and merge the patch back to camel-2.15.x and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failed to process Schematron XSLT templates and/or rules on windows,CAMEL-8504,12782818,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cp123,cp123,18/Mar/15 10:35,19/Mar/15 06:23,14/Jul/23 05:50,19/Mar/15 06:23,,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,camel-schematron,,,,,,,0,,,,,,"Code like this (from TemplatesFactory or ClassPathURIResolver classes) failed on windows, where File.separator is ""\"".

{code}
Source xsl = new StreamSource(ClassLoader.getSystemResourceAsStream(Constants.SCHEMATRON_TEMPLATES_ROOT_DIR
                        .concat(File.separator).concat(template)));
{code}",,cp123,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 19 06:23:16 UTC 2015,,,,,,,,,,,"0|i26wqv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Mar/15 11:38;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches.;;;","18/Mar/15 11:43;cp123;Looks like TemplatesFactory should also be fixed.;;;","18/Mar/15 11:59;cp123;TemplatesFactory class has the same issue.;;;","19/Mar/15 06:23;njiang;Hi Sergey,
 I just commit a quick fix for it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ClassCastException when something other than PropertiesComponent is bound to ""properties"" JNDI name",CAMEL-8500,12782536,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cerker,cerker,17/Mar/15 11:08,21/Mar/15 20:26,14/Jul/23 05:50,21/Mar/15 07:00,2.13.4,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,camel-core,,,,,,,0,,,,,,"*Problem*
When starting the DefaultCamelContext, Camel tries to get a PropertiesComponent object from JNDI under the name ""properties"" (which is hard-coded in DefaultCamelContext.lookupPropertiesComponent() resp. CamelContextHelper.lookupPropertiesComponent() in newer Camel versions).

During start we get the following Error:
{code}
org.apache.camel.NoSuchBeanException: Found bean: properties in JNDI Context: javax.naming.InitialContext@a37a18 of type: org.jnp.interfaces.NamingContext expected type was: class org.apache.camel.component.properties.PropertiesComponent
	at org.apache.camel.impl.JndiRegistry.lookupByNameAndType(JndiRegistry.java:61)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByNameAndType(PropertyPlaceholderDelegateRegistry.java:63)
	at org.apache.camel.impl.DefaultCamelContext.lookupPropertiesComponent(DefaultCamelContext.java:2788)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1834)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1716)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1684)
	at de.bwb.ubi.vs.automat.mbean.CamelStarter.startService(CamelStarter.java:21)
	at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289)
[...]
Caused by: java.lang.ClassCastException
	at java.lang.Class.cast(Class.java:2999)
	at org.apache.camel.impl.JndiRegistry.lookupByNameAndType(JndiRegistry.java:57)
	... 145 more
{code}

*Reason*
In our installation, some properties are bound to the name ""properties/..."" in the JNDI global namespace.

*Proposed Solution*
Camel can manage if it finds nothing under the JNDI name, the problem is just finding something different than the expected PropertiesComponent instance. Instead of calling JndiRegistry.lookupByNameAndType(String, Class) -- this is where the cast fails -- we should call JndiRegistry.lookupByName(String name). If an instance other than a PropertiesComponent is returned here, we should go on as if nothing was found in the JNDI lookup.

I can provide a pull request for this.",Apache Camel 2.13.4 running on JBoss EAP4,cerker,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 21 20:26:56 UTC 2015,,,,,,,,,,,"0|i26v1r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Mar/15 06:42;davsclaus;We love contributions, so you are welcome to work on a patch.
http://camel.apache.org/contributing.html;;;","21/Mar/15 07:00;davsclaus;Got this fixed now. Thanks for reporting.;;;","21/Mar/15 20:26;cerker;Thanks for the solution, Claus!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContextFactoryBean missing setEndpoints method,CAMEL-8498,12782375,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kcbabo,kcbabo,16/Mar/15 21:45,17/Mar/15 11:07,14/Jul/23 05:50,17/Mar/15 07:05,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-spring,,,,,,,0,,,,,,"The Spring JAXB model class for <camelContext> is missing a setEndpoints() method, which means you cannot add an endpoint outside the route definition using JAXB.  Interestingly, the Blueprint version of CamelContextFactoryBean has this method, so I'm guessing it was just missed.

Impacted classes:
org.apache.camel.spring.CamelContextFactoryBean",,davsclaus,githubbot,kcbabo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 17 11:07:50 UTC 2015,,,,,,,,,,,"0|i26u2n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Mar/15 21:46;githubbot;GitHub user kcbabo opened a pull request:

    https://github.com/apache/camel/pull/439

    CAMEL-8498 CamelContextFactoryBean missing setEndpoints method

    https://issues.apache.org/jira/browse/CAMEL-8498

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kcbabo/camel CAMEL-8498

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/439.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #439
    
----
commit d1f7154709addbc8bb040735171c7e13139b6dbf
Author: Keith Babo <kbabo@redhat.com>
Date:   2015-03-16T21:46:04Z

    CAMEL-8498 CamelContextFactoryBean missing setEndpoints method

----
;;;","16/Mar/15 21:47;kcbabo;Fix and unit test submitted via PR:
https://github.com/apache/camel/pull/439;;;","17/Mar/15 07:04;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/439
;;;","17/Mar/15 07:05;davsclaus;Thanks for the PR. Do you mind closing it.;;;","17/Mar/15 11:07;kcbabo;Thanks, Claus.  Looks like it was automatically closed when it was merged, so we are good to go.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInfo introspection ignores overriden methods,CAMEL-8492,12782152,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,geletkap,geletkap,16/Mar/15 09:21,17/Mar/15 08:11,14/Jul/23 05:50,17/Mar/15 08:11,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-core,,,,,,,1,,,,,,"When BeanInfo introspects class which implements a interface with one method, implemented method is filtered out and no invocation of the method is possible.

Interface
{code}
public interface RequestMessageTranslator<I, O> {

    O translate(I in);
}
{code}

Implementation
{code}
public class RequestMessageTranslatorImpl implements RequestMessageTranslator<String, String> {

    public String translate(String in) {
        return null;
    }
}
{code}

Then calling the class from route:
{code}
from(ROUTE_ID)
                .id(ROUTE_ID)
                .bean(requestMessageTranslator)
{code}

ends with:
{code}
Caused by: java.lang.IllegalStateException: No method invocation could be created, no matching method could be found on: RequestMessageTranslator@402fbbaf
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:165)
{code}

",,davsclaus,de_tom,geletkap,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8137,,,,,,"16/Mar/15 09:24;geletkap;beaninfo-issue.zip;https://issues.apache.org/jira/secure/attachment/12704747/beaninfo-issue.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 17 08:11:41 UTC 2015,,,,,,,,,,,"0|i26sr3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Mar/15 09:24;geletkap;Attaching testcase. When downgrading to previous version of camel (were using 2.12.4) test passes.;;;","16/Mar/15 10:52;geletkap;I tested it with 2.14.0 - test passes as well;;;","17/Mar/15 08:11;davsclaus;Thanks for reporting and the unit tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File language - Should support file extensions with multiple dots such as tar.gz,CAMEL-8484,12781979,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Mar/15 06:31,21/Jun/17 13:31,14/Jul/23 05:50,14/Mar/15 07:16,2.14.2,2.15.0,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,camel-core,,,,,,,0,,,,,,"See SO
http://stackoverflow.com/questions/29031551/how-to-use-donefilename-property-of-camel-for-file-name-with-double-extension",,acosentino,davsclaus,sumanhit,swwyatt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 21 13:31:23 UTC 2017,,,,,,,,,,,"0|i26ron:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Mar/15 05:21;sumanhit;Hi,
Could you please tell me the date when the fix version of this issue will be released?? 
Thank you.;;;","20/Jun/17 13:35;swwyatt;It seems that the change on this issue has broken our app for file:ext, file:onlyname and file:onlyname:noext. We have files with names like aaa.000.111.txt. The extension is txt, not 000.111.txt. For a file like aaa.tar.gz, the extension is gz. Please revert these changes.;;;","20/Jun/17 13:38;acosentino;This fix is in camel versions no more maintained. Currently we work on 2.18.x, 2.19.x and master.;;;","21/Jun/17 10:14;davsclaus;Use the .single for single dot mode, see the docs
http://camel.apache.org/file-language.html;;;","21/Jun/17 13:31;swwyatt;We have switched to using single dot. Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-catalog has unnecessary imports if it cannot access some other artifacts,CAMEL-8480,12781756,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,13/Mar/15 09:47,14/Mar/15 07:17,14/Jul/23 05:50,14/Mar/15 07:17,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-catalog,,,,,,,0,,,,,,"It should not specify all the packages that it wants to exports, if it cannot generate the package,  the bundle plugin just create an import package entry for it.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-03-13 09:47:01.0,,,,,,,,,,,"0|i26qc7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TrapReceiveTest is failed within Camel 2.15.0,CAMEL-8479,12781719,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Mar/15 05:20,20/Oct/15 13:43,14/Jul/23 05:50,13/Mar/15 07:51,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-snmp,,,,,,,0,,,,,,,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 13 07:51:11 UTC 2015,,,,,,,,,,,"0|i26q4n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Mar/15 07:51;njiang;Applied the patch into camel master, camel-2.15.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected behavior in fault handling with doTry/doCatch,CAMEL-8476,12781176,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,kcbabo,kcbabo,11/Mar/15 13:21,14/Mar/15 13:31,14/Jul/23 05:50,14/Mar/15 13:31,2.15.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-core,,,,,,,1,,,,,,"There seems to be a peculiarity with fault processing when a route consists of a single TryProcessor and the MEP for an exchange is InOut.  The TryProcessor will iterate over any number of processors defined inside of it and during each iteration it sets the out msg to the in msg and clears the out msg reference.  The end result of this is that when the route completes, the out reference is cleared and Exchange.isFailed() will return false (it checks the out message for fault status).  Here’s where things get interesting, if I add a single processor after the doTry block, some logic in Pipeline kicks in that copies the in message to the out message for InOut MEPs before ending the route.

I have included a unit test which demonstrates the expected behavior and current (unexpected) behavior.  The expected behavior test fails and the unexpected behavior test passes.  Additional details can be found as comments in the unit test and the camel configuration containing the routes under test.",,davsclaus,kcbabo,tadayosi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Mar/15 13:21;kcbabo;trywithfault2.zip;https://issues.apache.org/jira/secure/attachment/12703901/trywithfault2.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 14 13:31:41 UTC 2015,,,,,,,,,,,"0|i26mtz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Mar/15 13:31;davsclaus;Thanks for reporting and providing a sample project that demonstrates the issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Port [AMQ-5652] IdGenerator not optimal in port restricted environments.,CAMEL-8471,12780959,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chirino,chirino,chirino,10/Mar/15 19:35,10/Mar/15 19:38,14/Jul/23 05:50,10/Mar/15 19:38,,,,,,,,,,,,,,,2.16.0,,,,,,,,,,,0,,,,,,"In some containerized environments, the ActiveMQUuidGenerator does not work that great. Not only does it not usually detect the hostname correctly. But binding to a dynamic port might be restricted.
We should support supplying both those data values via system properties.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 10 19:38:55 UTC 2015,,,,,,,,,,,"0|i26lin:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Mar/15 19:38;chirino;fixed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Several small fixes for camel-linkedin,CAMEL-8470,12780867,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,trohovsky,trohovsky,trohovsky,10/Mar/15 14:32,01/Dec/15 19:01,14/Jul/23 05:50,07/May/15 06:25,2.14.2,,,,,,,,,,,,,,2.14.3,2.15.2,2.16.0,,,,,,,,,0,,,,,,"# companies/addShare should return the created Update
# Share#comment should be String instead of Comment
# Group#isOpenToNonMembers and Group#allowMemberInvites should be Boolean instead of boolean
Otherwise invoking of people/addGroupMembership causes
{code}
Error invoking addGroupMembership: Unexpected {group-membership/group/is-open-to-non-members} element, Unexpected {group-membership/group/allow-member-invites}
{code}
because both attributes (that are not valid for this resource) are present.
# remove role from people/getSuggestedGroupPosts
It is only for group-memberships/\{id\}/posts resource.",,dhirajsb,githubbot,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 04 17:03:41 UTC 2015,,,,,,,,,,,"0|i26kyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Mar/15 19:51;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/433

    CAMEL-8470 Several small fixes for camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8470

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/433.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #433
    
----
commit e0b5daf83878fe30fa51e6b1fb459d315d26c9e9
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-10T15:38:01Z

    CAMEL-8470 Several small fixes for camel-linkedin

----
;;;","18/Mar/15 10:24;trohovsky;Can someone merge this PR please?;;;","25/Mar/15 14:32;githubbot;Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/433
;;;","04/May/15 16:13;trohovsky;Share#comment is not fixed to be of String type;;;","04/May/15 16:20;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/510

    CAMEL-8470 Change Share#comment to String in camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8470

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/510.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #510
    
----
commit e05a8da55c47f7be0231b6f2e378f78a7d272c0c
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-05-04T16:19:15Z

    CAMEL-8470 Change Share#comment to String in camel-linkedin

----
;;;","04/May/15 17:03;dhirajsb;Commit merged, ok to close PR. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Several enum types should generate lower case values in camel-linkedin,CAMEL-8469,12780821,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,trohovsky,trohovsky,10/Mar/15 12:14,04/May/15 14:54,14/Jul/23 05:50,10/Mar/15 19:24,2.14.1,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Following parameters - types should generate values in lower case:

- event_type - org.apache.camel.component.linkedin.api.Eventtype
- category - org.apache.camel.component.linkedin.api.Category
- order - org.apache.camel.component.linkedin.api.Order
- role - org.apache.camel.component.linkedin.api.Role
- postcategorycode - org.apache.camel.component.linkedin.api.model.PostCategoryCode

Also notice that postcategory code should contain 'job' and 'promotion' values - https://developer-programs.linkedin.com/documents/groups-api.

I've tried to fix that with adding of
{code}
<bindings node=""//xs:simpleType[@name='event-type']"">
    <typesafeEnumClass name=""EventType"" />
</bindings>
{code}
to linkedin-api-schema.xjb as well as appropriate simpleType to linkedin-api-schema.xsd, but it was without success. I still got:
{code}
Error invoking getCompanyUpdates: Invalid filter {STATUS_UPDATE}
{code}
Names of enum values are used.",,dhirajsb,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon May 04 14:54:30 UTC 2015,,,,,,,,,,,"0|i26kov:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Mar/15 13:24;dhirajsb;Its actually an issue in the enums generated by CXF WADLtoJava, so the jaxb bindings have no effect. The solution is to move the enumerations to the schema and reference them in the wadl. I'll take care of that. ;;;","10/Mar/15 19:24;dhirajsb;Moving the enums to xsd fixed the issue with generating {{public String value()}} method in the enum. But CXF still marshaled the name of the enum value, instead of the String in the value field. So an {{EnumQueryParamConverterProvider}} had to be added to the Linkedin API and component to handle enums in query params. 
New tests were also added to verify the changes. ;;;","10/Mar/15 19:25;dhirajsb;[~trohovsky], once you have verified this fix, please close this issue. ;;;","04/May/15 14:54;trohovsky;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update camel-linkedin and camel-box components to use servicemix bundle for htmlunit,CAMEL-8467,12780648,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dhirajsb,dhirajsb,09/Mar/15 23:32,04/May/15 14:27,14/Jul/23 05:50,04/May/15 14:27,2.14.2,2.15.0,,,,,,,,,,,,,2.14.3,2.15.2,,,,,,,,,,0,,,,,,"Update these features to use the servicemix bundle wrapping htmlunit. It is currently incorrectly named as httpunit. So a request has been logged in a comment for SMX4-1816. 
Once the name is corrected, the features should be updated to use the smx4 bundle instead of the wrapped jars, which sometimes leads to CNF exceptions at runtime. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-03-09 23:32:31.0,,,,,,,,,,,"0|i26jmf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Feature camel-linkedin is missing dependencies for xalan, xerces and xmlresolver",CAMEL-8466,12780645,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,09/Mar/15 23:16,09/Mar/15 23:34,14/Jul/23 05:50,09/Mar/15 23:34,2.14.2,2.15.0,,,,,,,,,,,,,2.14.3,2.15.1,,,,,,,,,,0,,,,,,"OSGi dependencies for xalan, xerces and xmlresolver are missing for feature camel-linkedin. These dependencies are transitive from htmlunit, which is included as a wrapped jar right now, it should be switched to the servicemix bundle for htmlunit for this and camel-box features.. That bundle needs to be named correctly as mentioned in SMX4-1816. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SMX4-1816,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 09 23:34:17 UTC 2015,,,,,,,,,,,"0|i26jlr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Mar/15 23:34;dhirajsb;Feature camel-linkedin has been updated on master, camel-2.15.x and camel-2.14.x branches. 
The requirement to update features to use smx4 bundle for htmlunit has been moved to CAMEL-8467. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove likeCompanyUpdate endpoint from camel-linkedin,CAMEL-8464,12780551,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,trohovsky,trohovsky,trohovsky,09/Mar/15 17:57,01/Dec/15 19:00,14/Jul/23 05:50,10/Mar/15 02:01,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,,,,,,,,0,,,,,,"Similar as CAMEL-8456. The underlying resource
{code}
/companies/{company-id}/updates/key={update-key}/is-liked
{code}
doesn't exist. It was probably added by mistake instead of
{code}
https://api.linkedin.com/v1/people/~/network/updates/key={update-key}/is-liked
{code}
mentioned in the documentation https://developer-programs.linkedin.com/documents/commenting-and-liking-company-share. The resource is already mapped to linkedin://people/likeUpdate so there is no need to add it to companies prefixed endpoints.",,githubbot,njiang,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 25 14:34:30 UTC 2015,,,,,,,,,,,"0|i26j1b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Mar/15 18:16;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/428

    CAMEL-8464 Remove likeCompanyUpdate endpoint from camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8464

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/428.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #428
    
----
commit 2dcee54520212d5b3babebc8eeae287436f4d040
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-09T18:13:17Z

    CAMEL-8464 Remove likeCompanyUpdate endpoint from camel-linkedin

----
;;;","10/Mar/15 02:01;njiang;Merged the patch into master, camel-2.15.x and camel-2.14.x branches with thanks to Tomas.;;;","25/Mar/15 14:34;githubbot;Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/428
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpServerChannelHandler should not store the instance of HttpRequest,CAMEL-8462,12780447,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Mar/15 10:00,09/Mar/15 10:51,14/Jul/23 05:50,09/Mar/15 10:51,2.14.2,2.15.0,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,camel-netty-http,camel-netty4-http,,,,,,0,,,,,,"HttpServerChannelHandler is created per NettyHttpConsumer, we should not store the Request instance in it's field. 
BTW, we can alway access the Request Object from the MessageEvent or Context Object from the NettyHttpHandler.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 09 10:51:50 UTC 2015,,,,,,,,,,,"0|i26if3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Mar/15 10:51;njiang;Applied the patch into master , camel-2.14.x and camel-2.15.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http does not respect client's keep-alive setting,CAMEL-8461,12780439,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Mar/15 09:36,09/Mar/15 10:51,14/Jul/23 05:50,09/Mar/15 10:51,2.14.2,2.15.0,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,camel-netty-http,camel-netty4-http,,,,,,0,,,,,,"If we have the camel route which remove the all the header after the netty-http consumer, netty doesn't  close the connection even the client send the http header connection as closed.
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" default-activation=""eager"">
  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
    <route>
      <from id=""t1"" uri=""netty-http:http://localhost:9000/test""/>
      <removeHeaders pattern=""*""/>
      <setBody>
        <constant>Hello, World!</constant>
      </setBody>
      <to uri=""log:XXX?level=ERROR""/>
    </route>
  </camelContext>
</blueprint>
{code}
",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 09 10:51:37 UTC 2015,,,,,,,,,,,"0|i26idb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Mar/15 10:51;njiang;Applied the patch into master , camel-2.14.x and camel-2.15.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-linkedin - public_profile_url option should be String,CAMEL-8458,12780199,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,trohovsky,trohovsky,trohovsky,06/Mar/15 23:00,01/Dec/15 19:00,14/Jul/23 05:50,09/Mar/15 10:53,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.1,,,,,,,,,,0,,,,,,"public_profile_url should be String instead of URI. The value of public_profile_url must be URL encoded what is not possible with URI.

Currently I am getting
{code}
Error invoking getPersonByUrl: Unknown field {pub} in resource {Person}
{code}
for https://www.linkedin.com/pub/jboss-fuse-qe/b4/14b/b",,njiang,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 09 10:53:42 UTC 2015,,,,,,,,,,,"0|i26gyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/15 23:20;trohovsky;https://github.com/apache/camel/pull/426. It is rebased with a branch for https://github.com/apache/camel/pull/425.;;;","09/Mar/15 10:53;njiang;Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Correct return types of some endpoints in camel-linkedin,CAMEL-8457,12780164,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,trohovsky,trohovsky,trohovsky,06/Mar/15 20:47,01/Dec/15 18:59,14/Jul/23 05:50,09/Mar/15 10:53,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,,,,,,,,0,,,,,,"These endpoints return wrong type:

- companies/getCompanyUpdateComments - Comments/UpdateComments
- companies/getUpdateComments - Comments/UpdateComments
- people/getGroupMembershipSettings - GroupMemberships/GroupMembership

so it results in java.lang.ClassCastException.",,githubbot,njiang,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 25 14:33:13 UTC 2015,,,,,,,,,,,"0|i26grb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/15 21:25;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/425

    CAMEL-8457 Correct return types of some endpoints in camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8457

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/425.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #425
    
----
commit 0447273d3096b958efd10764e6c6c030671e79bc
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-06T21:19:46Z

    CAMEL-8457 Correct return types of some endpoints in camel-linkedin

----
;;;","06/Mar/15 21:29;trohovsky;I also removed start and count options for getGroupMembershipSettings because they are only for collections of objects. The documentation for camel-linkedin should be corrected when the PR is merged.;;;","09/Mar/15 10:53;njiang;Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas;;;","25/Mar/15 14:33;githubbot;Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/425
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove addCompanyUpdateComment endpoint from camel-linkedin,CAMEL-8456,12780159,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,trohovsky,trohovsky,trohovsky,06/Mar/15 20:11,01/Dec/15 18:59,14/Jul/23 05:50,09/Mar/15 10:53,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,,,,,,,,0,,,,,,"Underlying resource 
{code}
/companies/{company-id}/updates/key={update-key}/update-comments 
{code}
does not exist. It was probably added by mistake instead of 
{code}
https://api.linkedin.com/v1/people/~/network/updates/key={update-key}/update-comments
{code}
 mentioned in the documentation [https://developer-programs.linkedin.com/documents/commenting-and-liking-company-share]. The resource is already mapped to linkedin://people/addUpdateComment so there is no need to add it to companies prefixed endpoints.",,githubbot,njiang,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 25 14:33:19 UTC 2015,,,,,,,,,,,"0|i26gq7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/15 20:22;githubbot;GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/424

    CAMEL-8456 - Remove addCompanyUpdateComment endpoint from camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8456

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/424.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #424
    
----
commit 383f3edab9c33af897ae5ae538264a48600dd3c6
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-06T20:20:58Z

    CAMEL-8456 - Remove addCompanyUpdateComment endpoint from camel-linkedin

----
;;;","09/Mar/15 10:53;njiang;Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas;;;","25/Mar/15 14:33;githubbot;Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/424
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-linkedin - update_key option should be optional in getHistoricalStatusUpdateStatistics,CAMEL-8455,12780143,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,trohovsky,trohovsky,trohovsky,06/Mar/15 19:15,01/Dec/15 18:59,14/Jul/23 05:50,09/Mar/15 10:53,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.1,2.16.0,,,,,,,,,0,,,,,,"update_key option should be optional in getHistoricalStatusUpdateStatistics endpoint. Currently it ends with an exception if the option is not specified: {{org.apache.camel.RuntimeCamelException: Missing properties for getHistoricalStatusUpdateStatistics, need one or more from \[end_timestamp, update_key\]}} See the LinkedIn API docs: https://developer-programs.linkedin.com/historical-company-statistics.",,githubbot,njiang,trohovsky,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 25 14:33:41 UTC 2015,,,,,,,Patch Available,,,,"0|i26gmn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/15 19:35;trohovsky;update_key was renamed to statistics_update_key due to conflict with update_key option used in the other company endpoints where it is required;;;","06/Mar/15 19:44;trohovsky;https://github.com/apache/camel/pull/423;;;","09/Mar/15 10:53;njiang;Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas.;;;","25/Mar/15 14:33;githubbot;Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/423
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-avro throws SAXParseException when used from spring or blueprint,CAMEL-8453,12780119,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,06/Mar/15 16:48,06/Mar/15 18:30,14/Jul/23 05:50,06/Mar/15 18:30,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.0,,,,,,,,,,0,,,,,,"Getting this exception when using avro dataformat from spring:

org.xml.sax.SAXParseException; lineNumber: 27; columnNumber: 88; cvc-complex-type.3.2.2: Attribute 'instanceClass' is not allowed to appear in element 'avro'.

Don't think this has ever worked from spring.",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 06 17:00:23 UTC 2015,,,,,,,,,,,"0|i26ghb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/15 17:00;janstey;Fix for master http://git-wip-us.apache.org/repos/asf/camel/commit/fa38e09b;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Netty component should not stop/null static timer when stopping,CAMEL-8450,12780041,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,06/Mar/15 11:10,06/Mar/15 11:17,14/Jul/23 05:50,06/Mar/15 11:14,,,,,,,,,,,,,,,2.15.0,,,,camel-netty,,,,,,,0,,,,,,"{{NettyComponent.timer}} is static. It is initialized/started on component startup and stopped/nulled on component shutdown. The static timer is shared between. It means that when you start two bundles using camel-netty and then stop one of it, then the remaining running bundle will not be able to create new endpoints dynamically, because of the nulled timer in the component (until some other bundle using Netty component is started and reinitalizes the timer again).

IMHO, we should not stop neither null the static timer. It can be shared between components and initialized/started when the first {{NettyComponent}} instance is created, but it should last forever. We technically could count the number of the component instances, and stops the timer when there is no {{NettyComponent}} available, but I don't see a point in this kind of micro-optimization. This is only one timer instance per application.",,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 06 11:17:07 UTC 2015,,,,,,,,,,,"0|i26fzz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"06/Mar/15 11:13;hekonsek;Fixed in 72c65431b0dc0c5df847fc4ce628e50794cb8934.;;;","06/Mar/15 11:17;hekonsek;My commit also includes the test reproducing the issue.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple bean call doesn't like parenthesis in parameter values,CAMEL-8437,12779424,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,04/Mar/15 15:52,14/Mar/15 20:10,14/Jul/23 05:50,14/Mar/15 19:32,2.13.0,,,,,,,,,,,,,,2.15.1,2.16.0,,,camel-core,,,,,,,2,,,,,,"The simple language fails calling methods with parameters that contains {{"")""}}.

First use case, direct use:
{code:xml}
<route>
    <from uri=""timer:foo?repeatCount=1""/>
    <setBody>
        <groovy>["")"", 42]</groovy>
    </setBody>
    <setHeader headerName=""test"">
        <simple>${body.contains("")"")}</simple>
    </setHeader>
    <log message=""Body: ${body}, contains: ${header.test}""/>
</route>
{code}
It throws an error.

Second use case, with a usage of a parameter:
{code:xml}
<route>
    <from uri=""timer:foo?repeatCount=1""/>
    <setBody>
        <groovy>["")"", 42]</groovy>
    </setBody>
    <setProperty propertyName=""query"">
        <constant>)</constant>
    </setProperty>
    <setHeader headerName=""test"">
        <simple>${body.contains(${property.query})}</simple>
    </setHeader>
    <log message=""Body: ${body}, contains: ${header.test}""/>
</route>
{code}
It doesn't throw any exception but doesn't work.",,antoine.dessaigne,jeromeinsf,xfournet,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 14 20:10:54 UTC 2015,,,,,,,,,,,"0|i26cp3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Mar/15 20:10;antoine.dessaigne;Thanks a lot for fixing this bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-boot - Some routes not being initialized after CamelContext have been removed from CamelAutoConfiguration,CAMEL-8436,12779404,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,di_m_an,di_m_an,04/Mar/15 14:52,04/Mar/15 21:04,14/Jul/23 05:50,04/Mar/15 21:04,2.15.0,,,,,,,,,,,,,,2.15.0,,,,camel-spring-boot,,,,,,,0,,,,,,"In our project we have several classes that extend SpringRouteBuilder and that are annotated with @Component.
Some days ago we've noticed that most of them stopped being initialized on application startup.

Found out that our issues started from this commit:
https://github.com/apache/camel/commit/6bcc0b6110a762623888ded294c78dc168a18e75

If I roll it back everything is fine again.",,davsclaus,di_m_an,hekonsek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Mar/15 17:03;di_m_an;camel-spring-boot-issue.tar.gz;https://issues.apache.org/jira/secure/attachment/12702507/camel-spring-boot-issue.tar.gz",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 04 21:04:08 UTC 2015,,,,,,,,,,,"0|i26ckn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Mar/15 15:04;davsclaus;[~hekonsek] wonder if we can rollback that commit to fix that issue reported? Or if not would be good if you could take a look today/tomorrow before Camel 2.15.0 is being cut.;;;","04/Mar/15 15:20;hekonsek;Hi,

Actually that commit is important one as it prevents {{CamelContext}} from premature initialization.

[~di_m_an] Can you provide me a minimal Maven example reproducing your issue? I can't see this kind of behavior in our tests nor in the projects that uses camel-spring-boot.

Cheers!;;;","04/Mar/15 16:59;hekonsek;I committed some changes to the {{RoutesCollector}} lifecycle and added extra tests demonstrating that {{@Component}} scanning works as expected (see {{ComponentRouteTest}}). Can you give the current master version a try?;;;","04/Mar/15 17:03;di_m_an;Managed to reproduce the issue in minimal project - gradle one, not maven, sorry.
Attached the project.

If you {{./gradlew run}} it, you get:
{noformat}
2015-03-04 19:46:28.102  INFO 32637 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: Endpoint[direct://1]
2015-03-04 19:46:28.116  INFO 32637 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route2 started and consuming from: Endpoint[direct://2]
2015-03-04 19:46:28.131  INFO 32637 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route3 started and consuming from: Endpoint[direct://5]
{noformat}

If you do {{mv src/main/java/org/apache/camel/spring/boot/CamelAutoConfiguration.java.thisworks src/main/java/org/apache/camel/spring/boot/CamelAutoConfiguration.java}} and run it once again, you get:
{noformat}
2015-03-04 19:48:15.225  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: Endpoint[direct://1]
2015-03-04 19:48:15.241  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route2 started and consuming from: Endpoint[direct://2]
2015-03-04 19:48:15.265  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route3 started and consuming from: Endpoint[direct://3]
2015-03-04 19:48:15.286  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route4 started and consuming from: Endpoint[direct://4]
2015-03-04 19:48:15.309  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route5 started and consuming from: Endpoint[direct://5]
{noformat}

Something wrong is with this injection:
{code}
    @Resource
    private ProducerTemplate producerTemplate;
{code}
only the first route that has it, is initialized.

In the real project ProducerTemplate is injected in some other beans and they are injected in the SpringRouteBuilder ones, and the result is the same.;;;","04/Mar/15 17:08;hekonsek;Hi Dmitry,

Can you give it a shot against the latest master version? If not, I will do it but not today.

Cheers!;;;","04/Mar/15 17:21;di_m_an;Tried the latest RoutesCollector - the issue is still there.;;;","04/Mar/15 21:04;hekonsek;Nailed it :) Revision - 1c1953ac4dc2319403101b5f04a31e53cdf615f1 . Great thanks for the example!

The problem was that creation of {{ProducerTemplate}} forced {{CamelContext}} to start too early. I changed {{RoutesCollector}} to collect routes when {{ApplicationContext}} is refreshed and then start {{CamelContext}}.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Camel HDFS2 - Unable to consume an empty file,CAMEL-8434,12779348,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,04/Mar/15 10:13,05/Mar/15 18:36,14/Jul/23 05:50,05/Mar/15 18:34,2.14.2,2.15.0,,,,,,,,,,,,,2.14.3,2.15.0,,,,,,,,,,0,,,,,,It is not possible to consume an empty file with camel HDFS2 consumer.,,davsclaus,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 05 18:36:18 UTC 2015,,,,,,,,,,,"0|i26c8f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Mar/15 15:57;davsclaus;I dont think this works as intended. As the consumer has no idempotency, so you would essentially end up reading the same file over and over again.

Adding

        Thread.sleep(5000);

In your empty file tests, causes

java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <49931>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1394)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1376)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:399)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:378)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:366)
	at org.apache.camel.component.hdfs.HdfsConsumerTest.testSimpleConsumerWithEmptyFile(HdfsConsumerTest.java:183)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)

eg the file was read 49xxx times.

The hdfs consumer really need a delete | idempotent option as the regular file consumer or something. Not sure what was the original thought behind the hdfs component consumer.

;;;","05/Mar/15 18:34;ggrzybek;Sorry for little mistake.
FIxed in:
* [master|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=c1a74982c6e7d3ab05f40da320099a30d8f26d33]
* [camel-2.14.x|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=b552ceac1c3353e59b1ce261222ac6e91abddd1b];;;","05/Mar/15 18:36;ggrzybek;Messages read from hdfs are renamed according to ""readSuffix"" endpoint URI parameter;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mqtt: MQTT wildcard ('+') subscription broken,CAMEL-8432,12779251,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mmindenhall,mmindenhall,04/Mar/15 00:42,04/Mar/15 12:37,14/Jul/23 05:50,04/Mar/15 12:37,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.0,,,camel-mqtt,,,,,,,0,,,,,,"[MQTT single-level wildcards|http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718106] (""\+"" character) are broken within topic subscriptions.  This is due to URL encoding/decoding that is done on the component URI, which results in the ""\+"" being replaced with a space.  I also tried with ""%2B"" instead of the ""\+"" sign, which gave the same result.  

A search led me to CAMEL-8056, which mentions needing to override the {{useRawUri}} method to return {{true}}.  I'm working on a patch and updated unit tests for this.",,mmindenhall,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/Mar/15 02:13;mmindenhall;0001-CAMEL-8432-2.14.x.patch;https://issues.apache.org/jira/secure/attachment/12702344/0001-CAMEL-8432-2.14.x.patch","04/Mar/15 01:53;mmindenhall;0001-CAMEL-8432-2.15.x.patch;https://issues.apache.org/jira/secure/attachment/12702340/0001-CAMEL-8432-2.15.x.patch",,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 04 12:37:43 UTC 2015,,,,,,,Patch Available,,,,"0|i26bn3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Mar/15 02:17;mmindenhall;[~njiang], I think I saw in the dev mailing list that you were going to apply some other patches and restart the 2.14.2 release process.  Is there any way this fix can go in?  I made it as easy as possible by providing separate patches for the 2.14.x branch and master (2.15.x).

Thanks!;;;","04/Mar/15 04:30;njiang;Hi Mark,
I did the cut yesterday, so it just missed the release train.
I will merge the patch later today.
Regards,

Willem;;;","04/Mar/15 12:37;njiang;Applied the patch into camel master and camel-2.14.x branches with thanks to Mark.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consume all files in aws S3 bucket where deleteAfterRead = false,CAMEL-8431,12779174,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,reusable,reusable,03/Mar/15 20:39,27/Apr/16 18:44,14/Jul/23 05:50,11/Oct/15 15:33,2.14.0,,,,,,,,,,,,,,2.15.4,2.16.1,2.17.0,,camel-aws,,,,,,,0,,,,,,"The current AWS S3Consumer class has a problem if user supply the parameter deleteAfterRead=false.  The S3Consumer will always consume the same files over and over again with the size of getMaxMessagesPerPoll(). 

After some code chasing, i think, the root cause is because the ListObjectsRequest does not has the previous marker value. Hence, i wonder if we could do something like below:
{quote}
{color:blue}private string marker; // new line to define the marker string {color}
..
..
..
ListObjectsRequest listObjectsRequest = new ListObjectsRequest();
listObjectsRequest.setBucketName(bucketName);
listObjectsRequest.setPrefix(getConfiguration().getPrefix());
listObjectsRequest.setMaxKeys(maxMessagesPerPoll);
{color:blue}listObjectsRequest.setMarker(marker); // new line to set the marker  {color}     

ObjectListing listObjects = getAmazonS3Client().listObjects(listObjectsRequest);
{color:blue}marker = listObjects.getMarker(); // where marker is track          
{color}{quote}


",,davsclaus,njiang,reusable,vish1128,,,,,,,,,,,,,,,,CAMEL-8539,,,,CAMEL-9784,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 27 18:44:23 UTC 2016,,,,,,,,,,,"0|i26b6n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Mar/15 14:33;njiang;I just applied the suggest fix with a small modification into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Yap.;;;","30/Jun/15 21:36;vish1128;I faced a similar problem with the' deleteAfterRead = false' argument in my aws-s3 uri. I am using camel-2.14.1. As per the suggestions, I changed my pom to use camel-2.14.3 and camel-2.15.0 but the issue still exists. The same file keeps on getting consumed again and again. This is what my uri looks like :
asw-s3//{bucketname}?accessKey={$accessKey}&secretKey={$secretKey}&deleteAfterRead=false&prefix={$prefix};;;","08/Oct/15 02:00;njiang;I just checked the code, if the filename is not null and deleteAfterRead is false, camel always pulls the same file again and again.
And if there some misunderstanding  with the setMarker and getMarker of the ListObjectRequest, so I reopen the issue and will commit a quick fix for it shortly.;;;","11/Oct/15 15:33;njiang;Just applied the patch into master, camel-2.16.x and camel-2.15.x branches.;;;","27/Apr/16 18:35;davsclaus;Yes this broke the component, see ticket CAMEL-9784. ;;;","27/Apr/16 18:44;davsclaus;the nextMarker is only if the result has more data (eg if it was truncated) and you need to call it again to get more data, eg in a while loop.

If there is no delete after read, then you need some kind of idempotent consumer to detect duplicates, you can do that by adding the idempotent consumer EIP
http://camel.apache.org/idempotent-consumer.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Camel HDFS2 - readSuffix option does not work,CAMEL-8430,12779038,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ggrzybek,ggrzybek,ggrzybek,03/Mar/15 12:18,19/Dec/19 17:29,14/Jul/23 05:50,04/Mar/15 07:43,2.15.0,,,,,,,,,,,,,,2.14.3,2.15.0,,,camel-hdfs,,,,,,,0,,,,,,Option readSuffix does not work. It staticly uses constant HdfsConstants.DEFAULT_READ_SUFFIX.,,davsclaus,ggrzybek,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 04 07:43:59 UTC 2015,,,,,,,,,,,"0|i26adj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Mar/15 07:34;davsclaus;[~ggrzybek] you can backport to 2.14.x now.;;;","04/Mar/15 07:43;ggrzybek;Fix present in master and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-scala - Testing with useOverridePropertiesWithPropertiesComponent issue,CAMEL-8427,12778899,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,shreyaspurohit,shreyaspurohit,02/Mar/15 23:13,04/Mar/15 05:54,14/Jul/23 05:50,03/Mar/15 09:12,2.15.0,,,,,,,,,,,,,,2.15.0,,,,camel-test,,,,,,,0,,,,,,"A very simple project has been attached. The SFTP route has some properties which are being provided by using 'useOverridePropertiesWithPropertiesComponent' in CamelTestSupport. The test used to work fine before the latest March 2nd snapshot. It works with 2.14.1 version too. Now it fails with: 

{code}
Caused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [sftp.userName] not found in properties from text: sftp://{{sftp.userName}}@{{sftp.hostname}}{{sftp.folder}}?moveFailed={{sftp.moveFailedFolder}}&privateKeyFile={{sftp.privateKeyFile}}&privateKeyPassphrase={{sftp.privateKeyPassphrase}}&readLock=changed&readLockCheckInterval=10000&readLockTimeout=40000&streamDownload=true&fastExistsCheck=true&idempotent=true&useFixedDelay=true&delete=true&recursive=true&stepwise=false
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.getPropertyValue(DefaultPropertiesParser.java:268)
{code}",,davsclaus,githubbot,gmazza,njiang,shreyaspurohit,,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-7644,,,"02/Mar/15 23:14;shreyaspurohit;2_15_SNAPSHOT.zip;https://issues.apache.org/jira/secure/attachment/12702008/2_15_SNAPSHOT.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 04 05:54:22 UTC 2015,,,,,,,,,,,"0|i269jj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"03/Mar/15 06:09;davsclaus;Cannot reproduce this - works fine
https://github.com/apache/camel/commit/ae08cd979b1997f1cf4b560d03b2117e05c77dec;;;","03/Mar/15 06:32;davsclaus;Its a camel-scala problem as 2 CamelContext are in use during testing. ;;;","03/Mar/15 06:41;davsclaus;To make it work change the route builder 
{code}
  def configure() {
    from(sftpUrlIn)
      .routeId(""route-sftp-to-file"")
      .to(""log:com.ssb.route.sftptofile?showAll=true&multiline=true"")
      .to(fileUrlOut)
  }
{code}

And from the unit test
{code}
  override def createRouteBuilder(): RouteBuilder =  {
    val builder = new SFTPRouteBuilder
    builder.setContext(context())
    builder.configure()
    builder
  }
{code};;;","03/Mar/15 06:51;shreyaspurohit;So, I tried this https://gist.github.com/anonymous/5fd928a7ac59afd2c4d8 and https://gist.github.com/anonymous/7cc6ee5457bd5e0d1b21. Both fails. Yeah, looks like scala dsl problem. I converted my original to java route builder and it worked.;;;","03/Mar/15 06:56;shreyaspurohit;This worked: https://gist.github.com/anonymous/5ce76593ad61b67e2b73, I understand what you meant. 

Is this a bug or is it expected to work like this going forwards? Also, surprised that it started breaking just now for me but the related bug CAMEL-7644 has been from a long time.;;;","03/Mar/15 07:41;shreyaspurohit;How should I be initializing this in my main? I was initializing org.apache.camel.main.Main and adding camelMain.addRouteBuilder(new SFTPRouteBuilder), but with ""configure()"" method surrounding from/to the routes dont get initialized any more. I am extending RouteBuilderSupport.;;;","03/Mar/15 09:13;davsclaus;See this unit test how to do it
https://github.com/apache/camel/commit/01f08a6267232089adba90a380050ba5dc9c43d2;;;","03/Mar/15 15:41;shreyaspurohit;How should I be using this with camel Main? Since, ScalaRouteBuilder expects a context, I can't do camelMain.addRouteBuilder(new SFTPRouteBuilder) any more. ;;;","03/Mar/15 15:50;davsclaus;Check the recent commits;;;","03/Mar/15 16:19;shreyaspurohit;You are awesome [~davsclaus]!!! Thanks!;;;","03/Mar/15 22:06;githubbot;GitHub user shreyaspurohit opened a pull request:

    https://github.com/apache/camel/pull/418

    CAMEL-8427 Publish scala test jar to expose ScalaTestSupport

    @davsclaus 
    
    ScalaTestSupport needs to be published so that others can depend on test jar for camel-scala and access this.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/shreyaspurohit/camel CAMEL-8427

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/418.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #418
    
----
commit 93117a1b2800cfcfffbf99aea230e1a245a6729c
Author: Shreyas Purohit <shreyas.purohit@gmail.com>
Date:   2015-03-03T21:47:03Z

    CAMEL-8427 Publish scala test jar to expose ScalaTestSupport

----
;;;","04/Mar/15 00:50;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/418
;;;","04/Mar/15 00:54;njiang;I just merged the PR of pushing the scala test jar.;;;","04/Mar/15 01:44;gmazza;Hi Willem & Claus.  Shreyas is my coworker at my new company, thanks for helping him and providing him quick service.  :);;;","04/Mar/15 05:22;davsclaus;We should NOT publish test-jar, those are for internal. If there is special need for scala testing a new camel-test-scala module would be required.;;;","04/Mar/15 05:29;shreyaspurohit;uh oh.. then we have to create a new module to expose ScalaTestSupport.. I can do that.. But, do you want me to submit another PR removing the publish code or would you revert the merge some other way?;;;","04/Mar/15 05:54;davsclaus;We can revert.

Then I suggest to log a new ticket about a camel-test-scala module. And yeah we love contributions so you are very much welcome to work on such a module.

;;;",,,,,,,,,,,,,,,
Handle invalid client id gracefully in Camel Box component,CAMEL-8426,12778823,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,02/Mar/15 18:27,02/Mar/15 19:08,14/Jul/23 05:50,02/Mar/15 19:08,2.14.1,2.15.0,,,,,,,,,,,,,2.14.2,2.15.0,,,,,,,,,,0,camel-box,oauth2,,,,"Box component uses HtmlUnit to perform a login and authorization on user's behalf for OAuth. Box.com returns an error message instead of a login page on an invalid client id, which the component should handle gracefully, instead of the missing HTML element it throws currently. ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 02 19:08:43 UTC 2015,,,,,,,,,,,"0|i26947:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Mar/15 19:08;dhirajsb;Fix committed to master and camel-2.14.x, component now throws an IllegalArgumentException on invalid client id. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle invalid client id gracefully in Camel LinkedIn component,CAMEL-8425,12778821,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,02/Mar/15 18:27,02/Mar/15 18:54,14/Jul/23 05:50,02/Mar/15 18:54,2.14.1,2.15.0,,,,,,,,,,,,,2.14.2,2.15.0,,,,,,,,,,0,camel-linkedin,oauth2,,,,"LinkedIn component uses HtmlUnit to perform a login and authorization on user's behalf for OAuth. LinkedIn returns an error message instead of a login page on an invalid client id, which the component should handle gracefully, instead of the missing HTML element it throws currently. c",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 02 18:54:12 UTC 2015,,,,,,,,,,,"0|i2693r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Mar/15 18:54;dhirajsb;Fix committed to master and camel-2.14.x, component now throws an InvalidArgumentException on invalid client id. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Transaction being propagated ignoring REQUIRES_NEW when using direct component,CAMEL-8424,12778803,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,nannou9,nannou9,02/Mar/15 17:35,22/Mar/18 12:07,14/Jul/23 05:50,02/Mar/15 18:32,2.10.7,2.11.4,2.13.3,2.14.1,2.15.0,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-spring,,,,,,,0,,,,,,"I found that when we are using exactly same propagation policy bean in different routes used together with ""direct"" component, then TransactionErrorHandler always propagates current transaction even if our policy is ""PROPAGATION_REQUIRES_NEW"".

The failing code is:
{code}
    public TransactionErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, 
            Processor redeliveryProcessor, RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy,
            TransactionTemplate transactionTemplate, Predicate retryWhile, ScheduledExecutorService executorService,
            LoggingLevel rollbackLoggingLevel) {

        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorService);
        setExceptionPolicy(exceptionPolicyStrategy);
        this.transactionTemplate = transactionTemplate;
        this.rollbackLoggingLevel = rollbackLoggingLevel;
        this.transactionKey = ObjectHelper.getIdentityHashCode(transactionTemplate);
    }

    @Override
    public void process(Exchange exchange) throws Exception {
        // we have to run this synchronously as Spring Transaction does *not* support
        // using multiple threads to span a transaction
        if (exchange.getUnitOfWork().isTransactedBy(transactionKey)) {
            // already transacted by this transaction template
            // so lets just let the error handler process it
            processByErrorHandler(exchange);
        } else {
            // not yet wrapped in transaction so lets do that
            // and then have it invoke the error handler from within that transaction
            processInTransaction(exchange);
        }
    }
{code}
So then for each policy there is a hash code created, which then is used to verify whether current route is already transacted by this transaction policy.
This makes ""PROPAGATION_REQUIRES_NEW"" ignored when used with ""direct"" component.

So for example:
{code}
                from(""activemq:queue:start"").routeId(""route1"")
                        .transacted(""PROPAGATION_REQUIRES_NEW"")
                        .setExchangePattern(ExchangePattern.InOnly)
                        .to(""activemq:queue:result1"")
                        .to(""direct:route2"")
                        .throwException(new RuntimeException(""Expected!""));

                from(""direct:route2"").routeId(""route2"")
                        .transacted(""PROPAGATION_REQUIRES_NEW"")
                        .setExchangePattern(ExchangePattern.InOnly)
                        .to(""activemq:queue:result2"");
{code}

The above route suppose to work in 2 different transactions, as our propagation is REQUIRES_NEW for both of them. But due to hash code verification and optimisation, route2 will participate in same transaction as route1 instead of new.
This is rather buggy.

Will create pull request in minutes.",,davsclaus,githubbot,nannou9,,,,,,,,,,,,,,,,,,,,CAMEL-12263,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 03 09:59:41 UTC 2015,,,,,,,Patch Available,,,,"0|i268zr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Mar/15 17:50;githubbot;GitHub user PiotrKlimczak opened a pull request:

    https://github.com/apache/camel/pull/416

    CAMEL-8424 Fixed transaction propagated when requires new

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PiotrKlimczak/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/416.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #416
    
----
commit 7344ff80f7d14523d148d13859746cf5cf5ea0bc
Author: Piotr Klimczak <klimczakp@quindell.com>
Date:   2015-03-02T17:49:49Z

    CAMEL-8424 Fixed transaction propagated when requires new

----
;;;","02/Mar/15 17:59;davsclaus;Thanks for reporting and the PR - just in time for the new 2.15.0;;;","03/Mar/15 09:59;githubbot;Github user PiotrKlimczak closed the pull request at:

    https://github.com/apache/camel/pull/416
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel StreamCache does not work with CXF consumer for InOut messages,CAMEL-8419,12778695,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,siano,siano,02/Mar/15 06:55,29/Jun/17 18:55,14/Jul/23 05:50,29/Jun/17 11:55,2.14.1,,,,,,,,,,,,,,2.20.0,,,,camel-cxf,,,,,,,1,,,,,,"If a route that is started by a CXF consumer and has an InOut exchange pattern (meaning that the CXF consumer is returning a response back to the caller) contains a StreamCache as message object that is not in memory, returning the payload will fail.

The reason for this is that an on-disk stream cache in Camel will be removed when the LUW ends, but CXF will return the response afterwards.

See the two attached unit tests for details.

I don't like the actual patch too much, as it copies on-disk camel stream caches into CXF stream caches when creating the CXF message object in camel CXF, but this is about the last step before the LUW ends (and the file gets deleted).",,davsclaus,forsthofer,githubbot,onders,siano,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"04/May/15 11:35;siano;0001-CAMEL-8419-Camel-StreamCache-does-not-work-with-CXF-.patch;https://issues.apache.org/jira/secure/attachment/12730161/0001-CAMEL-8419-Camel-StreamCache-does-not-work-with-CXF-.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 29 18:55:59 UTC 2017,,,,,,,Patch Available,,,,"0|i268cf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Mar/15 16:25;davsclaus;It should be done like camel-jetty does, it lets the consumer create the uow and handle that lifecycle
https://github.com/apache/camel/blob/master/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java#L146

Then it writes the response
https://github.com/apache/camel/blob/master/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java#L198

And in the finally it done the UoW
https://github.com/apache/camel/blob/master/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java#L206

Then the stream cache which may have been offloaded to disk will only get the file deleted after the consumer has sent back the response. ;;;","04/May/15 11:35;siano;The initial patch was not closing the CachedOutputStream.

I agree with Claus, that it would be better to have a callback that was ending the Camel LUW once CXF has finished processing the message (not when giving the control back to CXF), but I have not yet found any facility in CXF for that.;;;","24/May/17 21:43;onders;2.14.x is a old branch. and this is an old issue. should we consider for 2.17.x 2.18x and 2.19.x and 2.20.x?;;;","29/May/17 05:17;siano;The issue still occurs with newer versions, so yes, we should consider this. I still don't have a better idea than copying the Camel stream cache into a CXF stream cache, but maybe some CXF expert has a good idea for this.;;;","15/Jun/17 20:38;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/1766

    CAMEL-8419 Camel StreamCache does not work with CXF consumer for InOut messages

    * Closing UnitOfWork after Continuation has been processed

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-8419

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1766.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1766
    
----
commit 714cc53551aed07e572d94d7d8e762585e5f5317
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-06-15T20:38:01Z

    CAMEL-8419 Camel StreamCache does not work with CXF consumer for InOut messages
    * Closing UnitOfWork after Continuation has been processed

----
;;;","21/Jun/17 15:15;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/1766
;;;","25/Jun/17 19:51;githubbot;GitHub user snurmine opened a pull request:

    https://github.com/apache/camel/pull/1783

    CAMEL-8419 Camel StreamCache does not work with CXF consumer for InOu…

    …t messages
    
    * Closing UnitOfWork in Interceptor/MessageObserver

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/snurmine/camel CAMEL-8419

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1783.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1783
    
----
commit 0422b848b89a1038861cc8b86e4413fa9e60a6cf
Author: Sami Nurminen <snurmine@gmail.com>
Date:   2017-06-15T20:38:01Z

    CAMEL-8419 Camel StreamCache does not work with CXF consumer for InOut messages
    * Closing UnitOfWork in Interceptor/MessageObserver

----
;;;","27/Jun/17 08:28;davsclaus;Thanks Sami for the PR. I think it looks good, but would just like a CXF committer to glace at the code before we do any merge.
;;;","29/Jun/17 11:55;davsclaus;Thanks for the PR;;;","29/Jun/17 18:55;githubbot;Github user snurmine closed the pull request at:

    https://github.com/apache/camel/pull/1783
;;;",,,,,,,,,,,,,,,,,,,,,,
RAW_TOKEN_START and RAW_TOKEN_END not removed when query parameter occurs multiple times,CAMEL-8417,12778485,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mlehnert,mlehnert,28/Feb/15 16:07,02/Mar/15 07:19,14/Jul/23 05:50,02/Mar/15 07:19,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.3,2.15.0,,camel-core,,,,,,,0,,,,,,"The tokens RAW_TOKEN_START (""RAW("") and RAW_TOKEN_END ("")"") are not removed when the parameter value is a list. The bug is in ""resolveRawParameterValues"" in org.apache.camel.util.UriSupport (lines 323, 324):
{code}
                String value = entry.getValue().toString();
                if (value.startsWith(RAW_TOKEN_START) && value.endsWith(RAW_TOKEN_END)) {
{code} 
This does not work when entry.getValue() contains a list.",,davsclaus,mlehnert,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 02 07:19:49 UTC 2015,,,,,,,,,,,"0|i2671z:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"01/Mar/15 08:09;davsclaus;Can you provide an endpoint example which you think is wrong;;;","01/Mar/15 13:06;mlehnert;E.g. the endpoint
{code}http://www.example.com?a=RAW(value-a1)&b=RAW(value-b1)&b=RAW(value-b2){code}
is resolved to
{code}http://www.example.com?a=value-a1&b=RAW(value-b1)&b=RAW(value-b2){code}
The RAW(..) marker won't be removed when a query parameter occurs more than once in an endpoint, since the parameter map (map of <String,Object>) value is not an instance of java.lang.CharSequence but java.util.List.;;;","01/Mar/15 13:48;davsclaus;Ah thanks thats better to understand.;;;","01/Mar/15 14:42;davsclaus;Have a fix for this now.;;;","02/Mar/15 07:19;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http - Checking for host header is invalid,CAMEL-8411,12777866,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Feb/15 12:30,26/Feb/15 12:33,14/Jul/23 05:50,26/Feb/15 12:33,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-netty-http,camel-netty4-http,,,,,,0,,,,,,"See
http://camel.465427.n5.nabble.com/Camel-Netty-Http-HttpHeaders-case-sensitive-tp5763157.html

The names() should be removed as it transfers the headers to a linked hash map instead of checking directly using the netty http headers which is case insensitive.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-02-26 12:30:59.0,,,,,,,,,,,"0|i263bj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Kafka producer: when no message key specified, use partition key",CAMEL-8409,12777781,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,mmindenhall,mmindenhall,26/Feb/15 04:54,26/Feb/15 17:59,14/Jul/23 05:50,26/Feb/15 09:13,2.14.2,2.15.0,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-kafka,,,,,,,0,,,,,,"CAMEL-8190 has introduced behavior that has the potential to break existing code (hence setting to Critical priority so this can be fixed prior to 2.14.2/2.15.0 releases).  It broke my code (using 2.14.2-SNAPSHOT builds) in development and staging, and I didn't notice the problem until tonight.

Prior to CAMEL-8190, the value of the {{KafkaConstants.PARTITION_KEY}} header was used for both the {{key}} and {{partitionKey}} of the kafka {{KeyedMessage}}.  My downstream consumers depended on this for the correct {{key}} of the consumed message.  CAMEL-8190, changed things so the {{key}} is set only via the {{KafkaConstants.KEY}} header, and since my code didn't set that header, the {{key}} started coming through as {{null}} to downstream consumers.

I propose the following to fix this (will attach a patch shortly):
# If both {{KEY}} _and_ {{PARTITION_KEY}} are specified, no change from CAMEL-8190
# If just one is specified, call the {{KeyedMessage}} 3-argument constructor with the value (uses the value for both {{key}} and {{partitionKey}})
# If neither are specified, pass {{null}} for both...but IMHO, a warning should be logged, as it seems unlikely that the user knowingly omitted both values.
",,davsclaus,mmindenhall,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"26/Feb/15 06:19;mmindenhall;0001-CAMEL-8409-fix-for-breaking-change-introduced-by-CAM.patch;https://issues.apache.org/jira/secure/attachment/12700979/0001-CAMEL-8409-fix-for-breaking-change-introduced-by-CAM.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 26 16:28:25 UTC 2015,,,,,,,Patch Available,,,,"0|i262r3:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"26/Feb/15 09:08;davsclaus;Thanks will get the patch in, but for #3 can we not thrown an exception instead of logging a warn?;;;","26/Feb/15 16:28;mmindenhall;Hi Claus,

I think the whole point of CAMEL-8190 was that Camel was disallowing something allowed by kafka.  In this case, it's legal to pass null for both keys.  I can't think of a use case for wanting to do so, but it does allow more simple routes when prototyping.

For example, the following route would work, but log the warning:

{code}
from(""mqtt:bar?subscribeTopicName=test.mqtt.topic"")
  .to(""kafka:localhost:9092?someKafkaOptions"");
{code}

Whereas if we throw an exception the route would need to look more like this:

{code}
from(""mqtt:bar?subscribeTopicName=test.mqtt.topic"")
  .process(exchange -> exchange.getIn().setHeader(KafkaConstants.PARTITION_KEY, ""someKey""))
  .to(""kafka:localhost:9092?someKafkaOptions"");
{code}
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelOverruleFileName does not work correctly for remote file endpoints,CAMEL-8401,12777376,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pimlottc,pimlottc,25/Feb/15 01:06,26/Feb/15 13:02,14/Jul/23 05:50,26/Feb/15 13:02,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-ftp,,,,,,,0,,,,,,"According to the docs, when using CamelOverruleFileName, the original CamelFileName should be restored after the overruling name is used once.  This is not working when using a remote file endpoint, such as FTP.

From the description of CAMEL-5269, it seems like this worked once, but it doesn't seem to anymore.",,pimlottc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/Feb/15 01:07;pimlottc;RemoteFileProduceOverruleOnlyOnceTest.java;https://issues.apache.org/jira/secure/attachment/12700631/RemoteFileProduceOverruleOnlyOnceTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 25 01:24:36 UTC 2015,,,,,,,,,,,"0|i260af:",9223372036854775807,Regression,,,,,,,,,,,,,,,,,,,"25/Feb/15 01:24;pimlottc;See https://github.com/apache/camel/pull/408 for a quick fix
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle empty Salesforce picklist types,CAMEL-8395,12776939,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,23/Feb/15 20:41,23/Feb/15 22:30,14/Jul/23 05:50,23/Feb/15 22:30,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-salesforce,,,,,,,0,,,,,,Salesforce inbuilt/user customizable picklist types may be empty with no values defined. This breaks sobject-picklist.vm. It should instead generate an empty Enum with no values. ,,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 23 22:30:04 UTC 2015,,,,,,,,,,,"0|i25xw7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Feb/15 22:30;dhirajsb;Fixed on master and 2.14.x branches. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redelivery doesn't work correctly on Dynamic Routers,CAMEL-8393,12776771,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mtran,mtran,23/Feb/15 05:27,16/Sep/15 13:04,14/Jul/23 05:50,16/Sep/15 13:04,2.14.1,,,,,,,,,,,,,,2.16.0,,,,camel-core,,,,,,,0,,,,,,"When redelivery occurs for dynamic routers, the properties are being kept. So if the dynamic router uses a property to store the current state such as used in example http://camel.apache.org/dynamic-router.html , then the redelivery actually ends up skipping the endpoint that caused the exception

Here is my dynamic router class
{noformat}
public class Router {
	public String route(Exchange exchange) {
		Boolean invoked = exchange.getProperty(""invoked"", Boolean.class);
		if (invoked == null) {
			exchange.setProperty(""invoked"", true);
			return ""mock:route"";
		} else
			return null;
	}
}
{noformat}

Here is my unit test class

{noformat}
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(loader = CamelSpringDelegatingTestContextLoader.class)
public class DynamicRouterTest {

	@Produce(uri = ""direct:start"")
	private ProducerTemplate producerTemplate;

	@EndpointInject(uri = ""mock:end"")
	private MockEndpoint end;

	@EndpointInject(uri = ""mock:route"")
	private MockEndpoint route;

	@Configuration
	public static class JavaConfig extends SingleRouteCamelConfiguration {

		@Override
		public RouteBuilder route() {
			return new SpringRouteBuilder() {

				@Override
				public void configure() throws Exception {
					this.getContext().setTracing(true);
					from(""direct:start"").onException(IOException.class).maximumRedeliveries(-1).end()

					.dynamicRouter().method(Router.class).to(""mock:end"");
				}
			};
		}

	}

	@Test
	public void test() throws InterruptedException {
		route.whenAnyExchangeReceived(new Processor() {

			@Override
			public void process(Exchange exchange) throws Exception {
				exchange.getIn().setBody(""mock route"");
			}
		});
		route.expectedBodiesReceived(""before"");
		end.expectedBodiesReceived(""mock route"");

		producerTemplate.sendBody(""before"");
		route.assertIsSatisfied();
		end.assertIsSatisfied();
	}

	@Test
	public void test_exception() throws InterruptedException {
		route.whenExchangeReceived(1, new Processor() {

			@Override
			public void process(Exchange exchange) throws Exception {
				exchange.setException(new IOException());
			}
		});
		route.whenExchangeReceived(2, new Processor() {

			@Override
			public void process(Exchange exchange) throws Exception {
				exchange.getIn().setBody(""mock route"");
			}
		});

                // this bit fails
		route.expectedBodiesReceived(""before"", ""before"");

		end.expectedBodiesReceived(""mock route"");
		producerTemplate.sendBody(""before"");
		route.assertIsSatisfied();
		end.assertIsSatisfied();
	}
}
{noformat}

The test method runs successfully but the test_exception method which tests the redelivery does not. Fails with ""java.lang.AssertionError: mock://route Received message count. Expected: <2> but was: <1>"" which shows that the dynamic router only called the mock:route once.
	",mac,davsclaus,mtran,nkukhar,,,,,,,,,,,,,,,,,CAMEL-8587,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Advanced,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 16 13:04:57 UTC 2015,,,,,,,,,,,"0|i25wvb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Mar/15 13:44;davsclaus;Requires routing slip and dynamic router to include similar outbound error handling that we added to multicast/recipinentlist/splitter.

This requires a fair amount of work to incorporate in camel-core.;;;","16/Sep/15 13:04;davsclaus;Thanks for reporting;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"dumpRoutesAsXml should resolve ""from"" endpoint property values as with ""to"" endpoint URI",CAMEL-8382,12776409,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,westerg,westerg,20/Feb/15 10:07,20/Feb/15 10:33,14/Jul/23 05:50,20/Feb/15 10:33,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-core,,,,,,,0,,,,,,"We have defined our routes with property keys for all endpoints (""from"" and ""to""). When using the [dumpRoutesAsXml|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/api/management/mbean/ManagedCamelContextMBean.html#dumpRoutesAsXml()] operation we see that the ""from uri"" value is the property key, however the ""to uri"" has been resolved to the actual property value. 

For example, given a RouteBuilder like the following:
{code}
        from(""{{route1.uri}}"")
            .routeId(""myRoute"")
            .to(""{{route2.uri}}"")
{code}
dumpRoutesAsXml outputs the following:
{code}
    <route customId=""true"" id=""myRoute"">
        <from uri=""{{route1.uri}}""/>
        <to uri=""jms:myapp.route2"" id=""to2""/>
    </route>
{code}
where ""myapp.route2"" is the resolved value of ""route2.uri"".

Perhaps there is a good reason for this behaviour, but it appears to be inconsistent.",,davsclaus,westerg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 20 10:11:47 UTC 2015,,,,,,,,,,,"0|i25unj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"20/Feb/15 10:11;davsclaus;Yeah it should be similar.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
weaveAddLast does not work property when route ends with a split,CAMEL-8369,12775759,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pimlottc,pimlottc,17/Feb/15 22:27,18/Feb/15 08:38,14/Jul/23 05:50,18/Feb/15 08:38,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-core,,,,,,,0,,,,,,"When using AdviceWithRouteBuilder to modify a route definition, weaveAddLast does not work correctly when the route ends with a split.  It appears to add the additional components within the split, not afterwards.

See attached testcase.

Adding a trivial operation after the split in the original route builder fixes it.",,davsclaus,pimlottc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/Feb/15 22:29;pimlottc;WeaveAfterLastSplitTest.java;https://issues.apache.org/jira/secure/attachment/12699346/WeaveAfterLastSplitTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 18 07:28:09 UTC 2015,,,,,,,,,,,"0|i25qtz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Feb/15 07:28;davsclaus;Yeah last has to be last of the siblings - and not last of the children.

If you do this as a workaround then it works
{code}
weaveByType(SplitDefinition.class).after().log(""weaveAddLast: ${body}"").to(""mock:result"");
{code};;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelSWFWorkflowClient doesn't use custom configured DataConverter,CAMEL-8360,12775268,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,srnm,srnm,16/Feb/15 03:04,18/Feb/15 09:18,14/Jul/23 05:50,18/Feb/15 09:18,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-aws,,,,,,,0,,,,,,"CamelSWFWorkflowClient.getDynamicWorkflowClient :

{{DynamicWorkflowClientExternalImpl(workflowExecution, null, endpoint.getStartWorkflowOptions(), null, genericClient);}}

should be 

{{DynamicWorkflowClientExternalImpl(workflowExecution, null, endpoint.getStartWorkflowOptions(), configuration.getDataConverter(), genericClient);}}

?
",,davsclaus,srnm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 18 09:18:31 UTC 2015,,,,,,,,,,,"0|i25nuv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Feb/15 06:29;davsclaus;A patch is welcome;;;","18/Feb/15 09:15;srnm;I've submitted a pull request that completes the support for user-supplied DataConverter:
https://github.com/apache/camel/pull/398

This is my first patch to camel/camel-aws.
Please let me know if there is anything else I need to do to get the patch accepted?;;;","18/Feb/15 09:18;davsclaus;Thanks Steven for the PR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LinkedIn consumer endpoints have to specify an empty 'fields' parameter,CAMEL-8359,12775257,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dhirajsb,dhirajsb,dhirajsb,16/Feb/15 01:54,16/Feb/15 02:06,14/Jul/23 05:50,16/Feb/15 02:06,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,,,,,,,,0,camel,camel-linkedin,linkedin,,,"LinkedIn consumer endpoints that take a 'fields' parameter should not have to specify an empty value for the optional field. 
This field is handled for producer endpoints as its default value is set in LinkedInEndpoint.interceptProperties().
This field should be automatically set to null if the api method requires it in LinkedInConsumer.interceptPropertyNames(). ",,dhirajsb,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 16 02:06:36 UTC 2015,,,,,,,,,,,"0|i25nsf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Feb/15 02:06;dhirajsb;Fixed on master and camel-2.14.x branches;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid using Olingo2 library classes from 'core' package as it has been designated internal and not part of the API exposed using OSGi headers,CAMEL-8358,12775255,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dhirajsb,dhirajsb,dhirajsb,16/Feb/15 00:49,16/Feb/15 23:27,14/Jul/23 05:50,16/Feb/15 23:27,2.14.1,2.15.0,,,,,,,,,,,,,2.14.2,2.15.0,,,,,,,,,,0,camel,olingo2,,,,"Olingo2 library classes in 'core' are internal and should not be used. Even though the URI parser classes should really have been exposed through the public API. This includes a public URI parser URIInfo exposed through the api package, but its implementation URIInfoImpl is part of core and hence not exposed. 

This does not affect any public component classes in the Olingo2 component.  

See OLINGO-420. ",,dhirajsb,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 16 23:27:19 UTC 2015,,,,,,,,,,,"0|i25nrz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"16/Feb/15 23:27;dhirajsb;Fix committed to master and 2.14.x branches;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"IOConverter.toInputStream(file, charset) returns strange behaving stream",CAMEL-8356,12775129,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,almond,almond,14/Feb/15 12:05,26/Apr/19 07:09,14/Jul/23 05:50,03/Mar/15 02:06,2.14.1,2.15.0,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-core,,,,,,,0,,,,,,"Calling IOConverter.toInputStream with either UTF-8 or ISO-8859-1 returns a stream that behaves strange on non-ascii-characters:
- putting this stream into an InputStreamReader will return false encoded characters
- a naive new BufferedReader(new InputStreamReader(new FileInputStream(file), charset)) will return the correctly encoded characters.

I will attach some unit tests for this case.",,almond,davsclaus,githubbot,mvlakh,njiang,ssidashov,,,,,,,,,,,CAMEL-8346,,,,,,,,,,,,,,,,,,"28/Feb/15 12:49;almond;CAMEL8356-repaired-Test-and-adjusted-converter-imple.patch;https://issues.apache.org/jira/secure/attachment/12701581/CAMEL8356-repaired-Test-and-adjusted-converter-imple.patch","15/Feb/15 15:06;almond;IOConverterCharsetTest.java;https://issues.apache.org/jira/secure/attachment/12698984/IOConverterCharsetTest.java","14/Feb/15 12:13;almond;german.iso-8859-1.txt;https://issues.apache.org/jira/secure/attachment/12698901/german.iso-8859-1.txt","14/Feb/15 12:13;almond;german.utf-8.txt;https://issues.apache.org/jira/secure/attachment/12698902/german.utf-8.txt","03/Jun/15 10:08;ssidashov;result.txt;https://issues.apache.org/jira/secure/attachment/12737149/result.txt","03/Jun/15 10:08;ssidashov;source.txt;https://issues.apache.org/jira/secure/attachment/12737148/source.txt",,,,,,,6.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 26 07:09:26 UTC 2019,,,,,,,,,,,"0|i25n13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Feb/15 12:13;almond;I wanted to provide a patch, but the resulting patch also had charset problems. So the Test has to be deployed manually:
- The java file can be placed next to th IOConverterTest
- The text files have to be placed at the directory mentioned in the test

I can help to debug/patch this problem, when someone has confirmed this defect.;;;","14/Feb/15 12:16;almond;To fix CAMEL-8346 I suggest to use the GenericFileConverter.toInputStream, which is dependent on IOConverter.

Yet GenericFileConverter will not solve CAMEL-8346 because of this IOconvert.toInputStream problem.
;;;","15/Feb/15 06:45;njiang;When you consume the InputStream with a Reader, you need to specify the charset that reader use.
As IOconvert.toInputStream just return an InputStream back, it has no chance to use the charset information.
How about use IOconvert.toReader(File file, String charset) directly?
;;;","15/Feb/15 15:02;almond;How exactly is the specification of  IOconvert.toInputStream(File file, String charset)?

I expected that it transforms the file to a stream using the specified charset. In fact that method uses the charset (can be seen in the implementation), but the resulting stream delivers exactly the same byte sequence as the one without charset specification.

Using  IOconvert.toReader(File file, String charset) would be fine, but will not work for 2.14.x because it is not public in this branch. Besides this is a workaround, but the inconsistency of toInputStream stays.;;;","15/Feb/15 15:05;almond;The third unit test (I just replaced the old test file attachment) shows that the returned byte stream is the same as a pure FileInputStream.

This seems strange, because anybody can see that the implementation does use the specified charset. However the Streaming-Pipeline (Stream->BufferedReader->Stream) seems to loose it.

As I said - i can hunt this bug down, but yet I am not certain if a majority recognizes this behaviour as bug.;;;","23/Feb/15 19:12;githubbot;GitHub user almondtools opened a pull request:

    https://github.com/apache/camel/pull/406

    CAMEL-8356 IOConverter.toInputStream(file, charset) returns strange

    I extended some Unittests to point out the problems:
    - toReader(file, charset) does respect the charset
    - toStream(file, charset) does not respect the charset
    
    The provided Patch for IOConverter.toInputStream does respect the charset. I do not know if other projects already rely on the current behaviour that the charset is completely ignored.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/almondtools/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/406.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #406
    
----
commit 9020431e167c2f03d96597d3c598fd988b2b5f56
Author: Stefan Mandel <mandelst@gmail.com>
Date:   2015-02-14T17:31:37Z

    CAMEL-8356 IOConverter.toInputStream(file, charset) returns strange
    behaving stream

----
;;;","28/Feb/15 00:34;njiang;Applied the patch into camel-core with thanks to Stefan.;;;","28/Feb/15 12:47;almond;I reviewed your patch and I think we both made a mistake.

My intension was to provide an Inputstream which could be read by any unparameterized reader / wrapper stream. I will attach a patch for the tests and a fix for IOConverter.toInputStream.

Your cleanup made obvious that my fix converts the stream to UTF-8, which could only be read by readers with UTF-8 (instead of default) input encoding.

The attachment will fix CAMEL-8346 for branch 2.14 but unfortunately breaks branch 2.15. You cannot apply this attachment to branch 2.15.x without another fix for CAMEL-8346.

Notify me if you want to apply this patch. I will try to provide a patch for CAMEL-8346 on branch 2.15.x then.




;;;","28/Feb/15 12:49;almond;The proposed patch. Note that this patch needs another patch in JsonPathEngine (camel-jsonpath, only in the branches 2.15.x and newer), because the used JsonProvider expects a ""UTF-8""-stream (and not a default-encoded stream).;;;","01/Mar/15 08:13;davsclaus;We would need a patch for 2.15 as a release is scheduled soon.;;;","01/Mar/15 11:11;githubbot;Github user almondtools closed the pull request at:

    https://github.com/apache/camel/pull/406
;;;","01/Mar/15 11:43;githubbot;GitHub user almondtools opened a pull request:

    https://github.com/apache/camel/pull/412

    CAMEL-8356 corrections to default charset

    this pull request contains:
    - corrections to IOConverter as described in issue CAMEL-8356
    - unit tests for json path (related to CAMEL-8346)
    - the fix for CAMEL-8346 (ported from master)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/almondtools/camel CAMEL-8356-2.14.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/412.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #412
    
----
commit 7f6538cb1b30a80eef3f743d0f9e98b3e7b8f1bc
Author: Stefan Mandel <mandelst@gmail.com>
Date:   2015-03-01T11:26:15Z

    CAMEL-8356 corrections to default charset

----
;;;","01/Mar/15 11:46;githubbot;GitHub user almondtools opened a pull request:

    https://github.com/apache/camel/pull/413

    CAMEL-8356 corrections to default charset

    this pull request contains:
    
    * corrections to IOConverter as described in issue CAMEL-8356
    * the fix for CAMEL-8346 adjusted to the the fix of CAMEL-8356
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/almondtools/camel CAMEL-8356-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/413.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #413
    
----
commit 55607d14787f574825e309a975659861e7d6ead4
Author: Stefan Mandel <mandelst@gmail.com>
Date:   2015-03-01T11:26:15Z

    CAMEL-8356 corrections to default charset

----
;;;","01/Mar/15 11:53;almond;I just proposed two pull requests, for each affected branch (2.14 and 2.15).

Yet the fixes to jsonpath are included. I considered this best, because the fixes are not independent. If you suggest another partitioning of the commits I can adjust them.;;;","02/Mar/15 05:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/412
;;;","03/Mar/15 02:06;njiang;Applied the patch into camel master and camel-2.14.x branches.;;;","03/Mar/15 10:12;githubbot;Github user almondtools closed the pull request at:

    https://github.com/apache/camel/pull/413
;;;","02/Jun/15 05:03;ssidashov;It seems encoding problem with IOConverter still exists. I try to load text file in cp1251 encoding, using file component (uri=file:C:\addr\in\?charset=cp1251 for example). Then I write bean with method:

public static String convertStreamToString(InputStream inputStream) throws IOException {
        if (inputStream == null) return null;
        StringBuilder sb = new StringBuilder(2048); // Define a size if you have an idea of it.
        char[] read = new char[128]; // Your buffer size.
        try (InputStreamReader ir = new InputStreamReader(inputStream, ""cp1251"")) {
            for (int i; -1 != (i = ir.read(read)); sb.append(read, 0, i));
        } catch (Throwable t) {}
        return sb.toString();
    }
to test conversion from File to InputStream. This stream for some files reads all content successfully, but for some files it clips contents of file. It seems file reading ends with some characters (for example, in cp1251 encoding, file reading ends with characters 'яя'). Camel version 2.15.2, java version 1.8.0_45.;;;","03/Jun/15 07:17;njiang;[~ssidashov]
I just found you use char array as buffer to read the stream, what if the read method just read more than 128 character. Can you submit a simple test case for us to dig the issue?;;;","03/Jun/15 10:08;ssidashov;source.txt - original file with non-ascii characters
result.txt - file processed by route

files in cp1251 encoding

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:context=""http://www.springframework.org/schema/context""
       xmlns:tx=""http://www.springframework.org/schema/tx"" xmlns:jaxws=""http://cxf.apache.org/jaxws""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""file:C:\\test\\in?charset=cp1251""/>
            <!--<convertBodyTo type=""String""></convertBodyTo>-->
            <convertBodyTo type=""java.io.InputStream""/>
            <to uri=""file:C:\\test\\out""/>
        </route>
    </camelContext>
</beans>

when I uncomment conversion to String step then file processed and copied entirely. When step is commented, file clipped to position of 'яя' symbols.;;;","26/Apr/19 07:09;mvlakh;Hello [~njiang],

I have a question regarding this issue and the way it was fixed. It seems like there is a defect or maybe I do not understand something, maybe you can help me?

The issue is the following, I have a file consumer that I use to process XML files with UTF-8 charset. In my processor I am taking content of an incoming file like this:
{code:java}
exchange.getIn().getBody(InputStream.class){code}
and then I am passing it to XML parser together with configured charset (UTF-8) to make sure that reader, that is used by XML parser, will consume binary stream correctly. 

The issue is that if default system charset is not UTF-8 (valid case for my application) I am getting question marks instead of Chinese characters. 

After some debugging I found a strange thing, the converted, which is used to give me file body as InputStream, org.apache.camel.converter.IOConverter.toInputStream(File, String) does something strange, it reads characters from the file and them encodes them into system's default charset. This blew my mind, this looks wrong.

When I take body as InputStream I am expecting to get a binary stream, not a re-encoded characters stream. The current behavior seems totally unexpected to me.

Thank you for your answer in advance. 

 ;;;",,,,,,,,,,,
Dynamicity flag on Mongodb endpoint run a dropIndex() command on specified collection,CAMEL-8355,12775127,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,Sufod,Sufod,14/Feb/15 10:30,16/Feb/15 13:45,14/Jul/23 05:50,14/Feb/15 13:40,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-mongodb,,,,,,,0,,,,,,"Using ""dynamicity=true"" on MongoDb endpoint is running a dropIndex command on the specified collection (CamelMongoDbCollection header), for each exchange going through. ",,acosentino,davsclaus,githubbot,Sufod,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 16 13:45:24 UTC 2015,,,,,,,,,,,"0|i25n0n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Feb/15 11:55;githubbot;GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/395

    CAMEL-8355 Dynamicity flag on Mongodb endpoint run a dropIndex() command on specified collection

    Hi all,
    
    This PR is related to the following issue:
    https://issues.apache.org/jira/browse/CAMEL-8355
    
    Thanks.
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel CAMEL-8355-Dynamicity-flag-mongodb-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/395.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #395
    
----
commit f70af503d811c54874c414b335c36a12458cba57
Author: ancosen <ancosen@gmail.com>
Date:   2015-02-14T11:51:10Z

    Fix CAMEL-8355 issue. The mongoDB endpoint was deleting all the indexes when setting dynamicity parameter to true

----
;;;","14/Feb/15 11:58;acosentino;PR submitted:

https://github.com/apache/camel/pull/395/

Andrea;;;","14/Feb/15 12:04;Sufod;Thanks :);;;","14/Feb/15 12:05;acosentino;It was a very weird behaviour. I ran all the tests with this fix and everything seems ok.;;;","14/Feb/15 12:07;Sufod;https://github.com/apache/camel/pull/395;;;","14/Feb/15 12:08;acosentino;Wait for the merge before change the state to ""Resolved"".;;;","14/Feb/15 13:40;davsclaus;Thanks for the PR;;;","16/Feb/15 13:45;githubbot;Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/395
;;;",,,,,,,,,,,,,,,,,,,,,,,,
FileLockExclusiveReadLockStrategy - Should defer closing channel till release lock,CAMEL-8353,12775115,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Feb/15 08:12,28/Feb/15 07:34,14/Jul/23 05:50,15/Feb/15 08:17,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-core,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/FileLockExclusiveReadLockStrategy-doesn-t-hold-lock-and-error-on-commit-tp5762668.html

The acquire lock method closes the channel if it acquired the lock, but that would make the lock invalid. Instead the channel should remain open and only closed when the lock is released.",,almond,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Feb 28 07:34:35 UTC 2015,,,,,,,,,,,"0|i25my7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Feb/15 07:29;almond;The current file contains a lock.acquiredBy() which is not available in jdk 1.6, but in jdk 1.7.

The maven master pom.xml contains the maven compiler plugin configured to 1.6 on branch 1.14.2. 1.14.x-SNAPSHOT yet is not compiling in my workspace.;;;","28/Feb/15 07:34;davsclaus;Java 6 is dropped / NOT supported on 2.14 onwards. 
http://camel.apache.org/camel-2140-release.html

The pom.xml was forgotten to be updated.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NettyServerBossPoolBuilder build() method is package-protected,CAMEL-8352,12775056,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mmindenhall,mmindenhall,13/Feb/15 22:48,18/Feb/15 07:20,14/Jul/23 05:50,18/Feb/15 07:20,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-netty,camel-netty4,,,,,,0,,,,,,"The user documentation for camel-netty4 discusses creating worker and boss thread pools that are shared across camel-netty4 consumers.  I am trying to do this, but discovered that the NettyServerBossPoolBuilder.build() method is package-protected, and I am therefore unable to use this builder to create the shared boss pool.  Unit tests pass because the tests are within the same package, but the method needs to be public for anyone else to use.",,davsclaus,mmindenhall,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 18 07:20:41 UTC 2015,,,,,,,,,,,"0|i25mkf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"14/Feb/15 15:28;davsclaus;Thanks for reporting, are you working on a patch?;;;","14/Feb/15 15:29;davsclaus;You can of course build the poll using pure netty api without using this builder, eg creating a NioServerBossPool;;;","17/Feb/15 22:47;mmindenhall;Hi [~davsclaus], I did submit a patch for another issue I reported a few weeks back.  However, in this case, the number of keystrokes required to apply a patch exceed the number of keystrokes required to make the fix (i.e., just adding ""public"" modifier to the method)!;;;","18/Feb/15 07:20;davsclaus;Ya this is a minor, but easier for users to dive into and help contribute if they want to learn the robes.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JsonPathEngine skips file encoding,CAMEL-8346,12774804,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,almond,almond,13/Feb/15 06:26,04/Mar/15 06:53,14/Jul/23 05:50,04/Mar/15 06:53,2.14.1,2.15.0,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-jsonpath,,,,,,,0,,,,,,"This occurs if one uses the camel file component with a charset parameter, e.g. file:/url?charset=UTF-8. It leads to strange effects:
# testing the same utf8-file under linux (default encoding:UTF-8) and german windows (default encoding:windows-1252) leads to problems with german umlauts.
# using a file in another encoding than the default (ISO-8859-1 on linux) leads also to problems with german umlauts.

- Both problems can be reproduced with the attached unit test files in 2.14.1.
- Problem 1 is hidden in 2.15-SNAPSHOT, because UTF-8 is hard-coded as file encoding (maybe ok, since JSON is almost never used with language specific encondings), Problem 2 also occurs in 2.15-SNAPSHOT

I can provide or help with a fix (or pull request), if these problems are classified as true defects.



",,almond,davsclaus,githubbot,njiang,,,,,,,,,,,,CAMEL-8356,,,,,,,,,,,,,,,,,,,"13/Feb/15 06:28;almond;JsonPathSourceTest.java;https://issues.apache.org/jira/secure/attachment/12698653/JsonPathSourceTest.java","13/Feb/15 06:28;almond;germanbooks-iso-8859-1.json;https://issues.apache.org/jira/secure/attachment/12698651/germanbooks-iso-8859-1.json","13/Feb/15 06:28;almond;germanbooks-utf8.json;https://issues.apache.org/jira/secure/attachment/12698652/germanbooks-utf8.json",,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 04 06:53:06 UTC 2015,,,,,,,,,,,"0|i25l0n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Feb/15 06:28;almond;The attached files put in the jsonpath test/resources directory will reproduce the problems in 2.14.1 and 2.15.x-SNAPSHOT;;;","13/Feb/15 08:45;davsclaus;You are welcome to work on a patch;;;","13/Feb/15 08:46;davsclaus;And you can always use .convertBodyTo(String.class, ""iso-8859-1"") or whatever to load the content using that charset.;;;","13/Feb/15 15:23;almond;I know of this workaround (it works). I also tried with .convertBodyTo(InputStream.class, ""iso-8859-1"") but this won't work.

I expect that the workaround is fine for small files, but not so robust on large files since the complete file is loaded into memory. This may be a theoretical problem, because I actually do not know how the Jsonpathengine acts on streams.

I think a fix should consider first to the configured file charset, then to the JSON-default-Encoding (as implemented in 2.15.x) and never to the System-charset-encoding. Do you agree?;;;","14/Feb/15 09:07;almond;To fix it I would best rely on existing converters, e.g. GenericFileConverter.genericFileToInputStream. Unfortunately this also does not care of charsets, because IOConverter.toInputStream(File, Charset) seems to have a problem.

I inserted a ""blocks""-Link between this issue and the related issue in IOConverter.toInputStream(File, Charset);;;","24/Feb/15 06:21;almond;A pull request for the problem with IOConverter.toInputStream CAMEL-8356 has been proposed. Based on this I could immediately provide a patch for JsonPathEngine, either as pull request or as attachment to this issue. Are there any preferences?;;;","26/Feb/15 12:59;davsclaus;Yeah a PR or attachment is good as CAMEL-8356 has been merged I believe. Then we can slip it in for the 2.14.2 release.;;;","26/Feb/15 21:14;githubbot;GitHub user almondtools opened a pull request:

    https://github.com/apache/camel/pull/410

    CAMEL-8346

    The pull request contains also the patch to IOConverter, which is a separate pull request CAMEL-8356.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/almondtools/camel CAMEL-8346

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/410.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #410
    
----
commit c213e65ee1bdb446f569dfdfe4950e7df85ce2bb
Author: Stefan Mandel <mandelst@gmail.com>
Date:   2015-02-14T17:31:37Z

    CAMEL-8356 IOConverter.toInputStream(file, charset) returns strange
    behaving stream

commit a9eb53b97df31face1d7fed860b94f8bee23065a
Author: Stefan Mandel <mandelst@gmail.com>
Date:   2015-02-26T20:04:36Z

    CAMEL-8346 JsonPathEngine skips file encoding

----
;;;","27/Feb/15 08:26;njiang;Hi Stefan,

I just tried to apply the patch, but the test of testPriceResultTypeOnGenericFileISO88591 is failed.
{code}
java.lang.AssertionError: Assertion error at index 0 on mock mock://title with predicate: Simple: body == Joseph und seine Brüder evaluated as: Joseph und seine Br�der == Joseph und seine Brüder on Exchange[Message: Joseph und seine Br�der]
	at org.apache.camel.util.PredicateAssertHelper.assertMatches(PredicateAssertHelper.java:43)
	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:106)
	at org.apache.camel.component.mock.MockEndpoint$17.run(MockEndpoint.java:958)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:410)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:378)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:366)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:204)
	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)
	at org.apache.camel.jsonpath.JsonPathSourceTest.testPriceResultTypeOnGenericFileISO88591(JsonPathSourceTest.java:92)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)


{code}
Can you double check it in you system?;;;","27/Feb/15 20:37;almond;My workspace (forked on github) does not fail. I tried it on two independent windows systems.

Have you applied the patch CAMEL-8356? It has not yet been closed or commented. The error you describe occurs if CAMEL-8356 is not applied (it blocks this issue).

Other possible reasons:

The patch is based on (2.15-SNAPSHOT). 2.14 is a bit buggier because the used json path lib version is buggy. I think I can propose a patch for 2.14 too, but it would probably not be the same patch.

I tried to create a patch on my local windows system. The process charset-encoding + git -> create patch -> apply patch produces corrupt files. This lead to multiple unit test errors on my machine, but maybe linux or mac-os behave in other ways. In this case download the attached json files and overwrite the existing ones in your workspace.;;;","28/Feb/15 00:37;njiang;Hi Stefan,

I didn't use the git pull to merge the patch because your PR has the patch of CAMEL-8356, I had apply the patch file myself. It looks like a git patch file issue, when I apply the json file which I download from this JIRA, the test doesn't fail anymore. Please only send one PR per one JIRA, if you have another patch you can create another branch for it.

I just tried to back port the patch into camel-2.14.x branch, but as you said it didn't work, I have to leave the work here to cut the camel-2.14.2 now.

Regards,

Willem;;;","01/Mar/15 18:44;githubbot;Github user almondtools closed the pull request at:

    https://github.com/apache/camel/pull/410
;;;","04/Mar/15 06:53;njiang;Applied patch into camel master and camel-2.14.x branches.;;;",,,,,,,,,,,,,,,,,,,
Too restrictive OSGi Headers (blocks Spring 4 upgrade),CAMEL-8344,12774631,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mjungsbluth,mjungsbluth,12/Feb/15 17:13,13/Feb/15 03:20,14/Jul/23 05:50,13/Feb/15 01:37,,,,,,,,,,,,,,,2.15.0,,,,camel-cxf,camel-spring,,,,,,0,,,,,,"Camel now officially supports Spring 4 yet the Manifest headers specify a verion < 4
Ideally the version range should be [3.x.x,5) at least camel-spring and camel-cxf are affected. See also CAMEL-7861",,mjungsbluth,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 13 01:37:09 UTC 2015,,,,,,,,,,,"0|i25jyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Feb/15 01:37;njiang;Spring version range is changed in the camel master branch, it should be fixed in Camel 2.15.0.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Usage of camel-rss depends on TCCL,CAMEL-8341,12774553,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tdiesler,tdiesler,12/Feb/15 12:44,13/Feb/15 08:36,14/Jul/23 05:50,12/Feb/15 15:00,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-rss,,,,,,,0,,,,,,"{code}
13:38:05,211 WARN  [org.apache.camel.component.rss.RssEntryPollingConsumer] (Camel (camel-2) thread #0 - rss://https://developer.jboss.org/blogs/feeds/posts) Consumer Consumer[rss://https://developer.jboss.org/blogs/feeds/posts?splitEntries=true] failed polling endpoint: Endpoint[rss://https://developer.jboss.org/blogs/feeds/posts?splitEntries=true]. Will try again at next poll. Caused by: [java.lang.ExceptionInInitializerError - null]: java.lang.ExceptionInInitializerError
	at com.sun.syndication.io.SyndFeedInput.build(SyndFeedInput.java:123)
	at org.apache.camel.component.rss.RssUtils.createFeed(RssUtils.java:34) [camel-rss-2.14.1.jar:2.14.1]
	at org.apache.camel.component.rss.RssEntryPollingConsumer.createFeed(RssEntryPollingConsumer.java:54) [camel-rss-2.14.1.jar:2.14.1]
	at org.apache.camel.component.feed.FeedEntryPollingConsumer.poll(FeedEntryPollingConsumer.java:47) [camel-atom-2.14.1.jar:2.14.1]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187) [camel-core-2.14.1.jar:2.14.1]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114) [camel-core-2.14.1.jar:2.14.1]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [rt.jar:1.8.0_31]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [rt.jar:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [rt.jar:1.8.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [rt.jar:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [rt.jar:1.8.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [rt.jar:1.8.0_31]
	at java.lang.Thread.run(Thread.java:745) [rt.jar:1.8.0_31]
Caused by: java.lang.NullPointerException
	at java.util.Properties$LineReader.readLine(Properties.java:434) [rt.jar:1.8.0_31]
	at java.util.Properties.load0(Properties.java:353) [rt.jar:1.8.0_31]
	at java.util.Properties.load(Properties.java:341) [rt.jar:1.8.0_31]
	at com.sun.syndication.io.impl.PropertiesLoader.<init>(PropertiesLoader.java:74)
	at com.sun.syndication.io.impl.PropertiesLoader.getPropertiesLoader(PropertiesLoader.java:46)
	at com.sun.syndication.io.impl.PluginManager.<init>(PluginManager.java:54)
	at com.sun.syndication.io.impl.PluginManager.<init>(PluginManager.java:46)
	at com.sun.syndication.feed.synd.impl.Converters.<init>(Converters.java:40)
	at com.sun.syndication.feed.synd.SyndFeedImpl.<clinit>(SyndFeedImpl.java:59)
{code}

This is because of rome PropertiesLoader

{code}
    public static PropertiesLoader getPropertiesLoader() {
        synchronized(PropertiesLoader.class) {
            PropertiesLoader loader = (PropertiesLoader)
                clMap.get(Thread.currentThread().getContextClassLoader());
            if (loader == null) {
                try {
                    loader = new PropertiesLoader(MASTER_PLUGIN_FILE, EXTRA_PLUGIN_FILE);
                    clMap.put(Thread.currentThread().getContextClassLoader(), loader);
                }
                catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
            return loader;
        }
    }
{code}",,githubbot,njiang,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 13 08:36:47 UTC 2015,,,,,,,,,,,"0|i25jhj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Feb/15 13:11;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/392

    [CAMEL-8341] Usage of camel-rss depends on TCCL

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel camel-8341

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/392.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #392
    
----
commit 4b5a273b180457c6795bdb4b4b87d55ba7d5ff39
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-02-12T13:10:11Z

    [CAMEL-8341] Usage of camel-rss depends on TCCL

----
;;;","12/Feb/15 15:00;njiang;Applied the patch into camel master and camel-2.14.x branches with thanks to Thomas.;;;","13/Feb/15 08:36;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/392
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Usage of camel-mail depends on TCCL,CAMEL-8339,12774526,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tdiesler,tdiesler,12/Feb/15 10:33,14/Feb/15 12:21,14/Jul/23 05:50,12/Feb/15 14:48,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-mail,,,,,,,0,,,,,,"javax.mail.Session uses TCCL to load resources

{code}
Thread.getContextClassLoader() line: 1432 [local variables unavailable]	
Session$3.run() line: 1199	
AccessController.doPrivileged(PrivilegedAction<T>) line: not available [native method]	
Session.getContextClassLoader() line: 1194	
Session.loadAllResources(String, Class, StreamLoader) line: 1137	
Session.loadProviders(Class) line: 917	
Session.<init>(Properties, Authenticator) line: 216	
Session.getInstance(Properties, Authenticator) line: 242	
MailConfiguration.createJavaMailSender() line: 175	
MailEndpoint.createProducer() line: 71	
{code}

Both MailConfiguration & MailProducer seem to rely on this",,githubbot,njiang,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Feb 14 12:21:41 UTC 2015,,,,,,,,,,,"0|i25jbj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Feb/15 10:38;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/391

    [CAMEL-8339] Usage of camel-mail depends on TCCL

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel camel-8339

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/391.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #391
    
----
commit 7ac534ca848cfc7b8d8ef10d31e4c1fb6f8e37d2
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-02-12T10:34:13Z

    [CAMEL-8339] Usage of camel-mail depends on TCCL

----
;;;","12/Feb/15 14:48;njiang;Applied the patch into camel master and camel-2.14.x branches with thanks to Thomas.;;;","14/Feb/15 12:21;githubbot;Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/391
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScriptBuilder relies on TCCL to discover engines,CAMEL-8338,12774498,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdiesler,tdiesler,12/Feb/15 09:17,12/Feb/15 09:40,14/Jul/23 05:50,12/Feb/15 09:40,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-script,,,,,,,0,,,,,,"ScriptBuilder uses javax.script.ScriptEngineManager default ctor, which does 

{code}
    public ScriptEngineManager() {
        ClassLoader ctxtLoader = Thread.currentThread().getContextClassLoader();
        init(ctxtLoader);
    }
{code}

This means we can only discover script engines that are visible on the TCCL",,davsclaus,githubbot,tdiesler,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 12 09:40:06 UTC 2015,,,,,,,,,,,"0|i25j5j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"12/Feb/15 09:23;githubbot;GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/390

    [CAMEL-8338] ScriptBuilder relies on TCCL to discover engines

    https://issues.apache.org/jira/browse/CAMEL-8338

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel camel-8338

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/390.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #390
    
----
commit 28acb568489f78cee4278059d7f9ab8f1cca1d21
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-02-12T09:20:16Z

    [CAMEL-8338] ScriptBuilder relies on TCCL to discover engines

----
;;;","12/Feb/15 09:36;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/390
;;;","12/Feb/15 09:40;davsclaus;Thanks for the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"XML Signature: XAdES: Wrong value for attribute ""Qualifier"" of element CommitmentTypeId",CAMEL-8336,12774196,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,11/Feb/15 12:44,11/Feb/15 17:46,14/Jul/23 05:50,11/Feb/15 17:46,2.15.0,,,,,,,,,,,,,,2.15.0,,,,camel-xmlsecurity,,,,,,,0,,,,,,"If you specify in the XAdES Properties a value of the attribute
attribute ""Qualifier"" of the element ""CommitmentTypeId"" then this value is not used, instead wrongly the value of the  DataObjectFormatIdentifierQualifier is used. ",,davsclaus,forsthofer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/Feb/15 12:46;forsthofer;0001-xades-CommitmentTypeIdQualifier-corrected.patch;https://issues.apache.org/jira/secure/attachment/12698077/0001-xades-CommitmentTypeIdQualifier-corrected.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 11 17:46:26 UTC 2015,,,,,,,Patch Available,,,,"0|i25hbj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Feb/15 17:46;davsclaus;Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - May not propagate headers for operations with no resultset,CAMEL-8329,12773737,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Feb/15 08:40,10/Feb/15 08:47,14/Jul/23 05:50,10/Feb/15 08:47,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-sql,,,,,,,0,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-SQL-CamelSqlRetrieveGeneratedKeys-attribute-delete-all-headers-tp5762512.html


",,davsclaus,fabryprog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-02-10 08:40:05.0,,,,,,,,,,,"0|i25eun:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ContextTestSupport does not support weaveByType in test cases,CAMEL-8327,12773488,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jgoodyear,jgoodyear,09/Feb/15 16:13,10/Feb/15 07:29,14/Jul/23 05:50,10/Feb/15 07:29,2.13.3,2.14.1,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-core,,,,,,,1,,,,,,"Update AdviceWithTypeTest test class to contain the below. On Camel-2.13.2 and below the test case would pass, on 2.13.3 and above the test case fails.

{code:title=AdviceWithTypeTest.java|borderStyle=solid}
    public void testUnknownType2() throws Exception {
       
        context.getRouteDefinitions().get(0).adviceWith(context, new AdviceWithRouteBuilder() {
            @Override
            public void configure() throws Exception {
                weaveByType(ChoiceDefinition.class).replace().to(""mock:baz"");
            }
        });
       
        getMockEndpoint(""mock:baz"").expectedMessageCount(1);
        template.sendBody(""direct:start"", ""World"");
        assertMockEndpointsSatisfied();
    }
 
 
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                // START SNIPPET: e5
                from(""direct:start"")
                    .transform(simple(""Hello ${body}""))
                    .log(""Got ${body}"")
                    .to(""mock:result"")
                    .choice()
                    .when(header(""foo"").isEqualTo(""bar""))
                       .to(""mock:resultA"")
                    .otherwise()
                       .to(""mock:resultB"");
                // END SNIPPET: e5
            }
        };
    }
{code}",,davsclaus,jgoodyear,mikek753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 10 07:29:47 UTC 2015,,,,,,,,,,,"0|i25dcn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Feb/15 07:29;davsclaus;Thanks for reporting. As a workaround you can use any of the other weaveBy to match the choice, such as by id = choice1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Project created from camel-blueprint-archetype does not work,CAMEL-8326,12773437,Bug,Closed,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,09/Feb/15 12:35,10/Feb/15 14:10,14/Jul/23 05:50,10/Feb/15 14:10,2.13.3,2.14.1,,,,,,,,,,,,,,,,,osgi,tooling,,,,,,0,,,,,,"When we launch the camel:run maven goal created from a project created using the archetype :

org.apache.camel.archetypes:camel-archetype-blueprint (Creates a new Camel project with OSGi blueprint support. Ready to be deployed in OSGi.)

then it fails

{code}
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=de.kalpatec.pojosr.framework, Bundle-Vendor=kalpatec, Bundle-Version=0.2.1
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [4], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [25], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [4], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [25], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [15], symbolicName: org.apache.aries.proxy.impl
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423485067188
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:240)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:202)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:104)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
	... 6 more
{code}

Issue reported with camel : 2.14.1 & also 2.13.3",,cmoulliard,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/Feb/15 08:27;cmoulliard;test.zip;https://issues.apache.org/jira/secure/attachment/12697686/test.zip",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 10 14:10:58 UTC 2015,,,,,,,,,,,"0|i25d1b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Feb/15 05:59;davsclaus;What version of Karaf do you use? ;;;","10/Feb/15 07:45;cmoulliard;When camel:run is launched with the option use Blueprint, then the Camel Main class part of camel-test-blueprint project uses the PoJoSR framework and not Karaf with Pax WEB. Here is how the Main class of the project camel-test-blueprint calls the Camel to create the Bundle Context :

https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/Main.java#L136 &
https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java#L105;;;","10/Feb/15 07:50;davsclaus;Works fine for me, just created using Camel 2.14.1 and 2.15-SNAPSHOT

Here is 2.14.1
{code}
davsclaus:~/Documents/workspace/blue/$ mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.14.1:run (default-cli) > test-compile @ blue >>>
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ blue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ blue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] <<< camel-maven-plugin:2.14.1:run (default-cli) < test-compile @ blue <<<
[INFO]
[INFO] --- camel-maven-plugin:2.14.1:run (default-cli) @ blue ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-api/1.0.2/deltaspike-core-api-1.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-api/1.0.2/deltaspike-core-api-1.0.2.pom (2 KB at 2.0 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-impl/1.0.2/deltaspike-core-impl-1.0.2.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-impl/1.0.2/deltaspike-core-impl-1.0.2.pom (3 KB at 19.9 KB/sec)
Downloading: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-api/1.0.2/deltaspike-core-api-1.0.2.jar
Downloading: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-impl/1.0.2/deltaspike-core-impl-1.0.2.jar
Downloaded: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-impl/1.0.2/deltaspike-core-impl-1.0.2.jar (120 KB at 551.3 KB/sec)
Downloaded: https://repo.maven.apache.org/maven2/org/apache/deltaspike/core/deltaspike-core-api/1.0.2/deltaspike-core-api-1.0.2.jar (210 KB at 562.6 KB/sec)
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle blue is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is starting
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: Endpoint[timer://foo?period=5000]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Total 1 routes, of which 1 is started.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) started in 0.345 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 08:49:16
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 08:49:21
^C[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutting down
[                      Thread-1] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete, was consuming from: Endpoint[timer://foo?period=5000]
[                      Thread-1] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) uptime 7.410 seconds
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutdown in 0.011 seconds
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle blue
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[                      Thread-1] Activator                      INFO  Camel activator stopping
[                      Thread-1] Activator                      INFO  Camel activator stopped
[                      Thread-1] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423554553187
{code}

Have you changed anything in the generate code? ;;;","10/Feb/15 08:25;cmoulliard;No. Here is the procedure followed :

{code}
mvn archetype:generate
[INFO] Scanning for projects...
Downloading: http://repository.jboss.org/nexus/content/groups/public/org/codehaus/mojo/maven-metadata.xml
Downloading: http://repository.jboss.org/nexus/content/groups/public/org/apache/maven/plugins/maven-metadata.xml
Downloaded: http://repository.jboss.org/nexus/content/groups/public/org/apache/maven/plugins/maven-metadata.xml (10 KB at 16.8 KB/sec)
Downloaded: http://repository.jboss.org/nexus/content/groups/public/org/codehaus/mojo/maven-metadata.xml (23 KB at 30.7 KB/sec)
Downloading: http://repository.jboss.org/nexus/content/groups/public/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml
Downloaded: http://repository.jboss.org/nexus/content/groups/public/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml (794 B at 2.1 KB/sec)
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> maven-archetype-plugin:2.2:generate (default-cli) > generate-sources @ standalone-pom >>>
[INFO]
[INFO] <<< maven-archetype-plugin:2.2:generate (default-cli) < generate-sources @ standalone-pom <<<
[INFO]
[INFO] --- maven-archetype-plugin:2.2:generate (default-cli) @ standalone-pom ---
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
Choose archetype:
1: remote -> am.ik.archetype:msgpack-rpc-jersey-blank-archetype (Blank Project for Spring Boot + Jersey)
2: remote -> am.ik.archetype:spring-boot-blank-archetype (Blank Project for Spring Boot)
3: remote -> am.ik.archetype:spring-boot-docker-blank-archetype (Docker Blank Project for Spring Boot)
4: remote -> am.ik.archetype:spring-boot-jersey-blank-archetype (Blank Project for Spring Boot + Jersey)
5: remote -> br.com.address.archetypes:struts2-archetype (an archetype web 3.0 + struts2 (bootstrap + jquery) + JPA 2.1 with struts2 login system)
...

460: remote -> org.apache.camel:camel-component (-)
461: remote -> org.apache.camel:camel-router (-)
462: remote -> org.apache.camel.archetypes:camel-archetype-activemq (Creates a new Camel project that configures and interacts with ActiveMQ.)
463: remote -> org.apache.camel.archetypes:camel-archetype-api-component (Creates a new Camel component that wraps one or more API proxies.)
464: remote -> org.apache.camel.archetypes:camel-archetype-blueprint (Creates a new Camel project with OSGi blueprint support. Ready to be deployed in OSGi.)
...

Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 525: 464
Choose org.apache.camel.archetypes:camel-archetype-blueprint version:
1: 2.8.0
...
41: 2.14.0
42: 2.14.1
43: 2.15-SNAPSHOT
Choose a number: 43: 42
Define value for property 'groupId': : org.apache.camel
Define value for property 'artifactId': : test
Define value for property 'version':  1.0-SNAPSHOT: :
Define value for property 'package':  org.apache.camel: :
[INFO] Using property: camel-version = 2.14.1
[INFO] Using property: log4j-version = 1.2.17
[INFO] Using property: maven-bundle-plugin-version = 2.3.7
[INFO] Using property: maven-compiler-plugin-version = 2.5.1
[INFO] Using property: maven-resources-plugin-version = 2.6
[INFO] Using property: slf4j-version = 1.7.7
Confirm properties configuration:
groupId: org.apache.camel
artifactId: test
version: 1.0-SNAPSHOT
package: org.apache.camel
camel-version: 2.14.1
log4j-version: 1.2.17
maven-bundle-plugin-version: 2.3.7
maven-compiler-plugin-version: 2.5.1
maven-resources-plugin-version: 2.6
slf4j-version: 1.7.7
 Y: : Y
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Archetype: camel-archetype-blueprint:2.14.1
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.apache.camel
[INFO] Parameter: artifactId, Value: test
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: package, Value: org.apache.camel
[INFO] Parameter: packageInPathFormat, Value: org/apache/camel
[INFO] Parameter: maven-bundle-plugin-version, Value: 2.3.7
[INFO] Parameter: maven-resources-plugin-version, Value: 2.6
[INFO] Parameter: groupId, Value: org.apache.camel
[INFO] Parameter: maven-compiler-plugin-version, Value: 2.5.1
[INFO] Parameter: slf4j-version, Value: 1.7.7
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: log4j-version, Value: 1.2.17
[INFO] Parameter: camel-version, Value: 2.14.1
[INFO] Parameter: package, Value: org.apache.camel
[INFO] Parameter: artifactId, Value: test
[INFO] project created from Archetype in dir: /Users/chmoulli/Temp/test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:13 min
[INFO] Finished at: 2015-02-10T09:21:09+01:00
[INFO] Final Memory: 14M/245M
[INFO] ------------------------------------------------------------------------
dabouhost:~/Temp$ cd test
dabouhost:~/Temp/test$ mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.14.1:run (default-cli) > test-compile @ test >>>
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ test ---
[INFO] Compiling 2 source files to /Users/chmoulli/Temp/test/target/classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ test ---
[INFO] Compiling 1 source file to /Users/chmoulli/Temp/test/target/test-classes
[INFO]
[INFO] <<< camel-maven-plugin:2.14.1:run (default-cli) < test-compile @ test <<<
[INFO]
[INFO] --- camel-maven-plugin:2.14.1:run (default-cli) @ test ---
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=de.kalpatec.pojosr.framework, Bundle-Vendor=kalpatec, Bundle-Version=0.2.1
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [4], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [25], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [4], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [25], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [26], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [2], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [15], symbolicName: org.apache.aries.proxy.impl
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [13], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423556490066
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:240)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:202)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:104)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
	... 6 more
[ERROR] *************************************
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 33.644 s
[INFO] Finished at: 2015-02-10T09:22:00+01:00
[INFO] Final Memory: 30M/707M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.14.1:run (default-cli) on project test: null: MojoExecutionException: InvocationTargetException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext) -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{code};;;","10/Feb/15 08:27;cmoulliard;Project tested;;;","10/Feb/15 08:31;davsclaus;What version of Maven and JDK are you using?;;;","10/Feb/15 09:23;cmoulliard;Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T22:58:10+02:00)
Java version: 1.7.0_51, vendor: Oracle Corporation;;;","10/Feb/15 13:17;davsclaus;Works fine for me with almost the same

mvndavsclaus:~/$ mvn -version
Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T22:58:10+02:00)
Maven home: /opt/apache-maven-3.2.3
Java version: 1.7.0_45, vendor: Oracle Corporation


I think you need to check the logs, or deploy the bundle to Karaf 2.4.x and see if karaf reports some error.;;;","10/Feb/15 13:41;cmoulliard;I can't yet explain what is the issue but if we first, install the project before to launch camel:run, then it will work

1) Does not work
mvn clean compile camel:run

2) Work
mvn clean package camel:run

I suspect that the reason is that the MANIFEST.MF created by the felix maven bundle was not generated during compile phase !

{code}
dabouhost:~/Temp/test$ mvn install
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-surefire-plugin:2.13-SONATYPE:test (default-test) @ test ---
[INFO] Surefire report directory: /Users/chmoulli/Temp/test/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.RouteTest
[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /Users/chmoulli/Temp/test/target/classes/OSGI-INF/blueprint/blueprint.xml
[                      Thread-0] RawBuilder                     INFO  Copy thread finished.
[                          main] Activator                      INFO  Camel activator starting
[                          main] Activator                      INFO  Camel activator started
[                          main] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[                          main] RouteTest                      INFO  ********************************************************************************
[                          main] RouteTest                      INFO  Testing: testRoute(org.apache.camel.RouteTest)
[                          main] RouteTest                      INFO  ********************************************************************************
[         Blueprint Extender: 3] BlueprintContainerImpl         INFO  Bundle RouteTest is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[                          main] RouteTest                      INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is starting
[                          main] DefaultManagementStrategy      INFO  JMX is disabled
[                          main] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: Endpoint[timer://foo?period=5000]
[                          main] BlueprintCamelContext          INFO  Total 1 routes, of which 1 is started.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) started in 0.075 seconds
[                          main] MockEndpoint                   INFO  Asserting: Endpoint[mock://result] is satisfied
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 14:37:32
[                          main] RouteTest                      INFO  ********************************************************************************
[                          main] RouteTest                      INFO  Testing done: testRoute(org.apache.camel.RouteTest)
[                          main] RouteTest                      INFO  Took: 1.090 seconds (1090 millis)
[                          main] RouteTest                      INFO  ********************************************************************************
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutting down
[                          main] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10 seconds)
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete, was consuming from: Endpoint[timer://foo?period=5000]
[                          main] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) uptime 1.098 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutdown in 0.007 seconds
[                          main] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle RouteTest
[                          main] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[                          main] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[                          main] Activator                      INFO  Camel activator stopping
[                          main] Activator                      INFO  Camel activator stopped
[                          main] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423575450131
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.689 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:bundle (default-bundle) @ test ---
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:., Jar:camel-core, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core/2.14.1/camel-core-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel/core/xml
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:camel-blueprint, Jar:camel-core-xml]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core-xml/2.14.1/camel-core-xml-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel/core/xml/util/jsse
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:camel-blueprint, Jar:camel-core-xml]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core-xml/2.14.1/camel-core-xml-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel/core/osgi
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:camel-blueprint, Jar:camel-core-osgi]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core-osgi/2.14.1/camel-core-osgi-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[WARNING] Bundle org.apache.camel:test:bundle:1.0-SNAPSHOT : Split package org/apache/camel/core/osgi/utils
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:camel-blueprint, Jar:camel-core-osgi]
Reference from     /Users/chmoulli/.m2/repository/org/apache/camel/camel-core-osgi/2.14.1/camel-core-osgi-2.14.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:jaxb-impl, Jar:jaxb-core, Jar:jaxb-api, Jar:istack-commons-runtime, Jar:FastInfoset, Jar:jsr173_api, Jar:camel-blueprint, Jar:camel-core-xml, Jar:camel-core-osgi, Jar:slf4j-api, Jar:slf4j-log4j12, Jar:jcl-over-slf4j, Jar:log4j]
[INFO]
[INFO] --- maven-install-plugin:2.4:install (default-install) @ test ---
[INFO] Installing /Users/chmoulli/Temp/test/target/test-1.0-SNAPSHOT.jar to /Users/chmoulli/.m2/repository/org/apache/camel/test/1.0-SNAPSHOT/test-1.0-SNAPSHOT.jar
[INFO] Installing /Users/chmoulli/Temp/test/pom.xml to /Users/chmoulli/.m2/repository/org/apache/camel/test/1.0-SNAPSHOT/test-1.0-SNAPSHOT.pom
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:install (default-install) @ test ---
[INFO] Installing org/apache/camel/test/1.0-SNAPSHOT/test-1.0-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.704 s
[INFO] Finished at: 2015-02-10T14:37:35+01:00
[INFO] Final Memory: 16M/459M
[INFO] ------------------------------------------------------------------------
dabouhost:~/Temp/test$ mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.14.1:run (default-cli) > test-compile @ test >>>
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] <<< camel-maven-plugin:2.14.1:run (default-cli) < test-compile @ test <<<
[INFO]
[INFO] --- camel-maven-plugin:2.14.1:run (default-cli) @ test ---
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.14.1 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle test is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is starting
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: Endpoint[timer://foo?period=5000]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Total 1 routes, of which 1 is started.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) started in 0.428 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 14:37:45
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2015-02-10 14:37:50
^C[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutting down
[                      Thread-1] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete, was consuming from: Endpoint[timer://foo?period=5000]
[                      Thread-1] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) uptime 7.581 seconds
[                      Thread-1] BlueprintCamelContext          INFO  Apache Camel 2.14.1 (CamelContext: blueprintContext) is shutdown in 0.009 seconds
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle test
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[                      Thread-1] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[                      Thread-1] Activator                      INFO  Camel activator stopping
[                      Thread-1] Activator                      INFO  Camel activator stopped
[                      Thread-1] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1423575461801
{code};;;","10/Feb/15 13:46;davsclaus;Oh yeah I have a habbit of running mvn clean install a lot ;);;;","10/Feb/15 13:48;cmoulliard;That works without issue if add an <execution> tag to the <maven-bundle-plugin>. I will update the archetype into the project to avoid such stupid behavior and problem.

{code}
<executions>
    <execution>
      <id>bundle-manifest</id>
      <phase>process-classes</phase>
      <goals>
        <goal>manifest</goal>
      </goals>
    </execution>
  </executions>
{code};;;","10/Feb/15 14:10;cmoulliard;code submitted : ed73023..c7cb9d3  master -> master;;;",,,,,,,,,,,,,,,,,,,,
"set Component Option ""responseHeaderSize"",but no effect",CAMEL-8315,12772612,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hhymarco,hhymarco,05/Feb/15 07:28,09/Feb/15 05:32,14/Jul/23 05:50,09/Feb/15 05:32,2.12.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-jetty,,,,,,,0,,,,,,"I set the option ""responseHeaderSize"" like :
JettyHttpComponent jettyHttpComponent=(JettyHttpComponent) getContext().getComponent(""jetty"");
jettyHttpComponent.setResponseHeaderSize(51202);

But there is no effect;then I checked the camel-jetty.jar's source,and found in JettyHttpComponent.createSocketConnector:
if (responseHeaderSize != null) {
            answer.setResponseBufferSize(responseHeaderSize);
        }
",,davsclaus,hhymarco,njiang,,,,,,,,,,,,,,,,,,CAMEL-8222,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 06 11:22:40 UTC 2015,,,,,,,,,,,"0|i2581j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"05/Feb/15 07:49;njiang;I just check the code of camel master, it is not fixed yet. 
We just need to update the camel-jetty8 code for it as CAMEL-8222 fix the same issue here.;;;","06/Feb/15 11:22;davsclaus;Willem is all of this done, if so fell free to resolve this ticket;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AddNamespace should not override the element's namespace,CAMEL-8313,12772354,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Feb/15 12:55,04/Feb/15 13:23,14/Jul/23 05:50,04/Feb/15 13:23,2.13.3,2.14.1,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-cxf,,,,,,,0,,,,,,"I am running a web service in Cxf PAYLOAD mode and in one of the use cases I need to convert the body into Node (Element) and I am doing that by cxfpayload.getBody().get(0)
This makes the namespaces from nsMap to be copied on to the element. While doing so, if the nsMap contains a namespace prefix that is also part of the element's attribute, it is being overwritten in the addNamespace(Element element, Map<String, String> nsMap) method.
But when same prefix in soap Envelope and body contains different namespace values, that makes the body (XML) invalid.
Here is a sample soap request that contains same namespace prefix ns1 in soap:Envelope and soap:Body but contains different namespace values.
{code}
<soapenv:Envelope 
xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
xmlns:ns=""http://www.example.com/location/consumerfundbalances/1/"" 
xmlns:ns1=""http://www.example.com/consumerfundbalances/retrievefundbalances/bi/1/"">
<soapenv:Body>
<ns1:retrieveFundBalances 
xmlns=""http://www.example.com/consumerfundbalances/retrievefundbalances/bi/1/""
xmlns:ns1=""http://www.example.com/location/consumerfundbalances/1/"">
<retrieveFundBalances>
<fundBalancesRequestIdentifier/>
</retrieveFundBalances>
</ns1:retrieveFundBalances>
</soapenv:Body>
</soapenv:Envelope>
{code}
Now when I convert the payload into DOM Node, here is output XML namespace value for prefix ns1 is being replaced with the envelope.
{code}
<ns1:retrieveFundBalances 
xmlns:ns1=""http://www.example.com/consumerfundbalances/retrievefundbalances/bi/1/"" 
xmlns=""http://www.example.com/consumerfundbalances/retrievefundbalances/bi/1/"" 
xmlns:ns=""http://www.example.com/location/consumerfundbalances/1/"">
<retrieveFundBalances>
<fundBalancesRequestIdentifier/>
</retrieveFundBalances>
</ns1:retrieveFundBalances>
{code}",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 04 13:23:17 UTC 2015,,,,,,,,,,,"0|i256gn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"04/Feb/15 13:23;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InvalidPayloadException when storing a String using camel-couchdb,CAMEL-8303,12771634,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,larhan,larhan,01/Feb/15 22:53,15/Feb/15 17:07,14/Jul/23 05:50,15/Feb/15 17:07,,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-couchdb,,,,,,,0,,,,,,"According to the documentation, it should be possible to send through an Exchange with the body containing a String

""If the body is an instance of String, then it will be marshalled into a GSON object before insert.""

When doing this, an InvalidPayloadException occurs.

The culprit is this line in the CouchDbProducer:
""return new Gson().toJsonTree(body)""

According to the Gson documentation, this should not be executed on Generic types as the String will not be parsed, but stored in a JsonPrimitive as opposed to the expected JsonObject.

In order to correct it, is to use the code which parses the String (Sorry, don't have time just now to do a proper patch):

try{
   return new JsonParser().parse((String)body);
}catch(JsonSyntaxException jse){
   throw new InvalidPayloadException(exchange, body != null ? body.getClass() : null);
}

It's also worth mentioning that existing test cases does not result in this Exception and the original 2.14.1 code base as long as my local modified version both passes the tests.",,davsclaus,larhan,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 15 17:07:54 UTC 2015,,,,,,,,,,,"0|i2525j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Feb/15 17:07;davsclaus;Thanks for reporting and with the patch;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rabbitmq shouldn't require/bind queue if not specified ,CAMEL-8302,12771617,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sajjad_akhter@yahoo.com,sajjad_akhter@yahoo.com,01/Feb/15 20:14,26/Nov/15 09:43,14/Jul/23 05:50,13/Nov/15 15:10,2.14.1,,,,,,,,,,,,,,2.16.1,2.17.0,,,camel-rabbitmq,,,,,,,0,,,,,,"Current implementation is declaring both exchange and queue on any init (producer or consumer). In case of producer one don't need queue and may not know who going to be client. 

We can add flag skipQueueDeclare  so that it won't genrate uuid queue. 

i can provide PR if it helps. ",,ceefour,david-gathering,davsclaus,githubbot,neoramon,sajjad_akhter@yahoo.com,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 26 09:43:44 UTC 2015,,,,,,,,,,,"0|i2521r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"28/Feb/15 09:22;davsclaus;Yes a PR is welcome with an unit test;;;","03/Nov/15 16:10;neoramon;Already exists verify to declare a queue:

{code:title=RabbitMQEndpoint.java|borderStyle=solid}
if (getQueue() != null) {
  channel.queueDeclare(getQueue(), isDurable(), false, isAutoDelete(), queueArgs);
{code}
But the queue never is null, because it is initialized:
{code:title=RabbitMQEndpoint.java|borderStyle=solid}
@UriParam
private String queue = String.valueOf(UUID.randomUUID().toString().hashCode());
{code}

I think initialize the queue with ""null"" resolves this issue.;;;","11/Nov/15 19:18;githubbot;GitHub user davidwilliams1978 opened a pull request:

    https://github.com/apache/camel/pull/676

    CAMEL-8302: Added skipQueueDeclare flag to camel-rabbitmq

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidwilliams1978/camel CAMEL-8302

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/676.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #676
    
----
commit 3eb130f76ec65ec20c66d01adbb0e06ad9899662
Author: davidwilliams <david@getgathering.com>
Date:   2015-11-11T19:11:36Z

    CAMEL-8302: Added skipQueueDeclare flag to camel-rabbitmq

----
;;;","11/Nov/15 19:22;david-gathering;I have created a PR implementing the logic suggested in the original description. I took this approach rather than the one suggested above (setting the queue to null) to avoid backwards compatibility issues for those who may be relying on the random integer queues.

https://github.com/apache/camel/pull/676;;;","13/Nov/15 15:10;davsclaus;Thanks David for the PR.

Does this option only really apply to a producer? The code is part of 
org.apache.camel.component.rabbitmq.RabbitMQEndpoint#declareExchangeAndQueue

which both the consumer and producer uses. But it may be that the option only makes sense on the producer side. And if so we can mark the option with label producer so the end users would know.;;;","13/Nov/15 15:23;david-gathering;Hi Claus -- this flag is indeed only intended for producers. Should I add the label to my existing PR?;;;","13/Nov/15 15:25;davsclaus;Thanks can you log a new PR and rebase from master first as the code has been merged already.;;;","13/Nov/15 15:26;davsclaus;And btw if you are aware of other options that only consumer or producer you are welcome to label them as well. We want to make this more clear for the end users and the label is the way. In the future then the docs is auto generated.;;;","13/Nov/15 16:27;githubbot;Github user davidwilliams1978 closed the pull request at:

    https://github.com/apache/camel/pull/676
;;;","13/Nov/15 16:30;githubbot;GitHub user davidwilliams1978 opened a pull request:

    https://github.com/apache/camel/pull/682

    CAMEL-8302: Added producer label to skipQueueDeclare flag

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidwilliams1978/camel CAMEL-8302

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/682.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #682
    
----
commit 1bbb2931c5f34b8aadc6a801e4364b1e8987eac3
Author: davidwilliams <david@getgathering.com>
Date:   2015-11-13T16:29:39Z

    CAMEL-8302: Added producer label to skipQueueDeclare flag

----
;;;","13/Nov/15 16:33;david-gathering;Added the producer flag for skipQueueDeclare: https://github.com/apache/camel/pull/682

I took a look at the other options to see if any could be firmly categorized but none jumped out at me (although I'm relatively new to RabbitMq so I might well have missed some.);;;","13/Nov/15 17:49;githubbot;Github user davidwilliams1978 closed the pull request at:

    https://github.com/apache/camel/pull/682
;;;","26/Nov/15 09:43;ceefour;Thank you [~davewilliams] [~cibsen] ! But what's the difference betwen {{declare}} and {{skipQueueDeclare}}?;;;",,,,,,,,,,,,,,,,,,,
camel-box - OSGi troubles - NoClassDefFoundError: org.apache.commons.lang.NotImplementedException,CAMEL-8296,12771013,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,i.melnik,i.melnik,29/Jan/15 13:20,07/Mar/15 16:45,14/Jul/23 05:50,02/Feb/15 09:07,2.14.0,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-box,,,,,,,0,,,,,,"Download empty karaf 3.0.2
Install camel-blueprint and camel-box features
Run sample box route and get this exception
{code}
java.lang.NoClassDefFoundError: org/apache/commons/lang/NotImplementedException
        at org.apache.camel.component.box.internal.BoxClientHelper.createBoxClient(BoxClientHelper.java:97)
        at org.apache.camel.component.box.BoxComponent.getBoxClient(BoxComponent.java:59)
        at org.apache.camel.component.box.BoxEndpoint.createBoxClient(BoxEndpoint.java:127)
        at org.apache.camel.component.box.BoxEndpoint.afterConfigureProperties(BoxEndpoint.java:102)
        at org.apache.camel.util.component.AbstractApiEndpoint.configureProperties(AbstractApiEndpoint.java:115)
        at org.apache.camel.util.component.AbstractApiComponent.createEndpoint(AbstractApiComponent.java:96)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:122)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:525)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:202)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
        at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:923)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:187)
        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:794)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2184)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1916)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1777)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1745)
        at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
        at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
        at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3423)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:352)
        at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:97)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
        at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
        at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
        at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
        at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
        at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl
.java:681)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:378)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:276)
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:245)
        at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:235)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker
.java:500)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker
.java:433)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java
:725)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java
:463)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java
:422)
        at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
        at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:942)
        at org.apache.karaf.bundle.command.Restart.doExecute(Restart.java:48)
        at org.apache.karaf.bundle.command.BundlesCommand.doExecute(BundlesCommand.java:50)
        at org.apache.karaf.bundle.command.BundlesCommandWithConfirmation.doExecute(BundlesCommandWithConfirmation.java:
41)
        at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)
        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)
        at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)
        at Proxydce7d8d9_a802_4295_bc90_9f32a888e927.execute(Unknown Source)
        at Proxydce7d8d9_a802_4295_bc90_9f32a888e927.execute(Unknown Source)
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
        at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:203)
        at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1$1.run(LocalConsoleManager.java:115)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)
        at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1.run(LocalConsoleManager.java:108)
Caused by: java.lang.ClassNotFoundException: org.apache.commons.lang.NotImplementedException not found by wrap_mvn_net.b
ox_boxjavalibv2_3.0.9 [89]
        at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1532)
        at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1955)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
        ... 86 more
{code}
Headers for box sdk show that it is missing two packages:
{code}
org.apache.commons.lang;resolution:=optional,
org.apache.commons.lang.builder;resolution:=optional,
{code}
Headers for 84 | Active |  50 | 3.3.2   | Apache Commons Lang shows that it exports following packages:
{code}
Export-Package =
        org.apache.commons.lang3;version=3.3.2,
        org.apache.commons.lang3.builder;version=3.3.2,
        org.apache.commons.lang3.concurrent;version=3.3.2,
        org.apache.commons.lang3.event;version=3.3.2,
        org.apache.commons.lang3.exception;version=3.3.2,
        org.apache.commons.lang3.math;version=3.3.2,
        org.apache.commons.lang3.mutable;version=3.3.2,
        org.apache.commons.lang3.reflect;version=3.3.2,
        org.apache.commons.lang3.text;version=3.3.2,
        org.apache.commons.lang3.text.translate;version=3.3.2,
        org.apache.commons.lang3.time;version=3.3.2,
        org.apache.commons.lang3.tuple;version=3.3.2
{code}",,amarkevich,davsclaus,dhirajsb,i.melnik,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jan/15 13:21;i.melnik;boxRoute.xml;https://issues.apache.org/jira/secure/attachment/12695267/boxRoute.xml",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 07 16:45:44 UTC 2015,,,,,,,,,,,"0|i24ydz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"02/Feb/15 08:44;i.melnik;Hello, want to know can we have this fix in 2.14 to have possibility to upgrade it.
Thanks.;;;","02/Feb/15 09:09;davsclaus;Just install these needed bundles manually

    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.2_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xerces/2.11.0_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlresolver/1.2_5</bundle>
<bundle dependency='true'>mvn:commons-lang/commons-lang/2.6</bundle>

You can do that from the karaf shell

    osgi:install 

And then the maven coordinate listed above, eg

   osgi:install mvn:commons-lang/commons-lang/2.6


;;;","03/Feb/15 06:56;i.melnik;Thanks, it helped.;;;","07/Mar/15 03:47;dhirajsb;[~davsclaus], uncommenting xalan, xerces and xmlresolver in the feature breaks the Broker in JBoss Fuse 6.2. I added those in lib/endorsed for JBoss Fuse 6.2 and IIRC they are present in standard Karaf. So these should be commented in the feature and added to lib/endorsed otherwise there is a conflict with the one from the JDK.  ;;;","07/Mar/15 16:45;dhirajsb;Nevermind, the issue seems to be in JBoss Fuse 6.2 build. I'll address it there. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Change Camel Context Name on Camel Spring Boot,CAMEL-8295,12770979,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,eddi888,eddi888,29/Jan/15 11:31,29/Jan/15 12:33,14/Jul/23 05:50,29/Jan/15 12:33,2.15.0,,,,,,,,,,,,,,2.15.0,,,,,,,,,,,0,,,,,,"Cant change the Camel Context Name fully, if the RouteBuilder ran already.

This Code is not working for the JMX MBeans
{code:title=MyAppConfig.java|borderStyle=solid}
@Configuration
public class MyAppConfig {
 
  ...
 
  @Bean
  CamelContextConfiguration contextConfiguration() {
    return new CamelContextConfiguration() {
      @Override
      public void beforeApplicationStart(CamelContext context) {
        ((SpringCamelContext)context).setName(""foo"");
      }
    };
  }
}
{code}

The JMX MBeans are not updated after the RouteBuilde ran:
The Context Name Changed, but the JMX Object Name not.
""foo"" != ""camel-1""

",camel-spring-boot,eddi888,githubbot,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/Jan/15 11:32;eddi888;context_name.png;https://issues.apache.org/jira/secure/attachment/12695250/context_name.png",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 29 12:33:08 UTC 2015,,,,,,,,,,,"0|i24y6f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jan/15 11:32;eddi888;Screenshot: ""foo"" != ""camel-1"";;;","29/Jan/15 11:36;githubbot;GitHub user eddi888 opened a pull request:

    https://github.com/apache/camel/pull/384

    CAMEL-8295

    Add Name for Camel Context in camel-spring-boot Configuration
    Properties. 
    Its required to set the Camel Context Name before run the RouteBuilder. 
    After the RouteBuilder ran, can't change the Camel Context Name fully in
    all JMX Management Beans.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eddi888/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/384.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #384
    
----
commit f2fba4f1914191fb7be30365c78e4a017780d2f6
Author: eddi888 <edgar.wentzlaff@gmx.net>
Date:   2015-01-29T11:33:15Z

    CAMEL-8295 
    Add Name for Camel Context in camel-spring-boot Configuration
    Properties. 
    Its required to set the Camel Context Name before run the RouteBuilder. 
    After the RouteBuilder ran, can't change the Camel Context Name fully in
    all JMX Management Beans.

----
;;;","29/Jan/15 12:31;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/384
;;;","29/Jan/15 12:33;njiang;Applied the patch into camel master branch with thanks to Edgar.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http should not try to send out error message to the client if the connection is closed.,CAMEL-8289,12770622,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,28/Jan/15 08:44,29/Jan/15 12:38,14/Jul/23 05:50,29/Jan/15 12:38,2.13.3,2.14.1,,,,,,,,,,,,,2.13.4,2.14.2,,,camel-netty-http,camel-netty4-http,,,,,,0,,,,,,It could generate lots of annoying warning message when the client connection is closed and camel-netty-http try to send some error message there.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 29 12:38:15 UTC 2015,,,,,,,,,,,"0|i24w0v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"29/Jan/15 12:38;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Closing File To Early Before Split/Streaming Finished,CAMEL-8286,12770317,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ryanbratten,ryanbratten,27/Jan/15 10:42,15/Feb/15 08:29,14/Jul/23 05:50,15/Feb/15 08:29,2.13.2,,,,,,,,,,,,,,2.15.0,,,,,,,,,,,0,,,,,,"Found a possible issue when working with camel and trying to move a file after it has finished processing, It appears that camel tries to close the file to early before the split has finished with the file 

I have attached images of where i am finding this problem, In the image ""Where the problem occurs.png"" camel tries to close the file the first time at this point?

The rather ugly hack is on the close method of the iiterator

","Camel Version: 2.13.2
Java: 1.6.0
Beanio: 2.1.0.M1
Windows 7 64 bit",davsclaus,ryanbratten,,,,,,,,,,,,,,,,,,,,,,CAMEL-7787,,,,,,,,,,,"27/Jan/15 10:44;ryanbratten;First Route.png;https://issues.apache.org/jira/secure/attachment/12694761/First+Route.png","27/Jan/15 10:44;ryanbratten;Ugly Hack.png;https://issues.apache.org/jira/secure/attachment/12694762/Ugly+Hack.png","27/Jan/15 10:44;ryanbratten;Where the Problem occurs.png;https://issues.apache.org/jira/secure/attachment/12694763/Where+the+Problem+occurs.png",,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 27 10:52:34 UTC 2015,,,,,,,,,,,"0|i24u53:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"27/Jan/15 10:51;davsclaus;This should be fixed by another ticket. Try with SNAPSHOT as suggested here: http://camel.apache.org/support;;;","27/Jan/15 10:52;davsclaus;CAMEL-7787 fixes this;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CaseInsensitiveMap putAll takes lots of time,CAMEL-8280,12770046,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Jan/15 10:21,26/Jan/15 12:06,14/Jul/23 05:50,26/Jan/15 12:06,2.13.3,2.14.1,,,,,,,,,,,,,2.13.4,2.14.2,,,camel-core,,,,,,,0,,,,,,We need to avoid calling assembleKey in the CaseInsensitiveMap putAll method if the map instance is CaseInsensitiveMap.,,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-8262,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 26 12:06:22 UTC 2015,,,,,,,,,,,"0|i24sjj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"26/Jan/15 12:06;njiang;Applied the patch into camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hbase - The maxResults option has no effect on the number of results,CAMEL-8274,12769687,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ebondu,ebondu,23/Jan/15 17:41,12/Feb/15 06:26,14/Jul/23 05:50,12/Feb/15 06:26,2.14.0,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-hbase,,,,,,,0,,,,,,"The max result option defined on the endpoint does not stop the hbase scanner. To be more convenient, the max result should also be dynamicaly passed as a header (for example with a ""CamelHBaseMaxScanResults"" header). ",,ebondu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jan/15 18:05;ebondu;camel-hbase.patch;https://issues.apache.org/jira/secure/attachment/12694201/camel-hbase.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 23 18:05:44 UTC 2015,,,,,,,Patch Available,,,,"0|i24qdb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jan/15 18:05;ebondu;Here the patch that fix bugs :
https://issues.apache.org/jira/browse/CAMEL-8277
https://issues.apache.org/jira/browse/CAMEL-8276
https://issues.apache.org/jira/browse/CAMEL-8275
https://issues.apache.org/jira/browse/CAMEL-8274
https://issues.apache.org/jira/browse/CAMEL-8268;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-box socks proxy implementation is incomplete,CAMEL-8272,12769620,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,julian.cable,julian.cable,23/Jan/15 11:47,06/Feb/15 11:34,14/Jul/23 05:50,06/Feb/15 11:34,2.14.1,,,,,,,,,,,,,,2.15.0,,,,camel-box,,,,,,,0,,,,,,"org.apache.camel.component.box.internal.LoginAuthFlowUI looks for http.route.socks-proxy and sets up a socks proxy for the webClient

org.apache.camel.component.box.internal.BoxClientHelper just passes the httpParams on to the underlying HttpClient but the box api uses a vanilla DefaultHttpClient which doesn't talk SOCKS.

The attached patch adds socks proxy support to the main restful box transactions.",any,davsclaus,julian.cable,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jan/15 11:54;julian.cable;patch.txt;https://issues.apache.org/jira/secure/attachment/12694139/patch.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 28 18:12:08 UTC 2015,,,,,,,Patch Available,,,,"0|i24pyv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jan/15 11:54;julian.cable;Patch to BoxClientHelper.java;;;","26/Jan/15 08:46;julian.cable;Thanks Claus, I don't know if it is worth a separate ticket but there is an error on the wiki page:

Type Converter

""The Box component also provides a Camel type converter to convert GenericFile objects from File component to a com.box.restclientv2.requestsbase.BoxFileUploadRequestObject to upload files to Box.com. The target folderId for the upload can be specified in the header property CamelBox.folderId. If the header is not specified the value defaults to ""0"" for the root folder ID. ""

""header property"" should read ""exchange property"" and ""If the header"" should read ""If the property""

http://camel.apache.org/box.html;;;","26/Jan/15 09:17;davsclaus;That is actually a bit confusing with both header + exchange property of the same key in use. IMHO the converter should use a header.;;;","26/Jan/15 09:28;julian.cable;I agree. I had to use the code to work out how to use it and exchange properties are a bit obscure, especially in the XML DSL.

Being able to set folderId and fileId in a header as an alternative to a URL parameter would be great and save me needing to use recipientList.

I've raised a feature request CAMEL-8281 for part of that, as it stands the documentation is in error.;;;","28/Jan/15 06:36;davsclaus;Seems like https port 443 is hardcoded in the patch? Also wonder if this affects globally the JVM? Isn't there something about SSLFactories being static or???;;;","28/Jan/15 18:12;julian.cable;No, 443 is just coded as the default port for the https scheme - see http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/scheme/Scheme.html - I just copied this from the 2.14.1 code.

The behaviour as far as SSL goes should be identical with and without the patch, which just adds an additional socks layer below the SSL if requested by the httpParams in the BoxConfiguration.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-rabbitmq: exchangeName in URI must be optional, i.e. default """" exchange",CAMEL-8270,12769612,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ceefour,ceefour,23/Jan/15 10:52,30/Apr/15 07:27,14/Jul/23 05:50,30/Apr/15 07:05,2.14.1,,,,,,,,,,,,,,2.14.3,2.15.3,2.16.0,,camel-rabbitmq,,,,,,,0,,,,,,"Leaving out the exchangeName i.e. {{rabbitmq://localhost/}} throws exception below.

However RabbitMQ has the default exchange """" -so it's not required to specify {{amq.direct}} explicitly.-, and this makes it impossible to send to that exchange (which is different than {{amq.direct}}).

Should have been fixed by CAMEL-7031 (2.12.3) but still happens in 2.14.1 (probably regression)

{code}
Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [id/ac/itb/lumen/persistence/LumenCamelConfiguration.class]: Invocation of init method failed; nested exception is org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[rabbitmq://localhost/?connectionFactory=#amqpConnFactory] <<< in route: Route(route1)[[From[rabbitmq://localhost/amq.topic?connectio... because of Failed to resolve endpoint: rabbitmq://localhost/?connectionFactory=%23amqpConnFactory due to: No URI path as the exchangeName for the RabbitMQEndpoint, the URI is rabbitmq://localhost/?connectionFactory=%23amqpConnFactory
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1566)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:762)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:691)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:321)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:961)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:950)
	at org.springframework.boot.SpringApplication$run.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120)
	at id.ac.itb.lumen.persistence.LumenPersistenceApplication.main(LumenPersistenceApplication.groovy:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[rabbitmq://localhost/?connectionFactory=#amqpConnFactory] <<< in route: Route(route1)[[From[rabbitmq://localhost/amq.topic?connectio... because of Failed to resolve endpoint: rabbitmq://localhost/?connectionFactory=%23amqpConnFactory due to: No URI path as the exchangeName for the RabbitMQEndpoint, the URI is rabbitmq://localhost/?connectionFactory=%23amqpConnFactory
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:945)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:187)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:805)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2174)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1906)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1767)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1735)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:254)
	at org.apache.camel.spring.SpringCamelContext.afterPropertiesSet(SpringCamelContext.java:106)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)
	... 23 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: rabbitmq://localhost/?connectionFactory=%23amqpConnFactory due to: No URI path as the exchangeName for the RabbitMQEndpoint, the URI is rabbitmq://localhost/?connectionFactory=%23amqpConnFactory
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:547)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:72)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:202)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:107)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:113)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:500)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:213)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:942)
	... 34 more
Caused by: java.lang.IllegalArgumentException: No URI path as the exchangeName for the RabbitMQEndpoint, the URI is rabbitmq://localhost/?connectionFactory=%23amqpConnFactory
	at org.apache.camel.component.rabbitmq.RabbitMQComponent.createEndpoint(RabbitMQComponent.java:50)
	at org.apache.camel.component.rabbitmq.RabbitMQComponent.createEndpoint(RabbitMQComponent.java:31)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:122)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:527)
	... 43 more
{code}",,ceefour,neoramon,njiang,,,,,,,,,,,,,,,,,,CAMEL-7678,,,,,,CAMEL-7003,CAMEL-8271,,,,CAMEL-7031,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 30 07:27:41 UTC 2015,,,,,,,,,,,"0|i24px3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jan/15 12:27;ceefour;Should have been fixed by CAMEL-7031 (2.12.3) but still happens in 2.14.1 (probably regression);;;","23/Jan/15 12:32;ceefour;Workaround:

{code}
it.out.headers['rabbitmq.EXCHANGE_NAME'] = ''
...
.to('rabbitmq://localhost/dummy?connectionFactory=#amqpConnFactory&autoDelete=false') // 'dummy' will be ignored
{code};;;","28/Mar/15 14:24;neoramon;Issue CAMEL-7678 about allowing blank amqp-exchange too.;;;","30/Apr/15 07:05;njiang;Applied the patch into camel master, camel-2.15.x and camel-2.14.x. Now the exchangeName is optional.;;;","30/Apr/15 07:27;ceefour;Wow! Thank you [~njiang] :);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-hbase - The scan method is not thread safe when using a filter list,CAMEL-8268,12769574,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ebondu,ebondu,23/Jan/15 07:35,12/Feb/15 06:24,14/Jul/23 05:50,12/Feb/15 06:24,2.14.0,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-hbase,,,,,,,0,,,,,,The scan method is not thread safe when using a filter list. A concurrent call on the endpoint will produce wrong values because the same FilterList is used between threads. Cloning the passed filter list solve the problem.,,davsclaus,ebondu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"23/Jan/15 18:06;ebondu;camel-hbase.patch;https://issues.apache.org/jira/secure/attachment/12694202/camel-hbase.patch",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 12 06:24:51 UTC 2015,,,,,,,Patch Available,,,,"0|i24pp3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"23/Jan/15 09:28;davsclaus;Thanks for reporting. Do you work on a patch?;;;","23/Jan/15 18:06;ebondu;Here the patch that fix bugs :
https://issues.apache.org/jira/browse/CAMEL-8277
https://issues.apache.org/jira/browse/CAMEL-8276
https://issues.apache.org/jira/browse/CAMEL-8275
https://issues.apache.org/jira/browse/CAMEL-8274
https://issues.apache.org/jira/browse/CAMEL-8268;;;","11/Feb/15 18:16;davsclaus;Is it possible to create 1 patch with all your hbase changes, as that is maybe easier to apply?;;;","11/Feb/15 18:44;ebondu;It should be the case, the patch is the same for all reported bugs.;;;","12/Feb/15 06:24;davsclaus;Thanks for reporting and the patches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
spring-dm may not be able to load resources from classpath from camel-core,CAMEL-8261,12769253,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Jan/15 10:25,22/Jan/15 10:28,14/Jul/23 05:50,22/Jan/15 10:28,,,,,,,,,,,,,,,2.15.0,,,,camel-core,camel-spring,osgi,,,,,0,,,,,,"Loading resources using the class resolver with loadResourceAsInputStream returns null when using spring-dm, but works for blueprint, when you attempt to load resources from camel-core itself, etc.

This works if delegating to the default resolver which the osgi extends.",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-01-22 10:25:25.0,,,,,,,,,,,"0|i24nrj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFRS Throws IndexOutOfBoundsException for Empty Headers,CAMEL-8253,12768185,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,vrfurl,vrfurl,17/Jan/15 02:18,17/Jan/15 14:01,14/Jul/23 05:50,17/Jan/15 14:01,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-cxf,,,,,,,0,,,,,,"Getting an IndexOutOfBoundsException when empty HTTP request headers are passed to a camelrs web method calls (See stack trace below).

The culprit appears to be related to the check on line 284 of class DefaultCxfRsBinding.java.  

More specifically here:
((List)entry.getValue()).get(0)

Internally the ArrayList class will perform a range check and if the index is greater than or equal to the size of the list the IndexOutOfBoundsException is thrown.  

So we probably want to add an additional check before this one, something like:

((List)entry.getValue()).size() == 0  before the check above, since we probably want to account for empty lists.

java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:604) ~[na:1.7.0_25]
	at java.util.ArrayList.get(ArrayList.java:382) ~[na:1.7.0_25]
	at org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding.copyProtocolHeader(DefaultCxfRsBinding.java:284) ~[camel-cxf-2.14.1.jar:2.14.1]
	at org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding.populateExchangeFromCxfRsRequest(DefaultCxfRsBinding.java:116) ~[camel-cxf-2.14.1.jar:2.14.1]
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.syncInvoke(CxfRsInvoker.java:123) ~[camel-cxf-2.14.1.jar:2.14.1]
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:59) ~[camel-cxf-2.14.1.jar:2.14.1]
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:97) ~[cxf-core-3.0.2.jar:3.0.2]
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:200) [cxf-rt-frontend-jaxrs-3.0.2.jar:3.0.2]
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:99) [cxf-rt-frontend-jaxrs-3.0.2.jar:3.0.2]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59) ~[cxf-core-3.0.2.jar:3.0.2]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:96) ~[cxf-core-3.0.2.jar:3.0.2]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307) ~[cxf-core-3.0.2.jar:3.0.2]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121) ~[cxf-core-3.0.2.jar:3.0.2]
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:243) ~[cxf-rt-transports-http-3.0.2.jar:3.0.2]
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:223) ~[cxf-rt-transports-http-3.0.2.jar:3.0.2]
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:197) ~[cxf-rt-transports-http-3.0.2.jar:3.0.2]
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:149) ~[cxf-rt-transports-http-3.0.2.jar:3.0.2]
	at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:171) ~[cxf-rt-transports-http-3.0.2.jar:3.0.2]
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:290) ~[cxf-rt-transports-http-3.0.2.jar:3.0.2]
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doGet(AbstractHTTPServlet.java:214) ~[cxf-rt-transports-http-3.0.2.jar:3.0.2]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:575) ~[geronimo-servlet_3.0_spec-1.0.jar:1.0]
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:265) ~[cxf-rt-transports-http-3.0.2.jar:3.0.2]
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:696) ~[jetty-servlet-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1568) ~[jetty-servlet-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:139) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) ~[spring-security-web-3.2.1.RELEASE.jar:3.2.1.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:343) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260) ~[spring-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1548) ~[jetty-servlet-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:524) ~[jetty-servlet-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:568) ~[jetty-security-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1110) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:453) ~[jetty-servlet-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1044) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:109) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.Server.handle(Server.java:459) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:280) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:229) ~[jetty-server-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.io.AbstractConnection$1.run(AbstractConnection.java:505) ~[jetty-io-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:607) ~[jetty-util-9.1.0.v20131115.jar:9.1.0.v20131115]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:536) ~[jetty-util-9.1.0.v20131115.jar:9.1.0.v20131115]
	at java.lang.Thread.run(Thread.java:724) ~[na:1.7.0_25]




",,njiang,vrfurl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Jan 17 14:01:30 UTC 2015,,,,,,,,,,,"0|i24hfz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"17/Jan/15 14:01;njiang;Applied the patch into camel master,camel-2.14.x and camel-2.13.x branches.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AWS-S3] Producer does not use ObjectMetaData when exchange is a File,CAMEL-8247,12767644,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,shreyaspurohit,shreyaspurohit,15/Jan/15 03:25,15/Jan/15 03:43,14/Jul/23 05:50,15/Jan/15 03:43,,,,,,,,,,,,,,,2.15.0,,,,camel-aws,,,,,,,0,,,,,,The S3 Producer component does not take the ObjectMetaData set into account when the type of the exchange is a File. It does takes it into account when the exchange in an InputStream. This is a serious problem because a lot of S3 metadata set in camel headers are not considered at all.,,githubbot,njiang,shreyaspurohit,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,CAMEL-8006,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 15 03:43:26 UTC 2015,,,,,,,Patch Available,,,,"0|i24e9r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Jan/15 03:28;githubbot;GitHub user shreyaspurohit opened a pull request:

    https://github.com/apache/camel/pull/372

    [master][CAMEL-8247] Producer does not use ObjectMetaData when exchange is a File

    @WillemJiang @davsclaus 
    The S3 Producer component does not take the ObjectMetaData set into account when the type of the exchange is a File. It does takes it into account when the exchange in an InputStream. This is a serious problem because a lot of S3 metadata set in camel headers are not considered at all.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/shreyaspurohit/camel FixPutObjectMDBug

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/372.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #372
    
----
commit 6235e02a0df4e6fc3d5e4becf74dc8d5238a2d23
Author: Shreyas Purohit <shreyas.purohit@gmail.com>
Date:   2015-01-15T03:26:36Z

    CAMEL-8247 Producer does not use ObjectMetaData when exchange is a File

----
;;;","15/Jan/15 03:42;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/372
;;;","15/Jan/15 03:43;njiang;This issue is introduced since CAMEL-8006, I just merged the patch into master branch with thanks to Shreyas.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFRS endpoint ignores model references,CAMEL-8245,12767440,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sergey_beryozkin,sergey_beryozkin,14/Jan/15 14:42,18/Jan/15 03:38,14/Jul/23 05:50,18/Jan/15 03:38,,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-cxf,,,,,,,0,,,,,,"CXF JAX-RS implementation offers an extension where an external model description is bound to an interface or concrete class with no JAX-RS annotations.
The cxfrs component schema supports a modelRef attribute however CxfRsEndpoint does not propagate it to CXF JAX-RS factory beans",,njiang,sergey_beryozkin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/Jan/15 15:04;sergey_beryozkin;camel8245.txt;https://issues.apache.org/jira/secure/attachment/12692232/camel8245.txt",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jan 18 03:38:14 UTC 2015,,,,,,,,,,,"0|i24d13:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"18/Jan/15 03:38;njiang;Applied the patch into master, camel-2.14.x branches with thanks to Sergey.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exec command failures using Java 8 on Unix,CAMEL-8241,12767265,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dheath,dheath,13/Jan/15 20:55,27/Oct/15 19:40,14/Jul/23 05:50,22/Feb/15 10:51,2.14.0,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-core,,,,,,,1,,,,,,"I'm attaching a test case that shows an issue I've been running into with the exec command since updating my environment to Java 8. It appears that I'm running into a race condition where a stream is sometimes closed prematurely before DefaultExecutor has a chance to close it, causing DefaultExecCommandExecutor to throw and exit (even though the command did execute properly). I've tested this against the updated version of commons-exec as well just to make sure this hasn't somehow been fixed in that library.

Please note that the attached test doesn't always fail; you may need to run it a few times before the error will show up.",JDK 1.8 on Unix systems,AWickert,brianok,davisda,davsclaus,dheath,westerg,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/Jan/15 20:57;dheath;CamelExecTest.java;https://issues.apache.org/jira/secure/attachment/12692044/CamelExecTest.java",,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 27 18:53:14 UTC 2015,,,,,,,,,,,"0|i24bzb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Feb/15 08:32;davsclaus;Do you have any log or stacktrace when this error happens? If so you are very welcome to attach to this ticket;;;","15/Feb/15 08:32;davsclaus;Also please report which JDK and Unix OS you use.;;;","18/Feb/15 11:12;AWickert;I've got the same problem as described.I've reduced my program on a simple route. 

I am using CentOS 6.4, jdk1.8.0_25 and the camel version 2.14.1.

this is the route:
 <route id=""test_exec"" autoStartup=""true"">
      <from uri=""file://target/test"" />
      <to uri=""exec:pwd"" />
 </route>

and this is the stracktrace:
org.apache.camel.component.exec.ExecException: Unable to execute command ExecCommand [args=[], executable=pwd, timeout=9223372036854775807, outFile=null, workingDir=null, useStderrOnEmptyStdout=false]
        at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:81)
        at org.apache.camel.component.exec.ExecProducer.process(ExecProducer.java:46)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:416)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:433)
        at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211)
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175)
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Stream closed
        at java.lang.ProcessBuilder$NullOutputStream.write(ProcessBuilder.java:433)
        at java.io.OutputStream.write(OutputStream.java:116)
        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)
        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)
        at java.io.FilterOutputStream.close(FilterOutputStream.java:158)
        at org.apache.commons.exec.DefaultExecutor.closeStreams(DefaultExecutor.java:288)
        at org.apache.commons.exec.DefaultExecutor.executeInternal(DefaultExecutor.java:364)
        at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:160)
        at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:147)
        at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:67)
        ... 20 more

;;;","22/Feb/15 10:51;davsclaus;Thanks for the unit test.

I could reproduce the issue, and added a workaround in camel-exec to catch the stream closed and move on.

But the bug is in commons-exec which likely need to fix that issue.;;;","30/Jul/15 14:52;brianok;FYI -- This bug is not resolved for me in Camel 2.15.0 because the workaround in components/camel-exec/src/main/java/org/apache/camel/component/exec/impl/DefaultExecCommandExecutor.java looks for the string ""if (""Stream closed"".equals(msg)) {..."", but on my JVM the exception message is actually ""Stream Closed"".  See stack trace below.  I am not very familiar with how to report that a workaround is still broken in JIRA, so please advise.

I would recommend changing the check to ""if (""stream closed"".equals(msg.toLowerCase())) {""

       at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:102)
        at org.apache.camel.component.exec.ExecProducer.process(ExecProducer.java:53)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
        at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:736)
        at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:83)
        at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:304)
        at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:289)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Stream Closed
        at java.io.FileOutputStream.writeBytes(Native Method)
        at java.io.FileOutputStream.write(FileOutputStream.java:307)
        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)
        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)
        at java.io.FilterOutputStream.close(FilterOutputStream.java:158)
        at org.apache.commons.exec.DefaultExecutor.closeProcessStreams(DefaultExecutor.java:306)
        at org.apache.commons.exec.DefaultExecutor.executeInternal(DefaultExecutor.java:387)
        at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:166)
        at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:153)
        at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:69)
        ... 21 more
;;;","31/Jul/15 09:45;davsclaus;Thanks Brian I just improved to check ignoring the case.;;;","27/Oct/15 18:53;davisda;I can confirm the same error on RHEL 6.x using ServiceMix 5.5.0, Camel 2.15.2 and Oracle Java 1.8_66.  The source code for the exec component in branch camel-2.15.x has the workaround described above.  It appears that the workaround is not in the ServiceMix distribution so I built 2.15.5.SNAPSHOT from the source and it seems to be working correctly.

The stack trace is:

2015-10-27 14:39:58,830 | WARN  | ora.apim.update] | EndpointMessageListener          | 124 - org.apache.camel.camel-core - 2.15.2 | Execution of JMS message listener failed. Caused by: [org.apache.camel.component.exec.ExecException - Unable to execute command ExecCommand [args=[-f, staging/ID-oris-srv03-si-edu-51333-1445886844310-7-158], executable=rm, timeout=9223372036854775807, outFile=null, workingDir=null, useStderrOnEmptyStdout=false]]
org.apache.camel.component.exec.ExecException: Unable to execute command ExecCommand [args=[-f, staging/ID-oris-srv03-si-edu-51333-1445886844310-7-158], executable=rm, timeout=9223372036854775807, outFile=null, workingDir=null, useStderrOnEmptyStdout=false]
        at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:102)[230:org.apache.camel.camel-exec:2.15.2]
        at org.apache.camel.component.exec.ExecProducer.process(ExecProducer.java:53)[230:org.apache.camel.camel-exec:2.15.2]
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[124:org.apache.camel.camel-core:2.15.2]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)[124:org.apache.camel.camel-core:2.15.2]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[124:org.apache.camel.camel-core:2.15.2]
 








;;;",,,,,,,,,,,,,,,,,,,,,,,,,
WebSphere class loader detection is too sensitive,CAMEL-8236,12767070,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,raphw,raphw,13/Jan/15 09:01,13/Jan/15 14:28,14/Jul/23 05:50,13/Jan/15 11:48,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-core,,,,,,,0,,,,,,"The DefaultCamelContext attempts to detect an IBM WebSphere application server by a simple test: loader.getClass().getName().startsWith(""com.ibm"")

This test can introduce very subtle bugs when working with other IBM productes and I suggest to replace it by a list of known class names of WebSphere class loaders. At least, one should add an additional dot in order to avoid matching packages that only start with ""com.ibm"" such as any ""com.ibmfoobar"".",,davidkarlsen@gmail.com,davsclaus,njiang,raphw,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 13 14:28:55 UTC 2015,,,,,,,,,,,"0|i24arb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"13/Jan/15 11:48;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.;;;","13/Jan/15 12:29;davidkarlsen@gmail.com;com.ibm. is still very wide (looking at https://github.com/apache/camel/commit/91cc51ff0999e52ee284ab02ebfd768ac3f65c17)
I suggest to go at least one package deeper.
You can look at https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java to get some inspiration - but that is really about WAS management extensions.

I downloaded some javadocs from: http://www-01.ibm.com/software/webservers/appserv/was/library/v85/nd-dp/
and maybe com.ibm.websphere.servlet.container. or com.ibm.websphere.servlet. is more suitable?;;;","13/Jan/15 13:06;njiang;How about ""com.ibm.webspehere.""? I think it should be enough.;;;","13/Jan/15 13:15;davidkarlsen@gmail.com;I think in fact that too is too wide as webpshere is whole family of products and not only the app server.;;;","13/Jan/15 14:06;raphw;I second that. As class loader magic becomes more and more common place, this might just break for any future weblogic family application. The name of the WebSphere class loader should however be pretty stable, wouldn't it be easiest to match the exact name? Also, one could add some system property ""-Dcamel.websphereClassLoader"" for overriding this name if it would indeed change before Camel would add this additional name and a user would require this adaption.;;;","13/Jan/15 14:28;davsclaus;This code has been working fine for about 7 years.

This is not for all classloading but only for annotation package scanning, which in Camel 1.x was how it discovered type converters. This has changed a long time ago, and is no longer needed.

Only when using camel-bindy it does some package scanning annotations, only because we havent refactored and migrated camel-bindy to avoid this. There is a jira about that.

There is no need to add a system property and whatnot. You can remove this code and have Camel work in websphere, its only when you use camel-bindy it would may fail. But newer versions of WebSphere may work without this. So if anyone got access to a set of IBM WebSphere App Servers they are welcome to test the situation today.

Also WebSpherePackageScanClassResolver is no harm as it just adds an extra fallback that has no harm for non websphere environments;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter - Option parallelAggregate is not in use when using parallel procession as well,CAMEL-8233,12766872,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Jan/15 15:46,12/Jan/15 15:52,14/Jul/23 05:50,12/Jan/15 15:52,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-core,eip,,,,,,0,,,,,,"If both options are true, then parallel aggregate runs in sequence. It was a missing place in the code that wasn't changed when the parallelAggregate option was added to Camel",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-01-12 15:46:23.0,,,,,,,,,,,"0|i249kf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StompEndPoint does not throw exceptions in case of the underlying connection broken at the time of sending a message,CAMEL-8231,12766830,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,karthik.raman,karthik.raman,12/Jan/15 12:23,15/Feb/15 08:43,14/Jul/23 05:50,15/Feb/15 08:43,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-stomp,,,,,,,0,,,,,,"At the time of  sending the message if the message broker (Apollo is used in this case) is down then no exception is raised from the send method of StompEndpoint.  The underlying connection (stomp jms connection) has the error caught and handled. Since the Stompendpoint does not use the CallBack to get notified of the underlying issue, the message sending is assumed successful. 
",All,davsclaus,karthik.raman,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Feb 15 08:43:42 UTC 2015,,,,,,,,,,,"0|i249b3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"15/Feb/15 08:43;davsclaus;Thanks for reporting.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using exchangePattern=InOnly in to uris are not used,CAMEL-8227,12766699,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Jan/15 10:03,11/Jan/15 15:25,14/Jul/23 05:50,11/Jan/15 15:25,,,,,,,,,,,,,,,2.15.0,,,,camel-core,eip,,,,,,0,,,,,,"Related to CAMEL-5301

Which was implemented for recipient list. But the same thing should be fixed/implemented for send processor as well.

See nabble
http://camel.465427.n5.nabble.com/Rest-DSL-org-apache-camel-ExchangeTimedOutException-The-OUT-message-was-not-received-within-20000-mis-tp5761530.html",,davsclaus,,,,,,,,,,,,,,,,,,,,,,,,,,CAMEL-5301,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sun Jan 11 15:25:30 UTC 2015,,,,,,,,,,,"0|i248if:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"11/Jan/15 10:36;davsclaus;You can use .to(ExchangePattern.InOnly, ""url goes here"") as a the solution.

With this bug fix, we ensure that setting ?exchangePattern=InOnly or InOut from the uri is the pattern that is used, eg it takes precedence. Also as documented it is possible here: http://camel.apache.org/request-reply.html;;;","11/Jan/15 15:25;davsclaus;Lets keep this for 2.15 onwards so it goes hand in hand with CAMEL-5301.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deprecated feature dataSourceRef not working correctly,CAMEL-8226,12766659,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,graben,graben,10/Jan/15 18:02,10/Feb/15 09:02,14/Jul/23 05:50,10/Feb/15 08:30,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-sql,,,,,,,0,,,,,,If several sql endpoints are defined using dataSourceRef attribute the latest one will not get dataSourceRef removed in createEndpoint causing validation exception.,,davsclaus,githubbot,graben,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 10 09:02:30 UTC 2015,,,,,,,,,,,"0|i2489j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"10/Feb/15 07:54;githubbot;GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/388

    CAMEL-8226 Deprecated feature dataSourceRef not working correctly

    If you try to create more than one of endpoint from SqlComponent with specifying dataSourceRef option, it doesn't remove dataSourceRef option from URL on 2nd attempt as dataSource object is already populated on 1st attempt, causes org.apache.camel.ResolveEndpointFailedException

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-8226

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/388.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #388
    
----
commit 2ccb7b87a650df1e18498df715148db2f2029631
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-02-10T07:45:36Z

    CAMEL-8226 Deprecated feature dataSourceRef not working correctly
    
    If you try to create more than one of endpoint from SqlComponent with specifying dataSourceRef option, it doesn't remove dataSourceRef option from URL on 2nd attempt as dataSource object is already populated on 1st attempt, causes org.apache.camel.ResolveEndpointFailedException

----
;;;","10/Feb/15 08:10;davsclaus;Well spotted, in fact the code is a bit wrong as the endpoint options should overrule the component configured, the correct code would be

{code}
        // endpoint options overrule component configured datasource
        DataSource ds = resolveAndRemoveReferenceParameter(parameters, ""dataSource"", DataSource.class);
        String dataSourceRef = getAndRemoveParameter(parameters, ""dataSourceRef"", String.class);
        if (ds == null && dataSourceRef != null) {
            ds = CamelContextHelper.mandatoryLookup(getCamelContext(), dataSourceRef, DataSource.class);
        }
        if (ds == null) {
            // fallback and use component
            ds = dataSource;
        }
        if (ds == null) {
            throw new IllegalArgumentException(""DataSource must be configured"");
        }
{code};;;","10/Feb/15 08:30;davsclaus;Thanks for the PR;;;","10/Feb/15 09:02;githubbot;Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/388
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jetty component setting responseHeaderSize is impossible,CAMEL-8222,12765857,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,zolyfarkas,zolyfarkas,08/Jan/15 20:54,05/Feb/15 07:52,14/Jul/23 05:50,12/Jan/15 12:47,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-jetty,,,,,,,0,,,,,,"This is due to a ""copy/paste"" bug in: 

org.apache.camel.component.jetty.JettyHttpComponent at line: 691

        if (responseBufferSize != null) {
            answer.setResponseBufferSize(responseBufferSize);
        }
        if (responseHeaderSize != null) {
            answer.setResponseBufferSize(responseHeaderSize);
        }

needs to be:

        if (responseBufferSize != null) {
            answer.setResponseBufferSize(responseBufferSize);
        }
        if (responseHeaderSize != null) {
            answer.setResponseHeaderSize(responseHeaderSize);
        }

This issue seems to be also in the latest master and in other places where the header size is set.



",,davsclaus,zolyfarkas,,,,,,3600,3600,,0%,3600,3600,,,,,,,CAMEL-8315,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Novice,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 09 06:36:57 UTC 2015,,,,,,,,,,,"0|i243fj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"09/Jan/15 06:36;davsclaus;Thanks for reporting. Are you working on a patch?
http://camel.apache.org/contributing.html;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST DSL with RestletComponent doesn't support servelet container,CAMEL-8218,12765538,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Jan/15 02:59,08/Jan/15 06:52,14/Jul/23 05:50,08/Jan/15 06:52,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,camel-restlet,,,,,,,0,,,,,,"""I'm trying out the REST DSL in 2.14.1 and I'm not able to get it to work 
with restlet within a servlet container.""
Here is the [mail thread|http://camel.465427.n5.nabble.com/Does-Camel-REST-DSL-work-with-a-Restlet-Servlet-tp5761346.html] about it.",,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 08 06:52:45 UTC 2015,,,,,,,,,,,"0|i2427r:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"08/Jan/15 06:52;njiang;Applied the patch into camel master and camel-2.14.x branch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-xmljson option typeHints does not work,CAMEL-8217,12765497,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,Lamperi,Lamperi,07/Jan/15 23:34,09/Jan/15 07:10,14/Jul/23 05:50,09/Jan/15 07:09,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-core,camel-xmljson,,,,,,0,,,,,,"Camel core's model fails to set the option typeHints to the data format implementation.

The data format implementation mixes up option values YES and WITH_PREFIX.",,githubbot,Lamperi,njiang,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 09 07:10:45 UTC 2015,,,,,,,,,,,"0|i241yn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Jan/15 23:39;githubbot;GitHub user lamperi opened a pull request:

    https://github.com/apache/camel/pull/371

    CAMEL-8217: Fix typeHints option for camel-xmljson

    Fixed camel-core model to set the option on the data format. Changed the
    behaviour of YES and WITH_PREFIX to reflect documentation and naming.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lamperi/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/371.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #371
    
----
commit 4ce11c999c01e8b00eb577e5b17a96c2063b003a
Author: Toni Fadjukoff <lamperi@lamperi.name>
Date:   2015-01-07T23:36:54Z

    CAMEL-8217: Fix typeHints option for camel-xmljson
    
    Fixed camel-core model to set the option on the data format. Changed the
    behaviour of YES and WITH_PREFIX to reflect documentation and naming.

----
;;;","09/Jan/15 07:09;njiang;Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Toni.;;;","09/Jan/15 07:10;githubbot;Github user lamperi closed the pull request at:

    https://github.com/apache/camel/pull/371
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to specify startHistoryId for history list in camel-google-mail,CAMEL-8216,12765436,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,07/Jan/15 18:45,16/Oct/20 10:01,14/Jul/23 05:50,07/Jan/15 18:50,,,,,,,,,,,,,,,2.15.0,,,,,,,,,,,0,,,,,,"Getting ""Missing/invalid parameter: startHistoryId"" when calling history list via camel-google-mail component. This is a required parameter.",,acosentino,janstey,krecco,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 16 10:01:08 UTC 2020,,,,,,,,,,,"0|i241lj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Jan/15 18:50;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/ebae9b51;;;","16/Oct/20 09:57;krecco;Does this relate also to camel-quarkus-google-mail?

I am getting compile error using: .to(""google-mail:history/list?userId=me&....&startHistoryId=12322121"")

*There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{startHistoryId=6944817}]*

 

I also tried:

 

{{.setHeader(""startHistoryId"", constant(""12322121""))}}

{{.to(""google-mail:history/list?userId=me&...."")}}

{{Without success. }}

{{}}

{{Github issiue:}}

[https://github.com/apache/camel-quarkus/issues/1927]

 

Any help would be apriciated.

 

 ;;;","16/Oct/20 10:01;acosentino;Camel-quarkus project is based on Camel 3. This is a really old issue, so it is probably unrelated. We need to double check what is actually supported and what not.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support partial responses in google APIs,CAMEL-8214,12765376,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,07/Jan/15 13:47,07/Jan/15 18:51,14/Jul/23 05:50,07/Jan/15 18:51,2.14.1,,,,,,,,,,,,,,2.14.2,2.15.0,,,,,,,,,,0,,,,,,"Would be good to support partial responses in the Google API components:
https://developers.google.com/blogger/docs/3.0/performance#partial-response",,janstey,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,Unknown,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 07 18:51:31 UTC 2015,,,,,,,,,,,"0|i24187:",9223372036854775807,,,,,,,,,,,,,,,,,,,,"07/Jan/15 18:51;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/ecd9977c;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UseOriginalAggregationStrategy is suspicious to NullPointerException,CAMEL-8213,12765334,Bug,Resolved,CAMEL,Camel,software,acosentino,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,steffen.ryll,steffen.ryll,07/Jan/15 09:31,09/Jan/15 08:10,14/Jul/23 05:50,09/Jan/15 08:10,2.14.1,,,,,,,,,,,,,,2.13.4,2.14.2,2.15.0,,camel-core,,,,,,,0,nullpointerexception,,,,,"The default constructor of UseOriginalAggregationStrategy sets the final field {{original}} to null.
In one corner case, the {{aggregate}} will dereference this null pointer, as no null-pointer check is made.
{code}
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        if (propagateException) {
            Exception exception = checkException(oldExchange, newExchange);
            if (exception != null) {
                original.setException(exception);
            }
        }
        return original != null ? original : oldExchange;
    }
{code}

This potential NPE should be fixed, maybe a unit test be added.",,dancerjohn,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,2015-01-07 09:31:00.0,,,,,,,,,,,"0|i240z3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
